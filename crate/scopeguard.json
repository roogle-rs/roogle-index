{"root":"0:0:1801","crate_version":"1.1.0","includes_private":false,"index":{"a:2:2650:214-0:73:1709":{"id":"a:2:2650:214-0:73:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2650:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2516-0:76:1711":{"id":"b:2:2516-0:76:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2475:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2485:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:126","2:2520:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[464,0],"end":[474,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:8581:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2926:1737","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1698","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8581:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:69:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2714:2042-0:73:1709":{"id":"a:2:2714:2042-0:73:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2714:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:42:1724":{"id":"0:42:1724","crate_id":0,"name":"guard_on_unwind","span":{"filename":"src/lib.rs","begin":[413,0],"end":[417,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.\n\n## Examples\n\nFor performance reasons, or to emulate “only run guard on unwind” in\nno-std environments, we can also use the default guard and simply manually\ndefuse it at the end of scope like the following example. (The performance\nreason would be if the [`OnUnwind`]'s call to [std::thread::panicking()] is\nan issue.)\n\n```\nextern crate scopeguard;\n\nuse scopeguard::ScopeGuard;\n# fn main() {\n{\n    let guard = scopeguard::guard((), |_| {});\n\n    // rest of the code here\n\n    // we reached the end of scope without unwinding - defuse it\n    ScopeGuard::into_inner(guard);\n}\n# }\n```","links":{"`OnUnwind`":"0:73:1709","std::thread::panicking()":"1:539:994"},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"generic","inner":"T"}],["dropfn",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2926:1737","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11439:59458":{"id":"2:11439:59458","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11026:3188","prim@char":"1:12368:1934"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11046:3192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53:224":{"id":"0:53:224","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[432,4],"end":[432,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:35:1758":{"id":"0:35:1758","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[348,4],"end":[361,5]},"visibility":"public","docs":"“Defuse” the guard and extract the value without calling the closure.\n\n```\nextern crate scopeguard;\n\nuse scopeguard::{guard, ScopeGuard};\n\nfn conditional() -> bool { true }\n\nfn main() {\n    let mut guard = guard(Vec::new(), |mut v| v.clear());\n    guard.push(1);\n     \n    if conditional() {\n        // a condition maybe makes us decide to\n        // “defuse” the guard and get back its inner parts\n        let value = ScopeGuard::into_inner(guard);\n    } else {\n        // guard still exists in this branch\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["guard",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11424:59455":{"id":"2:11424:59455","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11026:3188","prim@char":"1:12368:1934"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11360:55164":{"id":"2:11360:55164","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12368:1934","self::pattern":"2:11026:3188"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11430:55166":{"id":"2:11430:55166","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12368:1934","self::pattern":"2:11026:3188"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48037:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11046:3192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13:1701":{"id":"0:13:1701","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,28]},"visibility":"default","docs":"Return `true` if the guard’s associated code should run\n(in the context where this method is called).","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11341:55123":{"id":"2:11341:55123","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9123:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9123:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11347:55146":{"id":"2:11347:55146","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11348:55147"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2501-0:23:1734":{"id":"b:2:2501-0:23:1734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2478:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2475:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2504:2374"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11392:55161":{"id":"2:11392:55161","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"2:11389:55159","prim@char":"1:12368:1934","self::pattern":"2:11026:3188"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50127:2897","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11046:3192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11346:59440":{"id":"2:11346:59440","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:2979:2101","str::slice_unchecked":"2:11345:59439","`str`":"1:12374:1939"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11398:59445":{"id":"2:11398:59445","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48037:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11046:3192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:75:650":{"id":"0:75:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8541:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8530:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5109:2776":{"id":"5:5109:2776","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3309-0:70:1706":{"id":"b:2:3309-0:70:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2657:2038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3307:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3311:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2507:668":{"id":"2:2507:668","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11386:59443":{"id":"2:11386:59443","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"2:11383:59442","self::pattern":"2:11026:3188","prim@char":"1:12368:1934","str::split":"2:11374:52832"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50073:3461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11046:3192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2224:2004":{"id":"2:2224:2004","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11335:306":{"id":"2:11335:306","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11336:55125","`u8`":"1:12385:1948"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2505-0:73:1709":{"id":"b:2:2505-0:73:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2478:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2507:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:55":{"id":"0:55","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[439,0],"end":[446,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2926:1737","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1698","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:2905:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:59:538"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11363:55165":{"id":"2:11363:55165","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12368:1934","self::pattern":"2:11026:3188"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11046:3192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2505-0:76:1711":{"id":"b:2:2505-0:76:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2478:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2507:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11337:1785":{"id":"2:11337:1785","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48039:173"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48037:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9123:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9123:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5108:60097":{"id":"5:5108:60097","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2118","`String`":"5:6978:218"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2118","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:2874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:30":{"id":"0:30","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[308,0],"end":[362,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2926:1737","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1698","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:34:1744","0:35:1758"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:59:538":{"id":"0:59:538","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[443,4],"end":[445,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11427:52788":{"id":"2:11427:52788","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11026:3188","prim@char":"1:12368:1934"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48037:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11356:57561":{"id":"2:11356:57561","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50297:3472","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11413:59449":{"id":"2:11413:59449","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11445:53407":{"id":"2:11445:53407","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[448,0],"end":[462,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2926:1737","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1698","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:2916:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:64:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:12:1698":{"id":"0:12:1698","crate_id":0,"name":"Strategy","span":{"filename":"src/lib.rs","begin":[201,0],"end":[205,1]},"visibility":"public","docs":"Controls in which cases the associated code should be run","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:13:1701"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:14","0:16","0:18"]}},"a:2:2664:222-0:70:1706":{"id":"a:2:2664:222-0:70:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2664:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11351:3646":{"id":"2:11351:3646","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49991:2750","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11410:59448":{"id":"2:11410:59448","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:7066:119","prim@char":"1:12368:1934","self::pattern":"2:11026:3188","str::match_indices":"2:11407:59447"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50173:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11046:3192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11401:2017":{"id":"2:11401:2017","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:12368:1934","`DoubleEndedIterator`":"2:7066:119","str::matches":"2:11401:2017","self::pattern":"2:11026:3188"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50209:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3309-0:23:1734":{"id":"b:2:3309-0:23:1734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2657:2038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3307:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:3311:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11404:59446":{"id":"2:11404:59446","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11026:3188","`DoubleEndedIterator`":"2:7066:119","str::matches":"2:11401:2017","prim@char":"1:12368:1934"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50227:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11046:3192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:22:1723":{"id":"0:22:1723","crate_id":0,"name":"defer_on_unwind","span":{"filename":"src/lib.rs","begin":[279,0],"end":[283,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on unwinding from panic).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! defer_on_unwind {\n    ($($t:tt)*) => { ... };\n}"},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8581:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:72:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2664:222-0:76:1711":{"id":"a:2:2664:222-0:76:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2664:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11348:55147":{"id":"2:11348:55147","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11347:55146"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[235,0],"end":[238,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:12:1698","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:17:1701"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11446:53408":{"id":"2:11446:53408","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11420:59453":{"id":"2:11420:59453","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7722:2618-0:76:1711":{"id":"a:2:7722:2618-0:76:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7722:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5093:2060":{"id":"5:5093:2060","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11370:2380":{"id":"2:11370:2380","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48039:173","self::pattern":"2:11026:3188","prim@char":"1:12368:1934"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48037:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11046:3192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:69:650":{"id":"0:69:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[469,4],"end":[473,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8541:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8530:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11383:59442":{"id":"2:11383:59442","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:12368:1934","str::rsplit_terminator":"2:11386:59443","`DoubleEndedIterator`":"2:7066:119","str::split":"2:11374:52832","self::pattern":"2:11026:3188"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50055:3460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2511-0:23:1734":{"id":"b:2:2511-0:23:1734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2485:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2481:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2514:126","2:2515:1421"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2650:214-0:70:1706":{"id":"a:2:2650:214-0:70:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2650:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7723:2620-0:73:1709":{"id":"a:2:7723:2620-0:73:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7723:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11343:55124":{"id":"2:11343:55124","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9123:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9123:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2511-0:76:1711":{"id":"b:2:2511-0:76:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2485:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2481:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2514:126","2:2515:1421"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2511-0:73:1709":{"id":"b:2:2511-0:73:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2485:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2481:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2514:126","2:2515:1421"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3311:1434":{"id":"2:3311:1434","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46510:2805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11450:2910":{"id":"2:11450:2910","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4459:2910"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50313:2911","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2714:2042-0:23:1734":{"id":"a:2:2714:2042-0:23:1734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2714:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2714:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2714:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5091":{"id":"5:5091","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5002:1346","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5092:60093","5:5093:2060","5:5096:60094","5:5099:60095","5:5107:60096","5:5108:60097","5:5109:2776","5:5110:53405","5:5111:53406"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11324":{"id":"2:11324","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10589:1346","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11325:784","2:11326:2381","2:11327:59435","2:11328:59436","2:11330:59437","2:11333:52381","2:11334:59438","2:11335:306","2:11336:55125","2:11337:1785","2:11339:55122","2:11341:55123","2:11343:55124","2:11345:59439","2:11346:59440","2:11347:55146","2:11348:55147","2:11349:3492","2:11350:3219","2:11351:3646","2:11352:57541","2:11353:57641","2:11354:4008","2:11355:59441","2:11356:57561","2:11357:55163","2:11360:55164","2:11363:55165","2:11366:2421","2:11370:2380","2:11374:52832","2:11377:55155","2:11380:55157","2:11383:59442","2:11386:59443","2:11389:55159","2:11392:55161","2:11395:59444","2:11398:59445","2:11401:2017","2:11404:59446","2:11407:59447","2:11410:59448","2:11413:59449","2:11415:59450","2:11417:59451","2:11419:59452","2:11420:59453","2:11421:59454","2:11424:59455","2:11427:52788","2:11430:55166","2:11433:59456","2:11436:59457","2:11439:59458","2:11442:3365","2:11444:3630","2:11445:53407","2:11446:53408","2:11447:53409","2:11448:59459","2:11450:2910","2:11451:59460"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2222-0:73:1709":{"id":"b:2:2222-0:73:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2657:2038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2224:2004"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:78:650":{"id":"0:78:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8541:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8530:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3309-0:73:1709":{"id":"b:2:3309-0:73:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2657:2038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3307:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3311:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2516-0:23:1734":{"id":"b:2:2516-0:23:1734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2475:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2485:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2519:126","2:2520:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11436:59457":{"id":"2:11436:59457","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11026:3188","prim@char":"1:12368:1934"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2222-0:70:1706":{"id":"b:2:2222-0:70:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2657:2038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2224:2004"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5111:53406":{"id":"5:5111:53406","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11447:53409"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11353:57641":{"id":"2:11353:57641","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11352:57541"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50288:3471","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5092:60093":{"id":"5:5092:60093","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2118","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:2874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2118","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:2874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2664:222-0:73:1709":{"id":"a:2:2664:222-0:73:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2664:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11349:3492":{"id":"2:11349:3492","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12368:1934"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49975:3455","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7722:2618-0:23:1734":{"id":"a:2:7722:2618-0:23:1734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7722:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7722:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7722:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7723:2620-0:70:1706":{"id":"a:2:7723:2620-0:70:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7723:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:0:1801":{"id":"0:0:1801","crate_id":0,"name":"scopeguard","span":{"filename":"src/lib.rs","begin":[1,0],"end":[578,1]},"visibility":"public","docs":"A scope guard will run a given closure when it goes out of scope,\neven if the code between panics.\n(as long as panic doesn't abort)\n\n# Examples\n\n## Hello World\n\nThis example creates a scope guard with an example function:\n\n```\nextern crate scopeguard;\n\nfn f() {\n    let _guard = scopeguard::guard((), |_| {\n        println!(\"Hello Scope Exit!\");\n    });\n\n    // rest of the code here.\n\n    // Here, at the end of `_guard`'s scope, the guard's closure is called.\n    // It is also called if we exit this scope through unwinding instead.\n}\n# fn main() {\n#    f();\n# }\n```\n\n## `defer!`\n\nUse the `defer` macro to run an operation at scope exit,\neither regular scope exit or during unwinding from a panic.\n\n```\n#[macro_use(defer)] extern crate scopeguard;\n\nuse std::cell::Cell;\n\nfn main() {\n    // use a cell to observe drops during and after the scope guard is active\n    let drop_counter = Cell::new(0);\n    {\n        // Create a scope guard using `defer!` for the current scope\n        defer! {\n            drop_counter.set(1 + drop_counter.get());\n        }\n\n        // Do regular operations here in the meantime.\n\n        // Just before scope exit: it hasn't run yet.\n        assert_eq!(drop_counter.get(), 0);\n\n        // The following scope end is where the defer closure is called\n    }\n    assert_eq!(drop_counter.get(), 1);\n}\n```\n\n## Scope Guard with Value\n\nIf the scope guard closure needs to access an outer value that is also\nmutated outside of the scope guard, then you may want to use the scope guard\nwith a value. The guard works like a smart pointer, so the inner value can\nbe accessed by reference or by mutable reference.\n\n### 1. The guard owns a file\n\nIn this example, the scope guard owns a file and ensures pending writes are\nsynced at scope exit.\n\n```\nextern crate scopeguard;\n\nuse std::fs::*;\nuse std::io::{self, Write};\n# // Mock file so that we don't actually write a file\n# struct MockFile;\n# impl MockFile {\n#     fn create(_s: &str) -> io::Result<Self> { Ok(MockFile) }\n#     fn write_all(&self, _b: &[u8]) -> io::Result<()> { Ok(()) }\n#     fn sync_all(&self) -> io::Result<()> { Ok(()) }\n# }\n# use self::MockFile as File;\n\nfn try_main() -> io::Result<()> {\n    let f = File::create(\"newfile.txt\")?;\n    let mut file = scopeguard::guard(f, |f| {\n        // ensure we flush file at return or panic\n        let _ = f.sync_all();\n    });\n    // Access the file through the scope guard itself\n    file.write_all(b\"test me\\n\").map(|_| ())\n}\n\nfn main() {\n    try_main().unwrap();\n}\n\n```\n\n### 2. The guard restores an invariant on scope exit\n\n```\nextern crate scopeguard;\n\nuse std::mem::ManuallyDrop;\nuse std::ptr;\n\n// This function, just for this example, takes the first element\n// and inserts it into the assumed sorted tail of the vector.\n//\n// For optimization purposes we temporarily violate an invariant of the\n// Vec, that it owns all of its elements.\n//\n// The safe approach is to use swap, which means two writes to memory,\n// the optimization is to use a “hole” which uses only one write of memory\n// for each position it moves.\n//\n// We *must* use a scope guard to run this code safely. We\n// are running arbitrary user code (comparison operators) that may panic.\n// The scope guard ensures we restore the invariant after successful\n// exit or during unwinding from panic.\nfn insertion_sort_first<T>(v: &mut Vec<T>)\n    where T: PartialOrd\n{\n    struct Hole<'a, T: 'a> {\n        v: &'a mut Vec<T>,\n        index: usize,\n        value: ManuallyDrop<T>,\n    }\n\n    unsafe {\n        // Create a moved-from location in the vector, a “hole”.\n        let value = ptr::read(&v[0]);\n        let mut hole = Hole { v: v, index: 0, value: ManuallyDrop::new(value) };\n\n        // Use a scope guard with a value.\n        // At scope exit, plug the hole so that the vector is fully\n        // initialized again.\n        // The scope guard owns the hole, but we can access it through the guard.\n        let mut hole_guard = scopeguard::guard(hole, |hole| {\n            // plug the hole in the vector with the value that was // taken out\n            let index = hole.index;\n            ptr::copy_nonoverlapping(&*hole.value, &mut hole.v[index], 1);\n        });\n\n        // run algorithm that moves the hole in the vector here\n        // move the hole until it's in a sorted position\n        for i in 1..hole_guard.v.len() {\n            if *hole_guard.value >= hole_guard.v[i] {\n                // move the element back and the hole forward\n                let index = hole_guard.index;\n                ptr::copy_nonoverlapping(&hole_guard.v[index + 1], &mut hole_guard.v[index], 1);\n                hole_guard.index += 1;\n            } else {\n                break;\n            }\n        }\n\n        // When the scope exits here, the Vec becomes whole again!\n    }\n}\n\nfn main() {\n    let string = String::from;\n    let mut data = vec![string(\"c\"), string(\"a\"), string(\"b\"), string(\"d\")];\n    insertion_sort_first(&mut data);\n    assert_eq!(data, vec![\"a\", \"b\", \"c\", \"d\"]);\n}\n\n```\n\n\n# Crate Features\n\n- `use_std`\n  + Enabled by default. Enables the `OnUnwind` and `OnSuccess` strategies.\n  + Disable to use `no_std`.\n\n# Rust Version\n\nThis version of the crate requires Rust 1.20 or later.\n\nThe scopeguard 1.x release series will use a carefully considered version\nupgrade policy, where in a later 1.x version, we will raise the minimum\nrequired Rust version.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/scopeguard/1/\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:12:1698","0:70:1706","0:73:1709","0:76:1711","0:23:1734","0:36:1718","0:39:1721","0:42:1724","0:20:1715","0:21:1720","0:22:1723"],"is_stripped":false}},"2:11433:59456":{"id":"2:11433:59456","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11026:3188","prim@char":"1:12368:1934"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11046:3192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5107:60096":{"id":"5:5107:60096","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2504:2374":{"id":"2:2504:2374","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2478:131"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2516-0:70:1706":{"id":"b:2:2516-0:70:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2475:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2485:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:126","2:2520:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:72:650":{"id":"0:72:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8541:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8530:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2222-0:76:1711":{"id":"b:2:2222-0:76:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2657:2038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2224:2004"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:36:1718":{"id":"0:36:1718","crate_id":0,"name":"guard","span":{"filename":"src/lib.rs","begin":[367,0],"end":[371,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"generic","inner":"T"}],["dropfn",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2926:1737","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11330:59437":{"id":"2:11330:59437","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11328:59436"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7722:2618-0:70:1706":{"id":"a:2:7722:2618-0:70:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7722:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7723:2620-0:76:1711":{"id":"a:2:7723:2620-0:76:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7723:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[428,0],"end":[437,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2926:1737","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1698","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:2892:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:53:224","0:54:536"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11419:59452":{"id":"2:11419:59452","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11366:2421":{"id":"2:11366:2421","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48039:173","self::pattern":"2:11026:3188","prim@char":"1:12368:1934"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48037:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11442:3365":{"id":"2:11442:3365","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:10988:125","`FromStr`":"2:10987:2959"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48181:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:10987:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:10987:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8581:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11355:59441":{"id":"2:11355:59441","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50269:3469","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7723:2620-0:23:1734":{"id":"a:2:7723:2620-0:23:1734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7723:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7723:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7723:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:34:1744":{"id":"0:34:1744","crate_id":0,"name":"with_strategy","span":{"filename":"src/lib.rs","begin":[317,4],"end":[323,5]},"visibility":"public","docs":"Create a `ScopeGuard` that owns `v` (accessible through deref) and calls\n`dropfn` when its destructor runs.\n\nThe `Strategy` decides whether the scope guard's closure should run.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"generic","inner":"T"}],["dropfn",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11421:59454":{"id":"2:11421:59454","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11026:3188","prim@char":"1:12368:1934"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11051:3187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2225-0:70:1706":{"id":"b:2:2225-0:70:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2657:2038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2227:52372"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11354:4008":{"id":"2:11354:4008","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50259:2753","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2650:214-0:23:1734":{"id":"a:2:2650:214-0:23:1734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2650:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2650:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2650:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11350:3219":{"id":"2:11350:3219","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12368:1934"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49981:3456","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:21:1720":{"id":"0:21:1720","crate_id":0,"name":"defer_on_success","span":{"filename":"src/lib.rs","begin":[265,0],"end":[269,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on successful scope exit).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! defer_on_success {\n    ($($t:tt)*) => { ... };\n}"},"b:2:2225-0:76:1711":{"id":"b:2:2225-0:76:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2657:2038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2227:52372"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2511-0:70:1706":{"id":"b:2:2511-0:70:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2485:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2481:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2514:126","2:2515:1421"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8581:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2505-0:70:1706":{"id":"b:2:2505-0:70:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2478:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2507:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11357:55163":{"id":"2:11357:55163","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11026:3188","prim@char":"1:12368:1934"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[241,0],"end":[244,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:12:1698","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:19:1701"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,0],"end":[232,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:12:1698","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:15:1701"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2225-0:23:1734":{"id":"b:2:2225-0:23:1734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2657:2038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2227:52372"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11415:59450":{"id":"2:11415:59450","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2501-0:73:1709":{"id":"b:2:2501-0:73:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2478:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2475:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2504:2374"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11374:52832":{"id":"2:11374:52832","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11026:3188","prim@char":"1:12368:1934","str::rsplit":"2:11380:55157","str::split_whitespace":"2:11352:57541","`DoubleEndedIterator`":"2:7066:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50005:2752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54:536":{"id":"0:54:536","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[434,4],"end":[436,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2714:2042-0:70:1706":{"id":"a:2:2714:2042-0:70:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2714:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11339:55122":{"id":"2:11339:55122","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48039:173"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48037:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9123:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9123:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2501-0:76:1711":{"id":"b:2:2501-0:76:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2478:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2475:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2504:2374"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11395:59444":{"id":"2:11395:59444","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48037:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:23:1734":{"id":"0:23:1734","crate_id":0,"name":"ScopeGuard","span":{"filename":"src/lib.rs","begin":[298,0],"end":[306,1]},"visibility":"public","docs":"`ScopeGuard` is a scope guard that may own a protected value.\n\nIf you place a guard in a local variable, the closure can\nrun regardless how you leave the scope — through regular return or panic\n(except if panic or other code aborts; so as long as destructors run).\nIt is run only once.\n\nThe `S` parameter for [`Strategy`](trait.Strategy.html) determines if\nthe closure actually runs.\n\nThe guard's closure will be called with the held value in the destructor.\n\nThe `ScopeGuard` implements `Deref` so that you can access the inner value.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2926:1737","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1698","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:30","a:2:7722:2618-0:23:1734","a:2:2650:214-0:23:1734","a:2:2714:2042-0:23:1734","a:2:7723:2620-0:23:1734","b:2:2511-0:23:1734","b:2:2516-0:23:1734","b:2:2225-0:23:1734","b:2:2501-0:23:1734","b:2:3309-0:23:1734","b:2:2505-0:23:1734","b:2:2222-0:23:1734","0:45","0:49","0:55","0:60","0:65"]}},"0:20:1715":{"id":"0:20:1715","crate_id":0,"name":"defer","span":{"filename":"src/lib.rs","begin":[251,0],"end":[255,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (always run).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! defer {\n    ($($t:tt)*) => { ... };\n}"},"0:15:1701":{"id":"0:15:1701","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[231,4],"end":[231,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11345:59439":{"id":"2:11345:59439","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:2975:2100","str::slice_mut_unchecked":"2:11346:59440","`str`":"1:12374:1939"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5110:53405":{"id":"5:5110:53405","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11446:53408"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:39:1721":{"id":"0:39:1721","crate_id":0,"name":"guard_on_success","span":{"filename":"src/lib.rs","begin":[378,0],"end":[382,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"generic","inner":"T"}],["dropfn",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2926:1737","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11389:55159":{"id":"2:11389:55159","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12368:1934","str::rsplitn":"2:11392:55161","self::pattern":"2:11026:3188"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50109:2899","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1709":{"id":"0:73:1709","crate_id":0,"name":"OnUnwind","span":{"filename":"src/lib.rs","begin":[220,0],"end":[220,20]},"visibility":"public","docs":"Run on scope exit through unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:7722:2618-0:73:1709","a:2:2650:214-0:73:1709","a:2:2664:222-0:73:1709","a:2:2714:2042-0:73:1709","a:2:7723:2620-0:73:1709","b:2:2511-0:73:1709","b:2:2516-0:73:1709","b:2:2225-0:73:1709","b:2:2501-0:73:1709","b:2:3309-0:73:1709","b:2:2505-0:73:1709","b:2:2222-0:73:1709","0:74","0:16"]}},"2:11407:59447":{"id":"2:11407:59447","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11026:3188","prim@char":"1:12368:1934","`DoubleEndedIterator`":"2:7066:119","str::rmatch_indices":"2:11410:59448"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50155:3464","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11336:55125":{"id":"2:11336:55125","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12385:1948"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11448:59459":{"id":"2:11448:59459","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4458:59459"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50304:3473","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:19:1701":{"id":"0:19:1701","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[243,4],"end":[243,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2505-0:23:1734":{"id":"b:2:2505-0:23:1734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2478:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2507:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2650:214-0:76:1711":{"id":"a:2:2650:214-0:76:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2650:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:70:1706":{"id":"0:70:1706","crate_id":0,"name":"Always","span":{"filename":"src/lib.rs","begin":[213,0],"end":[213,18]},"visibility":"public","docs":"Always run on scope exit.\n\n“Always” run: on regular exit from a scope or on unwinding from a panic.\nCan not run on abort, process exit, and other catastrophic events where\ndestructors don’t run.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:7722:2618-0:70:1706","a:2:2650:214-0:70:1706","a:2:2664:222-0:70:1706","a:2:2714:2042-0:70:1706","a:2:7723:2620-0:70:1706","b:2:2511-0:70:1706","b:2:2516-0:70:1706","b:2:2225-0:70:1706","b:2:2501-0:70:1706","b:2:3309-0:70:1706","b:2:2505-0:70:1706","b:2:2222-0:70:1706","0:71","0:14"]}},"2:2227:52372":{"id":"2:2227:52372","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7722:2618-0:73:1709":{"id":"a:2:7722:2618-0:73:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7722:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11380:55157":{"id":"2:11380:55157","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11026:3188","str::split":"2:11374:52832","`DoubleEndedIterator`":"2:7066:119","prim@char":"1:12368:1934"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50023:2895","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11046:3192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2714:2042-0:76:1711":{"id":"a:2:2714:2042-0:76:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2714:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11447:53409":{"id":"2:11447:53409","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2519:126":{"id":"2:2519:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39282:2656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:76:1711":{"id":"0:76:1711","crate_id":0,"name":"OnSuccess","span":{"filename":"src/lib.rs","begin":[227,0],"end":[227,21]},"visibility":"public","docs":"Run on regular scope exit, when not unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:7722:2618-0:76:1711","a:2:2650:214-0:76:1711","a:2:2664:222-0:76:1711","a:2:2714:2042-0:76:1711","a:2:7723:2620-0:76:1711","b:2:2511-0:76:1711","b:2:2516-0:76:1711","b:2:2225-0:76:1711","b:2:2501-0:76:1711","b:2:3309-0:76:1711","b:2:2505-0:76:1711","b:2:2222-0:76:1711","0:77","0:18"]}},"2:11377:55155":{"id":"2:11377:55155","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12368:1934","self::pattern":"2:11026:3188"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10850:2901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11444:3630":{"id":"2:11444:3630","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11352:57541":{"id":"2:11352:57541","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11353:57641"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50279:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3309-0:76:1711":{"id":"b:2:3309-0:76:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2657:2038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3307:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3311:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2516-0:73:1709":{"id":"b:2:2516-0:73:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2475:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2485:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:126","2:2520:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:17:1701":{"id":"0:17:1701","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[237,4],"end":[237,56]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2222-0:23:1734":{"id":"b:2:2222-0:23:1734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2657:2038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2224:2004"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2520:1420":{"id":"2:2520:1420","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48181:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2485:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11451:59460":{"id":"2:11451:59460","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4456:59460"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50322:3474","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11326:2381":{"id":"2:11326:2381","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:64:571":{"id":"0:64:571","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[452,4],"end":[461,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[422,0],"end":[426,2]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2664:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2926:1737","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1698","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2664:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1734","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11334:59438":{"id":"2:11334:59438","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11328:59436":{"id":"2:11328:59436","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11333:52381":{"id":"2:11333:52381","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10594:3598"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11327:59435":{"id":"2:11327:59435","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2514:126":{"id":"2:2514:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2485:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"5:5099:60095":{"id":"5:5099:60095","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11325:784":{"id":"2:11325:784","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12368:1934"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11417:59451":{"id":"2:11417:59451","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2501-0:70:1706":{"id":"b:2:2501-0:70:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2478:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2475:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2504:2374"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2225-0:73:1709":{"id":"b:2:2225-0:73:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2657:2038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2227:52372"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5096:60094":{"id":"5:5096:60094","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11031:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2515:1421":{"id":"2:2515:1421","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48181:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2485:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"2:54124:6275":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:495:38364":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10139:4452":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:7475:4066":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"18:515:4595":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:9601:4442":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:8588:2152":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:13148:5586":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:3145:227":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:2741:2076":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:12367:1933":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:7071:4157":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:56942:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:9270:2692":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:9475:4402":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"18:80:52212":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:9631:4438":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"14:187:44122":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:993:2854":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:11748:5215":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:6352:39219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:6405:4720":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:12361:5331":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:625:2908":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:2526:4344":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:2570:4396":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:4581:3123":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:3190:2772":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:7366:4084":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:4258:2715":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:519:38368":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"18:609:4815":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:19965:2630":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:6337:4145":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11536:5183":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:8570:3161":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"1:7143:4722":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:4206:2626":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"12:1852:2695":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:46888:3473":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:10528:4525":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:10682:4533":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:54139:6276":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:50073:3461":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:51000:3045":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:11873:5231":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13382:5665":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:3949:3025":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:951:2694":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:0:789":{"crate_id":6,"path":["libc"],"kind":"module"},"1:3156:3092":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:539:994":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"1:5570:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:49734:3454":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:10257:5014":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:49034:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"16:7335:4082":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:4117:1777":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:6002:3132":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:7266:41809":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:52709:3336":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:56955:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:47032:6185":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:7887:4078":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:7853:53308":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:9567:2897":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:683:9338":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:48088:2385":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:46471:2103":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"9:709:2988":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:9553:2899":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:928:2847":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:9507:6389":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:10360:4562":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12118:5286":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:50453:3200":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"18:582:2630":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:6759:4080":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:6035:3135":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:47104:2922":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:5574:4123":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:1474:1694":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:11151:2647":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:11217:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:48105:2845":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:9401:2888":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:52038:6210":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:957:2848":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:5504:42285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:2892:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"7:79:43385":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:6843:4380":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:5808:14759":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:21099:3513":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:9805:4549":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:6793:3698":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:54060:6271":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:4421:3166":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:3307:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:9382:4951":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:2947:3694":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:2805:2088":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:12265:5313":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:52631:3348":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:6992:2932":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"12:810:2848":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:4644:41661":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:6424:42716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:6409:42714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13518:5702":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:49949:3557":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:658:3059":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:9316:2969":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:52329:3322":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:46537:6173":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:8418:4474":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:2768:2079":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:12816:5502":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:2784:2083":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:6392:39196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:52785:3343":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:2465:3742":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:4286:41624":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:2776:2086":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:8547:3160":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"15:214:3985":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:8212:4527":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:47022:4701":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:10121:4470":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:608:38379":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:51900:6208":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"7:0:1485":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:6895:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:9360:2831":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:11337:6318":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:10564:3637":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:47073:2919":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:10845:4529":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:11746:57660":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:13459:5686":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12514:5353":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:5472:4118":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:7532:53339":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:12372:1937":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:667:225":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:10880:4728":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:3172:3283":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:11837:2622":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:4534:41647":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:47183:2930":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:10088:5003":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:2648:4356":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:7022:4333":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:36:3666":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:9645:2673":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:1654:39267":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:49981:3456":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11034:5074":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:8581:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:13134:5584":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:9193:61010":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:8789:12674":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:53021:3323":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:52945:3316":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:10546:45813":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:4013:3105":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:4653:3124":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:50970:3496":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:10799:3463":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:7932:9337":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:50313:2911":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:12350:53323":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:20225:3352":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:1562:39259":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:521:4592":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:9458:4412":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:4317:2167":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:6820:2386":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"18:113:52214":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:9283:4948":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:11368:5143":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:2725:58867":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:10296:5017":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:7404:4086":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"9:188:3861":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"5:6912:3729":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:5713:42300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:13168:5592":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:10752:4427":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:9700:4491":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:6545:4079":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:10497:46074":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"0:21:1720":{"crate_id":0,"path":["scopeguard","defer_on_success"],"kind":"macro"},"6:4575:41652":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:2661:219":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:2968:2697":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13126:5581":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:3393:5740":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:10739:6483":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:4450:3170":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:6421:2394":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:46777:3270":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:51830:3346":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:8631:4827":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:11252:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:2250:1759":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:7214:41802":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:49321:6196":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:46928:3275":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:50756:3571":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:49329:2820":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:4621:41658":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:54162:6277":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:12379:1942":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:6415:42715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:11197:3064":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:6156:4682":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:5699:42299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:6538:42723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:12073:5277":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"7:32:43378":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"12:1845:2694":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:11841:5227":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:5782:42306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"12:834:2853":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:12371:1936":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:9183:4940":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:48249:177":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:48776:2153":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:11207:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:46405:196":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:9338:2692":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:50927:189":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"12:853:2854":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"11:44:3948":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:4298:2712":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:0:279":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:7374:4168":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"12:985:2856":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:50728:3485":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"12:2184:58213":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:1348:2845":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:1301:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"10:0:1905":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11343:5139":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:4710:768":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:11070:5079":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:53741:3321":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:581:38375":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:10774:4425":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:5927:4134":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:4312:2718":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:3343:2779":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:51931:3326":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:11087:5081":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:2762:2080":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:20431:2627":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:10944:2769":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:5448:2929":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:5365:4060":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:3557:5741":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:9897:4966":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:11368:2970":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:2900:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:4059:2735":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:9071:61014":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:6732:2386":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:2816:4351":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:48312:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:47151:6186":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:3156:2107":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:2485:230":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:13100:5571":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:5358:226":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:3896:2735":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:7545:4090":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:2662:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:53803:3341":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"0:70:1706":{"crate_id":0,"path":["scopeguard","Always"],"kind":"enum"},"1:12382:1945":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:1751:57566":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:10445:4529":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:11434:4729":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:8309:3440":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"0:36:1718":{"crate_id":0,"path":["scopeguard","guard"],"kind":"function"},"6:4329:41629":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:54109:6274":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:12390:1953":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:12850:5513":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:11800:5221":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6087:4085":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:1584:4682":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:12630:5446":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:48113:2386":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:10983:2315":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:6492:2829":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:842:3723":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:12210:4735":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:771:3722":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:5060:2645":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:8596:188":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:11054:5075":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:1695:39271":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:7907:4171":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:2835:2095":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:6601:2915":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:21794:2321":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:4659:41663":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:6269:38285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:6668:4068":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:46244:2114":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:21173:3372":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:8059:2817":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:4307:41627":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:9319:2752":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:12739:5486":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:6188:4141":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:6509:42721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:6288:3671":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:12388:1951":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:9371:4938":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:13047:5556":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:571:2316":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:57007:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:46530:4105":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"6:1518:39254":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:21368:3530":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:9602:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:11594:5192":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:6311:42712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:8590:2153":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:10497:6296":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:56994:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:1722:39274":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:671:4583":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:4280:41623":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:8140:2764":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"3:0:429":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:8064:3062":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:2274:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:11227:2745":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:10721:5040":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:6705:2842":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:3326:157":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:2456:4366":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:8991:61006":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:13279:5645":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:12307:5317":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:3179:5738":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:8541:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"18:699:4586":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:6230:4143":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:4242:2713":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:50919:205":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"12:1872:2698":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"16:4840:5767":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:2472:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:4186:3400":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:6474:4700":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:21629:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:4308:2717":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:5424:4115":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:7948:4074":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"18:574:4808":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:1629:2697":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:48797:2155":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:8756:2642":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:1714:39273":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:987:2853":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"18:564:4598":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:48464:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:2976:2695":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:6437:6304":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:1686:39270":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:4253:3406":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:6955:3731":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:7581:4087":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:1435:3735":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:3417:4682":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:9764:4961":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:5720:42301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:12033:5273":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:10997:5061":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:1541:39257":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:1049:3737":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:11642:57709":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:3249:4478":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:7430:192":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:5174:3046":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:2481:231":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:9424:2835":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:2573:2761":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:11518:2969":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:5941:188":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:7975:3746":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"16:6571:4150":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:53865:3306":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:52001:6209":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:4629:41659":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:3125:4841":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:11774:5218":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:7889:2315":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:6308:4144":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:10182:5005":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:9472:2314":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:3226:2773":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:4690:968":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:4735:3703":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:9031:61012":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:8132:2762":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:4536:5757":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:2923:2099":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:4653:5761":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:52399:3308":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:8116:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:50565:3203":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:12389:1952":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:420:4029":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:29626:3540":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:10420:4563":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:52528:6219":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:4519:198":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"12:1534:3972":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:6164:4061":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:6879:2863":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:8295:45811":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:4716:41669":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:10062:5001":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:1102:2857":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:21959:163":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"19:0:993":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6323:4065":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:10233:5012":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:2244:3743":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:11878:199":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:21380:3529":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:11606:5194":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:3228:2774":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:50600:3206":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:11217:5106":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"18:507:4808":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:6781:3014":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:859:2692":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:7825:4170":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:9751:4493":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:4263:2166":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:4902:52992":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:8464:2807":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:8428:2752":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:8939:2991":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:5472:42282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:4777:5765":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:6755:3725":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"15:193:3981":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:4912:5769":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:9362:4452":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:8034:4042":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:47052:2875":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:10625:4432":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:676:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"18:681:4584":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13071:5563":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:2378:2447":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:9514:6390":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:9577:4444":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"18:652:4808":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"12:646:2845":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:8415:2749":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:5962:2693":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"12:861:2855":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:11235:5107":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:3475:2728":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:5749:60504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:8698:3117":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:54201:6278":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:135:38051":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:11761:5216":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"9:586:3834":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:2650:214":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:8857:2988":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:1550:39258":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:9902:3062":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:7920:4172":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:1771:4443":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:7166:43255":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:13059:5562":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:1605:2386":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:13340:5652":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"12:725:2846":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:8712:3127":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:9447:3140":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:448:2329":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:3265:2769":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:1617:2695":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:20033:58397":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:46510:2805":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:10190:4708":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:9541:52597":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:1678:39269":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:5402:4114":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:9362:2901":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:48122:3550":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:2674:4346":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:915:2846":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:49895:2894":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:8853:2702":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:2510:2760":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:9284:2966":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:8680:2826":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:7321:4069":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"12:632:2692":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:339:159":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:11894:3105":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:1552:2735":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"9:896:3797":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:9488:4405":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:6754:2778":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:46589:3257":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:48173:187":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:2905:1696":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:4337:2048":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4551:41649":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:6294:4089":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:4527:41646":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4810:41678":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:7255:41808":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:7535:4064":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:0:481":{"crate_id":2,"path":["core"],"kind":"module"},"16:6048:4051":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:2839:2096":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:4635:41660":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13413:5672":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:11106:5086":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:4879:5768":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:6768:4154":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:6124:4109":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:7226:41804":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:4200:41614":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:9108:4938":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:46427:195":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:2478:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:12046:5275":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:49991:2750":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:8638:3107":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:8146:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:48616:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:50579:3204":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:54014:6267":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:5672:42296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:6697:4373":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:1636:571":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:487:38363":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12948:5535":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:11709:6308":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:6554:3395":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:2269:182":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:21728:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:3623:5743":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:20690:3290":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:12980:5542":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:50720:3480":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:49338:142":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:50796:2675":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:11167:53291":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:51798:3313":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:9681:4883":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:48164:37610":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:51752:3333":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:54005:6266":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:1574:39260":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:49963:3035":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"9:676:3883":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:10949:5046":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:5692:42298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:9844:4553":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:8494:4926":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:5606:4124":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:4417:41637":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:5541:42289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:1473:141":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:10283:5016":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:5519:4121":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:4605:41656":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:2311:183":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:21695:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:49813:2885":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:8530:204":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"16:2548:4345":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:5836:2931":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"0:0:1801":{"crate_id":0,"path":["scopeguard"],"kind":"module"},"1:7779:4723":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13024:5553":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12874:5515":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:6926:3546":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5534:42288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:3968:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:10973:5060":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"14:31:6033":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:9873:4964":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:50259:2753":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:4988:4692":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:12768:5493":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:7249:41807":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:10516:6482":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:8561:4488":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:966:2850":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:9607:2671":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:12378:1941":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:52551:6220":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:48097:2692":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"12:2205:2701":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:5175:44189":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12730:5482":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:47521:6189":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:12860:5514":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:5856:4133":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:2432:2627":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:25201:3267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:8592:2154":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12934:5533":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:11608:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"18:707:3191":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:4510:5756":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:8526:4508":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:6506:4149":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:11040:3191":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:10350:4425":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:4437:3169":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:4429:3167":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:46544:2166":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:9526:4441":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:5861:42334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12797:5501":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:6778:3141":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:4745:41672":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:7723:2620":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:49049:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:7827:3189":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:4300:41626":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"14:40:5061":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"12:444:139":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:2831:2094":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:542:2309":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:49560:3628":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:2815:2091":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:49975:3455":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:7101:52801":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:9947:46001":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:54086:6273":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:7287:4165":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:2772:2082":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:20407:2627":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:46503:2106":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:8594:2155":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:562:4837":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4540:41648":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4257:41620":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:9484:52734":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:8441:4530":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:12638:5447":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:10608:4430":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:4264:2716":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:2864:3010":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:2898:204":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"6:4191:41613":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:12008:5270":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:6802:58304":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:9562:6525":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:1823:6294":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:6713:4083":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:2469:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:9907:4727":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:29492:1695":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:5226:5771":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:4250:2714":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:56929:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:50422:3196":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:6430:42717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:47549:6191":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:50983:155":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12134:5287":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:5841:41520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:3373:2735":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:2788:2085":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:8481:2808":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:5715:4127":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:9626:2672":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:11576:5191":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:2394:3071":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:4515:41645":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:11445:4730":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:2920:2098":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:3094:2694":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:39282:2656":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:8858:2819":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:5822:2972":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:12339:9339":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:3482:2748":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:7741:6417":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:1216:2857":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:2664:222":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:9439:2902":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:4294:41625":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"9:33:3886":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:29554:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:12368:1934":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:5887:2830":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:4663:9340":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:5739:4128":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:7868:2313":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:3370:2803":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:11813:5223":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:6071:3143":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:9778:4494":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:2746:2081":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:47530:2779":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:8706:3106":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:4904:52994":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:8949:2692":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"11:36:60944":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:600:38378":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:11161:5094":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:6978:218":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:6293:38244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:14:2020":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:52183:3342":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"12:822:2852":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:7992:4105":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:12369:1935":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:12334:53350":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:51882:3338":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:48388:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:976:2852":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:11506:2968":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:11670:2975":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:5344:6301":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13091:5570":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:5660:42295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"14:0:1908":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"18:96:52213":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:9909:4967":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:2821:2092":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:4816:41679":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"3:223:204":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:0:1910":{"crate_id":16,"path":["gimli"],"kind":"module"},"12:1518:3971":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:8955:2993":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:21281:57535":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13114:5578":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:6807:4378":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"12:2053:2856":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:2216:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:52867:3328":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:7220:41803":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:50501:3201":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:12015:3989":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:5438:4116":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:20955:3289":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:9595:2898":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:4010:3104":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:1668:39268":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12022:5272":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:8372:2745":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:7066:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"13:108:60999":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:12617:5439":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:5194:4926":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:6500:42720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:7279:43283":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:13536:5708":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:10310:5018":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:11051:3187":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:47539:4707":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:2906:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:13007:5546":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:5995:4136":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:3548:4682":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:5705:2965":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:4496:41643":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:8818:142":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:12375:1940":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:12237:5309":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:10722:2965":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:11915:3112":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:2142:572":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:2714:2042":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:47174:2935":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:5523:42287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"12:697:2850":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:10875:4472":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:6474:4148":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:1426:192":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:47227:2939":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:1931:4439":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:5642:2961":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:9708:6297":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:47236:2940":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:1933:2309":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:21347:57554":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:47278:2943":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"12:353:3963":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"12:1866:2697":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4565:41651":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:7917:9335":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:6405:237":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:21152:6142":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:20440:3288":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:5819:2971":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:10938:2771":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:13478:5691":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"18:636:4820":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:12383:1946":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:49360:6201":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"18:481:4593":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11125:5087":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:11951:5258":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:9354:2386":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:8687:3165":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:56968:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"9:622:3837":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:48240:2386":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:13327:5646":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:6132:4713":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"2:3135:2105":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:47133:2925":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:9519:6391":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:5009:2644":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:3310:2757":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:12211:5307":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:7289:43284":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:5154:4327":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"18:660:4582":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:22391:3240":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:20287:3039":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:47319:2934":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:29317:3586":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:2396:3072":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:29532:2066":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:3162:2109":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:8600:2157":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:4320:2720":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:12322:5321":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:487:4836":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:1887:39411":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:8804:138":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:7227:4160":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:0:1911":{"crate_id":17,"path":["object"],"kind":"module"},"2:39318:3746":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:1608:39264":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"12:1044:3958":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:12148:5289":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:6988:2933":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:11904:137":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"8:0:1903":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"12:98:3962":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:50909:199":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:9658:4957":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:4077:3399":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:47194:2936":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:21205:6144":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:52991:3320":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:52231:3327":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:53205:3329":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:970:2851":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:12836:5510":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:1601:2692":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:49886:2891":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:10113:2890":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:3150:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:907:2386":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:9627:4448":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:4367:41634":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:46902:3620":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:3187:2112":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:8666:4828":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:9722:4960":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:13184:5595":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:10108:4469":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"12:659:2386":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:736:4589":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:20199:3284":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:8162:4475":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:3944:3353":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:49040:129":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:13527:5706":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:10245:5013":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:11724:6309":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:2039:3739":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:11547:5186":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:54045:6270":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:49905:2892":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:21264:6150":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:11831:3027":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:2756:2077":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:21302:57539":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:9293:4546":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:8076:3064":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:13557:5711":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:1525:39255":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:215:3692":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:5681:4126":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:5771:4130":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:4740:5764":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:575:38374":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:10708:4528":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:46947:3545":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7144:4158":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:7447:4070":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:8441:150":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"1:8215:3008":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:8055:4423":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:7037:3550":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"0:20:1715":{"crate_id":0,"path":["scopeguard","defer"],"kind":"macro"},"1:4968:2637":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:9302:2968":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:9512:2896":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:6545:42724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"9:649:3838":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"5:1394:2848":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:4501:3114":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:12278:5314":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:12225:5308":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:10796:4526":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:9433:4954":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:50005:2752":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:12164:5293":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:53949:3344":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:6302:42711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:6646:4375":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"18:690:4585":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:2500:4355":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:4115:41607":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:941:2693":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:4308:3407":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:2793:2090":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:9712:4959":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:4597:5759":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:7413:2704":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"12:777:3950":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:9317:4542":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:2701:2041":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:2926:1737":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:3150:3090":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:49137:2151":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:11174:5096":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:53411:3349":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:10080:2889":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:12337:4529":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:8099:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:5422:2693":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:524:4317":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:8531:2147":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:11538:3571":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:6794:4377":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:7231:3101":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:6149:4110":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:4239:41618":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:2311:4044":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:2780:2084":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"9:800:43525":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"18:538:4597":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:4135:5747":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:7958:4106":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:1738:39275":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4096:41605":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:50613:3561":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:6322:42713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:5488:4119":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:50436:3199":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:454:2330":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:9408:2834":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:592:38377":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:7095:4336":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:1612:2694":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:12609:5436":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:11515:5179":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:50288:3471":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:5480:42283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:2916:1773":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:20438:3301":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:3590:2811":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:6867:2701":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:2247:3063":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13141:5585":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:1608:2693":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11199:5098":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:11172:2725":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:12366:1932":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"11:0:1906":{"crate_id":11,"path":["adler"],"kind":"module"},"6:4475:41642":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:50775:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:7955:10332":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:46841:3474":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:12896:5519":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:52131:3335":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:12381:1944":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"12:1628:1734":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:2740:4349":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:2406:3077":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:10394:4506":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:6777:2386":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:8510:4927":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:2833:4323":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:1500:39251":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:3418:2744":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:7297:4166":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:5684:42297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:10822:45814":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:21761:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:7420:2914":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:1111:2858":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:5502:184":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:4698:41667":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:3350:2845":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:11271:5112":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:11757:53324":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:9691:4492":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:21241:3368":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:7293:54751":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:5974:4135":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:7948:2860":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:9422:4953":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:10850:2901":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:2669:1693":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:5498:42284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:8210:3007":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:12387:1950":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:11989:53310":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:6389:3497":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:7868:4076":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:4489:3126":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:2475:145":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:6654:4067":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:5656:2962":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:13231:5608":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:49823:2886":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:48274:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"0:76:1711":{"crate_id":0,"path":["scopeguard","OnSuccess"],"kind":"enum"},"14:202:3644":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:11356:5140":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:7215:4159":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:50962:3495":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:5642:4125":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:2552:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:4404:5754":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:1962:4490":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:12674:5476":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:7413:4102":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:6311:4713":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:6212:2829":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:8822:61005":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:5817:4132":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:675:6287":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:646:38407":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:7730:4837":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:6139:4139":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:51860:3334":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:8323:2782":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"5:6723:2874":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:46345:194":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:49794:2883":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:8086:2726":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:21860:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:2245:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:47165:2927":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:2647:2763":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:20953:2627":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:6597:4151":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:9930:4969":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:6636:6305":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:50304:3473":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:5582:42290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:5007:2643":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:46909:3621":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:4936:2868":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"15:0:1909":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:6262:4072":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:567:38373":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11893:5232":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:8151:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:10159:5004":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:2751:2078":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:4673:41665":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:2942:2696":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:11751:53327":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:11708:5208":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"12:1065:3959":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:9339:4544":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:3001:4353":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:21992:3516":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:1385:2847":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:11247:5110":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:11594:2671":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:46872:3618":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:8774:4424":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:1600:39263":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:1971:3740":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:39322:2802":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"5:6449:4694":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:2607:2754":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:53911:3324":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:2810:2089":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:7089:2116":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:5450:4117":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:4335:41630":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:2979:2101":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:10642:4535":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:8871:4934":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"0:73:1709":{"crate_id":0,"path":["scopeguard","OnUnwind"],"kind":"enum"},"6:7208:41801":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:5536:4122":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:19978:58321":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"0:22:1723":{"crate_id":0,"path":["scopeguard","defer_on_unwind"],"kind":"macro"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:8435:2753":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"18:719:4587":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:1808:592":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:8405:2703":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:3072:2104":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:6524:42722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:52497:6218":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:20859:58319":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:50407:3193":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:3721:2693":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:20162:3396":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:10580:3639":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:7000:3642":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:10670:4532":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:6012:4137":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:4399:3164":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:1919:2476":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:13203:5600":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:54025:6268":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11014:5064":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"18:0:1912":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:12748:5487":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:49803:2887":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"12:1840:2693":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:6632:4152":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:5531:3703":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:2885:4358":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:8752:2750":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:3337:2692":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:8692:3168":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:2026:178":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:51961:3314":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:1825:6295":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:5959:4321":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:1623:2696":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:1067:3738":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:10739:3459":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:21046:3512":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:3680:5744":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:6881:4156":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:6981:43095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:4267:41621":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"12:300:3965":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:1415:2850":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"12:762:2694":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:50023:2895":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:7798:4725":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:11149:5091":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12349:5324":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:1707:3118":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13158:5589":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:3267:2770":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:11959:2799":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:29568:3539":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:51686:6206":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:3751:4682":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:5511:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:12384:1947":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:897:2845":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"12:2069:2857":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:8137:45810":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:8981:4936":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:8527:53309":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"5:4888:4682":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:48578:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:52307:3319":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:2658:2039":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"15:175:3980":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:56572:3502":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:11661:5203":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:4706:41668":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:4890:2716":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:6307:3672":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:11847:3497":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:20281:3037":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:46330:2102":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:8583:2826":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"2:38126:2630":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:46768:6174":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:620:6114":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:4684:57746":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:3604:2386":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:11854:3104":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:6507:2920":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:9553:4452":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:8618:3024":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:3529:2694":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:1021:4547":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"12:1555:3973":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:2984:4354":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:507:38366":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:47217:2938":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:4047:3398":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:10207:5007":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:7489:4041":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:13192:5596":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:8422:2750":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:8314:3441":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:2734:58858":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:4231:41617":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:4346:41631":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:11621:31544":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:2380:4338":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:9820:4550":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:11939:5256":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:6998:43096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:50173:3465":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:9644:4437":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:9155:4939":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:20695:14565":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:12391:1954":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:4626:5760":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:4974:4689":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"16:6178:4140":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:4191:3401":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:10837:2966":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:5005:2641":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:9303:4450":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:5619:2735":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:2800:2087":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:2718:4348":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:13594:5718":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:5554:42255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:21827:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:4737:41671":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:12380:1943":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:49860:2875":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:6677:3144":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:11451:4731":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:4212:2624":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:4506:41644":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:9791:4962":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"12:1681:141":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:10506:5028":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:6814:2844":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:4932:2870":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:52085:3347":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:962:2849":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:5510:42286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"18:548:138":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:8124:3084":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:5503:4120":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:10854:4489":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:1404:2849":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:51776:3325":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:8701:4829":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:1120:2859":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:46942:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:678:6289":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:20010:58400":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"9:863:3795":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"18:727:4588":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:2273:4325":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:10761:2967":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:8606:3023":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:242:4831":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:7842:2331":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:4274:41622":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:50155:3464":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"9:827:3792":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"9:956:3793":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:12781:5498":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:7461:4071":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:11734:4974":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:4014:238":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:6953:38322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:11739:6311":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:6837:211":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:10332:4569":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:6738:3724":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:11186:5097":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:49016:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:9671:4414":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:6540:200":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"14:7:6033":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:3254:5739":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:12251:5310":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:49873:2876":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"12:119:3966":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:6763:58911":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:2478:4343":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:49153:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:2596:4397":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:2784:4352":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:5759:2967":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:3017:4846":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:1886:6298":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:10434:5021":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:46819:3622":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:0:1338":{"crate_id":1,"path":["std"],"kind":"module"},"5:4092:4684":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:11485:5170":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:7245:4161":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:1636:39265":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"12:1029:2858":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:6989:3641":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:5727:42302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:2975:2100":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:6101:4059":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:2726:58860":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:5876:42335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:9597:212":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:6081:2386":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:47142:2926":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:13039:5555":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:49101:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"18:766:4591":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:2252:4326":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:46829:3623":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:48181:204":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:52755:3340":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"12:60:60949":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:0:1902":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:5894:4694":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:9346:2828":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:8941:4935":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:54071:6272":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:247:4832":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:5733:42303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:7025:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:9857:4477":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:11288:5120":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"12:1138:2859":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:50297:3472":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:3188:2771":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:4768:41674":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:999:2855":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:9350:4545":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:11971:6416":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:5313:6301":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:2859:4324":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:1760:2472":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:50055:3460":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:20250:3397":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:4598:41655":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:50269:3469":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"12:2178:60950":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:46283:2111":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:2583:4711":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:62:37984":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:46895:3619":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:48783:2152":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:11097:3195":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:11974:5267":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:410:4734":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"5:6785:192":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:8384:2746":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:1643:2062":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:58303:6286":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:3707:5745":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:50227:3468":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"9:592:3836":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:46762:2911":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:49915:2893":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:50748:3481":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:6276:4088":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:52020:3303":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:9738:4495":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:6009:3134":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:50744:3487":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:4102:41606":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:1884:6297":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:8498:2809":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:8584:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:47512:2843":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:11639:5202":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:9379:2832":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:7724:1779":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:9885:4965":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:9118:61009":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:4208:5748":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:1359:2386":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:4611:41657":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:7008:3036":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:58282:6285":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:20238:2627":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"0:42:1724":{"crate_id":0,"path":["scopeguard","guard_on_unwind"],"kind":"function"},"6:4437:41639":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:7266:4163":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:7029:147":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:48540:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:6248:4062":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:12964:5538":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12291:5315":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:9328:4543":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:2762:4350":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:12373:1938":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:52353:3304":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:21256:6149":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:5880:2829":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:6317:3673":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:3153:3091":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:48350:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:11575:52406":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"9:382:3790":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:6554:42725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:46789:3271":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:6814:2386":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10466:5024":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:11300:5123":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:12087:5280":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:7850:4077":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:6572:42726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:7237:41805":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:10403:4427":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:9446:4955":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:7143:154":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:4379:41635":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:11026:3188":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:6673:2843":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:8586:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:8069:2725":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:1634:2698":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:7256:4162":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:2730:58859":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:5615:58147":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:2433:2657":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:131:38050":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:10321:4561":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:50740:3486":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:21318:57635":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:11684:5207":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:11557:2672":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:5873:200":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:7189:4052":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:1672:1049":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:9223:45858":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:7938:2706":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:586:38376":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:12955:5537":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:21:660":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:20279:2627":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:50808:3573":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:11137:5090":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:1825:2475":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:4206:41460":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:1580:39261":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:6375:39193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:4182:201":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:46449:197":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:10393:3119":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:10987:2959":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:2023:179":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:3457:2147":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"12:815:2851":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:11330:5135":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:7350:4384":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:3224:2113":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:4253:5749":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:4683:41666":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:49350:2988":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:50209:3467":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:8734:6137":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:2566:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:5793:4131":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:2935:2692":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:967:4838":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:11237:53403":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13366:5661":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:7217:3100":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"6:5443:42226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:13221:5603":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:771:139":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:48502:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:9165:61007":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13506:5700":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:4376:5753":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:4318:5751":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:5568:42256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:7841:2627":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"18:590:4810":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:1201:2858":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:21662:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:501:38365":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:13436:5685":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:1033:59003":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:11530:53400":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:1185:2856":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:11559:5188":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:5691:2964":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:10075:5002":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:4797:41676":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:1376:2846":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:4317:41628":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:10594:3598":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:11259:5111":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:5165:2823":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:2332:4360":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:7113:4337":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:5592:4315":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:716:6480":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:6495:3977":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:10776:3462":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:4834:2652":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:1532:39256":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:6030:4138":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:3081:2781":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:10921:5042":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:50736:3488":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:47113:2923":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:6450:3978":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:4224:41616":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:29526:2065":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:1643:39266":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"12:2080:2858":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:7722:2618":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:939:4682":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:9330:2970":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:20847:3038":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"9:111:3853":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"6:4449:41640":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:4354:41632":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:46866:2911":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:13404:5670":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:11436:5145":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:2019:58920":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:13580:5715":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"12:1836:2386":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:5587:42291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:5379:4113":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"12:1832:2692":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:4029:4684":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:9831:4552":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:46361:192":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:5113:5770":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:6682:4081":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:46849:3617":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"12:0:1907":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"17:11853:5228":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:3448:4850":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:1935:3057":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:4152:41610":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:48426:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:9290:180":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:1701:39272":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:6479:42719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:6972:58910":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"6:4559:41650":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:11031:3189":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:2921:4045":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:12103:5282":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:4614:2735":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:8881:61011":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:1861:6296":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"12:1085:3960":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:12060:5276":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:49564:2878":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"12:387:60945":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:10815:3466":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:51012:3043":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:6277:39192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"12:2190:60954":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:11909:5237":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:8356:2778":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:6441:4147":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:9527:4156":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:1338:2692":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:12176:5295":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:2305:176":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:48232:2845":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:4965:2639":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:9113:2627":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:9021:4937":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:49834:2877":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:539:38369":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:2358:4342":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:48224:2692":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:386:4833":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:4680:5762":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:56981:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:9581:2900":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:8911:61013":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:47289:2749":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:3460:2764":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:3898:2692":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:48790:2154":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"12:751:2693":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:6855:4155":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:9895:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:10476:46073":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:2622:4357":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:5595:42292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:4432:5755":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"9:920:3794":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:8880:2989":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:11162:53138":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:4461:41641":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:4762:2813":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:46959:3546":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:884:2692":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:49067:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"16:6820:5844":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:9061:4452":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:9592:161":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:12926:5530":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:12385:1948":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:6721:4153":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:52375:3307":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:49785:2884":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:47505:6134":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11315:5129":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"12:669:2849":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:47123:2924":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:8110:45806":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:8393:4411":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:12001:2632":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"5:5547:3704":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:12374:1939":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:20328:3288":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13393:5669":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:4740:2637":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:4521:3614":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:49079:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:11694:6140":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:2253:2743":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:4398:41636":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:10221:5011":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:4185:41612":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:11662:6412":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:10374:4504":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:7276:4164":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:4712:5763":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:48037:175":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:47253:2941":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:21189:57562":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:3472:3756":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:10385:4505":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:8814:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"0:12:1698":{"crate_id":0,"path":["scopeguard","Strategy"],"kind":"trait"},"17:10583:4429":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:5676:2963":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:50732:3484":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:47203:2937":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:7055:2694":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:2660:220":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:5390:185":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:2424:4339":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:7934:4073":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:50109:2899":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"9:505:3785":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:51706:6207":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:9461:6385":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:50590:3205":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:12485:5333":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:4761:41673":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:6008:4682":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:53987:3309":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:47082:2703":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:5199:3671":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:13082:5567":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"18:755:4590":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"13:220:60955":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:7637:4058":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:9474:2895":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"12:2198:60951":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:21926:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:12393:1956":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:21893:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:54034:6269":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:38109:177":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:2827:2093":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:2239:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:12695:5481":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:8241:4531":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:9250:4945":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:5741:42304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:9401:4952":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:9123:216":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:4427:41638":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:10652:2974":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:8363:2780":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:3792:2845":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:595:2318":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:1505:39252":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:11669:186":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:52161:3339":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:4726:41670":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:554:38371":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:12884:5516":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:545:38370":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"9:19:3885":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"16:4348:5752":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:19993:58321":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"18:599:61018":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"12:1003:2857":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4179:41611":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"9:977:3798":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"0:39:1721":{"crate_id":0,"path":["scopeguard","guard_on_success"],"kind":"function"},"18:491:4807":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:13354:5658":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:50752:3482":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:4592:41654":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:53055:3305":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:3956:3354":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:50633:3562":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:47560:6135":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:12392:1955":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:29732:3541":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:5223:12673":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:6942:3730":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:7521:4063":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:50127:2897":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:11500:5174":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:1595:39262":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:50528:3202":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"14:215:6038":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:4778:41675":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:4360:2168":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:53663:3337":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:11773:4734":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:51983:3318":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"14:160:6033":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:10566:2960":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:12756:5488":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:521:4709":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:2727:2045":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:5758:4129":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"12:320:3964":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:21229:3367":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:8368:4426":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:10270:5015":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:13214:5601":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:11646:4732":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:46975:3547":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:3002:2698":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:10490:5026":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:3400:2727":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:9263:4946":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:8596:4826":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"18:644:4808":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:3358:2804":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:9466:2622":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:4581:41653":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:4808:5766":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:3991:2621":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:5772:42305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:53553:3317":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:5625:42294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:4288:5750":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:7615:4075":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"0:23:1734":{"crate_id":0,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"5:1943:3697":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:47268:2942":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:6747:2693":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:20031:58399":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:52450:6217":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:5835:42333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:4:978":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:13374:5664":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:5083:2640":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:52277:3315":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:8475:4406":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:4212:41615":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:8220:2765":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:13176:5593":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:6228:200":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:48654:3556":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:11350:53326":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:1680:2694":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:5371:2928":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:153:4049":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:2724:2444":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:7803:4169":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:11341:2628":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:8807:2978":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:4126:41608":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:20012:58395":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:4113:3112":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:8734:12667":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:6600:160":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:2291:4367":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:3845:5746":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:13031:5554":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"12:738:2847":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"5:276:2118":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:39331:2043":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:6872:6305":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:8643:3108":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:11046:3192":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:49313:2821":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:8047:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:4900:52990":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:6329:12667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:8632:3106":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:2844:2097":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:3466:57019":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"9:0:1904":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:11787:5219":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:21354:3591":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:12972:5540":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:1511:39253":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:6354:4146":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:8897:2990":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:4426:650":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:11828:5226":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:1230:2859":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:50279:3470":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:9539:4440":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:12022:3989":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"14:165:44116":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:6448:42718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:48155:3552":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:46805:3273":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:624:61016":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:4247:41619":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:10941:2773":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:13572:5712":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:12198:5306":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:11185:6408":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:47304:2944":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:3590:5742":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:2916:4466":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:50322:3474":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:12550:5384":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:2981:3695":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:49368:6202":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:560:38372":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:2957:2110":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:20412:14547":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:10894:4471":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"12:1120:3961":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:2402:4361":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:4665:41664":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:7416:2912":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:6219:4142":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:5605:42293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:50385:3190":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:46385:193":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:5210:4927":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:6975:43094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:7243:41806":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:7038:2117":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:7971:6318":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:2219:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:2380:3067":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:1737:2473":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:50724:3483":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:11721:5211":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:8339:45812":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:11997:5268":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:9294:2845":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:2696:4347":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:4139:41609":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:8796:4431":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:1088:2856":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:8730:2638":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:4565:5758":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:4361:41633":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4804:41677":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:10455:4564":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"18:531:4596":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:7072:3667":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:1903:45896":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:4653:41662":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:9274:4947":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11528:5181":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"12:1859:2696":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:10520:5031":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:51730:3345":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"18:614:61017":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"13:0:1901":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:10532:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:12386:1949":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"14:221:6040":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:513:38367":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:1964:3058":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:47095:2921":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:8272:4534":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:2657:2038":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:6115:4057":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12909:5525":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:8951:61008":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"12:393:60946":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:13492:5693":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"12:274:6476":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:7863:2303":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:7307:4167":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:9501:4450":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:6037:4341":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:9392:2833":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11617:5195":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:8966:2994":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:8598:2156":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"}},"external_crates":{"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":23}