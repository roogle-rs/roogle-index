{"root":"0:0:2001","crate_version":"1.2.0","includes_private":false,"index":{"5:5540:31599":{"id":"5:5540:31599","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2737:1618":{"id":"2:2737:1618","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12898:30915":{"id":"2:12898:30915","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12881:26337":{"id":"2:12881:26337","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:11545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2423-0:21:1938":{"id":"b:2:2423-0:21:1938","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2425:22997"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12930:25661":{"id":"2:12930:25661","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:717":{"id":"0:70:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9914:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9895:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2723-0:21:1938":{"id":"b:2:2723-0:21:1938","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2700:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2697:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2726:2443"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12878:26336":{"id":"2:12878:26336","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:1924":{"id":"0:19:1924","crate_id":0,"name":"defer_on_success","span":{"filename":"src/lib.rs","begin":[271,0],"end":[275,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on successful scope exit).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_success {\n    ($($t:tt)*) => { ... };\n}"}},"2:12839:28898":{"id":"2:12839:28898","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44209:5171","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2727-0:74:1915":{"id":"b:2:2727-0:74:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2700:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12824:26294":{"id":"2:12824:26294","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[455,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3199:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3178:1900","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:57:598"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:11:1905":{"id":"0:11:1905","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,28]},"visibility":"default","docs":"Return `true` if the guard’s associated code should run\n(in the context where this method is called).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2420-0:68:1910":{"id":"b:2:2420-0:68:1910","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2414:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1910","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2422:2218"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8990:6324-0:68:1910":{"id":"a:2:8990:6324-0:68:1910","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8990:6324","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1910","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8990:6324-0:74:1915":{"id":"a:2:8990:6324-0:74:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8990:6324","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12904:30919":{"id":"2:12904:30919","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:11547"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12529:11544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[480,0],"end":[491,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9939:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3199:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9939:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:67:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2727-0:21:1938":{"id":"b:2:2727-0:21:1938","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2700:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2729:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2001":{"id":"0:0:2001","crate_id":0,"name":"scopeguard","span":{"filename":"src/lib.rs","begin":[1,0],"end":[595,1]},"visibility":"public","docs":"A scope guard will run a given closure when it goes out of scope,\neven if the code between panics.\n(as long as panic doesn't abort)\n\n# Examples\n\n## Hello World\n\nThis example creates a scope guard with an example function:\n\n```\nextern crate scopeguard;\n\nfn f() {\n    let _guard = scopeguard::guard((), |_| {\n        println!(\"Hello Scope Exit!\");\n    });\n\n    // rest of the code here.\n\n    // Here, at the end of `_guard`'s scope, the guard's closure is called.\n    // It is also called if we exit this scope through unwinding instead.\n}\n# fn main() {\n#    f();\n# }\n```\n\n## `defer!`\n\nUse the `defer` macro to run an operation at scope exit,\neither regular scope exit or during unwinding from a panic.\n\n```\n#[macro_use(defer)] extern crate scopeguard;\n\nuse std::cell::Cell;\n\nfn main() {\n    // use a cell to observe drops during and after the scope guard is active\n    let drop_counter = Cell::new(0);\n    {\n        // Create a scope guard using `defer!` for the current scope\n        defer! {\n            drop_counter.set(1 + drop_counter.get());\n        }\n\n        // Do regular operations here in the meantime.\n\n        // Just before scope exit: it hasn't run yet.\n        assert_eq!(drop_counter.get(), 0);\n\n        // The following scope end is where the defer closure is called\n    }\n    assert_eq!(drop_counter.get(), 1);\n}\n```\n\n## Scope Guard with Value\n\nIf the scope guard closure needs to access an outer value that is also\nmutated outside of the scope guard, then you may want to use the scope guard\nwith a value. The guard works like a smart pointer, so the inner value can\nbe accessed by reference or by mutable reference.\n\n### 1. The guard owns a file\n\nIn this example, the scope guard owns a file and ensures pending writes are\nsynced at scope exit.\n\n```\nextern crate scopeguard;\n\nuse std::fs::*;\nuse std::io::{self, Write};\n# // Mock file so that we don't actually write a file\n# struct MockFile;\n# impl MockFile {\n#     fn create(_s: &str) -> io::Result<Self> { Ok(MockFile) }\n#     fn write_all(&self, _b: &[u8]) -> io::Result<()> { Ok(()) }\n#     fn sync_all(&self) -> io::Result<()> { Ok(()) }\n# }\n# use self::MockFile as File;\n\nfn try_main() -> io::Result<()> {\n    let f = File::create(\"newfile.txt\")?;\n    let mut file = scopeguard::guard(f, |f| {\n        // ensure we flush file at return or panic\n        let _ = f.sync_all();\n    });\n    // Access the file through the scope guard itself\n    file.write_all(b\"test me\\n\").map(|_| ())\n}\n\nfn main() {\n    try_main().unwrap();\n}\n\n```\n\n### 2. The guard restores an invariant on scope exit\n\n```\nextern crate scopeguard;\n\nuse std::mem::ManuallyDrop;\nuse std::ptr;\n\n// This function, just for this example, takes the first element\n// and inserts it into the assumed sorted tail of the vector.\n//\n// For optimization purposes we temporarily violate an invariant of the\n// Vec, that it owns all of its elements.\n//\n// The safe approach is to use swap, which means two writes to memory,\n// the optimization is to use a “hole” which uses only one write of memory\n// for each position it moves.\n//\n// We *must* use a scope guard to run this code safely. We\n// are running arbitrary user code (comparison operators) that may panic.\n// The scope guard ensures we restore the invariant after successful\n// exit or during unwinding from panic.\nfn insertion_sort_first<T>(v: &mut Vec<T>)\n    where T: PartialOrd\n{\n    struct Hole<'a, T: 'a> {\n        v: &'a mut Vec<T>,\n        index: usize,\n        value: ManuallyDrop<T>,\n    }\n\n    unsafe {\n        // Create a moved-from location in the vector, a “hole”.\n        let value = ptr::read(&v[0]);\n        let mut hole = Hole { v: v, index: 0, value: ManuallyDrop::new(value) };\n\n        // Use a scope guard with a value.\n        // At scope exit, plug the hole so that the vector is fully\n        // initialized again.\n        // The scope guard owns the hole, but we can access it through the guard.\n        let mut hole_guard = scopeguard::guard(hole, |hole| {\n            // plug the hole in the vector with the value that was // taken out\n            let index = hole.index;\n            ptr::copy_nonoverlapping(&*hole.value, &mut hole.v[index], 1);\n        });\n\n        // run algorithm that moves the hole in the vector here\n        // move the hole until it's in a sorted position\n        for i in 1..hole_guard.v.len() {\n            if *hole_guard.value >= hole_guard.v[i] {\n                // move the element back and the hole forward\n                let index = hole_guard.index;\n                hole_guard.v.swap(index, index + 1);\n                hole_guard.index += 1;\n            } else {\n                break;\n            }\n        }\n\n        // When the scope exits here, the Vec becomes whole again!\n    }\n}\n\nfn main() {\n    let string = String::from;\n    let mut data = vec![string(\"c\"), string(\"a\"), string(\"b\"), string(\"d\")];\n    insertion_sort_first(&mut data);\n    assert_eq!(data, vec![\"a\", \"b\", \"c\", \"d\"]);\n}\n\n```\n\n\n# Crate Features\n\n- `use_std`\n  + Enabled by default. Enables the `OnUnwind` and `OnSuccess` strategies.\n  + Disable to use `no_std`.\n\n# Rust Version\n\nThis version of the crate requires Rust 1.20 or later.\n\nThe scopeguard 1.x release series will use a carefully considered version\nupgrade policy, where in a later 1.x version, we will raise the minimum\nrequired Rust version.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/scopeguard/1/\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1902","0:68:1910","0:71:1913","0:74:1915","0:21:1938","0:34:1922","0:37:1925","0:40:1928","0:18:1919","0:19:1924","0:20:1927"],"is_stripped":false}}},"5:5551:31601":{"id":"5:5551:31601","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:25658":{"id":"5:5554:25658","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12930:25661"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:1925":{"id":"0:37:1925","crate_id":0,"name":"guard_on_success","span":{"filename":"src/lib.rs","begin":[388,0],"end":[393,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnSuccess","id":"0:74:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3199:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12903:30918":{"id":"2:12903:30918","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2736:134":{"id":"2:2736:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12928:26194":{"id":"2:12928:26194","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39968:26201","Self::is_ascii":"2:12927:25656"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39968:26201","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12829:30907":{"id":"2:12829:30907","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12038:1535","crate::ops::IndexMut":"2:3232:2315","str::slice_unchecked":"2:12828:30906"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2733-0:21:1938":{"id":"b:2:2733-0:21:1938","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2703:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2736:134","2:2737:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12907:30920":{"id":"2:12907:30920","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:11547"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:25659":{"id":"5:5555:25659","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12931:25662"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8990:6324-0:71:1913":{"id":"a:2:8990:6324-0:71:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8990:6324","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12929:25660":{"id":"2:12929:25660","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2738-0:68:1910":{"id":"b:2:2738-0:68:1910","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2697:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1910","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2741:134","2:2742:1616"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12822:26293":{"id":"2:12822:26293","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42021:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1910":{"id":"0:68:1910","crate_id":0,"name":"Always","span":{"filename":"src/lib.rs","begin":[213,0],"end":[213,18]},"visibility":"public","docs":"Always run on scope exit.\n\n“Always” run: on regular exit from a scope or on unwinding from a panic.\nCan not run on abort, process exit, and other catastrophic events where\ndestructors don’t run.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:2989:2259-0:68:1910","a:2:8990:6324-0:68:1910","a:2:2949:253-0:68:1910","a:2:8989:6115-0:68:1910","a:2:2932:243-0:68:1910","b:2:2420-0:68:1910","b:2:2727-0:68:1910","b:2:2423-0:68:1910","b:2:2733-0:68:1910","b:2:2738-0:68:1910","b:2:3566-0:68:1910","b:2:2723-0:68:1910","0:12","0:69"]}}},"2:12866:30909":{"id":"2:12866:30909","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12504:11547","str::split":"2:12857:26326","prim@char":"1:12032:451","`DoubleEndedIterator`":"2:7896:127","str::rsplit_terminator":"2:12869:30910"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43967:5326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9939:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:40:1928":{"id":"0:40:1928","crate_id":0,"name":"guard_on_unwind","span":{"filename":"src/lib.rs","begin":[425,0],"end":[430,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.\n\n## Examples\n\nFor performance reasons, or to emulate “only run guard on unwind” in\nno-std environments, we can also use the default guard and simply manually\ndefuse it at the end of scope like the following example. (The performance\nreason would be if the [`OnUnwind`]'s call to [std::thread::panicking()] is\nan issue.)\n\n```\nextern crate scopeguard;\n\nuse scopeguard::ScopeGuard;\n# fn main() {\n{\n    let guard = scopeguard::guard((), |_| {});\n\n    // rest of the code here\n\n    // we reached the end of scope without unwinding - defuse it\n    ScopeGuard::into_inner(guard);\n}\n# }\n```","links":{"std::thread::panicking()":"1:500:1130","`OnUnwind`":"0:71:1913"},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnUnwind","id":"0:71:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3199:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:1905":{"id":"0:13:1905","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[231,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12811:30903":{"id":"2:12811:30903","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[315,0],"end":[370,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3199:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:32:1947","0:33:1960"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:15:1905"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2423-0:71:1913":{"id":"b:2:2423-0:71:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:22997"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12832:5172":{"id":"2:12832:5172","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43887:5164","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:31598":{"id":"5:5536:31598","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2330","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2330","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:1919":{"id":"0:18:1919","crate_id":0,"name":"defer","span":{"filename":"src/lib.rs","begin":[257,0],"end":[261,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (always run).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer {\n    ($($t:tt)*) => { ... };\n}"}},"2:12872:26332":{"id":"2:12872:26332","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:11547","str::rsplitn":"2:12875:26334"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44021:5156","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12925:30924":{"id":"2:12925:30924","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12465:133","`FromStr`":"2:12464:6335"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12464:6335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12464:6335","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12863:26330":{"id":"2:12863:26330","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12504:11547","`DoubleEndedIterator`":"2:7896:127","prim@char":"1:12032:451","str::split":"2:12857:26326"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43935:5154","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:11545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[443,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3199:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3165:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:51:255","0:52:596"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8989:6115-0:68:1910":{"id":"a:2:8989:6115-0:68:1910","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8989:6115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1910","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12887:30911":{"id":"2:12887:30911","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12504:11547","`DoubleEndedIterator`":"2:7896:127","prim@char":"1:12032:451","str::matches":"2:12884:2230"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44139:5331","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:11545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:634":{"id":"0:62:634","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[470,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12890:30912":{"id":"2:12890:30912","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12504:11547","`DoubleEndedIterator`":"2:7896:127","prim@char":"1:12032:451","str::rmatch_indices":"2:12893:30913"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44067:5328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919:30922":{"id":"2:12919:30922","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:11547"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:31602":{"id":"5:5552:31602","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2330","`String`":"5:7534:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2330","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:717":{"id":"0:67:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[486,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9914:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9895:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12826:26295":{"id":"2:12826:26295","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12828:30906":{"id":"2:12828:30906","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12038:1535","str::slice_mut_unchecked":"2:12829:30907","crate::ops::Index":"2:3228:2314"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12913:26339":{"id":"2:12913:26339","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:11547"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:11545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2989:2259-0:68:1910":{"id":"a:2:2989:2259-0:68:1910","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2989:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1910","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2420-0:21:1938":{"id":"b:2:2420-0:21:1938","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2414:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2422:2218"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:76:717":{"id":"0:76:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9914:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9895:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8989:6115-0:74:1915":{"id":"a:2:8989:6115-0:74:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8989:6115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2932:243-0:74:1915":{"id":"a:2:2932:243-0:74:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12853:2449":{"id":"2:12853:2449","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42021:197","prim@char":"1:12032:451","self::pattern":"2:12504:11547"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:11545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12":{"id":"0:12","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,0],"end":[234,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1910","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:13:1905"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[435,0],"end":[441,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3199:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12819:26296":{"id":"2:12819:26296","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12049:1640"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12902:30917":{"id":"2:12902:30917","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12837:28112":{"id":"2:12837:28112","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44171:5332","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12931:25662":{"id":"2:12931:25662","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:6237":{"id":"5:5553:6237","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15:1905":{"id":"0:15:1905","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[239,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:1938":{"id":"0:21:1938","crate_id":0,"name":"ScopeGuard","span":{"filename":"src/lib.rs","begin":[304,0],"end":[313,1]},"visibility":"public","docs":"`ScopeGuard` is a scope guard that may own a protected value.\n\nIf you place a guard in a local variable, the closure can\nrun regardless how you leave the scope — through regular return or panic\n(except if panic or other code aborts; so as long as destructors run).\nIt is run only once.\n\nThe `S` parameter for [`Strategy`](trait.Strategy.html) determines if\nthe closure actually runs.\n\nThe guard's closure will be called with the held value in the destructor.\n\nThe `ScopeGuard` implements `Deref` so that you can access the inner value.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Always","id":"0:68:1910","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3199:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:28","a:2:2989:2259-0:21:1938","a:2:8990:6324-0:21:1938","a:2:8989:6115-0:21:1938","a:2:2932:243-0:21:1938","b:2:2420-0:21:1938","b:2:2727-0:21:1938","b:2:2423-0:21:1938","b:2:2733-0:21:1938","b:2:2738-0:21:1938","b:2:3566-0:21:1938","b:2:2723-0:21:1938","0:63","0:58","0:53","0:43","0:47"]}}},"2:12831:26319":{"id":"2:12831:26319","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12830:26318"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:30926":{"id":"2:12938:30926","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4738:30926"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44234:5232","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9939:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1910","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:70:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3566-0:21:1938":{"id":"b:2:3566-0:21:1938","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3564:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3568:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2723-0:71:1913":{"id":"b:2:2723-0:71:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2700:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2697:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2726:2443"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12834:4954":{"id":"2:12834:4954","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43903:3042","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12836:28904":{"id":"2:12836:28904","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12835:28913"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44200:5335","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:2277":{"id":"5:5537:2277","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:26197":{"id":"2:12932:26197","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:33726"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2949:253-0:68:1910":{"id":"a:2:2949:253-0:68:1910","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1910","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9939:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12818:339":{"id":"2:12818:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12819:26296","`u8`":"1:12049:1640"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12857:26326":{"id":"2:12857:26326","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12504:11547","`DoubleEndedIterator`":"2:7896:127","prim@char":"1:12032:451","str::split_whitespace":"2:12835:28913","str::rsplit":"2:12863:26330"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43917:5149","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3568:1631":{"id":"2:3568:1631","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39781:5223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8990:6324-0:21:1938":{"id":"a:2:8990:6324-0:21:1938","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8990:6324","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8990:6324","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8990:6324","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12840:26338":{"id":"2:12840:26338","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:11547"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17:1905":{"id":"0:17:1905","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[247,4],"end":[249,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2729:744":{"id":"2:2729:744","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:1947":{"id":"0:32:1947","crate_id":0,"name":"with_strategy","span":{"filename":"src/lib.rs","begin":[326,4],"end":[332,5]},"visibility":"public","docs":"Create a `ScopeGuard` that owns `v` (accessible through deref) and calls\n`dropfn` when its destructor runs.\n\nThe `Strategy` decides whether the scope guard's closure should run.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12860:26328":{"id":"2:12860:26328","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:11547"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12320:5151","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:31600":{"id":"5:5543:31600","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:31598","5:5537:2277","5:5540:31599","5:5543:31600","5:5551:31601","5:5552:31602","5:5553:6237","5:5554:25658","5:5555:25659"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2741:134":{"id":"2:2741:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32441:6342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12813:30904":{"id":"2:12813:30904","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12811:30903"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[465,0],"end":[478,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3199:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3189:1974","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:62:634"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12846:25712":{"id":"2:12846:25712","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:11547"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:11545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2727-0:68:1910":{"id":"b:2:2727-0:68:1910","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2700:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1910","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3566-0:74:1915":{"id":"b:2:3566-0:74:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3564:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3568:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2733-0:68:1910":{"id":"b:2:2733-0:68:1910","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2703:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1910","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2736:134","2:2737:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12810:30902":{"id":"2:12810:30902","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12816:26238":{"id":"2:12816:26238","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12059:11548"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10:1902":{"id":"0:10:1902","crate_id":0,"name":"Strategy","span":{"filename":"src/lib.rs","begin":[201,0],"end":[205,1]},"visibility":"public","docs":"Controls in which cases the associated code should be run","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:11:1905"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:16","0:12","0:14"]}}},"0:52:596":{"id":"0:52:596","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[450,4],"end":[452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12833:5344":{"id":"2:12833:5344","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43893:5324","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12934:26199":{"id":"2:12934:26199","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:33726"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12843:25710":{"id":"2:12843:25710","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:11547"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12910:23089":{"id":"2:12910:23089","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:11547"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2733-0:71:1913":{"id":"b:2:2733-0:71:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2703:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2736:134","2:2737:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:73:717":{"id":"0:73:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9914:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9895:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:598":{"id":"0:57:598","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[460,4],"end":[462,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2733-0:74:1915":{"id":"b:2:2733-0:74:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2703:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2736:134","2:2737:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2420-0:71:1913":{"id":"b:2:2420-0:71:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2414:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2422:2218"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2932:243-0:21:1938":{"id":"a:2:2932:243-0:21:1938","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2423-0:74:1915":{"id":"b:2:2423-0:74:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:22997"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2726:2443":{"id":"2:2726:2443","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2700:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8989:6115-0:21:1938":{"id":"a:2:8989:6115-0:21:1938","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8989:6115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8989:6115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8989:6115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[250,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:17:1905"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:51:255":{"id":"0:51:255","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[448,4],"end":[448,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:12900:30916":{"id":"2:12900:30916","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2420-0:74:1915":{"id":"b:2:2420-0:74:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2414:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2422:2218"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12830:26318":{"id":"2:12830:26318","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12831:26319"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12820:1985":{"id":"2:12820:1985","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42021:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2738-0:71:1913":{"id":"b:2:2738-0:71:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2697:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2741:134","2:2742:1616"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2723-0:74:1915":{"id":"b:2:2723-0:74:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2700:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2697:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2726:2443"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2422:2218":{"id":"2:2422:2218","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12817:30905":{"id":"2:12817:30905","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:25656":{"id":"2:12927:25656","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:1922":{"id":"0:34:1922","crate_id":0,"name":"guard","span":{"filename":"src/lib.rs","begin":[375,0],"end":[380,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"Always","id":"0:68:1910","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3199:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2932:243-0:68:1910":{"id":"a:2:2932:243-0:68:1910","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1910","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12849:2490":{"id":"2:12849:2490","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42021:197","prim@char":"1:12032:451","self::pattern":"2:12504:11547"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2425:22997":{"id":"2:2425:22997","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2727-0:71:1913":{"id":"b:2:2727-0:71:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2700:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2738-0:74:1915":{"id":"b:2:2738-0:74:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2697:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2741:134","2:2742:1616"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:74:1915":{"id":"0:74:1915","crate_id":0,"name":"OnSuccess","span":{"filename":"src/lib.rs","begin":[227,0],"end":[227,21]},"visibility":"public","docs":"Run on regular scope exit, when not unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:2989:2259-0:74:1915","a:2:8990:6324-0:74:1915","a:2:2949:253-0:74:1915","a:2:8989:6115-0:74:1915","a:2:2932:243-0:74:1915","b:2:2420-0:74:1915","b:2:2727-0:74:1915","b:2:2423-0:74:1915","b:2:2733-0:74:1915","b:2:2738-0:74:1915","b:2:3566-0:74:1915","b:2:2723-0:74:1915","0:16","0:75"]}}},"2:12809:2450":{"id":"2:12809:2450","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12838:30908":{"id":"2:12838:30908","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44181:5333","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12935:30925":{"id":"2:12935:30925","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4740:30925"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44216:5233","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12922:30923":{"id":"2:12922:30923","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:11547"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:11545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8989:6115-0:71:1913":{"id":"a:2:8989:6115-0:71:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8989:6115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:71:1913":{"id":"0:71:1913","crate_id":0,"name":"OnUnwind","span":{"filename":"src/lib.rs","begin":[220,0],"end":[220,20]},"visibility":"public","docs":"Run on scope exit through unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:2989:2259-0:71:1913","a:2:8990:6324-0:71:1913","a:2:2949:253-0:71:1913","a:2:8989:6115-0:71:1913","a:2:2932:243-0:71:1913","b:2:2420-0:71:1913","b:2:2727-0:71:1913","b:2:2423-0:71:1913","b:2:2733-0:71:1913","b:2:2738-0:71:1913","b:2:3566-0:71:1913","b:2:2723-0:71:1913","0:72","0:14"]}}},"2:12884:2230":{"id":"2:12884:2230","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12504:11547","`DoubleEndedIterator`":"2:7896:127","prim@char":"1:12032:451","str::rmatches":"2:12887:30911"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44121:5330","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2932:243-0:71:1913":{"id":"a:2:2932:243-0:71:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12875:26334":{"id":"2:12875:26334","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12032:451","str::splitn":"2:12872:26332","self::pattern":"2:12504:11547"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44039:5157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:11545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12807":{"id":"2:12807","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12808:873","2:12809:2450","2:12810:30902","2:12811:30903","2:12813:30904","2:12816:26238","2:12817:30905","2:12818:339","2:12819:26296","2:12820:1985","2:12822:26293","2:12824:26294","2:12826:26295","2:12828:30906","2:12829:30907","2:12830:26318","2:12831:26319","2:12832:5172","2:12833:5344","2:12834:4954","2:12835:28913","2:12836:28904","2:12837:28112","2:12838:30908","2:12839:28898","2:12840:26338","2:12843:25710","2:12846:25712","2:12849:2490","2:12853:2449","2:12857:26326","2:12860:26328","2:12863:26330","2:12866:30909","2:12869:30910","2:12872:26332","2:12875:26334","2:12878:26336","2:12881:26337","2:12884:2230","2:12887:30911","2:12890:30912","2:12893:30913","2:12896:30914","2:12898:30915","2:12900:30916","2:12902:30917","2:12903:30918","2:12904:30919","2:12907:30920","2:12910:23089","2:12913:26339","2:12916:30921","2:12919:30922","2:12922:30923","2:12925:30924","2:12927:25656","2:12928:26194","2:12929:25660","2:12930:25661","2:12931:25662","2:12932:26197","2:12933:26198","2:12934:26199","2:12935:30925","2:12937:6107","2:12938:30926"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2989:2259-0:74:1915":{"id":"a:2:2989:2259-0:74:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2989:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2989:2259-0:21:1938":{"id":"a:2:2989:2259-0:21:1938","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2989:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2989:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2989:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:33:1960":{"id":"0:33:1960","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[357,4],"end":[369,5]},"visibility":"public","docs":"“Defuse” the guard and extract the value without calling the closure.\n\n```\nextern crate scopeguard;\n\nuse scopeguard::{guard, ScopeGuard};\n\nfn conditional() -> bool { true }\n\nfn main() {\n    let mut guard = guard(Vec::new(), |mut v| v.clear());\n    guard.push(1);\n\n    if conditional() {\n        // a condition maybe makes us decide to\n        // “defuse” the guard and get back its inner parts\n        let value = ScopeGuard::into_inner(guard);\n    } else {\n        // guard still exists in this branch\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["guard",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12896:30914":{"id":"2:12896:30914","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12933:26198":{"id":"2:12933:26198","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:33726"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2423-0:68:1910":{"id":"b:2:2423-0:68:1910","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1910","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:22997"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2949:253-0:74:1915":{"id":"a:2:2949:253-0:74:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2723-0:68:1910":{"id":"b:2:2723-0:68:1910","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2700:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2697:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1910","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2726:2443"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2949:253-0:71:1913":{"id":"a:2:2949:253-0:71:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:20:1927":{"id":"0:20:1927","crate_id":0,"name":"defer_on_unwind","span":{"filename":"src/lib.rs","begin":[285,0],"end":[289,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on unwinding from panic).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_unwind {\n    ($($t:tt)*) => { ... };\n}"}},"2:12916:30921":{"id":"2:12916:30921","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:11547"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:11545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2989:2259-0:71:1913":{"id":"a:2:2989:2259-0:71:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2989:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3566-0:71:1913":{"id":"b:2:3566-0:71:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3564:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3568:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12937:6107":{"id":"2:12937:6107","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4741:6107"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44225:5091","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2742:1616":{"id":"2:2742:1616","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2738-0:21:1938":{"id":"b:2:2738-0:21:1938","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2697:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1938","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2741:134","2:2742:1616"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12835:28913":{"id":"2:12835:28913","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12836:28904"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44191:5334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12893:30913":{"id":"2:12893:30913","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12504:11547","`DoubleEndedIterator`":"2:7896:127","prim@char":"1:12032:451","str::match_indices":"2:12890:30912"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44085:5329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:11545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12808:873":{"id":"2:12808:873","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12032:451"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3566-0:68:1910":{"id":"b:2:3566-0:68:1910","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3564:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1910","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3568:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12869:30910":{"id":"2:12869:30910","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12504:11547","str::split":"2:12857:26326","prim@char":"1:12032:451","str::split_terminator":"2:12866:30909"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43985:5327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:11545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:15079:3923":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:15224:3958":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:3163:25165":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:10583:6204":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:8195:4727":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:44039:5157":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:1902:6169":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:15710:4107":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:43786:5245":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:13516:3538":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:13976:3623":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:44886:5362":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:22290:29574":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:46718:5403":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:14373:3705":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:4647:16016":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:46241:5383":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:3155:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6268:32897":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4908:16043":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:1650:13390":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:13365:3501":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:12930:18855":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:44171:5332":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:9598:30211":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:8551:5653":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:11981:5711":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:23316:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:6318:4453":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:6332:4269":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:46121:5378":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:42087:4840":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:12335:3370":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:3735:5517":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:4180:6281":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:5344:2796":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:2697:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:41920:28731":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:7534:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:10767:5571":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:13145:3456":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:40999:5265":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:2305:17917":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:4603:16012":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:15108:3931":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:45997:5373":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:7523:4652":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:15160:3940":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:2209:6186":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:533:2392":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:44348:5345":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:12758:3404":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:13663:3574":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:4516:16001":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:9813:18848":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:11497:3262":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:12659:18831":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"7:31:17747":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:8115:4718":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:12057:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:12290:3365":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:7915:5576":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:14455:3714":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"11:2124:4567":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:9467:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:8239:4619":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:4862:4317":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:2969:17919":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:2600:2871":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:4379:1978":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:13309:3489":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:1455:2454":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:6819:17163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:5859:16726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:7651:16236":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:2450:4249":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"11:102:32816":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:4637:23015":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:7554:4285":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"9:426:17768":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:7643:6204":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:4928:3075":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:1743:658":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:5240:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:3104:2313":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:4050:6262":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:13157:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:9943:18833":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"11:1051:4835":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:15842:3441":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:14194:3672":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:14950:3894":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:15294:3980":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:11619:5561":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:7848:5571":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:9914:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:5891:16729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:6961:17172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:41216:5126":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:44907:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:5121:4325":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:1040:4567":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:0:878":{"crate_id":6,"path":["libc"],"kind":"module"},"1:3482:2356":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:13182:5180":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:13407:3506":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:149:2782":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:357:2410":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:7559:4957":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:11001:3211":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:6901:4279":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:13504:3535":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:11727:3291":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4710:16021":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:6553:5117":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:4488:15998":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:8226:5625":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:5833:5107":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:1527:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:15013:3907":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:42374:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:7510:4955":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:48024:5465":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:2992:2261":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:14099:3655":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:13869:3607":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:11991:3335":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:11453:2920":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:12510:3387":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:4447:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:1639:13389":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6753:4518":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:30695:2283":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:2703:30434":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:4613:4310":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:5712:4340":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:12046:796":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:14385:3706":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:6415:4463":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:40490:5236":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:13787:3597":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:6610:2903":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:8315:6132":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:15301:3981":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:13108:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:10757:23001":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:2169:18908":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:3807:2454":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13254:3481":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:10988:3210":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:2144:2387":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:4719:4312":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"11:1007:4567":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:2519:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:7284:5282":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:6818:4531":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:40845:3007":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:13478:3530":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:11714:3289":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:3001:2292":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:46081:5376":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:3053:2306":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:6194:5547":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:844:6126":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:15117:3932":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:44660:11869":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:7895:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:41943:5280":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:13754:3589":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:6012:16738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:5004:2822":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:495:12481":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:8326:5636":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:47276:5429":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:12396:3377":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:7633:2892":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:10852:18861":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:5696:18778":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:6357:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:15244:3965":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:22346:2526":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:5662:2822":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:7481:28742":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:2785:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:5910:16731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:11779:3296":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:10979:5155":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:7580:2908":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:2586:2885":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:40384:5226":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:9954:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:2662:5506":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:2354:6189":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:681:3017":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:40768:5110":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11269:3209":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:7645:16235":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:10941:3202":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:10207:3040":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:8072:4713":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"11:299:5915":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:9952:2360":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:3461:4295":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:13162:3459":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:15235:3962":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:42019:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:31285:2995":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:6159:16749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:4830:16033":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:39656:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:39517:2327":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"18:574:2985":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:15003:3906":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:41238:5267":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:1536:4927":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:40464:5233":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:7102:18786":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11041:3189":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:4050:2796":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:7287:11772":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:4527:4307":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11932:3330":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:3415:2322":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:1514:13377":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:7901:5503":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:22757:28736":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:6741:13519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:22741:28815":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:10812:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"11:1566:17847":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:5905:4365":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:22644:5187":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:1558:13382":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:41209:5125":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:43893:5324":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:10968:23082":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:7556:17702":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:40777:5258":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:10868:5152":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:15287:3979":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"11:396:2790":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:8814:5656":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:10538:5511":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:46550:5398":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:6944:32893":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:6297:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:5969:16734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:8359:30214":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:22392:6470":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:14765:3836":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:39698:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:21628:6204":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:40788:5115":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:43903:3042":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:6798:17160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:1591:13385":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:9891:18830":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:5130:16067":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:830:2802":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"18:515:2982":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:10906:5153":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:256:3044":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:23854:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:10051:3174":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"0:19:1924":{"crate_id":0,"path":["scopeguard","defer_on_success"],"kind":"macro"},"11:1603:4843":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:40369:5091":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:8200:5265":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:8312:6128":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:41265:5130":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:22680:28733":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:4506:16000":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:5415:5535":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:9968:18851":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"9:450:17766":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:44936:4852":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:14843:3878":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"11:774:4824":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:11194:18881":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:3036:2302":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"14:202:11561":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:11290:2918":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:3600:4296":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:46382:5393":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:40483:5235":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:1821:5498":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:8991:23093":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:9094:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:16062:4196":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:15329:3988":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:32589:2264":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:14778:3843":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:4575:2856":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:1406:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:2911:2888":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:3930:6253":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:7657:16237":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:5431:5536":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:3232:2315":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:11516:5517":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:16004:4181":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:9950:2359":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:7613:4657":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:40820:5260":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:6456:4466":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:14312:3690":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"0:18:1919":{"crate_id":0,"path":["scopeguard","defer"],"kind":"macro"},"2:3095:2311":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:44297:11559":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:8321:11768":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:11621:2541":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:11168:18880":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:12052:1639":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"11:1142:4838":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:2694:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:14497:3721":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:43831:5318":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:7388:17543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:11027:3164":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:7474:4640":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:7128:5673":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:10097:5679":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:40736:5106":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"11:351:32813":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:6263:16779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:14087:3653":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"18:481:2983":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:4375:15988":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:6114:16746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:4197:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:939:4829":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:10986:5658":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:3491:25415":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:45927:5370":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:44648:11876":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:10406:2876":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:15356:3995":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:39616:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:14266:3683":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"15:394:17882":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"18:599:32910":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:2436:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:12166:3350":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:3500:6202":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:4584:16010":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:504:2387":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:500:1130":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"2:23161:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:8274:5519":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:4639:23017":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:4989:28855":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:5982:16736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:3040:2300":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:7651:4658":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"11:2369:4850":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:10840:23075":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:2428:4248":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:2154:4931":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:15747:4114":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:1094:3053":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:15374:3998":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:48307:5477":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:6047:16739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:6943:17171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:11158:5657":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:11439:3248":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:5921:16732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11632:3275":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:8146:5617":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"11:2443:2816":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:11313:5704":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:5798:4349":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:14426:3711":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:3048:2301":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:5939:4221":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:6596:5926":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:12474:3189":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"16:4949:4320":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:3581:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:4381:2824":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:11294:3237":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10775:3191":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:7371:17542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:12051:1638":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:6879:4536":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:10067:3036":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:11449:3120":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:3251:4847":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:4038:6259":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:12077:3340":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:2284:17891":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:41232:5127":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:10163:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:527:12484":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:3687:2796":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:2881:4267":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:11657:3279":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:2943:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4428:15991":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:2997:2263":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:7503:4283":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:11052:3190":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:41009:5122":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:15133:3936":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:8330:6312":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:1556:4845":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:3196:32014":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:3225:4844":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:6041:18781":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:12255:3363":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:2618:4256":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11215:3229":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:5816:4354":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:2330:2526":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:12536:3388":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:21314:30264":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:4808:16030":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:43492:5305":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:48086:5466":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:12115:3346":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:21458:6392":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:15680:4102":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:637:5488":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"18:113:22978":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:7867:2329":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:7003:2848":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:8978:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:10391:2871":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:46528:5397":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:3087:2309":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:7582:4654":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:46749:5404":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:3564:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:5068:16060":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:42747:2358":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:7467:4949":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:3670:6248":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:3044:2299":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:2654:6204":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:4530:2369":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"11:2536:32823":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:475:12478":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:4968:16049":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:3425:5628":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:46976:5423":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:4625:6257":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:13095:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:11604:3272":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"5:5154:2830":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"11:434:32825":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:2321:4237":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:10247:6344":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"15:327:17876":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:39742:2317":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:11816:2924":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:10726:32900":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:6204:4416":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"13:0:2116":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:2944:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:43027:4690":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:10940:5569":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:1966:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:15062:3918":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:1286:4835":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:4344:4303":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:22067:6204":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"9:330:17821":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:3065:2304":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:3797:4298":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:5152:16070":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"0:34:1922":{"crate_id":0,"path":["scopeguard","guard"],"kind":"function"},"17:13395:3505":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:32477:5215":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:7067:4564":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:5974:16735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:15087:3926":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:6913:17168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4738:6251":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:4986:4321":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:7896:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:15980:4176":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"11:2554:32818":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:40810:5259":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:10941:5154":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:40563:5242":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:39968:26201":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:7694:4287":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"3:0:478":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:15192:3950":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:4364:15987":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:12049:1640":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:7360:32895":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:4906:6309":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:22819:6250":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:44319:5337":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:3016:2293":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:21300:30262":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:4129:24746":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:41790:5136":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:22793:5206":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:2975:30429":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:40759:5257":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:2031:3056":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:7365:17541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:12273:3408":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"11:1160:4839":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:12031:1032":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:43720:5308":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:40610:2857":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:32495:2369":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:10473:2913":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"11:1917:4846":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:7450:2401":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:7136:24752":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:4914:16044":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:46452:5395":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:4585:4309":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:2474:5919":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:10016:18828":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:5446:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:4700:6311":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"18:624:32909":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:4252:4821":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:44216:5233":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"11:710:4822":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:5051:5529":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:3060:2303":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:542:12486":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:6811:6386":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:6530:2796":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"9:393:17767":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:14934:3891":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:7015:4557":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:4835:4316":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:46051:5375":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:22703:5194":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:7768:4276":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:12828:3408":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:8097:4716":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:5403:3173":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:13633:3565":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:11144:5656":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:44636:11871":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:5673:4274":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:5987:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:21920:6394":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:15212:3957":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:22200:6475":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:6559:30243":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"18:736:22987":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:15279:3976":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:1760:5496":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:640:5490":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:1538:2454":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12230:3354":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:44724:11885":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:909:4841":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"0:21:1938":{"crate_id":0,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"6:6898:17167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:46498:5396":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:5946:5109":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11507:3263":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"11:1891:2816":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:44085:5329":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:9948:2358":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:2205:1961":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:16016:4183":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:4212:2822":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:7862:4675":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:13273:3482":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:13121:3455":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11369:3243":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:21256:30257":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:44191:5334":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:15589:4081":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:12584:3392":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:9048:23085":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"11:430:32829":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:3673:2816":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:3388:2318":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:8190:5248":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:2256:30848":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:3032:4291":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:23285:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:2722:4260":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:7858:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:14235:3677":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"4:0:2117":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:13989:3624":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:12054:848":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:945:4831":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:6425:4464":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:7616:16231":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:10374:2870":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:10896:3199":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:41956:5519":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:580:12492":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:7692:17730":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:15961:3469":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:5052:16059":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4870:16038":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:11382:24761":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:1562:4846":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:45907:5369":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:14878:3879":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:3184:4821":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:951:4832":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:14969:3895":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:10792:5572":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:1541:2816":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:3070:2305":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:7854:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:12366:18975":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:43070:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:15612:4082":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:13935:3616":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:3065:3078":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"15:0:2124":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:14399:3707":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:6927:17169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:30711:2367":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:12972:3421":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:8169:6203":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:9743:2378":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:3199:5507":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:4915:6310":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:4388:15989":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:3165:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:42649:5144":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:8011:6236":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:6401:4271":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:4595:16011":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:39795:5224":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:5955:16691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:7422:4948":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"14:165:17852":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:3584:3067":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:8385:6320":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:43092:2368":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:2670:4258":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"11:2562:32819":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:7523:2831":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:13948:3618":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6352:4456":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:12042:691":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:40745:5254":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:6017:18780":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:9021:5670":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:1387:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"11:1883:4821":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:5322:4326":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:1270:4567":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13218:3474":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:6868:17165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:7338:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:7026:2906":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:3655:3083":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:5897:16730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"18:707:3022":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:21456:6204":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:9274:2612":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:2826:4961":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:11476:3255":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:12387:18976":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:6718:6312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:2569:4948":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:40829:5118":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:3196:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:23130:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:13130:29998":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:44833:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:3480:2326":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:11065:3216":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:12009:3189":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:12459:3209":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:48345:5479":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:43967:5326":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:44843:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:7540:5708":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:44652:11874":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4578:16009":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:15184:3949":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:7269:32896":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:4724:16022":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:47632:5461":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"19:0:1129":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:15200:3951":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:6243:4438":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:15733:4111":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:4182:2822":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"9:237:5299":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:12048:793":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:4847:16035":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:1315:4839":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:880:4825":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:3191:4845":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"11:837:4826":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:40530:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:8181:4290":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:6248:16778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:786:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:9651:18844":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:12052:3338":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"11:856:4829":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:1685:2796":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:42079:4821":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:1203:3055":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:3428:28874":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:22695:5193":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:7702:17731":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:15267:3973":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:44894:5364":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:44209:5171":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:2644:4257":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:42335:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:12345:3372":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:7738:6159":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:8237:6246":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:12014:23095":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:5117:16065":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:6146:2881":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:11113:3219":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:12053:1636":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:12153:3349":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:4610:16013":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:10315:3046":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:5009:16054":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"18:719:3026":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:44502:5350":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:43812:5316":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:2426:2134":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:5082:5529":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:47166:5426":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:6226:4431":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:2488:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:11395:3244":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:12320:5151":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:5388:11535":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:8872:5539":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:1879:2544":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12180:3351":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:47242:5428":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:11817:18950":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:14359:3704":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:7610:16230":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10569:32901":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:16049:4190":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:2202:5502":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:6120:16747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:7006:4554":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:46019:5374":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:1495:4841":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:5992:16737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:3343:2835":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"10:0:2120":{"crate_id":10,"path":["adler"],"kind":"module"},"2:42207:4821":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"11:2469:2835":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:8137:3031":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:4939:1099":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:8989:6115":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12310:3367":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:8134:4721":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:10432:32899":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12572:3391":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:40471:11611":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:1969:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:14413:3710":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"11:2326:4833":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:4473:15996":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:41998:5139":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:1528:13379":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:13922:3615":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:1516:4823":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:11355:5558":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:5829:16662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:4774:4314":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:47212:5427":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:5650:2833":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:41223:5266":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4480:15997":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:39676:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:21957:30260":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:21268:30257":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:9102:5142":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:3966:6254":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"11:2403:4840":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:14282:3684":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:8866:2454":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:10829:5151":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:8562:5654":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"18:614:32911":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:7316:31880":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:10422:3185":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:13448:3518":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:4167:6280":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:8292:5632":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:6837:17164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"11:673:4821":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:15566:4068":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:6162:2897":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:12701:3401":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:1688:2822":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:9603:29680":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:22377:6204":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"16:7462:4639":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:5961:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:14989:3903":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:40869:5262":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:8453:5299":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:15345:3991":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:6711:17159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:8050:4712":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:11256:3235":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:13285:3485":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:11243:3234":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:3081:2308":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:4964:6316":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:3228:2314":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:8802:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:30781:28816":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:9958:2362":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:7284:4946":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:7276:2454":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:281:2330":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:11307:3238":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11126:3220":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:43821:5317":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:5877:2816":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:4742:6270":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:48170:5468":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:4841:16034":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:12324:3368":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:9034:5673":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:40497:11612":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:6721:18784":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:22559:5185":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:12464:6335":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:2089:2546":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:11476:5516":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:8959:5662":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:2062:4930":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:42095:2454":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:14822:3873":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:1131:5918":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:6889:17166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:9939:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:5928:16733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:15027:3908":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:1115:30491":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:3160:28467":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:5757:2822":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:563:12489":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"18:644:2985":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:21509:6204":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:41979:5137":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:11340:5557":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:40620:5243":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:11701:3286":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:8904:6360":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:4745:16023":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:3403:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:1501:13375":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:5753:5544":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:9944:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:2368:6193":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:13297:3486":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"0:37:1925":{"crate_id":0,"path":["scopeguard","guard_on_success"],"kind":"function"},"1:5825:2891":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:5381:5530":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:13909:3613":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:8990:6324":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:511:3051":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:23254:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:3936:6252":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:0:533":{"crate_id":2,"path":["core"],"kind":"module"},"2:10203:5146":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:4231:5520":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:30655:1898":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:23409:5211":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:7599:2910":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:9099:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:4584:2370":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:12244:3359":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:39632:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:12784:3405":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:48132:5467":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:4998:16052":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:46772:5405":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:14633:3730":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:8005:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11155:3223":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:46671:5402":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:9730:18845":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:7679:16239":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:12301:3366":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:7660:4659":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:7598:16228":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:48330:5478":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:12033:1656":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:42296:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:7644:2412":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:15546:4065":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:8281:4734":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:12285:5170":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:7618:2835":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:10813:32906":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:46620:5401":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:22628:29686":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:595:3052":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:22426:6469":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:7380:25472":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:4860:16037":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:9104:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:2949:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:47426:5430":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:7821:11769":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:10803:3192":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:12035:1149":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"11:1923:4847":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:2932:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:4239:11588":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:4798:2889":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:4776:16026":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:5963:4371":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:15689:4104":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:11576:3270":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:7346:4947":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:6804:17161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:0:2126":{"crate_id":17,"path":["object"],"kind":"module"},"16:6361:4457":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:10925:18863":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:11612:5561":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:3753:4930":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:12380:3375":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:11388:24759":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:4641:4311":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:3239:5509":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:6842:2833":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"11:1903:4844":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:6666:13334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:1664:13391":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:5830:4355":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:30689:2282":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"18:538:2992":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:10780:5696":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:3398:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:46222:5382":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:48235:5471":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:2339:4239":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:14057:3634":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:12264:3364":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:3199:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"11:2542:29861":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:790:2799":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:5634:4330":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:4461:15995":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:15125:3934":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"9:0:2119":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"14:40:3456":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:5500:5537":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:9186:27650":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:5760:18779":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:4042:6260":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"13:226:32830":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:13809:3598":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:23223:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:3280:5512":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:5027:5100":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:4383:5522":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7722:4278":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:13347:3493":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:6960:4543":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:2983:30430":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13436:3515":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:4806:4315":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:16076:4199":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:30426:6249":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:9559:18829":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"18:491:2984":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6742:4517":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:16180:3491":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"9:52:17784":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:8167:4725":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:42768:2360":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:2939:2255":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:40717:5253":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:10761:4840":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:7931:4929":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:11547:5160":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"15:306:17872":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:4889:4318":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:48208:5469":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:1521:13378":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:4020:2816":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:7817:11770":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:6189:4414":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:15868:4132":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:10657:3189":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:7568:4286":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:15253:3966":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:3049:17920":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"0:0:2001":{"crate_id":0,"path":["scopeguard"],"kind":"module"},"17:12953:3418":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:11743:3293":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:4740:6268":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:9069:6032":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"11:1896:2835":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:12614:18852":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:12029:11836":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:5384:18777":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11978:3334":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:6934:17170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:5363:4327":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:46352:5392":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"0:68:1910":{"crate_id":0,"path":["scopeguard","Always"],"kind":"enum"},"16:5743:4345":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"0:40:1928":{"crate_id":0,"path":["scopeguard","guard_on_unwind"],"kind":"function"},"1:8936:6361":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:12047:797":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:6346:4455":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:5885:16728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:12045:5162":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:10520:32905":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:48255:5473":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:7391:18787":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:2691:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:10962:3207":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:15367:3996":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:5867:16727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:43052:2367":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:3166:25159":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:16032:4188":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:42070:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:2370:6194":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:7492:4648":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:7923:5577":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:10618:32904":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:11459:3250":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:40797:5116":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:41773:5134":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:31257:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:12735:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:7544:4653":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:10355:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:47884:5463":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:30887:28813":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:12037:1502":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:2380:6199":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:15943:3459":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:16109:4206":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:43277:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:15631:4087":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:10510:3186":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:1550:4844":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:621:5487":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:11321:3189":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:48383:5481":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:8891:5661":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:13707:3583":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:6644:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:6279:4451":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:2788:4263":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:1811:1186":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:4336:5095":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:7639:16234":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:7855:5572":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:22332:6478":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:15527:4059":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:2622:5505":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:22278:6477":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:12872:3410":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:7754:5569":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:5941:16690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"18:727:3029":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:22069:6390":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:2744:4261":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:4411:2822":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:13695:3581":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:3028:2295":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:4893:16041":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:42164:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:14896:3884":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:3189:1974":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:9895:232":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:40707:5251":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:44477:5349":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:1734:13398":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:3278:5511":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:723:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:42997:2367":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:44525:5358":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:12445:3385":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"0:71:1913":{"crate_id":0,"path":["scopeguard","OnUnwind"],"kind":"enum"},"17:9918:18850":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:7306:2808":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:9956:2361":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:8157:5515":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:6086:16743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:40577:6173":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:2197:3060":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:5308:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:10578:2397":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:6156:4409":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:11062:5159":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:45973:5372":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:15855:3455":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"7:0:1685":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:3764:4297":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:3032:2298":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:12103:3345":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:6983:27849":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:14346:3703":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"11:1025:4833":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:42610:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:5146:16069":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:44632:11868":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:11537:5518":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"11:364:2788":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:2320:635":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:4535:16004":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:46404:5394":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:40547:28742":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:48226:5470":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11590:3271":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:2942:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:41257:5128":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:4451:5096":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:44512:5354":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:7633:16233":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:2048:4929":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:6893:4538":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:1969:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:2352:2517":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:2994:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"5:1789:2835":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:4449:15994":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13083:3440":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:489:12480":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:6059:16740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:12032:451":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:42987:29612":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:11412:3246":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:7497:4952":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:15645:4089":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:40436:5231":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:7041:4558":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"18:531:2989":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:3443:2325":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:10822:5515":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:9790:18847":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:3738:4929":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:40676:5248":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:47962:5464":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:1604:13387":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"11:2383:4821":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:6467:4467":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:3443:5514":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:7054:4561":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:654:12541":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:261:3045":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:40:2792":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"14:7:4812":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:12596:3393":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:9196:27662":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:5085:16062":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:11215:23086":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:4783:16027":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:4865:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:4351:15986":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:5128:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:6896:2905":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:482:2883":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:7318:4598":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:3830:4299":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:836:4821":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:10738:5690":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:46852:5406":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:6531:4476":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:22263:6204":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:7375:2454":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:12036:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"0:10:1902":{"crate_id":0,"path":["scopeguard","Strategy"],"kind":"trait"},"17:11549:3268":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:6915:4280":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:7668:16238":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:9971:5277":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:11197:5552":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:21302:30252":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:7534:4284":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:41023:5123":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"11:2352:4835":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:40426:5230":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:11370:5560":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:15037:3909":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:13322:3491":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:7548:4956":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:1718:13397":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:582:2995":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"10:36:32810":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:43760:5313":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:15659:4096":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:2525:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:13026:3428":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:11485:3258":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:401:3047":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"18:690:3019":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:2574:4254":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:13882:3303":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:2236:31903":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:45951:5371":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:4305:5094":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:501:12482":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:11234:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"16:2864:4266":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:11345:3242":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"0:20:1927":{"crate_id":0,"path":["scopeguard","defer_on_unwind"],"kind":"macro"},"11:2151:4835":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:22239:6476":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:2954:1896":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:6682:12362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:32441:6342":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:928:6126":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:2414:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"14:31:4812":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:119:12161":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:1486:4825":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:48281:5475":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:14296:3686":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:6569:4277":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:11998:25476":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"11:687:4840":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:42147:11828":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:9479:2912":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:7597:32892":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"11:1087:32824":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:3732:5516":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:40698:5250":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"11:875:4831":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"18:609:3003":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:14921:3886":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:7296:2816":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:4366:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13684:3578":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:11048:5158":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:8207:3042":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:12898:18854":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:6871:2847":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:46182:5380":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:23347:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:4151:6278":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:16170:3486":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:4549:16006":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:6687:4504":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:43660:5306":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:7621:18788":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:590:2996":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:2655:11621":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:3594:4821":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:7843:5570":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:6228:15902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"12:0:2122":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:893:2816":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:22786:30244":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:1477:4824":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"18:755:3035":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:96:22977":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:483:12479":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13724:3586":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:13383:3502":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:6070:2893":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:7513:4651":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:10293:3042":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:42223:2454":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:1537:13380":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:5866:4362":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:13491:3534":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:4755:16024":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:5625:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:435:3050":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:6222:16777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:48292:5476":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:8493:6334":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:44440:5174":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:10198:6209":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:8154:4722":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:1024:2796":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:10137:3038":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:2907:4268":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:43861:5320":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:5780:5545":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:11469:3252":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:10095:5680":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:12029:3337":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:4491:6285":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:40859:5120":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:42754:2357":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:3409:2320":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:47006:5424":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:4557:4308":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:12418:3382":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:14509:3728":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:43917:5149":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:5395:5534":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:30723:28764":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:15535:4060":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11690:3285":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:13348:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:11645:3276":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:5571:6341":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:44067:5328":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:8220:5332":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:4764:16025":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:5746:5541":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:11426:3247":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:11034:5157":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:12509:5142":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:5004:16053":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:3193:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:10802:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"11:1676:1938":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:16146:4215":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:13742:3587":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:12518:3022":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:3217:4846":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:4773:3073":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:39781:5223":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:2380:4246":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:5111:16064":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:43043:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"9:357:17781":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:1505:4822":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:1691:13394":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:1507:13376":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10035:3173":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:4159:6279":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:6764:13504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:6540:5549":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:7434:6125":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:11536:3267":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:16123:4210":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:46930:5422":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:11051:2917":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:4529:16003":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10471:32903":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:3915:4301":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:4824:16032":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:12797:3407":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:4569:6302":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:14786:3844":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:4777:717":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:15337:3990":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:6136:32078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:4434:15992":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:21246:2995":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:5123:16066":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:22292:2526":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:1758:5495":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"11:2548:32822":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:5392:11536":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:3315:4294":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:2810:4264":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:13648:3569":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:22:731":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:8984:2391":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:10953:5537":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:9624:18827":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:6513:4468":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:4440:15993":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:22506:5184":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:44644:11872":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:9860:18849":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:212:2794":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:1054:4833":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:548:12487":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:21511:6388":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:1902:2543":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:14001:3625":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"8:0:2118":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:555:12488":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:10881:18862":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:10321:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:5971:2898":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:7181:2462":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:21517:6391":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:7351:28910":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:11399:3245":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:6117:2822":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:11605:28099":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:6844:4532":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:2518:5504":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:14170:3669":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:14208:3673":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:692:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:15519:4056":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:41247:2865":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:13676:3576":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:11170:23101":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:11958:3333":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:46574:5399":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"9:177:17834":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:7949:2328":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:15903:4162":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:11523:3265":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:42571:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:13896:3612":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:1774:634":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:1063:4835":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:10950:3204":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"18:0:2127":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:6583:4480":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11666:3280":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:46152:5379":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:15557:4066":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:3325:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:3980:6255":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:6376:18782":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:8973:5663":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:5574:4270":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:12220:3068":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:39774:2319":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"11:123:2786":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:42104:5282":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:40647:5245":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:22421:6471":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:5088:4324":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:12202:18974":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:12600:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:5435:4328":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:922:4826":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:40727:5103":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:15:2233":{"crate_id":2,"path":["core","write"],"kind":"macro"},"18:671:3016":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:23099:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"11:0:2121":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:15101:3929":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:44021:5156":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"11:2140:4833":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"11:800:2816":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:2526:4252":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5588:4273":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"11:328:32811":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:4807:11605":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:6691:17157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:40375:5225":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"11:1066:17846":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4523:16002":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:10559:3187":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:44234:5232":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:11014:3213":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13056:3432":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:14156:3667":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:44949:5368":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:4821:6267":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:43841:5319":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:44491:11560":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:12718:18853":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:363:2411":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:12432:3384":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:4878:16039":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:6083:17890":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:1703:6275":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13202:3470":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:4989:16051":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:3251:3064":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:3818:2835":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:15493:4047":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"7:78:17754":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:42156:2402":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:43268:5295":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:10155:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:903:2835":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"5:1301:4833":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:40689:5249":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:2696:4259":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:40516:5240":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"11:742:4823":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:12059:11548":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:42491:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"18:564:2994":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:46259:5384":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:23068:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:3099:2312":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:16160:4216":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"16:0:2125":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:4955:16048":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:13299:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:43015:29605":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:1151:30496":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:21915:6204":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:12044:798":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:47774:5462":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:7436:4382":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:7884:18790":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:2228:3063":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:11020:5156":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:2700:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:13403:6127":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:7668:2400":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4676:16018":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:4566:16008":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:8281:6282":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:7838:3121":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:4932:16046":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:12921:3370":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:3994:6257":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"11:1910:4845":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:44712:5359":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:15384:4003":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:3075:2307":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:42452:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:903:4821":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:21637:6389":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:23378:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:32502:5217":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:10737:4821":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:12529:11544":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:2417:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:32481:4619":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:4947:16047":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:1534:4821":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:12039:1621":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:23192:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:6813:17162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:14662:3750":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:6781:13502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:11034:2915":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:43887:5164":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:15725:4108":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"18:80:22976":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:2946:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:4455:15836":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:44413:5348":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"14:0:2123":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:42413:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13097:3441":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:12746:3403":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:44200:5335":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:13182:3469":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:4666:16017":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:6564:2863":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:2944:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:7622:16232":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:9109:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:4543:16005":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:4185:5093":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:4921:4319":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:8006:5579":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:1496:13374":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:43711:5307":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"11:2423:2454":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:12575:11553":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:9759:18846":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:48246:5472":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"11:1107:4837":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:7634:2839":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:2703:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:4462:4305":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:40640:5244":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:40448:5232":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:6545:4478":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:1682:13393":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5033:16057":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11088:3217":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:7090:4566":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:4496:15999":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:5727:4343":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:10172:3039":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:7732:6113":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"11:1887:2454":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:5015:16055":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:9474:5570":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:12524:11545":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:2972:2514":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:11226:3231":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:557:2394":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:40535:5241":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:4744:6271":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5044:16058":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:12043:693":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:5807:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:5992:2830":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:6968:18785":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:2183:30852":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:44851:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"14:215:4817":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:886:2804":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:8205:18791":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:4497:4306":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:14021:3628":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"18:521:22989":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:6128:16748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:10430:5655":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:10155:5681":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:44664:11870":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:11178:11884":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"6:4556:16007":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:13310:2881":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:914:4822":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:11767:3295":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:7792:18789":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"18:636:3009":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"11:883:4832":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:40456:5091":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:6169:16750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4686:16019":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:44668:11884":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:4631:2371":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:62:12107":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:5023:16056":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:2483:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4977:16050":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:48266:5474":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:43511:5147":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4628:16015":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:10593:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:12356:3373":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:11307:5553":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:5017:4322":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:6351:6480":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:44656:11875":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:10308:2867":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:15432:4040":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:14887:3883":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:2832:4265":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6261:4448":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:15177:3948":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:8858:5660":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"11:2231:3255":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:44181:5333":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:4703:6284":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:4922:16045":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:9678:18834":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:8300:5625":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:6929:4540":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:7865:5573":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:12055:1695":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:21639:5183":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:8232:5627":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:12850:3068":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:6485:4272":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:6249:2898":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:2548:4253":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:44545:5175":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:1913:13562":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:1632:13388":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:44924:5367":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:3323:6233":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:13463:3524":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:11593:5705":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:4800:16029":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:7342:32894":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:12486:3386":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"16:7736:4661":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:5612:4275":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:13334:3492":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:8213:5149":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"5:3607:4840":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:4444:2824":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:2504:4251":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:2940:2256":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:10532:5507":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:5995:4227":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:10608:3188":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"11:787:4825":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:7878:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:266:2796":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:12140:3348":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:7529:3052":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:16134:4212":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:8850:4821":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:3888:4300":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:12003:6114":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:12684:3141":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:8545:4821":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:10831:23098":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:7717:6112":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:2596:4255":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:10762:27657":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:15990:4177":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:7663:2398":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:1781:2279":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:12410:3380":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:15049:3912":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:1545:2835":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:2332:2527":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:4469:6284":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:7267:4928":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"11:1582:4842":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:46596:5400":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:12038:1535":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:8403:5645":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:2986:2258":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"9:486:17765":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:6560:2785":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"5:2973:30885":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:43289:5299":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:5639:5538":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:22155:6474":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:12246:5168":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:12191:3352":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:1072:4839":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"18:507:2985":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:44687:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"18:660:3010":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:6686:2796":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:14485:3370":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:4698:16020":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:42257:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:14145:3665":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:0:1527":{"crate_id":1,"path":["std"],"kind":"module"},"2:46103:5377":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:10337:3175":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:14470:3718":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:507:12483":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:2979:30428":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:3230:32013":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:44365:5346":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:10974:3209":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:1819:2612":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:4854:16036":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:14324:3692":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:5104:16063":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:14757:3833":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:4745:4313":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:4884:16040":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"14:160:4812":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:867:4824":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:14251:3679":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:6369:5111":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:3232:4236":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"11:700:2454":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:6604:2454":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:10076:5497":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:6959:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:3510:6225":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:9026:5671":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:1576:13384":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:6543:6355":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"18:766:22988":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:849:4840":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:9416:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:15507:4053":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:40396:28739":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:16098:4205":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:1697:13395":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:5068:854":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:16087:4204":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:10102:3037":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:9147:5675":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:533:12485":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:43875:5323":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:2989:2259":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:43252:5292":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"14:221:4819":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:6700:17158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:2200:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:918:4823":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:43307:5304":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:4053:4302":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:42761:2359":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:5568:6340":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:7573:3031":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:8001:5578":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:48422:5482":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:32488:5216":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:1570:13383":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:10338:5930":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:8920:6359":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:4417:4304":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:2707:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:1873:5499":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:12091:3344":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:42215:4840":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:4902:16042":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:6013:5923":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:1710:13396":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12548:3389":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:12056:1245":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:6484:2816":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:21283:30255":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"11:832:4841":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:1546:13381":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:40412:5229":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4814:16031":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:9946:2357":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:8286:6283":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"18:652:2985":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:10716:3190":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:5648:4334":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:634:4922":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:6658:12529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:44121:5330":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:8842:5658":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"9:507:4908":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:1596:13386":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:43749:5312":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:9014:5669":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:3091:2310":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:4173:5092":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:42530:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:22720:28814":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:3394:2822":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:6079:16742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:8535:5524":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"11:811:2835":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:6386:4460":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:21530:5183":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:43985:5327":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:2406:4247":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:15311:3984":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:4092:4840":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:42137:5284":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:11580:5161":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:12045:795":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:4401:15990":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:13961:3620":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:11755:3294":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:9164:5676":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"10:44:4853":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:48360:5480":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:6466:2902":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:4789:16028":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:6499:4289":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:9128:5552":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:8352:5523":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:12050:1637":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:4028:6258":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:1439:4840":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:3006:2297":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:11945:3331":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:12030:401":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:2774:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:14122:3664":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:43935:5154":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:10786:5149":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:14181:3670":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:3147:2323":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:588:12493":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:5982:4378":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:39556:2324":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:8308:5634":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:4456:5097":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:21285:30266":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:5075:16061":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:13235:3476":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11800:3298":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:2766:4262":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:44334:5342":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:536:4225":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:43260:5294":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:39603:2316":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:6696:4505":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:10915:3201":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:645:6109":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:2472:4250":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:3022:2296":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:3366:5267":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:4220:11520":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:46204:5381":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:44225:5091":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:42232:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:44640:11873":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:5632:2898":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:13856:3604":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:14041:3629":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:22612:5186":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"15:288:17871":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:22807:5207":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:8796:5655":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:3460:3066":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:12560:3390":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:5419:3174":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:3178:1900":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:15480:4041":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12999:3422":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:5661:4339":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:1796:5497":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:3011:2294":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:40667:5247":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:11141:3221":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:43739:5311":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11617:3273":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:43507:28917":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"14:187:17859":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:14904:3885":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:14439:3712":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:43299:5303":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:6861:2845":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:4:1112":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:11045:2916":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:6100:16744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:43799:5315":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:7604:16229":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:15671:4098":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:6430:5548":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:4616:16014":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13832:3603":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:123:12162":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:1424:4821":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:15321:3987":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:13584:3540":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:6071:16741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"11:2304:4567":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:596:12494":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:22668:5192":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:8476:5648":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:3241:5510":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:4635:23013":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:1674:13392":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:46306:5385":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:7689:2397":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:7828:4671":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"13:110:32876":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:7782:4663":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:12504:11547":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:9411:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:3201:5508":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:11563:3269":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:4968:419":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:574:12491":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:10785:32907":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:12127:3347":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:7708:4288":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:44139:5331":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:859:2454":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:8828:5657":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:41750:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:14698:3781":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:10242:3041":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:4101:2822":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:5140:16068":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:4311:5521":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:6792:4530":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:7330:2454":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:4520:2855":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:5049:4323":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:10535:5509":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:3837:5518":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:39720:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:13419:3507":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:14221:3674":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:6107:16745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:10944:4905":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:10667:32902":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:7028:2851":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:6426:5266":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:1909:704":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:2359:4245":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"18:699:3020":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:7367:2454":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11675:3281":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:588:6106":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:569:12490":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:9896:2356":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:12269:5169":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:26256:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:1567:4847":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:3988:6256":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:41836:29606":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:8991:1980":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:47088:5425":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"0:74:1915":{"crate_id":0,"path":["scopeguard","OnSuccess"],"kind":"enum"},"2:4604:2265":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:7906:5575":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:7403:11764":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:43729:5310":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:12209:5165":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13765:3590":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:21945:5182":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:7343:12439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:2933:17918":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:6600:18783":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:1893:29608":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:41807:6247":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}