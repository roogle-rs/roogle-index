{"root":"0:0:1817","crate_version":"1.1.0","includes_private":false,"index":{"0:76:1727":{"id":"0:76:1727","crate_id":0,"name":"OnSuccess","span":{"filename":"src/lib.rs","begin":[227,0],"end":[227,21]},"visibility":"public","docs":"Run on regular scope exit, when not unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:7786:5781-0:76:1727","a:2:7787:5780-0:76:1727","a:2:2651:217-0:76:1727","a:2:2665:225-0:76:1727","a:2:2715:2059-0:76:1727","b:2:2237-0:76:1727","b:2:3306-0:76:1727","b:2:2506-0:76:1727","b:2:2510-0:76:1727","b:2:2234-0:76:1727","b:2:2516-0:76:1727","b:2:2521-0:76:1727","0:77","0:18"]}},"b:2:2510-0:76:1727":{"id":"b:2:2510-0:76:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2512:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:15:1717":{"id":"0:15:1717","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[231,4],"end":[231,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[241,0],"end":[244,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:12:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:19:1717"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2519:127":{"id":"2:2519:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"b:2:2506-0:23:1750":{"id":"b:2:2506-0:23:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2509:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2237-0:76:1727":{"id":"b:2:2237-0:76:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2055","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:21821"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:75:656":{"id":"0:75:656","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8609:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8598:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3306-0:23:1750":{"id":"b:2:3306-0:23:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2055","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3304:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:3308:1451"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7787:5780-0:70:1722":{"id":"a:2:7787:5780-0:70:1722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7787:5780","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11490:27092":{"id":"2:11490:27092","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11491:27093"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11532:27105":{"id":"2:11532:27105","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12335:409","str::rsplitn":"2:11535:27107","self::pattern":"2:11169:10962"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50213:4790","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11469:2398":{"id":"2:11469:2398","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11492:4805":{"id":"2:11492:4805","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50079:4797","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11496:29018":{"id":"2:11496:29018","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11495:28992"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50392:4963","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17:1717":{"id":"0:17:1717","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[237,4],"end":[237,56]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:73:1725":{"id":"b:2:2234-0:73:1725","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2055","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1725","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:2021"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2510-0:70:1722":{"id":"b:2:2510-0:70:1722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2512:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11470:32252":{"id":"2:11470:32252","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11506:26723":{"id":"2:11506:26723","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11169:10962","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:10960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11547:32263":{"id":"2:11547:32263","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11169:10962","prim@char":"1:12335:409","`DoubleEndedIterator`":"2:7120:120","str::matches":"2:11544:2034"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50331:4959","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:10960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2510-0:73:1725":{"id":"b:2:2510-0:73:1725","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1725","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2512:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:13:1717":{"id":"0:13:1717","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,28]},"visibility":"default","docs":"Return `true` if the guard’s associated code should run\n(in the context where this method is called).","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11579:32274":{"id":"2:11579:32274","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11169:10962","prim@char":"1:12335:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7787:5780-0:76:1727":{"id":"a:2:7787:5780-0:76:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7787:5780","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3306-0:70:1722":{"id":"b:2:3306-0:70:1722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2055","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3304:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3308:1451"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7786:5781-0:70:1722":{"id":"a:2:7786:5781-0:70:1722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7786:5781","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5292:32930":{"id":"5:5292:32930","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11588:23480":{"id":"2:11588:23480","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11563:32270":{"id":"2:11563:32270","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:19:1717":{"id":"0:19:1717","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[243,4],"end":[243,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11517:26174":{"id":"2:11517:26174","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:7120:120","prim@char":"1:12335:409","str::split_whitespace":"2:11495:28992","str::rsplit":"2:11523:27103","self::pattern":"2:11169:10962"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50109:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11500:27109":{"id":"2:11500:27109","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:10962"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11576:32273":{"id":"2:11576:32273","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11169:10962","prim@char":"1:12335:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:10960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:72:656":{"id":"0:72:656","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8609:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8598:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1725":{"id":"0:73:1725","crate_id":0,"name":"OnUnwind","span":{"filename":"src/lib.rs","begin":[220,0],"end":[220,20]},"visibility":"public","docs":"Run on scope exit through unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:7786:5781-0:73:1725","a:2:7787:5780-0:73:1725","a:2:2651:217-0:73:1725","a:2:2665:225-0:73:1725","a:2:2715:2059-0:73:1725","b:2:2237-0:73:1725","b:2:3306-0:73:1725","b:2:2506-0:73:1725","b:2:2510-0:73:1725","b:2:2234-0:73:1725","b:2:2516-0:73:1725","b:2:2521-0:73:1725","0:16","0:74"]}},"0:59:543":{"id":"0:59:543","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[443,4],"end":[445,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:22:1739":{"id":"0:22:1739","crate_id":0,"name":"defer_on_unwind","span":{"filename":"src/lib.rs","begin":[279,0],"end":[283,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on unwinding from panic).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! defer_on_unwind {\n    ($($t:tt)*) => { ... };\n}"},"a:2:2715:2059-0:73:1725":{"id":"a:2:2715:2059-0:73:1725","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2715:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1725","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2521-0:73:1725":{"id":"b:2:2521-0:73:1725","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1725","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2524:127","2:2525:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11520:27101":{"id":"2:11520:27101","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:10962"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10993:4785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1817":{"id":"0:0:1817","crate_id":0,"name":"scopeguard","span":{"filename":"src/lib.rs","begin":[1,0],"end":[578,1]},"visibility":"public","docs":"A scope guard will run a given closure when it goes out of scope,\neven if the code between panics.\n(as long as panic doesn't abort)\n\n# Examples\n\n## Hello World\n\nThis example creates a scope guard with an example function:\n\n```\nextern crate scopeguard;\n\nfn f() {\n    let _guard = scopeguard::guard((), |_| {\n        println!(\"Hello Scope Exit!\");\n    });\n\n    // rest of the code here.\n\n    // Here, at the end of `_guard`'s scope, the guard's closure is called.\n    // It is also called if we exit this scope through unwinding instead.\n}\n# fn main() {\n#    f();\n# }\n```\n\n## `defer!`\n\nUse the `defer` macro to run an operation at scope exit,\neither regular scope exit or during unwinding from a panic.\n\n```\n#[macro_use(defer)] extern crate scopeguard;\n\nuse std::cell::Cell;\n\nfn main() {\n    // use a cell to observe drops during and after the scope guard is active\n    let drop_counter = Cell::new(0);\n    {\n        // Create a scope guard using `defer!` for the current scope\n        defer! {\n            drop_counter.set(1 + drop_counter.get());\n        }\n\n        // Do regular operations here in the meantime.\n\n        // Just before scope exit: it hasn't run yet.\n        assert_eq!(drop_counter.get(), 0);\n\n        // The following scope end is where the defer closure is called\n    }\n    assert_eq!(drop_counter.get(), 1);\n}\n```\n\n## Scope Guard with Value\n\nIf the scope guard closure needs to access an outer value that is also\nmutated outside of the scope guard, then you may want to use the scope guard\nwith a value. The guard works like a smart pointer, so the inner value can\nbe accessed by reference or by mutable reference.\n\n### 1. The guard owns a file\n\nIn this example, the scope guard owns a file and ensures pending writes are\nsynced at scope exit.\n\n```\nextern crate scopeguard;\n\nuse std::fs::*;\nuse std::io::{self, Write};\n# // Mock file so that we don't actually write a file\n# struct MockFile;\n# impl MockFile {\n#     fn create(_s: &str) -> io::Result<Self> { Ok(MockFile) }\n#     fn write_all(&self, _b: &[u8]) -> io::Result<()> { Ok(()) }\n#     fn sync_all(&self) -> io::Result<()> { Ok(()) }\n# }\n# use self::MockFile as File;\n\nfn try_main() -> io::Result<()> {\n    let f = File::create(\"newfile.txt\")?;\n    let mut file = scopeguard::guard(f, |f| {\n        // ensure we flush file at return or panic\n        let _ = f.sync_all();\n    });\n    // Access the file through the scope guard itself\n    file.write_all(b\"test me\\n\").map(|_| ())\n}\n\nfn main() {\n    try_main().unwrap();\n}\n\n```\n\n### 2. The guard restores an invariant on scope exit\n\n```\nextern crate scopeguard;\n\nuse std::mem::ManuallyDrop;\nuse std::ptr;\n\n// This function, just for this example, takes the first element\n// and inserts it into the assumed sorted tail of the vector.\n//\n// For optimization purposes we temporarily violate an invariant of the\n// Vec, that it owns all of its elements.\n//\n// The safe approach is to use swap, which means two writes to memory,\n// the optimization is to use a “hole” which uses only one write of memory\n// for each position it moves.\n//\n// We *must* use a scope guard to run this code safely. We\n// are running arbitrary user code (comparison operators) that may panic.\n// The scope guard ensures we restore the invariant after successful\n// exit or during unwinding from panic.\nfn insertion_sort_first<T>(v: &mut Vec<T>)\n    where T: PartialOrd\n{\n    struct Hole<'a, T: 'a> {\n        v: &'a mut Vec<T>,\n        index: usize,\n        value: ManuallyDrop<T>,\n    }\n\n    unsafe {\n        // Create a moved-from location in the vector, a “hole”.\n        let value = ptr::read(&v[0]);\n        let mut hole = Hole { v: v, index: 0, value: ManuallyDrop::new(value) };\n\n        // Use a scope guard with a value.\n        // At scope exit, plug the hole so that the vector is fully\n        // initialized again.\n        // The scope guard owns the hole, but we can access it through the guard.\n        let mut hole_guard = scopeguard::guard(hole, |hole| {\n            // plug the hole in the vector with the value that was // taken out\n            let index = hole.index;\n            ptr::copy_nonoverlapping(&*hole.value, &mut hole.v[index], 1);\n        });\n\n        // run algorithm that moves the hole in the vector here\n        // move the hole until it's in a sorted position\n        for i in 1..hole_guard.v.len() {\n            if *hole_guard.value >= hole_guard.v[i] {\n                // move the element back and the hole forward\n                let index = hole_guard.index;\n                ptr::copy_nonoverlapping(&hole_guard.v[index + 1], &mut hole_guard.v[index], 1);\n                hole_guard.index += 1;\n            } else {\n                break;\n            }\n        }\n\n        // When the scope exits here, the Vec becomes whole again!\n    }\n}\n\nfn main() {\n    let string = String::from;\n    let mut data = vec![string(\"c\"), string(\"a\"), string(\"b\"), string(\"d\")];\n    insertion_sort_first(&mut data);\n    assert_eq!(data, vec![\"a\", \"b\", \"c\", \"d\"]);\n}\n\n```\n\n\n# Crate Features\n\n- `use_std`\n  + Enabled by default. Enables the `OnUnwind` and `OnSuccess` strategies.\n  + Disable to use `no_std`.\n\n# Rust Version\n\nThis version of the crate requires Rust 1.20 or later.\n\nThe scopeguard 1.x release series will use a carefully considered version\nupgrade policy, where in a later 1.x version, we will raise the minimum\nrequired Rust version.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/scopeguard/1/\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:12:1714","0:70:1722","0:73:1725","0:76:1727","0:23:1750","0:36:1734","0:39:1737","0:42:1740","0:20:1731","0:21:1736","0:22:1739"],"is_stripped":false}},"0:70:1722":{"id":"0:70:1722","crate_id":0,"name":"Always","span":{"filename":"src/lib.rs","begin":[213,0],"end":[213,18]},"visibility":"public","docs":"Always run on scope exit.\n\n“Always” run: on regular exit from a scope or on unwinding from a panic.\nCan not run on abort, process exit, and other catastrophic events where\ndestructors don’t run.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:7786:5781-0:70:1722","a:2:7787:5780-0:70:1722","a:2:2651:217-0:70:1722","a:2:2665:225-0:70:1722","a:2:2715:2059-0:70:1722","b:2:2237-0:70:1722","b:2:3306-0:70:1722","b:2:2506-0:70:1722","b:2:2510-0:70:1722","b:2:2234-0:70:1722","b:2:2516-0:70:1722","b:2:2521-0:70:1722","0:71","0:14"]}},"2:11491:27093":{"id":"2:11491:27093","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11490:27092"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5296:23479":{"id":"5:5296:23479","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11590:23482"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5278:2077":{"id":"5:5278:2077","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:21:1736":{"id":"0:21:1736","crate_id":0,"name":"defer_on_success","span":{"filename":"src/lib.rs","begin":[265,0],"end":[269,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on successful scope exit).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! defer_on_success {\n    ($($t:tt)*) => { ... };\n}"},"b:2:3306-0:76:1727":{"id":"b:2:3306-0:76:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2055","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3304:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3308:1451"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11486:27069":{"id":"2:11486:27069","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11499:29020":{"id":"2:11499:29020","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50401:4804","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:12:1714":{"id":"0:12:1714","crate_id":0,"name":"Strategy","span":{"filename":"src/lib.rs","begin":[201,0],"end":[205,1]},"visibility":"public","docs":"Controls in which cases the associated code should be run","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:13:1717"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:16","0:14","0:18"]}},"b:2:2516-0:70:1722":{"id":"b:2:2516-0:70:1722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2486:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:127","2:2520:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2237-0:73:1725":{"id":"b:2:2237-0:73:1725","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2055","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1725","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:21821"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[235,0],"end":[238,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:12:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1725","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:17:1717"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11589:23481":{"id":"2:11589:23481","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:55":{"id":"0:55","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[439,0],"end":[446,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1753","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:2900:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:59:543"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11564:32271":{"id":"2:11564:32271","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:10962"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11194:10959","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3306-0:73:1725":{"id":"b:2:3306-0:73:1725","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2055","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3304:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1725","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3308:1451"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:34:1760":{"id":"0:34:1760","crate_id":0,"name":"with_strategy","span":{"filename":"src/lib.rs","begin":[317,4],"end":[323,5]},"visibility":"public","docs":"Create a `ScopeGuard` that owns `v` (accessible through deref) and calls\n`dropfn` when its destructor runs.\n\nThe `Strategy` decides whether the scope guard's closure should run.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"generic","inner":"T"}],["dropfn",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:36:1734":{"id":"0:36:1734","crate_id":0,"name":"guard","span":{"filename":"src/lib.rs","begin":[367,0],"end":[371,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"generic","inner":"T"}],["dropfn",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1753","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2651:217-0:70:1722":{"id":"a:2:2651:217-0:70:1722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2651:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11467":{"id":"2:11467","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10732:1363","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11468:796","2:11469:2398","2:11470:32252","2:11471:32253","2:11473:32254","2:11476:25394","2:11477:32255","2:11478:310","2:11479:27070","2:11480:1801","2:11482:27067","2:11484:27068","2:11486:27069","2:11488:32256","2:11489:32257","2:11490:27092","2:11491:27093","2:11492:4805","2:11493:4972","2:11494:4729","2:11495:28992","2:11496:29018","2:11497:26175","2:11498:32258","2:11499:29020","2:11500:27109","2:11503:26721","2:11506:26723","2:11509:2438","2:11513:2397","2:11517:26174","2:11520:27101","2:11523:27103","2:11526:32259","2:11529:32260","2:11532:27105","2:11535:27107","2:11538:32261","2:11541:32262","2:11544:2034","2:11547:32263","2:11550:32264","2:11553:32265","2:11556:32266","2:11558:32267","2:11560:32268","2:11562:32269","2:11563:32270","2:11564:32271","2:11567:32272","2:11570:24465","2:11573:27110","2:11576:32273","2:11579:32274","2:11582:32275","2:11585:32276","2:11587:23477","2:11588:23480","2:11589:23481","2:11590:23482","2:11591:32277","2:11593:5569","2:11594:32278"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11473:32254":{"id":"2:11473:32254","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11471:32253"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:64:577":{"id":"0:64:577","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[452,4],"end":[461,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11479:27070":{"id":"2:11479:27070","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12352:1459"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2520:1438":{"id":"2:2520:1438","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5277:32927":{"id":"5:5277:32927","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2135","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6899:4705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2135","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6899:4705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:35:1774":{"id":"0:35:1774","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[348,4],"end":[361,5]},"visibility":"public","docs":"“Defuse” the guard and extract the value without calling the closure.\n\n```\nextern crate scopeguard;\n\nuse scopeguard::{guard, ScopeGuard};\n\nfn conditional() -> bool { true }\n\nfn main() {\n    let mut guard = guard(Vec::new(), |mut v| v.clear());\n    guard.push(1);\n     \n    if conditional() {\n        // a condition maybe makes us decide to\n        // “defuse” the guard and get back its inner parts\n        let value = ScopeGuard::into_inner(guard);\n    } else {\n        // guard still exists in this branch\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["guard",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11495:28992":{"id":"2:11495:28992","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11496:29018"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50383:4962","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7786:5781-0:23:1750":{"id":"a:2:7786:5781-0:23:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7786:5781","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7786:5781","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7786:5781","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7787:5780-0:73:1725":{"id":"a:2:7787:5780-0:73:1725","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7787:5780","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1725","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11585:32276":{"id":"2:11585:32276","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11131:126","`FromStr`":"2:11130:5795"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11130:5795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11130:5795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11593:5569":{"id":"2:11593:5569","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4496:5569"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50417:4738","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78:656":{"id":"0:78:656","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8609:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8598:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5294:5689":{"id":"5:5294:5689","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11541:32262":{"id":"2:11541:32262","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:10960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[422,0],"end":[426,2]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2665:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1753","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2665:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11482:27067":{"id":"2:11482:27067","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48127:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11556:32266":{"id":"2:11556:32266","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11591:32277":{"id":"2:11591:32277","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4495:32277"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50408:4878","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2512:680":{"id":"2:2512:680","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8649:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5284:32929":{"id":"5:5284:32929","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8649:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:72:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2506-0:70:1722":{"id":"b:2:2506-0:70:1722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2665:225-0:70:1722":{"id":"a:2:2665:225-0:70:1722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2665:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2521-0:76:1727":{"id":"b:2:2521-0:76:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2524:127","2:2525:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:30":{"id":"0:30","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[308,0],"end":[362,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1753","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:34:1760","0:35:1774"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11538:32261":{"id":"2:11538:32261","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11498:32258":{"id":"2:11498:32258","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50373:4961","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5293:32931":{"id":"5:5293:32931","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:2135","`String`":"5:7148:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2135","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6899:4705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:76:1727":{"id":"b:2:2506-0:76:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2525:1437":{"id":"2:2525:1437","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11553:32265":{"id":"2:11553:32265","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"2:11550:32264","self::pattern":"2:11169:10962","prim@char":"1:12335:409","`DoubleEndedIterator`":"2:7120:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50277:4957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:10960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2651:217-0:23:1750":{"id":"a:2:2651:217-0:23:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2651:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2651:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2651:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2521-0:70:1722":{"id":"b:2:2521-0:70:1722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2524:127","2:2525:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[464,0],"end":[474,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:8649:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1753","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8649:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:69:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11590:23482":{"id":"2:11590:23482","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11478:310":{"id":"2:11478:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11479:27070","`u8`":"1:12352:1459"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:23:1750":{"id":"b:2:2234-0:23:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2055","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2236:2021"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:20:1731":{"id":"0:20:1731","crate_id":0,"name":"defer","span":{"filename":"src/lib.rs","begin":[251,0],"end":[255,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (always run).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! defer {\n    ($($t:tt)*) => { ... };\n}"},"a:2:2665:225-0:73:1725":{"id":"a:2:2665:225-0:73:1725","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2665:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1725","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11529:32260":{"id":"2:11529:32260","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"2:11517:26174","self::pattern":"2:11169:10962","str::split_terminator":"2:11526:32259","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50177:4955","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:10960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7787:5780-0:23:1750":{"id":"a:2:7787:5780-0:23:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7787:5780","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7787:5780","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7787:5780","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11497:26175":{"id":"2:11497:26175","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50363:4960","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2715:2059-0:23:1750":{"id":"a:2:2715:2059-0:23:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2715:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2715:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2715:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2509:2391":{"id":"2:2509:2391","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2483:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2236:2021":{"id":"2:2236:2021","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:23:1750":{"id":"0:23:1750","crate_id":0,"name":"ScopeGuard","span":{"filename":"src/lib.rs","begin":[298,0],"end":[306,1]},"visibility":"public","docs":"`ScopeGuard` is a scope guard that may own a protected value.\n\nIf you place a guard in a local variable, the closure can\nrun regardless how you leave the scope — through regular return or panic\n(except if panic or other code aborts; so as long as destructors run).\nIt is run only once.\n\nThe `S` parameter for [`Strategy`](trait.Strategy.html) determines if\nthe closure actually runs.\n\nThe guard's closure will be called with the held value in the destructor.\n\nThe `ScopeGuard` implements `Deref` so that you can access the inner value.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1753","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:30","a:2:7786:5781-0:23:1750","a:2:7787:5780-0:23:1750","a:2:2651:217-0:23:1750","a:2:2715:2059-0:23:1750","b:2:2237-0:23:1750","b:2:3306-0:23:1750","b:2:2506-0:23:1750","b:2:2510-0:23:1750","b:2:2234-0:23:1750","b:2:2516-0:23:1750","b:2:2521-0:23:1750","0:49","0:55","0:65","0:60","0:45"]}},"b:2:2510-0:23:1750":{"id":"b:2:2510-0:23:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2512:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2234-0:76:1727":{"id":"b:2:2234-0:76:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2055","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:2021"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2524:127":{"id":"2:2524:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39377:5802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:11476:25394":{"id":"2:11476:25394","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10737:10963"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11594:32278":{"id":"2:11594:32278","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4493:32278"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50426:4870","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53:227":{"id":"0:53:227","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[432,4],"end":[432,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:42:1740":{"id":"0:42:1740","crate_id":0,"name":"guard_on_unwind","span":{"filename":"src/lib.rs","begin":[413,0],"end":[417,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.\n\n## Examples\n\nFor performance reasons, or to emulate “only run guard on unwind” in\nno-std environments, we can also use the default guard and simply manually\ndefuse it at the end of scope like the following example. (The performance\nreason would be if the [`OnUnwind`]'s call to [std::thread::panicking()] is\nan issue.)\n\n```\nextern crate scopeguard;\n\nuse scopeguard::ScopeGuard;\n# fn main() {\n{\n    let guard = scopeguard::guard((), |_| {});\n\n    // rest of the code here\n\n    // we reached the end of scope without unwinding - defuse it\n    ScopeGuard::into_inner(guard);\n}\n# }\n```","links":{"std::thread::panicking()":"1:542:1010","`OnUnwind`":"0:73:1725"},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"generic","inner":"T"}],["dropfn",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1725","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1753","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7786:5781-0:73:1725":{"id":"a:2:7786:5781-0:73:1725","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7786:5781","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1725","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2516-0:23:1750":{"id":"b:2:2516-0:23:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2486:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2519:127","2:2520:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11587:23477":{"id":"2:11587:23477","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11484:27068":{"id":"2:11484:27068","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2651:217-0:73:1725":{"id":"a:2:2651:217-0:73:1725","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2651:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1725","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2516-0:73:1725":{"id":"b:2:2516-0:73:1725","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2486:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1725","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:127","2:2520:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11477:32255":{"id":"2:11477:32255","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11573:27110":{"id":"2:11573:27110","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:10962"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:10960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11558:32267":{"id":"2:11558:32267","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11562:32269":{"id":"2:11562:32269","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11523:27103":{"id":"2:11523:27103","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:7120:120","str::split":"2:11517:26174","self::pattern":"2:11169:10962","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50127:4788","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:10960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11544:2034":{"id":"2:11544:2034","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:12335:409","str::matches":"2:11544:2034","self::pattern":"2:11169:10962","`DoubleEndedIterator`":"2:7120:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50313:4958","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11503:26721":{"id":"2:11503:26721","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:10962"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2521-0:23:1750":{"id":"b:2:2521-0:23:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2524:127","2:2525:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11570:24465":{"id":"2:11570:24465","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:10962"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8649:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1725","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2715:2059-0:76:1727":{"id":"a:2:2715:2059-0:76:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2715:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5276":{"id":"5:5276","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5187:1363","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5277:32927","5:5278:2077","5:5281:32928","5:5284:32929","5:5292:32930","5:5293:32931","5:5294:5689","5:5295:23478","5:5296:23479"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[428,0],"end":[437,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1753","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:2887:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:53:227","0:54:541"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3308:1451":{"id":"2:3308:1451","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46617:4860","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5281:32928":{"id":"5:5281:32928","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11493:4972":{"id":"2:11493:4972","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50085:4952","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:70:1722":{"id":"b:2:2234-0:70:1722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2055","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:2021"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:39:1737":{"id":"0:39:1737","crate_id":0,"name":"guard_on_success","span":{"filename":"src/lib.rs","begin":[378,0],"end":[382,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"generic","inner":"T"}],["dropfn",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1753","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5295:23478":{"id":"5:5295:23478","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11589:23481"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11526:32259":{"id":"2:11526:32259","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11169:10962","prim@char":"1:12335:409","str::rsplit_terminator":"2:11529:32260","`DoubleEndedIterator`":"2:7120:120","str::split":"2:11517:26174"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50159:4954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2516-0:76:1727":{"id":"b:2:2516-0:76:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2486:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:127","2:2520:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11480:1801":{"id":"2:11480:1801","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48127:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11468:796":{"id":"2:11468:796","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12335:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11560:32268":{"id":"2:11560:32268","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11582:32275":{"id":"2:11582:32275","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11169:10962","prim@char":"1:12335:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:10960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:23:1750":{"id":"b:2:2237-0:23:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2055","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2239:21821"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7786:5781-0:76:1727":{"id":"a:2:7786:5781-0:76:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7786:5781","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11567:32272":{"id":"2:11567:32272","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11169:10962","prim@char":"1:12335:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[448,0],"end":[462,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1753","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:2911:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:64:577"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2665:225-0:76:1727":{"id":"a:2:2665:225-0:76:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2665:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:69:656":{"id":"0:69:656","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[469,4],"end":[473,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8609:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8598:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11550:32264":{"id":"2:11550:32264","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:7120:120","str::rmatch_indices":"2:11553:32265","prim@char":"1:12335:409","self::pattern":"2:11169:10962"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50259:4956","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11488:32256":{"id":"2:11488:32256","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12341:1363","crate::ops::Index":"2:2970:2117","str::slice_mut_unchecked":"2:11489:32257"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:54:541":{"id":"0:54:541","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[434,4],"end":[436,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2715:2059-0:70:1722":{"id":"a:2:2715:2059-0:70:1722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2715:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11494:4729":{"id":"2:11494:4729","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50095:2982","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11535:27107":{"id":"2:11535:27107","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"2:11532:27105","self::pattern":"2:11169:10962","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50231:4791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:10960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11489:32257":{"id":"2:11489:32257","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12341:1363","crate::ops::IndexMut":"2:2974:2118","str::slice_unchecked":"2:11488:32256"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:70:1722":{"id":"b:2:2237-0:70:1722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2055","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:21821"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11509:2438":{"id":"2:11509:2438","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:11169:10962","prim@char":"1:12335:409","`None`":"2:48127:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11471:32253":{"id":"2:11471:32253","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,0],"end":[232,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:12:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:15:1717"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11513:2397":{"id":"2:11513:2397","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11169:10962","`None`":"2:48127:176","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:4777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:10960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2239:21821":{"id":"2:2239:21821","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:73:1725":{"id":"b:2:2506-0:73:1725","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1725","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2651:217-0:76:1727":{"id":"a:2:2651:217-0:76:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2651:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"paths":{"16:153:2707":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:8911:33876":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:7435:4432":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:1620:4614":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13221:3871":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"13:220:33807":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:6871:5459":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:54118:5104":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:50717:4985":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:52362:5025":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:38221:2935":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:9873:3188":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:2801:2104":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:10723:4796":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:9697:4788":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:8674:5284":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:11721:3476":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:10997:3325":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:50019:4947":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"18:719:2966":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:1643:12720":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:5614:4130":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:3479:4592":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4449:15095":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:56581:5892":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:1105:4604":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:2757:2094":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:6816:4331":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:4527:15101":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12237:3575":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"12:119:2710":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:20780:5883":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:3352:4910":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:4606:4092":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"12:1866:4616":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:6865:4339":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:20097:29496":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"14:31:4583":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"12:1534:4612":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:52408:5027":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:46456:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:49898:4936":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:12225:3574":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:1714:12727":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:2282:4014":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:5525:4120":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:2579:2807":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:12359:1101":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:1695:12725":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:49155:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"5:1964:4707":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"18:491:2924":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:4662:5167":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:3091:5139":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:7990:5213":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:2921:1753":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:12003:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:46640:2182":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:50313:4958":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:3077:4592":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:11740:2844":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:48125:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:48864:2169":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:9350:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:50540:4973":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:2970:2117":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"12:1832:4592":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:21813:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:20116:29493":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:3491:5680":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:9340:5724":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:10921:3304":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5443:15681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:2785:2100":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:12164:3559":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:632:4699":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"12:1872:4617":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:8680:5286":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:7226:15259":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:8981:5169":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:7059:4912":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:9405:5321":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:8740:5291":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"0:76:1727":{"crate_id":0,"path":["scopeguard","OnSuccess"],"kind":"enum"},"1:8426:5661":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:7333:23461":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"12:2080:4605":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:2250:5135":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:1826:5127":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:5095:5722":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:4259:5710":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:10546:17927":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"12:2198:33795":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:12339:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:9631:3155":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:9283:3122":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:20497:5856":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:50844:11186":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:13436:3954":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:5016:5726":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:8523:5155":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:1938:5132":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:51807:5000":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:5480:15738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:2715:2059":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:20284:5864":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:4438:5735":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:21780:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"9:896:16774":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"12:632:4592":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:21432:29588":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"18:690:2959":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:6054:5190":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:686:5573":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:3144:4617":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:21912:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:242:2984":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:4139:15064":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:12345:630":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:3145:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:3427:5149":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:2868:4045":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:9539:3148":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:2486:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:10625:3284":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:4294:15080":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:7467:5586":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:2952:2127":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:8166:5222":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"12:1518:16934":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:13039:3823":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:7166:17863":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:719:5457":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:12333:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:4635:4093":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:7117:33868":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:7102:29032":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:5523:15742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5841:14974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:9870:2837":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:4284:2778":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:13091:3838":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:4329:5717":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:4698:15122":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:62:11432":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:49456:4932":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:9624:4786":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:6517:4290":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:9143:2792":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:13279:3913":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:12354:1457":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:50363:4960":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:5189:5766":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:6252:4241":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"3:0:433":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:5876:15790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:969:4594":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:3614:4707":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:5834:5800":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:7243:15261":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:54034:5098":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:46968:11039":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"9:592:16793":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"17:12265:3579":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:2535:4031":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:4224:15071":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:5720:5182":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:47228:4748":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:4122:5163":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:1828:5128":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:13327:3914":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:9118:33880":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:2251:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:7197:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:46500:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:2480:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:11188:5150":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:6914:4721":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:21038:5724":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:9488:3145":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:2320:4022":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6619:4305":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:3276:5146":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:51031:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12060:3542":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:50828:11182":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:10455:3267":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:3123:31923":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:4225:2750":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:5657:5175":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:6842:4337":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"12:393:33802":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:6311:16167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:6954:5193":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:8262:5688":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:2811:2106":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:6496:17860":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:564:2934":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:13184:3863":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:11567:5198":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:7289:16739":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"0:36:1734":{"crate_id":0,"path":["scopeguard","guard"],"kind":"function"},"6:1518:12708":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:10445:3265":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:20516:5724":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:3165:26103":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:47055:29032":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"19:0:1009":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:2300:4016":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:12896:3785":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:4804:15132":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:9465:5327":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:13572:3981":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:10949:3310":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:9658:3157":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:11548:23790":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:5554:15710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:7883:5724":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"12:1138:4609":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:12358:1512":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:6668:4311":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:12739:3752":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"12:2069:4604":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:1887:12865":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:2651:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"18:515:2922":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:1219:4605":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:4427:15093":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13031:3822":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:592:11830":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:49104:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"7:32:16755":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:7249:4413":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:1889:5131":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:6161:17858":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:1608:2403":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:2595:32031":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:11130:5795":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:3599:4075":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:4673:15120":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:4019:10933":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:6474:2757":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:2438:11044":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:4598:15110":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:774:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:12781:3764":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:1500:12705":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:2773:2099":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:4913:26339":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:131:11498":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:1021:2994":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:10822:17930":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:575:11827":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4515:15100":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:50489:10967":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"18:624:33883":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:5877:4756":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:10182:3233":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:247:2985":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:51909:5004":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:5596:4126":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12118:3552":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:47128:4887":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:8252:5224":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:9501:3127":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:1548:2748":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:12955:3804":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:21366:29117":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:20775:5860":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:11436:3409":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:3010:16999":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11939:3522":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:9274:5316":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"18:727:2969":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:52316:5023":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:46937:4870":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:4768:15129":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:5703:4141":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:46873:4864":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:4430:5734":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:57016:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2483:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:6424:16171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:10310:3246":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:11787:3485":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:12356:1455":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:3716:4078":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:1967:5629":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:9475:3144":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:47615:4771":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:1603:2723":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:11620:2842":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"9:188:16824":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"5:6079:2761":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:3367:4737":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"6:4496:15098":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:8506:5153":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:1445:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:6877:17862":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:4605:15111":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:6593:4304":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:4519:4089":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:8997:5312":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:8216:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:4191:15068":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:11883:5163":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:11424:2841":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"12:697:4594":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:11343:3403":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:50836:11184":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:7872:4489":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:14:2037":{"crate_id":2,"path":["core","write"],"kind":"macro"},"5:5133:10949":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:10790:5314":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:1404:4596":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:1864:5129":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:46626:4392":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:12964:3805":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"12:1840:2743":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:13404:3939":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:48252:11136":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:359:2346":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:39426:2060":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:48362:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:48704:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:5660:15750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:4574:4091":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:8656:2168":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:1604:4592":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:2793:4042":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:7357:4427":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:4545:4090":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:47289:4760":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:50860:11197":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:6629:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:3492:4610":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:501:11818":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:47298:4761":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:8162:17917":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:5433:4107":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:13354:3926":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:9738:3170":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"0:22:1739":{"crate_id":0,"path":["scopeguard","defer_on_unwind"],"kind":"macro"},"9:111:16788":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:2474:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:1707:5731":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:11691:5205":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:3671:2716":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:13374:3932":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:4745:15127":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:0:801":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11288:3384":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:49938:4941":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:47038:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:49225:2167":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:13007:3813":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:6923:2743":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:3235:5143":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:4179:15066":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"12:853:4602":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:2399:5651":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:47395:4766":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:49660:4782":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4683:15121":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:8477:4960":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:49641:4933":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:7931:2331":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:6028:5189":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:52506:5029":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:2029:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:54080:5102":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:5684:15752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:507:11819":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:5996:4190":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:52338:5024":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:20413:4813":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:29621:2082":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:5793:4005":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:5582:15745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:6284:4066":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:7825:4485":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"9:709:4927":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:11298:5216":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:11034:3338":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:9947:18010":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:52240:5021":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:50401:4804":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:1637:4617":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:5774:5183":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:54210:5108":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:7910:2329":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:7974:5572":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:52170:5019":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:52384:5026":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:5558:17855":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:2993:4068":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:11982:5208":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"18:609:2943":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:12322:3587":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:11311:5183":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:3854:4079":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:8457:4908":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:52029:5009":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:5861:15789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:12349:728":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"18:736:21676":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:646:11860":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:12176:3561":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11259:3375":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11761:3482":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:4621:656":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:7249:15262":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:8494:3097":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:6961:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:1962:3002":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:6341:2723":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:8648:5156":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:2248:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"12:1003:4604":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:9442:23789":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:10257:3242":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:8776:5768":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:8981:3108":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:2871:31960":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:10159:3232":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:12609:3702":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:29627:2083":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"14:40:3325":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:5782:15761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10845:3265":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:7118:4727":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:47118:2780":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:7135:33867":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:10139:3110":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:4273:5712":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:4689:4095":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:11169:10962":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:3188:4071":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:10670:3286":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:931:4596":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"9:863:16773":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:3237:5144":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:7929:4495":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:11708:3473":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:5405:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:7483:4065":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:13071:3831":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:4974:5767":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:50127:4788":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:6277:12646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:7143:2133":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:539:11822":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:50159:4954":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:7821:2833":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:4339:2779":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:12317:25392":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:11128:28494":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:8014:4392":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:973:4597":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:11639:3466":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:4921:4102":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:6034:4211":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:5731:5454":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"18:113:21667":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:39413:4853":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:11174:4777":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:49426:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:21747:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:10360:3249":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:49438:4927":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:49128:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:9350:3092":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:11174:3360":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:7093:4371":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:2657:4036":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:6352:12673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:4239:15073":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:574:2332":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:4977:5742":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:9472:5328":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:8802:4780":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:4307:15082":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:9304:5319":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:6524:16177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:11491:5316":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:46858:4738":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:3089:31922":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:11530:5199":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:13594:3987":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:10374:3254":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:9446:3139":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:7396:17864":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:3355:11000":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:50848:11187":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:5720:15756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:12349:3590":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:6342:2817":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:2728:2062":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:47599:4770":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:2411:4026":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:10737:10963":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:6059:33869":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:7242:2764":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:8772:5295":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:2383:2464":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:8211:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:11989:5208":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:9021:3109":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:6193:2723":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:51992:5007":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:3893:2723":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:6676:4056":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:8664:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:3110:4616":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:3236:2716":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:10936:2331":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:4217:4744":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:7511:4434":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:10207:3235":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:3402:4073":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:9735:4789":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:960:4611":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:1611:2743":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:8414:5150":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:6981:16550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:3067:2121":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12756:3754":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:2509:4030":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:12008:3536":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:8831:5773":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:4413:4087":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:979:5585":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:4929:2755":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:2911:1789":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"0:70:1722":{"crate_id":0,"path":["scopeguard","Always"],"kind":"enum"},"17:13527:3975":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:8798:5168":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:6500:16175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:56938:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:50511:4965":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:49189:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"5:2864:2461":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:6790:4330":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:9430:2330":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:2662:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:3958:5702":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:7497:4055":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:3559:2723":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:2437:5724":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:10685:5182":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:411:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:47346:2947":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:7046:11083":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:6375:12647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:9865:5217":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:1722:12728":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:22011:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:5993:5894":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:8649:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:608:11832":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:10490:3270":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:10774:3007":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"9:800:16906":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:13082:3835":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:5691:5180":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:3599:22028":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:6409:16169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:4558:11032":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:46962:4738":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:49401:4920":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"12:0:1924":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"16:7890:4491":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:3125:3005":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:2228:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:12301:24751":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:7905:2319":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:2887:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:7956:4067":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:49917:4939":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11330:3399":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:524:2804":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:11087:3345":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:8922:5307":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:9700:3163":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:6097:2815":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:6147:2743":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:50009:4946":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:4300:15081":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:513:11820":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:49990:4944":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:2771:4041":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:49907:4938":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:49977:4943":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11606:3458":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:4771:5743":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:51087:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"0:42:1740":{"crate_id":0,"path":["scopeguard","guard_on_unwind"],"kind":"function"},"17:13580:3984":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:12357:774":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:11800:3487":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:4327:4084":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:12087:3546":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:48871:2168":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"18:538:2932":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:9858:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:4749:4097":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:5184:16969":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:9043:2788":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:2836:2112":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:1320:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:6815:5195":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:2683:4037":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"18:96:21666":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:3934:4610":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12073:3543":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:2605:4034":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:11706:5207":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:4222:4745":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:54171:5107":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:3972:4739":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4653:15117":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11014:3328":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:6266:2403":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:10233:3240":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:46991:4879":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:12550:3650":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6829:4334":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:47246:4897":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"12:1029:4605":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:7372:33865":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:4103:4743":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:11511:11197":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:50109:4783":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:47321:4903":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:10506:3272":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:9751:3172":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:5891:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:1771:2995":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:50704:4981":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:5780:4154":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:7255:15263":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:8598:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"6:7166:16710":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"14:215:4588":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:11637:5200":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:7786:5781":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:2085:33017":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:10796:3293":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:9422:3137":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4126:15063":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:2727:4039":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:5695:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:48328:2403":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:1525:12709":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:49167:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:2816:2108":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:5905:2814":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:53562:5088":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:6472:4279":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:12029:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:49927:4940":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:6990:2403":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:8475:17904":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:1701:12726":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:7266:15264":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:3263:4072":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:46617:4860":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:20944:31403":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:2411:5657":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:11528:3445":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:7079:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:9108:3111":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"12:1859:4615":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:6635:2761":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:10350:3007":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:3140:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:21387:29102":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:7092:2134":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:4459:5737":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:11186:3361":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:4257:15075":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:5981:4188":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"12:815:4597":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:13518:3971":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:9844:3184":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:50832:11183":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:1434:4594":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:8128:5220":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:48243:4914":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:52140:5018":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:5737:3999":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:20118:29491":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:11957:25856":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:4307:5713":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:1950:4706":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"9:649:16795":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:13148:3854":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:2026:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:12347:730":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:10708:3288":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:50383:4962":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:53996:5095":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4475:15097":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:6329:5768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:9553:3110":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:6953:11775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:21:667":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:5749:33718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"9:676:16781":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"5:6503:2771":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:1600:12717":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:1476:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:21439:4839":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:8174:5223":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:6466:5192":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:9433:3138":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:8056:4507":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:56977:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:52286:5022":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:4849:4100":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:10121:3230":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:1699:2716":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:48885:2171":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:2670:1709":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13557:3980":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:20366:5857":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:6885:2829":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:9071:33875":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:8470:4783":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:545:11823":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:1395:4595":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:2742:2093":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:8375:31334":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:4019:5161":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:11751:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:12638:3713":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:4843:5758":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:13024:3821":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:46440:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:9126:2791":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:10336:4795":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:8609:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:2752:2095":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:5498:15739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:9312:2403":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:46984:4878":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:6322:16168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12836:3776":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:12695:3747":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:4665:15119":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:50277:4957":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:8871:3106":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:1511:12707":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:4408:23460":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:7574:24757":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:10520:3275":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:0:1355":{"crate_id":1,"path":["std"],"kind":"module"},"5:6899:4705":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:1756:2491":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:9493:4592":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:6293:11697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:3689:4077":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:8886:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:12103:3548":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:47311:4902":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:50373:4961":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:11617:3459":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:6572:16181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:8685:5699":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:12335:409":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:13478:3960":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:0:486":{"crate_id":2,"path":["core"],"kind":"module"},"2:46945:11038":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:4899:5712":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:7970:4500":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:29587:1711":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:11217:3370":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:8748:5284":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:9362:3110":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:49448:4931":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:1423:4593":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:8941:3107":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:2845:2114":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4761:15128":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:11503:26572":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:9681:3051":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:12340:1333":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:12177:2850":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:46425:2119":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:13158:3857":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"12:861:4603":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:21258:4819":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:12291:3581":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:11500:3438":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:54148:5106":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:5219:3098":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:13059:3830":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:10682:3287":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:47218:4896":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:50912:11199":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:2705:4038":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:29721:29121":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:7211:4158":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:6704:4313":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"12:300:33793":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:56951:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4635:15115":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4346:15086":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:6463:4278":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"15:175:16951":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:1821:2494":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:9566:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:3199:5142":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:11873:3497":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:20063:31399":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:47199:4893":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:13114:3846":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:13459:3955":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12630:3712":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:6171:4234":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:2749:4040":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:11168:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:6243:2813":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:9831:3181":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:7959:5570":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:2341:4023":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:2789:2102":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:47640:4773":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:9577:3152":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:9317:3128":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:4706:15123":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4581:15108":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:4489:5706":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:50605:4975":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:3157:2126":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:53672:5089":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:1550:12712":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:11240:10969":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:4575:15107":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"18:671:2956":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:46599:2123":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"12:822:5585":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:4723:30291":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:1632:4616":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:7847:4486":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:8752:2982":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:48878:2170":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:51104:4994":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4565:15106":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11368:3407":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:9401:3135":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:567:11826":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:48666:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:7267:4421":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:47606:4909":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:21978:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:52718:5048":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:2840:2113":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:2832:2111":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:22476:4733":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:6706:5194":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:11395:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:1082:31501":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:4510:5165":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:8822:33874":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"12:60:33805":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:21714:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:6298:4242":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:12346:631":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:2867:31958":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:48590:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:5672:15751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:12730:3748":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:1580:12715":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:4213:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:10332:18035":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:20078:31399":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:10529:5335":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:5699:15754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:1931:2999":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"18:636:2949":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:52192:5020":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:12350:729":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:13214:3869":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:11961:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:48628:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:8662:2171":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:51066:4989":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:12926:3796":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:2822:2109":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:12211:3573":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:5804:2748":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:10466:3268":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:6163:2817":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"16:6330:4252":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:5898:2813":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"0:0:1817":{"crate_id":0,"path":["scopeguard"],"kind":"module"},"17:8339:17922":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:8405:5148":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:9804:4792":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:52010:5008":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:48269:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:8447:4891":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:21290:4820":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:5238:5772":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:11247:3374":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:1668:12722":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:49241:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:2658:2055":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"12:2205:4723":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:554:11824":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:20050:2935":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:6591:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:353:2345":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:5072:2811":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:4:993":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:5671:5179":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:5163:4104":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:8796:3099":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:21314:4825":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:51869:5002":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:9526:3147":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:5692:15753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:4329:15084":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"18:521:21678":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:3409:5287":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:4559:15105":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:51013:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:6651:11078":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:7637:4448":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:12850:3779":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:54069:5101":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:8951:33871":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:4662:4094":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:2828:2110":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:48210:4912":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:12337:3265":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:2974:2118":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:2253:1775":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:13382:3933":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11547:3450":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:54043:5099":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:1203:4340":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:5328:5174":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:49122:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"16:2487:4029":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5203:3097":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"12:274:5446":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:50231:4791":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:12278:3580":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:1413:4611":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:4255:2748":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:5510:15741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:8722:5164":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:4398:15091":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:6270:4049":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:57003:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10973:3324":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"7:79:16762":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:48552:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:47278:4901":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:11271:3376":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:2763:2097":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:9550:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:6953:2403":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:4286:15079":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:2153:33022":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:12334:920":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"0:20:1731":{"crate_id":0,"path":["scopeguard","defer"],"kind":"macro"},"12:985:4340":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:8872:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:5180:5765":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:5460:4116":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:6545:16179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:487:2991":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:29649:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:8106:5217":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:11576:3455":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:39417:4854":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"4:0:1919":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:9031:33877":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:9193:33878":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:3382:2748":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:3221:2130":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:22044:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:6719:33864":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:3162:26099":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:13366:3929":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:2433:4027":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:48201:2403":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:13203:3868":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8141:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:5878:16970":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:1574:12714":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:11718:23466":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"9:920:16775":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:1639:2079":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:560:11825":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4274:15077":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:5595:15747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:7980:17867":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"12:738:4596":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:20095:29494":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:8295:17921":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:9930:3193":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:13168:3860":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"12:353:2714":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:2916:3003":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:7892:4777":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:1046:31508":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:1595:12716":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:9791:3175":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:534:4003":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:8561:2977":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:7942:4498":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:10434:3263":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"9:505:16920":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:10919:4801":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:5628:4131":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:47360:4764":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:50085:4952":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:50900:4986":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:5837:5801":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:1367:4610":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:50067:4951":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:4726:15125":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:9561:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:7388:4430":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:53064:5055":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:9242:5314":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:7329:4062":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"9:33:16845":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"6:4096:15060":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:50557:4974":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:5381:2757":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:4367:15089":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"14:0:1925":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:10608:3072":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"9:956:16776":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:6448:16173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:6931:2732":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:1541:12711":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:48742:4779":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:4217:4081":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11161:3358":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:5839:17857":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:12046:3541":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:21341:4826":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:49838:4934":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:48320:4610":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:4417:15092":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:8991:4592":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:6392:12650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:49409:4922":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:54054:5100":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:7088:4724":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:6969:4722":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:25286:4734":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:3466:2163":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"18:599:33882":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:1114:4605":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13134:3852":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:8510:3098":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:4297:4083":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:4115:15062":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:13192:3864":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12674:3742":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:12342:1441":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:11189:10960":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"12:98:33800":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:6021:5186":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:4267:15076":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:53750:5090":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:13100:3839":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:5585:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:50824:11180":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:4221:5707":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:6434:2824":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"0:39:1737":{"crate_id":0,"path":["scopeguard","guard_on_success"],"kind":"function"},"2:47592:4769":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:6939:31920":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:11853:3494":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:11123:25122":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:5517:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:9778:3174":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:11724:23468":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"18:660:2950":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:13393:3938":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4461:15096":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:8137:17916":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:1733:2492":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:3984:4740":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:8729:5738":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"18:590:2936":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:4361:15088":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:9520:5507":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:10615:5804":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:3274:5145":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:47237:4751":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:12352:1459":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:48261:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:10075:3226":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:11594:3456":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"18:531:2929":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:6528:4291":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:6052:4221":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:5541:15744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:11300:3387":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:4621:15113":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:48476:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"12:751:2743":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:1608:12718":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:11951:3524":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:9458:3141":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:11302:4682":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"10:0:1922":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:5374:4047":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:54014:5096":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:6479:16174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"11:44:4620":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:628:5567":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:1632:577":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:420:2990":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:6269:11738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:9627:3154":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:47260:4900":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:47330:4762":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:7997:5608":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:4749:780":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:661:5118":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:2477:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:47148:4888":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:50840:11185":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:4317:5714":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:46378:2128":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:51739:4997":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:8734:5739":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:8666:2980":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:6554:16180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:4280:15078":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:4817:4099":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:9590:5199":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:9293:3125":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:4446:5736":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"9:977:4685":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:10479:5463":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:10833:2838":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:50526:4970":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:20335:5855":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:12251:3576":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:47381:4908":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"12:777:2719":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:8464:2982":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:3457:3017":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:51785:4999":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:3319:5685":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:10528:3277":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:11158:5219":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:8398:2971":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:3566:4074":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:10854:17931":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:6690:4057":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:9722:3168":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"12:2178:33799":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:1915:2495":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"18:644:2925":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:20932:5115":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:5772:15760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:8612:5283":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"1:6665:5193":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:13340:3920":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:20323:5724":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"12:1845:2716":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:9601:3153":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:47071:4886":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:11125:3351":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:8926:4781":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:7044:33866":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:3635:2403":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:51839:5001":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:4267:5711":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:11785:30507":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:47190:4892":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:10942:4802":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:487:11816":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:4025:2748":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:1811:598":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:11515:3443":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:12341:1363":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:2261:16971":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"12:1085:4607":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:7083:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:6210:4238":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:10394:3259":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:52537:5030":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"9:622:16794":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:47005:11040":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:58291:5116":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:10385:3258":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:10497:18037":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:9008:5313":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:1903:17968":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:4797:15131":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:4368:2065":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:11822:5161":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:8596:2978":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:51023:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:9542:4783":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:288:2135":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:9712:3167":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:9820:3180":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:7214:15257":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:784:2726":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:53214:5056":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:9909:3191":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:5706:5181":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:1248:4609":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:11194:10959":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:4231:15072":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:7895:25864":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"12:2053:4340":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:21846:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:7567:17865":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:6743:17861":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:1668:1065":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:4185:15067":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:6538:16178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:4909:26335":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:21465:5704":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:48312:4592":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"12:762:2716":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:3484:5660":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:12348:727":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:8660:5158":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:21237:4817":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:11676:5204":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:4534:15102":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:6735:4316":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:50392:4963":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:7220:15258":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:9764:3173":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:50053:4948":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:22077:4844":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:51940:5005":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:7298:4425":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:4144:4080":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:2613:5137":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:11407:2839":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:46685:4862":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:3927:2748":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:5587:15746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:48514:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:8658:2169":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:12134:3553":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:9288:5317":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:10108:3229":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:4212:15070":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"7:0:1502":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:6569:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:9339:3131":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:48438:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:2589:2792":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:56990:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7426:4431":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:12361:3597":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"12:1065:33801":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:53812:5091":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:4076:4741":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:21879:2337":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:7090:5853":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:7772:2992":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:8212:17918":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:51116:4619":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:10356:5280":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:54095:5103":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11909:3503":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:11764:11049":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:20525:4813":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:11812:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:8660:2170":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:887:4592":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:2661:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:2659:2056":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:4590:5166":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:996:4602":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:21184:4816":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:47409:4767":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:21403:29135":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:12768:3759":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:9585:4785":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:49656:29458":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:4102:15061":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:11536:3447":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:5761:4147":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:9158:2797":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:36:2720":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:2781:2101":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:10752:3291":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:5472:15737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:7474:11082":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:6742:2828":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:9818:4793":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:51074:4991":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:4348:2183":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:47177:4891":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:8921:11051":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:4022:5162":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:495:11817":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:7237:15260":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:9485:5331":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:8625:5164":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"1:8182:4706":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:6605:30589":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:54023:5097":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:50331:4959":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:4629:15114":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:11997:3534":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:9061:3110":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"15:0:1926":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:2285:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:50852:11188":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:6469:2411":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:7980:5126":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:8101:3052":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:6123:4046":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:9790:4791":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:7783:5359":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:4702:5575":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:4206:14914":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:50737:4808":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:1747:29578":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:12336:1475":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:4247:15074":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:11104:5344":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:48176:2402":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:4778:15130":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:545:2325":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:8881:33872":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:8569:24755":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"2:21453:4840":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:12353:1456":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:2894:16997":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:46633:4861":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:1470:1710":{"crate_id":2,"path":["core","mem"],"kind":"module"},"16:3026:3013":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:4251:5709":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:6558:11086":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:7909:4494":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:4357:4085":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:11734:3198":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:2465:4028":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:6259:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:1357:4592":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:21040:5858":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:8849:5304":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:5815:17856":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:10875:3300":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:1454:4704":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:5741:15759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:9248:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:10460:5129":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:9328:3129":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:952:2723":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:2909:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:11323:24471":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:2747:2098":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:11133:5218":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:6521:2813":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:7788:1795":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:12617:3705":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:8483:152":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"6:5727:15757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:10283:3244":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:7208:15256":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"8:0:1920":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:52094:5011":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:5388:4050":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:2257:5644":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:8654:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"18:707:2962":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:1678:12723":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:21349:4827":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:5359:5174":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6109:4227":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:21326:29112":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:9371:3111":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:8441:17926":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:2056:4708":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:4737:15126":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:386:2987":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:10958:4803":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:1615:2716":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:9296:4592":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:11341:5317":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:9897:3190":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"0:12:1714":{"crate_id":0,"path":["scopeguard","Strategy"],"kind":"trait"},"1:918:4595":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:10270:3243":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:4721:4096":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:38204:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:2653:5138":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:3249:3006":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:542:1010":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"1:681:5121":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:46998:4880":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:1532:12710":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:10707:11146":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:12874:3781":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:4716:15124":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:56964:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6017:4204":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:3304:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:135:11499":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:5085:2723":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:46566:2120":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"0:23:1750":{"crate_id":0,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"6:4317:15083":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:944:2743":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:7278:4060":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:2875:31959":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:2557:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:6137:4229":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"12:646:4610":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:2806:2105":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4551:15104":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:51761:4998":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:5129:10948":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:8668:2173":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:9671:3158":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:53958:5094":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:8110:17903":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:7543:4053":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:46480:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12033:3539":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"12:2184:29497":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:5122:4103":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:10721:3290":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:46885:29131":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:2366:5450":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:12306:5574":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:11235:3371":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:4506:15099":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:11106:3350":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:8631:2979":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:2367:4024":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:50095:2982":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"12:320:2712":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:6376:17859":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:9223:17936":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"18:766:21677":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4200:15069":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:52640:5032":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"18:755:2975":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:5472:4051":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:9662:4787":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:3468:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:52047:5010":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:6919:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:7170:4732":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:1091:4340":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:49137:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"16:4262:4082":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:3118:4614":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:10296:3245":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11748:3481":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:52876:5051":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:11972:2802":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:9382:5819":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:581:11828":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:6186:4048":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"18:574:2925":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:4394:2184":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:8540:5701":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:4810:15133":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:12360:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:11054:3339":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:9274:3120":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"13:0:1918":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:8111:5218":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:562:2992":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:4385:4086":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:5949:4183":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:7343:4063":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:52764:5049":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:12909:3791":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:11198:26568":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:11939:5358":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:2918:2116":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:6860:2816":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:5018:5727":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:51970:5006":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"5:4288:2750":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:9419:5322":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:8393:17924":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:7055:5584":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:6509:16176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:9885:3189":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:10891:5141":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"12:725:4595":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:2702:2058":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:53420:5087":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"12:1044:16933":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:586:11829":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:4441:4088":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:11418:2840":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:11862:5162":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"9:586:16806":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:12980:3809":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:600:11831":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:50694:4977":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:6818:5815":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:10420:3262":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:6359:4254":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"12:387:33806":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:598:2334":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:9260:5315":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:6241:4240":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7557:4436":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:11684:3472":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:2133:33045":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:52459:5028":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:2280:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:10882:4798":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13141:3853":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:4659:15118":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:8589:24491":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:5656:31256":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:12351:725":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:20247:5863":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:990:4600":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11893:3498":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:4786:4098":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:2900:1712":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:2930:16998":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:10476:18036":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:2046:2325":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:10403:3291":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:29827:29100":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:49889:4935":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:7469:4064":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:12860:3780":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:9263:3119":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:46522:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:47043:4885":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:54133:5105":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:11070:3343":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:50632:4807":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:4145:1793":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:13506:3969":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:13492:3962":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"12:1120:4608":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:5235:4105":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:8599:2163":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:2794:2107":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:8365:5263":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:10062:3225":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:2490:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"18:699:2960":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:47168:4890":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:9155:3112":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:20492:5724":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:6430:16172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4379:15090":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:5494:17854":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"12:834:4600":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:7120:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:1378:2403":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:6903:5331":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:8158:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:20310:5865":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"9:19:16844":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"6:5568:15711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:7237:4412":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10088:3228":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:29663:29122":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"12:1836:2403":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:11315:3393":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:53000:5053":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:4321:5715":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:11799:2846":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:7225:2831":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"18:481:2923":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"18:582:2935":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"0:21:1736":{"crate_id":0,"path":["scopeguard","defer_on_success"],"kind":"macro"},"17:12748:3753":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:5540:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:2316:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:5411:4052":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"18:0:1929":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:51715:4996":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:484:2844":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:51695:4995":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11559:3452":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:7884:2347":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:219:2722":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:13126:3849":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:6800:2971":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:50259:4956":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:9366:5818":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:9424:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:0:1928":{"crate_id":17,"path":["object"],"kind":"module"},"2:47269:4755":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:4713:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:7042:11084":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"14:165:16939":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:3632:4076":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:8418:17925":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:4888:4101":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:7309:4061":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:7288:4424":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:7470:5589":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:4690:982":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:967:2993":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:12307:3583":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:10894:5143":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:3048:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:8380:30023":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:12934:3799":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:9776:4790":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:6302:16166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:8241:17919":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"12:659:2403":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:652:2925":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:12514:3619":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:2579:4033":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:6418:2802":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:50213:4790":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:0:1927":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:4335:15085":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:3602:4706":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"18:507:2925":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:1686:12724":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:2389:4025":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:7043:4723":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:13536:3977":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:3996:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"12:1628:1750":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:12948:3802":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:1562:12713":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:4210:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:20364:5724":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:10897:5145":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:48193:4610":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:53030:5054":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:5014:5723":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:12355:1458":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:4540:15103":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:2150:578":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"9:382:16879":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:4644:15116":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:9183:3113":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:5713:15755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6781:4327":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:12022:3538":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:11643:5357":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:46544:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:9805:3176":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:8774:2986":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:20523:5861":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:6146:4230":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:2516:5136":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:4749:5742":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:8013:5216":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"12:810:4611":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:9609:5333":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:2385:5647":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:8899:4927":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:965:4593":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:9517:4610":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:21131:4815":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:2777:2103":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:5489:4754":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"12:2190:33798":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:8666:2172":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"14:7:4583":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:48185:4592":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:10321:3247":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:9250:3118":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:10221:3239":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:50177:4955":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:5541:4122":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:8701:2981":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:3084:4615":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:9672:5130":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:5447:4111":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:6200:4237":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:29402:5703":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"14:187:16946":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4611:15112":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:7279:16738":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:1654:12721":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:9382:3134":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:3475:21987":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:49999:4945":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"12:1555:4613":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"11:36:33792":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:46339:2131":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:7183:25224":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:5605:15748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:10303:4794":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:12797:3767":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:20372:5859":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:7840:2835":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:7131:4730":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:5625:15749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:11183:2962":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:4215:5708":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:6998:16551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:8272:17920":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:13176:3861":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:46864:4863":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:9350:5817":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:3197:5141":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:53874:5092":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:3184:2129":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:678:5119":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:10702:5464":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:10642:17929":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"12:669:4593":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:1887:5130":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:3690:2723":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:11178:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:2825:4043":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:9691:3160":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:3484:2743":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:519:11821":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:52954:5052":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:50879:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:3159:24994":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:50856:11189":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:1636:12719":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:10583:17928":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:3863:2743":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:50683:10972":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:2401:5652":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:12485:3599":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:8368:17923":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:954:2716":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:5835:15788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:13047:3824":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:6493:2769":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:39377:5802":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:2631:4035":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"18:80:21665":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:2915:2115":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:4592:15109":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:50408:4878":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:5534:15743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:49964:4888":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:9571:5198":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:1234:4604":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:46901:4867":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:47208:4894":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:273:2723":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:2842:4044":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:1002:4603":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:9303:3127":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:12084:5600":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"18:681:2957":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:8754:5293":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:11199:3362":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"14:221:4590":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:9477:5329":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"9:0:1921":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:4152:15065":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:21945:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"13:108:33851":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:50417:4738":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11485:3434":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:9644:3156":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:3151:2124":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:6660:2774":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:2231:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:50426:4870":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:900:4610":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"11:0:1923":{"crate_id":11,"path":["adler"],"kind":"module"},"2:47024:4884":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:11828:3492":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:2769:2096":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:3169:31449":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:1626:4615":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:910:2403":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:11774:3484":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:7787:5780":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:4911:26337":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:5504:15740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:11661:3467":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:7603:4444":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:4094:4592":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:11149:3355":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:7159:4731":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"12:1852:4614":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:46925:4869":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:2665:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:10245:3241":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:51891:5003":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:1062:5449":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:8118:5219":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:6654:4309":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12884:3782":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:12338:1027":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:47630:2786":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:6070:4224":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:9318:5184":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:9337:5320":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:2865:31984":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:11837:4811":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:6996:2403":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:46915:4868":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:1738:12729":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:3130:2122":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:10993:4785":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:11841:3493":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:12148:3555":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:11146:5350":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:1123:4609":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:2663:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:5510:4117":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:11356:3404":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:2557:4032":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:5664:4138":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:2871:2810":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:7225:2716":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"5:6908:2403":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:48400:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:49417:4923":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:50669:4976":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:6345:4054":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:12816:3768":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:12198:3572":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:2571:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"15:193:16952":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"14:160:4583":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:5606:2743":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:8939:5790":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:50079:4797":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:13413:3941":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:1505:12706":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12972:3807":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:8991:33873":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:6567:4303":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"0:73:1725":{"crate_id":0,"path":["scopeguard","OnUnwind"],"kind":"enum"},"1:6702:4909":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:52560:5031":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:8526:2976":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:4354:15087":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:48337:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:7319:4426":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:10894:3303":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11813:3489":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:21274:29562":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:7659:17866":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:4808:2748":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:5715:2755":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:13231:3876":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:9165:33879":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:4294:2182":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:872:4592":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:4816:15134":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:5412:4752":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:11479:5315":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:6975:16549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:2907:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:47370:4905":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:8017:4853":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:9499:23808":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"9:827:16870":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:11137:3354":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:47621:4910":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:855:2729":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"15:214:16956":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:2322:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:8257:5225":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:6415:16170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:4055:2748":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"14:202:10979":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:53920:5093":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:9857:3186":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"18:614:33881":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:52794:5050":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:47648:4775":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:7071:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:5733:15758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4437:15094":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:6316:4250":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:11974:3533":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:7148:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:58312:5117":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:8055:17905":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"}},"external_crates":{"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}