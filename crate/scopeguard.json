{"root":"0:0:1868","crate_version":"1.2.0","includes_private":false,"index":{"2:12188:32448":{"id":"2:12188:32448","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11980:418","self::pattern":"2:11778:11186"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12095:24305":{"id":"2:12095:24305","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12135:32433":{"id":"2:12135:32433","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11778:11186","str::split":"2:12126:22509","prim@char":"1:11980:418","`DoubleEndedIterator`":"2:7306:121","str::rsplit_terminator":"2:12138:32434"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43600:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12112:23913":{"id":"2:12112:23913","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11980:418","self::pattern":"2:11778:11186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:24304":{"id":"2:12093:24304","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12141:24342":{"id":"2:12141:24342","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11980:418","self::pattern":"2:11778:11186","str::rsplitn":"2:12144:24344"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43654:4732","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12194:32450":{"id":"2:12194:32450","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11739:127","`FromStr`":"2:11738:5976"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41733:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11738:5976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11738:5976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[455,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1806","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:2910:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:57:553"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2683:220-0:21:1803":{"id":"a:2:2683:220-0:21:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12098:32431":{"id":"2:12098:32431","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11986:1407","crate::ops::IndexMut":"2:2984:2176","str::slice_unchecked":"2:12097:32430"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[480,0],"end":[491,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9208:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1806","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9208:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:67:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12109:24346":{"id":"2:12109:24346","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11980:418","self::pattern":"2:11778:11186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8315:5965-0:71:1778":{"id":"a:2:8315:5965-0:71:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8315:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2700:228-0:71:1778":{"id":"a:2:2700:228-0:71:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2549-0:74:1780":{"id":"b:2:2549-0:74:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2519:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:128","2:2553:1488"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2554-0:68:1775":{"id":"b:2:2554-0:68:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2557:128","2:2558:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2249-0:74:1780":{"id":"b:2:2249-0:74:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2243:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2251:2079"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12088:24306":{"id":"2:12088:24306","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11997:1510"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:24340":{"id":"2:12132:24340","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11778:11186","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11980:418","str::split":"2:12126:22509"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43568:4730","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2553:1488":{"id":"2:2553:1488","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41733:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:5047":{"id":"2:12102:5047","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11980:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43526:5027","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12200:23757":{"id":"2:12200:23757","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12077:816":{"id":"2:12077:816","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11980:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2554-0:74:1780":{"id":"b:2:2554-0:74:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2557:128","2:2558:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5530:23760":{"id":"5:5530:23760","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12199:23758"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2543-0:74:1780":{"id":"b:2:2543-0:74:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2545:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12106:22510":{"id":"2:12106:22510","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43804:5035","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9208:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12104:30144":{"id":"2:12104:30144","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12105:30127"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43824:5037","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12159:32438":{"id":"2:12159:32438","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11778:11186","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11980:418","str::rmatch_indices":"2:12162:32439"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43700:5031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12191:32449":{"id":"2:12191:32449","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11980:418","self::pattern":"2:11778:11186"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[315,0],"end":[370,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1806","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:32:1813","0:33:1826"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5519:33104":{"id":"5:5519:33104","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12089:1852":{"id":"2:12089:1852","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41591:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511":{"id":"5:5511","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5512:33102","5:5513:2136","5:5516:33103","5:5519:33104","5:5527:33105","5:5528:33106","5:5529:5877","5:5530:23760","5:5531:23759"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:15:1770"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12138:32434":{"id":"2:12138:32434","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11778:11186","str::split":"2:12126:22509","prim@char":"1:11980:418","str::split_terminator":"2:12135:32433"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43618:5030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12165:32440":{"id":"2:12165:32440","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:24330":{"id":"2:12100:24330","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12099:24329"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12204:32452":{"id":"2:12204:32452","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:32452"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43867:4937","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:32430":{"id":"2:12097:32430","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11986:1407","str::slice_mut_unchecked":"2:12098:32431","crate::ops::Index":"2:2980:2175"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2549-0:71:1778":{"id":"b:2:2549-0:71:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2519:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:128","2:2553:1488"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:32:1813":{"id":"0:32:1813","crate_id":0,"name":"with_strategy","span":{"filename":"src/lib.rs","begin":[326,4],"end":[332,5]},"visibility":"public","docs":"Create a `ScopeGuard` that owns `v` (accessible through deref) and calls\n`dropfn` when its destructor runs.\n\nThe `Strategy` decides whether the scope guard's closure should run.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[443,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1806","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:2897:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:51:230","0:52:551"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8316:5964-0:71:1778":{"id":"a:2:8316:5964-0:71:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8316:5964","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:71:1778":{"id":"0:71:1778","crate_id":0,"name":"OnUnwind","span":{"filename":"src/lib.rs","begin":[220,0],"end":[220,20]},"visibility":"public","docs":"Run on scope exit through unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:8316:5964-0:71:1778","a:2:2683:220-0:71:1778","a:2:2740:2118-0:71:1778","a:2:8315:5965-0:71:1778","a:2:2700:228-0:71:1778","b:2:2554-0:71:1778","b:2:3319-0:71:1778","b:2:2249-0:71:1778","b:2:2539-0:71:1778","b:2:2549-0:71:1778","b:2:2543-0:71:1778","b:2:2252-0:71:1778","0:72","0:14"]}}},"b:2:3319-0:74:1780":{"id":"b:2:3319-0:74:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:67:671":{"id":"0:67:671","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[486,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9183:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9172:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12176:32446":{"id":"2:12176:32446","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11980:418","self::pattern":"2:11778:11186"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:4748":{"id":"2:12101:4748","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11980:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43520:4740","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8316:5964-0:21:1803":{"id":"a:2:8316:5964-0:21:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8316:5964","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8316:5964","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8316:5964","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12122:2308":{"id":"2:12122:2308","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41591:179","prim@char":"1:11980:418","self::pattern":"2:11778:11186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:33106":{"id":"5:5528:33106","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2192","`String`":"5:7451:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2192","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:4631","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:1826":{"id":"0:33:1826","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[357,4],"end":[369,5]},"visibility":"public","docs":"“Defuse” the guard and extract the value without calling the closure.\n\n```\nextern crate scopeguard;\n\nuse scopeguard::{guard, ScopeGuard};\n\nfn conditional() -> bool { true }\n\nfn main() {\n    let mut guard = guard(Vec::new(), |mut v| v.clear());\n    guard.push(1);\n\n    if conditional() {\n        // a condition maybe makes us decide to\n        // “defuse” the guard and get back its inner parts\n        let value = ScopeGuard::into_inner(guard);\n    } else {\n        // guard still exists in this branch\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["guard",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2543-0:68:1775":{"id":"b:2:2543-0:68:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2545:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2554-0:21:1803":{"id":"b:2:2554-0:21:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2557:128","2:2558:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12118:2349":{"id":"2:12118:2349","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41591:179","prim@char":"1:11980:418","self::pattern":"2:11778:11186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12129:24338":{"id":"2:12129:24338","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11980:418","self::pattern":"2:11778:11186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11601:4727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12179:22766":{"id":"2:12179:22766","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11980:418","self::pattern":"2:11778:11186"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12203:5757":{"id":"2:12203:5757","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:5757"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43858:4669","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12":{"id":"0:12","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,0],"end":[234,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:13:1770"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2558:1487":{"id":"2:2558:1487","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41733:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[435,0],"end":[441,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1806","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12080:32427":{"id":"2:12080:32427","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3319-0:71:1778":{"id":"b:2:3319-0:71:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2251:2079":{"id":"2:2251:2079","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:2118-0:71:1778":{"id":"a:2:2740:2118-0:71:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:13:1770":{"id":"0:13:1770","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[231,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9208:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:70:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2683:220-0:74:1780":{"id":"a:2:2683:220-0:74:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2557:128":{"id":"2:2557:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32099:5983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2252-0:21:1803":{"id":"b:2:2252-0:21:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2246:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2254:22467"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9208:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12198:23762":{"id":"2:12198:23762","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12115:23915":{"id":"2:12115:23915","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11980:418","self::pattern":"2:11778:11186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2549-0:68:1775":{"id":"b:2:2549-0:68:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2519:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:128","2:2553:1488"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:74:1780":{"id":"0:74:1780","crate_id":0,"name":"OnSuccess","span":{"filename":"src/lib.rs","begin":[227,0],"end":[227,21]},"visibility":"public","docs":"Run on regular scope exit, when not unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:8316:5964-0:74:1780","a:2:2683:220-0:74:1780","a:2:2740:2118-0:74:1780","a:2:8315:5965-0:74:1780","a:2:2700:228-0:74:1780","b:2:2554-0:74:1780","b:2:3319-0:74:1780","b:2:2249-0:74:1780","b:2:2539-0:74:1780","b:2:2549-0:74:1780","b:2:2543-0:74:1780","b:2:2252-0:74:1780","0:75","0:16"]}}},"b:2:2554-0:71:1778":{"id":"b:2:2554-0:71:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2557:128","2:2558:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:40:1793":{"id":"0:40:1793","crate_id":0,"name":"guard_on_unwind","span":{"filename":"src/lib.rs","begin":[425,0],"end":[430,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.\n\n## Examples\n\nFor performance reasons, or to emulate “only run guard on unwind” in\nno-std environments, we can also use the default guard and simply manually\ndefuse it at the end of scope like the following example. (The performance\nreason would be if the [`OnUnwind`]'s call to [std::thread::panicking()] is\nan issue.)\n\n```\nextern crate scopeguard;\n\nuse scopeguard::ScopeGuard;\n# fn main() {\n{\n    let guard = scopeguard::guard((), |_| {});\n\n    // rest of the code here\n\n    // we reached the end of scope without unwinding - defuse it\n    ScopeGuard::into_inner(guard);\n}\n# }\n```","links":{"std::thread::panicking()":"1:495:1037","`OnUnwind`":"0:71:1778"},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnUnwind","id":"0:71:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1806","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:1784":{"id":"0:18:1784","crate_id":0,"name":"defer","span":{"filename":"src/lib.rs","begin":[257,0],"end":[261,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (always run).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer {\n    ($($t:tt)*) => { ... };\n}"}},"2:12076":{"id":"2:12076","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12077:816","2:12078:2309","2:12079:32426","2:12080:32427","2:12082:32428","2:12085:23740","2:12086:32429","2:12087:314","2:12088:24306","2:12089:1852","2:12091:24303","2:12093:24304","2:12095:24305","2:12097:32430","2:12098:32431","2:12099:24329","2:12100:24330","2:12101:4748","2:12102:5047","2:12103:4657","2:12104:30144","2:12105:30127","2:12106:22510","2:12107:32432","2:12108:30131","2:12109:24346","2:12112:23913","2:12115:23915","2:12118:2349","2:12122:2308","2:12126:22509","2:12129:24338","2:12132:24340","2:12135:32433","2:12138:32434","2:12141:24342","2:12144:24344","2:12147:32435","2:12150:32436","2:12153:2092","2:12156:32437","2:12159:32438","2:12162:32439","2:12165:32440","2:12167:32441","2:12169:32442","2:12171:32443","2:12172:32444","2:12173:32445","2:12176:32446","2:12179:22766","2:12182:24347","2:12185:32447","2:12188:32448","2:12191:32449","2:12194:32450","2:12196:23761","2:12197:25464","2:12198:23762","2:12199:23758","2:12200:23757","2:12201:32451","2:12203:5757","2:12204:32452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3319-0:68:1775":{"id":"b:2:3319-0:68:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8315:5965-0:74:1780":{"id":"a:2:8315:5965-0:74:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8315:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12085:23740":{"id":"2:12085:23740","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11345:11187"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:671":{"id":"0:70:671","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9183:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9172:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:68:1775":{"id":"a:2:2700:228-0:68:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5513:2136":{"id":"5:5513:2136","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5531:23759":{"id":"5:5531:23759","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12200:23757"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[465,0],"end":[478,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1806","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:2921:1840","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:62:587"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2683:220-0:71:1778":{"id":"a:2:2683:220-0:71:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2542:2302":{"id":"2:2542:2302","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2516:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12144:24344":{"id":"2:12144:24344","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11980:418","str::splitn":"2:12141:24342","self::pattern":"2:11778:11186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43672:4733","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8316:5964-0:68:1775":{"id":"a:2:8316:5964-0:68:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8316:5964","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:20:1792":{"id":"0:20:1792","crate_id":0,"name":"defer_on_unwind","span":{"filename":"src/lib.rs","begin":[285,0],"end":[289,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on unwinding from panic).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_unwind {\n    ($($t:tt)*) => { ... };\n}"}},"b:2:2539-0:71:1778":{"id":"b:2:2539-0:71:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:2302"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2543-0:71:1778":{"id":"b:2:2543-0:71:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2545:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12167:32441":{"id":"2:12167:32441","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:1787":{"id":"0:34:1787","crate_id":0,"name":"guard","span":{"filename":"src/lib.rs","begin":[375,0],"end":[380,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"Always","id":"0:68:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1806","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12153:2092":{"id":"2:12153:2092","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11778:11186","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11980:418","str::matches":"2:12153:2092"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43754:5033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1868":{"id":"0:0:1868","crate_id":0,"name":"scopeguard","span":{"filename":"src/lib.rs","begin":[1,0],"end":[595,1]},"visibility":"public","docs":"A scope guard will run a given closure when it goes out of scope,\neven if the code between panics.\n(as long as panic doesn't abort)\n\n# Examples\n\n## Hello World\n\nThis example creates a scope guard with an example function:\n\n```\nextern crate scopeguard;\n\nfn f() {\n    let _guard = scopeguard::guard((), |_| {\n        println!(\"Hello Scope Exit!\");\n    });\n\n    // rest of the code here.\n\n    // Here, at the end of `_guard`'s scope, the guard's closure is called.\n    // It is also called if we exit this scope through unwinding instead.\n}\n# fn main() {\n#    f();\n# }\n```\n\n## `defer!`\n\nUse the `defer` macro to run an operation at scope exit,\neither regular scope exit or during unwinding from a panic.\n\n```\n#[macro_use(defer)] extern crate scopeguard;\n\nuse std::cell::Cell;\n\nfn main() {\n    // use a cell to observe drops during and after the scope guard is active\n    let drop_counter = Cell::new(0);\n    {\n        // Create a scope guard using `defer!` for the current scope\n        defer! {\n            drop_counter.set(1 + drop_counter.get());\n        }\n\n        // Do regular operations here in the meantime.\n\n        // Just before scope exit: it hasn't run yet.\n        assert_eq!(drop_counter.get(), 0);\n\n        // The following scope end is where the defer closure is called\n    }\n    assert_eq!(drop_counter.get(), 1);\n}\n```\n\n## Scope Guard with Value\n\nIf the scope guard closure needs to access an outer value that is also\nmutated outside of the scope guard, then you may want to use the scope guard\nwith a value. The guard works like a smart pointer, so the inner value can\nbe accessed by reference or by mutable reference.\n\n### 1. The guard owns a file\n\nIn this example, the scope guard owns a file and ensures pending writes are\nsynced at scope exit.\n\n```\nextern crate scopeguard;\n\nuse std::fs::*;\nuse std::io::{self, Write};\n# // Mock file so that we don't actually write a file\n# struct MockFile;\n# impl MockFile {\n#     fn create(_s: &str) -> io::Result<Self> { Ok(MockFile) }\n#     fn write_all(&self, _b: &[u8]) -> io::Result<()> { Ok(()) }\n#     fn sync_all(&self) -> io::Result<()> { Ok(()) }\n# }\n# use self::MockFile as File;\n\nfn try_main() -> io::Result<()> {\n    let f = File::create(\"newfile.txt\")?;\n    let mut file = scopeguard::guard(f, |f| {\n        // ensure we flush file at return or panic\n        let _ = f.sync_all();\n    });\n    // Access the file through the scope guard itself\n    file.write_all(b\"test me\\n\").map(|_| ())\n}\n\nfn main() {\n    try_main().unwrap();\n}\n\n```\n\n### 2. The guard restores an invariant on scope exit\n\n```\nextern crate scopeguard;\n\nuse std::mem::ManuallyDrop;\nuse std::ptr;\n\n// This function, just for this example, takes the first element\n// and inserts it into the assumed sorted tail of the vector.\n//\n// For optimization purposes we temporarily violate an invariant of the\n// Vec, that it owns all of its elements.\n//\n// The safe approach is to use swap, which means two writes to memory,\n// the optimization is to use a “hole” which uses only one write of memory\n// for each position it moves.\n//\n// We *must* use a scope guard to run this code safely. We\n// are running arbitrary user code (comparison operators) that may panic.\n// The scope guard ensures we restore the invariant after successful\n// exit or during unwinding from panic.\nfn insertion_sort_first<T>(v: &mut Vec<T>)\n    where T: PartialOrd\n{\n    struct Hole<'a, T: 'a> {\n        v: &'a mut Vec<T>,\n        index: usize,\n        value: ManuallyDrop<T>,\n    }\n\n    unsafe {\n        // Create a moved-from location in the vector, a “hole”.\n        let value = ptr::read(&v[0]);\n        let mut hole = Hole { v: v, index: 0, value: ManuallyDrop::new(value) };\n\n        // Use a scope guard with a value.\n        // At scope exit, plug the hole so that the vector is fully\n        // initialized again.\n        // The scope guard owns the hole, but we can access it through the guard.\n        let mut hole_guard = scopeguard::guard(hole, |hole| {\n            // plug the hole in the vector with the value that was // taken out\n            let index = hole.index;\n            ptr::copy_nonoverlapping(&*hole.value, &mut hole.v[index], 1);\n        });\n\n        // run algorithm that moves the hole in the vector here\n        // move the hole until it's in a sorted position\n        for i in 1..hole_guard.v.len() {\n            if *hole_guard.value >= hole_guard.v[i] {\n                // move the element back and the hole forward\n                let index = hole_guard.index;\n                hole_guard.v.swap(index, index + 1);\n                hole_guard.index += 1;\n            } else {\n                break;\n            }\n        }\n\n        // When the scope exits here, the Vec becomes whole again!\n    }\n}\n\nfn main() {\n    let string = String::from;\n    let mut data = vec![string(\"c\"), string(\"a\"), string(\"b\"), string(\"d\")];\n    insertion_sort_first(&mut data);\n    assert_eq!(data, vec![\"a\", \"b\", \"c\", \"d\"]);\n}\n\n```\n\n\n# Crate Features\n\n- `use_std`\n  + Enabled by default. Enables the `OnUnwind` and `OnSuccess` strategies.\n  + Disable to use `no_std`.\n\n# Rust Version\n\nThis version of the crate requires Rust 1.20 or later.\n\nThe scopeguard 1.x release series will use a carefully considered version\nupgrade policy, where in a later 1.x version, we will raise the minimum\nrequired Rust version.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/scopeguard/1/\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1767","0:68:1775","0:71:1778","0:74:1780","0:21:1803","0:34:1787","0:37:1790","0:40:1793","0:18:1784","0:19:1789","0:20:1792"],"is_stripped":false}}},"2:12147:32435":{"id":"2:12147:32435","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12150:32436":{"id":"2:12150:32436","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2252-0:71:1778":{"id":"b:2:2252-0:71:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2246:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2254:22467"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:73:671":{"id":"0:73:671","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9183:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9172:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:314":{"id":"2:12087:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12088:24306","`u8`":"1:11997:1510"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12156:32437":{"id":"2:12156:32437","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11778:11186","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11980:418","str::matches":"2:12153:2092"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43772:5034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8315:5965-0:21:1803":{"id":"a:2:8315:5965-0:21:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8315:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8315:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8315:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:37:1790":{"id":"0:37:1790","crate_id":0,"name":"guard_on_success","span":{"filename":"src/lib.rs","begin":[388,0],"end":[393,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnSuccess","id":"0:74:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1806","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:32442":{"id":"2:12169:32442","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2254:22467":{"id":"2:2254:22467","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:32451":{"id":"2:12201:32451","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:32451"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43849:4938","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:33105":{"id":"5:5527:33105","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:2118-0:74:1780":{"id":"a:2:2740:2118-0:74:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2539-0:68:1775":{"id":"b:2:2539-0:68:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:2302"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:21:1803":{"id":"0:21:1803","crate_id":0,"name":"ScopeGuard","span":{"filename":"src/lib.rs","begin":[304,0],"end":[313,1]},"visibility":"public","docs":"`ScopeGuard` is a scope guard that may own a protected value.\n\nIf you place a guard in a local variable, the closure can\nrun regardless how you leave the scope — through regular return or panic\n(except if panic or other code aborts; so as long as destructors run).\nIt is run only once.\n\nThe `S` parameter for [`Strategy`](trait.Strategy.html) determines if\nthe closure actually runs.\n\nThe guard's closure will be called with the held value in the destructor.\n\nThe `ScopeGuard` implements `Deref` so that you can access the inner value.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Always","id":"0:68:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1806","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:28","a:2:8316:5964-0:21:1803","a:2:2683:220-0:21:1803","a:2:2740:2118-0:21:1803","a:2:8315:5965-0:21:1803","b:2:2554-0:21:1803","b:2:3319-0:21:1803","b:2:2249-0:21:1803","b:2:2539-0:21:1803","b:2:2549-0:21:1803","b:2:2543-0:21:1803","b:2:2252-0:21:1803","0:53","0:43","0:58","0:63","0:47"]}}},"2:12082:32428":{"id":"2:12082:32428","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12080:32427"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12185:32447":{"id":"2:12185:32447","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11980:418","self::pattern":"2:11778:11186"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15:1770":{"id":"0:15:1770","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[239,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[250,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:17:1770"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:10:1767":{"id":"0:10:1767","crate_id":0,"name":"Strategy","span":{"filename":"src/lib.rs","begin":[201,0],"end":[205,1]},"visibility":"public","docs":"Controls in which cases the associated code should be run","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:11:1770"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:14","0:12","0:16"]}}},"a:2:8315:5965-0:68:1775":{"id":"a:2:8315:5965-0:68:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8315:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2700:228-0:74:1780":{"id":"a:2:2700:228-0:74:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:76:671":{"id":"0:76:671","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9183:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9172:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2539-0:21:1803":{"id":"b:2:2539-0:21:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2542:2302"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:51:230":{"id":"0:51:230","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[448,4],"end":[448,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:12086:32429":{"id":"2:12086:32429","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2252-0:68:1775":{"id":"b:2:2252-0:68:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2246:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2254:22467"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12108:30131":{"id":"2:12108:30131","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43842:4747","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2552:128":{"id":"2:2552:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:2:2539-0:74:1780":{"id":"b:2:2539-0:74:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:2302"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12162:32439":{"id":"2:12162:32439","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11778:11186","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11980:418","str::match_indices":"2:12159:32438"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43718:5032","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12173:32445":{"id":"2:12173:32445","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11980:418","self::pattern":"2:11778:11186"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11803:11183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12197:25464":{"id":"2:12197:25464","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39628:24285","Self::is_ascii":"2:12196:23761"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39628:24285","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11:1770":{"id":"0:11:1770","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,28]},"visibility":"default","docs":"Return `true` if the guard’s associated code should run\n(in the context where this method is called).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2252-0:74:1780":{"id":"b:2:2252-0:74:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2246:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2254:22467"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5512:33102":{"id":"5:5512:33102","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2192","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:4631","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2192","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:4631","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:551":{"id":"0:52:551","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[450,4],"end":[452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12199:23758":{"id":"2:12199:23758","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2249-0:71:1778":{"id":"b:2:2249-0:71:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2243:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2251:2079"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12107:32432":{"id":"2:12107:32432","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43814:5036","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:587":{"id":"0:62:587","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[470,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2543-0:21:1803":{"id":"b:2:2543-0:21:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2545:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5516:33103":{"id":"5:5516:33103","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:553":{"id":"0:57:553","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[460,4],"end":[462,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12078:2309":{"id":"2:12078:2309","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8316:5964-0:74:1780":{"id":"a:2:8316:5964-0:74:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8316:5964","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3321:1501":{"id":"2:3321:1501","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39420:4800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12126:22509":{"id":"2:12126:22509","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11778:11186","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11980:418","str::split_whitespace":"2:12104:30144","str::rsplit":"2:12132:24340"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43550:4725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3319-0:21:1803":{"id":"b:2:3319-0:21:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3321:1501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:19:1789":{"id":"0:19:1789","crate_id":0,"name":"defer_on_success","span":{"filename":"src/lib.rs","begin":[271,0],"end":[275,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on successful scope exit).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_success {\n    ($($t:tt)*) => { ... };\n}"}},"2:12099:24329":{"id":"2:12099:24329","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12100:24330"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2249-0:68:1775":{"id":"b:2:2249-0:68:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2243:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2251:2079"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5529:5877":{"id":"5:5529:5877","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17:1770":{"id":"0:17:1770","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[247,4],"end":[249,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:4657":{"id":"2:12103:4657","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43536:2868","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:30127":{"id":"2:12105:30127","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12104:30144"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43833:5038","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12079:32426":{"id":"2:12079:32426","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12172:32444":{"id":"2:12172:32444","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2549-0:21:1803":{"id":"b:2:2549-0:21:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2519:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2552:128","2:2553:1488"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2683:220-0:68:1775":{"id":"a:2:2683:220-0:68:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2740:2118-0:21:1803":{"id":"a:2:2740:2118-0:21:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2740:2118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2740:2118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2545:697":{"id":"2:2545:697","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1775":{"id":"0:68:1775","crate_id":0,"name":"Always","span":{"filename":"src/lib.rs","begin":[213,0],"end":[213,18]},"visibility":"public","docs":"Always run on scope exit.\n\n“Always” run: on regular exit from a scope or on unwinding from a panic.\nCan not run on abort, process exit, and other catastrophic events where\ndestructors don’t run.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:8316:5964-0:68:1775","a:2:2683:220-0:68:1775","a:2:2740:2118-0:68:1775","a:2:8315:5965-0:68:1775","a:2:2700:228-0:68:1775","b:2:2554-0:68:1775","b:2:3319-0:68:1775","b:2:2249-0:68:1775","b:2:2539-0:68:1775","b:2:2549-0:68:1775","b:2:2543-0:68:1775","b:2:2252-0:68:1775","0:12","0:69"]}}},"2:12091:24303":{"id":"2:12091:24303","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41591:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:32443":{"id":"2:12171:32443","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2249-0:21:1803":{"id":"b:2:2249-0:21:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2243:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1803","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2251:2079"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12182:24347":{"id":"2:12182:24347","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11980:418","self::pattern":"2:11778:11186"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:2118-0:68:1775":{"id":"a:2:2740:2118-0:68:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12196:23761":{"id":"2:12196:23761","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:4723:15590":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:2926:17457":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:3583:4527":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:5551:5981":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:42636:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:41776:4527":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:39154:2189":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:43867:4937":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:6651:2322":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:8021:4418":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:8198:4969":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:7061:4272":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:4328:15552":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:3042:17459":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:6384:5257":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:39295:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:5977:5643":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:9153:2865":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:4824:15603":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"11:2180:34695":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:6461:2714":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"11:119:2598":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:5567:3980":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:7634:5849":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"19:0:1036":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:3519:2893":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:7331:34774":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:3867:4008":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:933:5772":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:10945:3157":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:8794:5366":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:4630:25807":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:11118:3177":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:7268:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:8909:30841":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:12396:31232":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:10175:3010":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:8870:5248":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:4047:5902":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"18:614:34788":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:7693:3985":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:4787:15598":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:45785:5082":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:43448:5021":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:13591:3689":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:9528:34778":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:1075:2879":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:47879:5175":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"10:0:1981":{"crate_id":10,"path":["adler"],"kind":"module"},"17:14227:3869":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:4315:15551":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4938:15615":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:5673:18316":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:7505:15789":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:11125:11506":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:20609:2821":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:41865:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:22079:4783":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:47841:5172":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:3732:5226":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:919:4528":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:21027:6033":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:2523:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:55:4409":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"14:187:17399":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"18:491:2810":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:32099:5983":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:6986:4263":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:21229:5849":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:21966:29878":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:8152:3997":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:40654:4969":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:40126:4938":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:39193:2186":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:41640:2313":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"18:671:2842":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"0:74:1780":{"crate_id":0,"path":["scopeguard","OnSuccess"],"kind":"enum"},"2:2787:2161":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:12671:5773":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:119:11784":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:6308:6119":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:14359:3907":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:9840:3022":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:3233:2188":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:11127:3211":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:2567:3961":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:11979:941":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:6077:16291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:3220:4001":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"0:0:1868":{"crate_id":0,"path":["scopeguard"],"kind":"module"},"16:5612:4038":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:5849:16233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:4010:4671":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:6688:13124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:7855:5283":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:2360:2375":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:42099:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:2105:18443":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:2541:3960":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:13683:3710":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:23164:4661":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:9274:2470":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:44345:5062":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"11:695:4529":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:40133:11255":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:13830:3743":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:8976:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:43804:5035":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:10621:3108":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:10772:5284":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:2984:2176":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:495:1037":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"16:6470:3996":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:3570:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:3894:4009":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:13847:3751":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:11985:1377":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:9926:3032":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:4039:5900":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:2399:3954":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:13854:3752":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:10377:3078":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:5955:16280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:12003:1564":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:12000:1509":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:4560:5942":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:44149:5057":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:10845:3148":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"11:2033:4273":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:5028:4031":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:13749:3726":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"7:32:17287":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"18:636:2835":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:6239:34776":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:8111:5328":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"11:723:4530":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:8864:2314":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:8474:5359":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"11:644:4546":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:2900:3975":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:6540:3984":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:624:34789":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:40225:4947":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:6347:18320":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:14026:3798":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8139:2857":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:7553:4360":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:11803:11183":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:2152:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:13179:3531":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:4395:15401":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:44002:5049":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:2376:5838":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:4166:2634":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:8982:2251":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:6317:4161":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:43085:5008":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:47899:5177":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:11791:3258":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:6720:16702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:14301:3890":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"11:2194:34697":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:44269:11490":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:45939:5088":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:11109:3176":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:21792:4761":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:11467:3210":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:6323:4162":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:44281:11494":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:20988:2384":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:40879:4970":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:21898:4763":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:4035:5899":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:13557:3686":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13862:3753":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:44162:5061":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:8918:6000":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"9:237:5002":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:20841:6036":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12354:3381":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12840:3472":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:3596:4546":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"11:736:4531":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:8491:5975":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:8533:5233":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:11560:5272":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:10760:5405":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:5775:4057":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:10299:5246":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:4628:25805":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:4872:15609":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:6421:4970":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:44293:11497":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:47940:5180":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:12878:3476":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:2332:3946":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:8934:6002":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:6571:18321":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:11753:3243":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:11241:18512":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:21954:4769":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:14329:3899":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:6977:4260":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"0:19:1789":{"crate_id":0,"path":["scopeguard","defer_on_success"],"kind":"macro"},"16:5639:4047":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:2966:33397":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:44527:5067":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:11980:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:13778:3734":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:4753:4022":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:32226:2123":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:11996:743":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:11302:5269":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:1595:13008":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12826:3470":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:1973:2882":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:629:4625":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:14163:3850":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:10013:3038":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:9097:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:1649:13012":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:3373:11218":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:434:2876":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:42645:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:12303:3368":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:2883:2699":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:2683:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"11:844:4538":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:8290:5343":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"11:760:2647":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:8210:4325":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:9102:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:41716:11450":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:13140:3521":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:12579:2691":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:1603:13009":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:3222:5216":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:11423:5225":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"11:1852:4552":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:7599:17270":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:11642:3224":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:7384:4652":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:9879:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:9223:2867":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:10544:3098":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:11943:3285":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:1672:2608":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:13949:3779":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:39628:24285":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"11:968:4273":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:6888:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:4263:4675":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:40344:4953":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:3204:4552":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:10123:3030":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:10509:5217":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:9990:3037":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:6067:16290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:14150:3844":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:4396:4012":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:1928:656":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:11329:28488":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"9:0:1980":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:13368:3584":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:1045:4273":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"9:393:17307":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:14:2095":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:13999:3791":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12605:3419":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:11591:3185":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:35:2604":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:4848:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:4564:4017":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"11:285:5635":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:10330:3068":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:43550:4725":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:2293:17431":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:9184:26145":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:4724:4021":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:46351:5106":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:5962:2702":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:4341:15553":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4810:15601":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12077:3309":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:8800:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:1717:13019":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:504:2877":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:872:4530":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:11210:3188":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:5805:16271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4833:15604":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:506:12105":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:5015:15624":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:7043:2705":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:4770:15596":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:9221:2223":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:10119:4727":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:4466:5924":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:13548:3682":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:5972:3935":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:6554:4186":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"18:736:22346":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:10253:3058":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:8997:18365":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:1545:13003":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:8138:4431":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:12671:3428":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:13639:3698":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:11272:3197":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:2752:2151":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"11:2168:34696":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:11189:3185":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:13707:3712":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:8383:5960":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:4032:4010":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:11254:5264":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:8284:5923":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:6658:4210":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:25974:4662":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:10280:3060":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:7679:3995":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:11567:5272":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:8422:4717":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:21044:5849":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:47407:5165":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13109:3515":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:40058:29873":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:2689:3966":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:3217:33431":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:2516:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:40088:4935":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:42845:4995":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:13732:3721":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:8542:18366":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:7264:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:1513:12999":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:47765:5170":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"11:1501:17387":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:12374:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"9:450:17306":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"0:68:1775":{"crate_id":0,"path":["scopeguard","Always"],"kind":"enum"},"1:9194:26049":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:7184:4631":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:6713:4223":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:494:12103":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:32139:4794":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"12:0:1983":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:11181:5262":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"11:1831:2647":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:10051:4546":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:39381:2178":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:10097:3047":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:950:4537":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:11093:5367":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:541:12108":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:43438:5020":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:5737:18317":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:2767:2152":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:10223:3056":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:43842:4747":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:4476:4014":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:477:2693":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:4543:15575":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:11550:4745":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:9690:2686":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:5877:16275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:9658:2680":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:4428:2636":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:45855:5085":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:12004:1134":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:5994:16284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:9475:3007":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:22043:29868":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:41665:2314":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:43104:4723":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:2799:2160":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:8279:5922":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:11962:23460":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:6894:2717":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:4887:15610":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"18:521:22348":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:8230:5338":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:5916:3929":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:20855:2384":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:6850:16711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:10799:3144":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:10981:3160":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:5042:5238":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:1636:2138":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:12815:3468":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:5615:2702":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:39434:4325":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"6:7295:17083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:11178:3183":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:6805:16707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:41421:4709":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:5386:5243":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:7547:2651":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:8350:5232":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:5959:4086":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:42060:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:5130:2642":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:13787:3735":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:10994:3161":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4626:15582":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:12002:793":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:7850:5282":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:7227:11402":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"14:7:4518":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:13566:3687":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:2243:33472":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:5863:16234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:1011:2608":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:12616:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:11400:2732":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:7540:15794":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:7398:29915":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:7698:32136":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:44285:11498":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:40192:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:11924:3284":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"18:660:2836":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:554:12110":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:40118:4669":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:10671:18485":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:21236:6038":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:9436:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:2162:2384":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:12148:3333":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:39240:2177":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:4735:5911":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:1663:13013":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:10955:5369":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:32135:4793":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:13574:3688":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:4996:4030":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:45754:5081":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:12333:3377":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:1841:2470":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:4350:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:0:1986":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:4748:15593":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:44519:5065":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:6240:2702":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:2804:2165":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:13125:3517":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:45985:5095":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:7440:2643":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:2592:5210":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:43833:5038":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:47925:5179":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:3058:2901":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:6036:16289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"11:1826:2628":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:4973:15620":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:43346:5013":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:2663:3965":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:6692:18322":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:11498:3211":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:12631:3423":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:782:2611":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:6214:4144":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:41438:4711":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:9977:3011":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:8166:4433":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:1536:13002":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:40372:4957":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:43754:5033":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:9107:5262":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"9:357:17321":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:21454:6035":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:42685:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"18:538:2818":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:21060:6028":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:43377:5016":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:9734:3013":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:8043:4419":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:2826:2166":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:1776:2647":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"7:0:1554":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:5119:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:11568:18391":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:11984:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"11:1838:4550":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:2737:2117":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:1273:4541":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"15:306:17412":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:3933:5892":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:13427:3636":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:11738:5976":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:22453:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:5301:4034":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:8272:5228":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:5590:3982":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:10633:3109":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:7272:17081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:13659:3706":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"11:0:1982":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:5925:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:3151:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:2265:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:9967:4981":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:11331:4738":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:256:2870":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:9409:34784":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:11888:3277":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:6648:13141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:11220:18511":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:358:2270":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:5589:4684":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:6711:16701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5058:15628":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:12479:3401":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12053:3305":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:12952:3487":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:9592:2677":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:3212:4550":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:2223:33893":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:4:1019":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:2133:2886":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:43366:5015":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:7996:5289":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:7073:18324":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:14044:3801":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:7539:3993":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:12001:1506":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:908:2647":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:9744:34780":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:4469:15566":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:7367:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:10293:3061":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:4908:15612":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:7463:17242":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:14259:3884":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:44301:11492":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:9118:2864":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:1077:4545":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:1118:5638":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:7263:4650":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:5704:4051":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:1068:4541":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:6931:4249":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:43100:30026":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:6303:3976":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12659:3427":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:5882:4073":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:13043:3508":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:2803:3971":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:1543:2634":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:12552:3116":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:11520:2894":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:11056:18510":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:22585:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:39359:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"18:719:2852":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"0:21:1803":{"crate_id":0,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"2:2470:5849":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:11798:11184":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"7:79:17294":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:7020:2718":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:4409:2124":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:10931:3153":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:46563:5125":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:6565:12151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:8771:18381":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:20667:30419":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:5554:5982":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:6357:4166":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:43337:5011":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:5882:16276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:40362:4955":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:46609:5126":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:635:5195":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:10361:3076":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:10742:29022":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:3927:5893":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:12851:3473":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:10404:5366":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:5471:2634":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:2403:1995":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:1569:2647":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"11:1027:17386":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:14380:3910":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:40888:4701":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:40913:4703":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:39315:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:3377:4971":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12579:3416":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:4325:2667":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:2570:2681":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:10969:3159":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:8736:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:1709:13018":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:4678:5891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:9173:2219":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:40159:11256":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"10:44:4556":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:7515:4359":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:3513:2628":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:2362:5834":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:46131:5099":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:9476:2724":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:6044:34324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:6790:2657":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:5767:16267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:1917:2406":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:6667:4211":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:8949:18387":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:42340:2221":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:42620:4396":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:8840:5369":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:4733:5910":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:43600:5029":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:1411:4527":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:4842:15605":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:4811:799":{"crate_id":2,"path":["core","iter"],"kind":"module"},"18:582:2821":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:12035:3304":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:11998:1507":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:6057:17430":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:6171:16320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:8316:5964":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:3998:4670":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:10609:3107":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:40500:2833":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:46037:5097":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:42590:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"18:564:2820":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:4113:4672":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:6705:16700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:14102:3843":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:1780:5201":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:4456:15564":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:6197:4137":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:3991:5897":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:3187:29216":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"11:2060:4541":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:6726:16703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:5437:5246":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:5372:5239":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:42354:2222":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:12365:3384":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:41589:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12161:3337":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:21112:6032":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:4463:15565":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:6008:16285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"11:1858:4553":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:5956:2642":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:20941:6042":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:2970:33395":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:3295:4002":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:3220:5215":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:13981:3787":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:3111:5212":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"0:18:1784":{"crate_id":0,"path":["scopeguard","defer"],"kind":"macro"},"2:41527:4984":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:41826:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:7546:15795":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:9223:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:7231:11401":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:6673:5257":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:6915:34772":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:6516:4184":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:527:2252":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:12361:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:42347:2220":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:40331:4952":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:40443:4690":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:10303:2943":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:9442:34786":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:7902:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:2141:4634":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:2748:2122":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:1590:13007":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:46799:5129":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:7362:18325":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:4897:5949":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:42892:5006":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:5398:2997":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:41707:4988":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:12757:3456":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:1638:13011":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:5080:15631":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:6022:16287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:5818:16272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:4929:15614":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:4761:671":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"5:7213:2628":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:9032:5384":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"11:1845:4551":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:956:4538":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:3934:2634":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:12004:3295":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:8659:18378":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:11290:18388":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"11:986:4539":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:8105:4427":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:9145:5386":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:6502:4182":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:21675:6031":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:914:4547":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:40046:4931":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:20622:30147":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:6372:3978":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:10511:3092":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:8006:5876":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:30545:29912":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:12346:3379":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:43985:5048":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:6834:16709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:6983:2857":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:10555:3099":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:3407:2634":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:2313:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:2049:4633":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:9875:3025":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:42900:5007":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:12502:3406":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:9518:3008":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:1631:13010":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:6598:16697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:6638:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:1843:5204":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:1820:2405":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:6332:4163":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:11986:1407":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:12424:3392":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:40145:4940":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"18:507:2811":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"11:1538:4549":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:2816:2163":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:9471:11267":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:30915:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:0:821":{"crate_id":6,"path":["libc"],"kind":"module"},"2:40475:4964":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:42870:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:46015:5096":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:13795:3737":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:44484:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:9716:34787":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"11:1012:4541":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:11987:1491":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:7872:5285":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:3078:2179":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:1473:4531":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:7753:4369":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:6160:4120":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:10269:4731":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:10718:5399":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:673:5646":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:45684:5078":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:8167:5848":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:12377:3386":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:5990:4686":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:12457:3400":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:3777:4006":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:7531:2647":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:22486:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:7465:4659":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:41398:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:2164:2889":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:6724:4224":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:41943:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"11:2174:31777":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"14:165:17392":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:4698:4020":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:6137:2691":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:2779:2154":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:1565:2628":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:44273:11493":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:9561:3009":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:5531:4682":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:3453:5223":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:2918:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"6:4606:15580":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:9464:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"11:798:4532":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:22420:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:3501:28853":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:13096:3514":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:42218:4719":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4800:15600":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4664:15585":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:11981:1526":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:2832:2167":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:4004:2628":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:40903:2675":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:11416:3206":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:13016:3506":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:4900:4027":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:13771:3732":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:43458:5022":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:6957:2663":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:841:4527":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:5793:4062":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:2962:2185":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:7592:18326":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:7723:5761":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:10957:3158":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13937:3776":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:47888:5176":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"0:10:1767":{"crate_id":0,"path":["scopeguard","Strategy"],"kind":"trait"},"2:43536:2868":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:43618:5030":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:11007:3162":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:44540:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:2035:4632":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:9296:2872":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:20805:6034":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:41455:5887":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:47517:5166":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:2821:2164":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:40682:4697":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:2855:2172":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:11144:3180":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:7201:4649":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:7038:4270":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:4446:15563":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:10782:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:11726:3235":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:9850:18400":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:10323:3065":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:2931:1806":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:12592:3418":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:5967:16281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:11669:3225":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:11164:3182":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:45560:5073":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:4535:15574":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:14054:3806":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:5406:5244":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:12254:3343":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:21106:6030":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:10430:3083":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:10403:3081":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:13957:3782":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:12065:3308":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:10870:4737":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:21930:4764":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:10568:3102":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4291:15549":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:30367:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:6441:2628":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4587:15579":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:6834:11396":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:13905:3765":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:5738:5250":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:4436:2232":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:9866:3023":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:4177:5921":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:49861:6045":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:2874:3974":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:410:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:45837:5084":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:9046:23453":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:3441:4003":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:3647:2314":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:3162:2182":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:46183:5101":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:42861:4998":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:3517:5868":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:10883:3150":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"18:113:22337":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:7517:15791":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:4949:15617":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:46721:5128":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"11:2186:34700":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:2170:33475":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:5068:15629":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:12921:3482":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:46161:5100":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:5100:4033":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:8549:5364":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:8401:5356":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:46085:5098":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"11:1048:34694":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:5843:4070":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:6775:16705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"6:7552:15796":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:4144:4673":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:44128:11199":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:2632:5211":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:13167:3524":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"18:727:2855":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:39448:2230":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:10597:3106":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:2510:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:13069:3510":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:3963:5894":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:5608:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:22684:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"9:507:4611":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:10339:3071":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:44297:11491":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:40484:4692":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:9219:2222":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:3186:2890":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:1558:4527":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:2690:2114":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:13456:3647":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:7370:26493":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:40037:4930":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:13870:3754":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:2705:1762":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:1982:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:822:2614":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:1574:4550":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:599:34791":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"11:1517:4548":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:10313:3063":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:3580:4004":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:43416:5018":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:2695:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:44289:11496":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:11199:3187":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:4483:15568":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:22618:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:42179:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:9887:3028":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:7099:5384":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:10158:4728":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:8176:18329":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:474:12100":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:11541:5413":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:4992:15622":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:7289:4304":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:8856:5371":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:2910:1765":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:9274:2868":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:9067:5696":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:9016:2996":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:5720:4053":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:9048:2862":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:6175:4122":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:11264:3195":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:12994:3495":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:6932:2660":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:11021:2727":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:40209:29915":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:5422:5245":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:498:2247":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:4650:15584":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:41649:4527":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:0:1987":{"crate_id":17,"path":["object"],"kind":"module"},"6:4420:15560":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:13894:3761":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:2838:2168":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:12618:3421":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:14350:3905":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"11:1121:4545":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:10228:5985":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:4380:5231":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:22552:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:39255:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:1818:5203":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:4186:1844":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:4812:5907":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:6607:16698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:11329:18389":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:500:12104":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:4616:5897":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:11260:5412":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:8957:5373":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:8740:18380":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:7757:5281":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:5651:3981":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:3330:2647":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:10937:23447":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:3802:2647":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:532:12107":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:4304:15550":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:6396:4170":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:207:2606":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:2783:2157":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:80:22335":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:11144:5263":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:44476:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:7855:18328":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:41725:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:6939:18323":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:1892:5205":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:3729:5225":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:8812:5367":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:6015:16286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:47914:5178":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:11601:4727":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:40178:4945":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:2791:2159":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:11045:3165":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:2962:33394":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:40239:5818":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"6:6573:12956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:4156:5919":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:5491:5247":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:1575:13006":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:7845:2944":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:42853:4997":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:11967:3289":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:1702:5915":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:2850:2171":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:6590:5648":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:13673:3709":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:9318:2998":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:5775:16268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:7463:4354":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:46304:5105":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4764:15595":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:9024:5382":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:42580:30128":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:12318:3372":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:4984:15621":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:7761:4793":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"11:630:4527":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:22105:5890":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:6744:16704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:48016:5184":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:20897:6041":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:22093:4784":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:40272:2669":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:4436:15562":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:1500:12997":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:3671:2608":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"9:330:17361":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:2737:3968":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11992:3294":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:40031:4669":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:4862:15608":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:47963:5181":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:1673:13014":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:10506:5215":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:40302:4949":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:13620:3697":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:11696:3231":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:11237:2730":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"5:4034:2608":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:11978:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:2131:2247":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:8324:5347":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:3722:4632":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:11084:3167":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12394:3389":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:11852:3272":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:1746:30108":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:1482:4547":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10199:3055":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:21238:4760":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:40514:4694":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:40353:4954":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:12448:4756":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:12792:3467":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:10231:4730":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:41484:30119":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:4764:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:1755:2402":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:261:2608":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:11553:26401":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:43700:5031":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:4963:15619":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:6156:16319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:41540:5228":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:40423:4685":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:10038:3040":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4413:15559":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:595:12116":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:3510:5847":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:8317:1846":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:2243:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:4428:15561":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:4536:4016":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:3168:2184":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:944:4535":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:9162:5387":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:30120:5889":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:10581:3104":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"11:2049:4539":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:6763:4236":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:2745:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:39337:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:5978:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:2465:3957":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:5900:16278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:6425:5258":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:2471:11262":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:3385:4668":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"5:3178:4551":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:3492:2219":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:8848:4527":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:10390:3080":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:46639:5127":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:9777:18398":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:44114:5052":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:30943:2821":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:5841:2628":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:7558:15797":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:44466:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:8872:18384":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:7665:3994":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:587:12115":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:4691:5951":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:9188:2866":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:39441:4801":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:10076:4725":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:9225:2224":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:4518:15572":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:8899:18385":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:40414:4961":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:7240:34777":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"9:52:17324":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:2602:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:43718:5032":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:1184:2881":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:2352:3952":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:3737:4633":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:6671:13126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:20637:30147":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:8188:4952":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:10916:4608":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:13029:3507":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:8841:18383":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:10447:2725":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:8971:5374":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:44077:4750":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:43672:4733":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:10499:3089":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:45892:5087":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:7657:5777":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:8155:5224":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:9217:2221":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:2795:2158":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:44569:4555":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"4:0:1978":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:11250:3192":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:11287:5268":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:7329:2190":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"11:311:34701":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:352:2269":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:898:2628":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:21989:4771":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:21845:4762":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:2421:3955":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"11:1611:1803":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:21914:30098":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6900:4246":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:5320:2608":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"15:394:17422":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:11955:3288":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:7451:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:3156:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:9083:2863":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"18:96:22336":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:8605:18364":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:526:12106":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:41563:4712":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:2589:3962":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:3025:3998":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:2507:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:30345:2141":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:5836:16274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"0:34:1787":{"crate_id":0,"path":["scopeguard","guard"],"kind":"function"},"17:13697:3711":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:3635:2905":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:7193:2314":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:11335:26423":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:40322:4951":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:7484:4357":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:20652:30420":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:9019:5381":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:8068:4422":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:4126:28487":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:4789:2700":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:2715:3967":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:7247:2314":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:10832:3147":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:4785:4023":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:10512:5219":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:8298:5336":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:9869:5849":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:2373:3953":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"11:1822:2314":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:1765:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:4389:15557":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:12004:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:4731:5908":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:9092:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:7505:3991":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:11371:3204":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:11991:645":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:11767:3244":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:2355:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:40465:4963":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:2694:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:5553:3977":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:3667:5888":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4740:15592":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:2740:2118":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:10906:3151":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:4389:2231":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:4848:15606":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:20803:5849":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"5:2461:5639":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:2164:2385":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:4228:5229":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:4568:15578":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:568:12112":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:4694:5924":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"5:1102:33801":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:6978:25606":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:5816:2704":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:5807:4063":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:8315:5965":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:11763:2736":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:8306:5345":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:8543:4527":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:42361:2223":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:14236:3871":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:43508:5026":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:2920:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:4695:15587":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:728:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:10486:3088":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:2611:3963":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:10051:3041":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:4401:15558":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:6438:4173":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:4818:15602":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:43858:4669":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:2443:3956":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"11:836:4537":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:12017:3296":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:21673:5849":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:9614:34779":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:551:2254":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:47265:5164":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:14177:3856":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:12106:3318":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11872:3273":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:43520:4740":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:9428:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:8211:4725":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:10654:3111":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"18:531:2815":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:11428:3207":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:3395:2892":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:488:12102":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:10027:4527":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:46229:5103":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:6639:2608":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:10110:3048":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:5622:2703":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:11117:28514":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:42140:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:1690:13016":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:12423:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:43814:5036":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:6289:4159":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:2928:2174":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:1138:33802":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:43429:5019":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:1666:1092":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:6185:5256":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:8711:18379":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:1302:4545":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:6487:2608":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:11020:3163":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:12005:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:5920:16279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:45736:5080":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:47719:5169":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:4045:11159":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12646:3426":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:2246:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:30311:1764":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:4955:5956":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:5689:4048":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:3171:4527":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:5363:18315":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:22354:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:11815:3259":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:11792:2848":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:10324:4733":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:41575:4714":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:1557:13004":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"0:20:1792":{"crate_id":0,"path":["scopeguard","defer_on_unwind"],"kind":"macro"},"1:4148:5918":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:6604:2715":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:21104:5849":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:6128:4115":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"13:0:1977":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:3985:5896":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:42882:5002":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:30351:2142":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:1979:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:7654:5774":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:4704:15588":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:44324:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:8146:5222":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:40921:4705":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:10812:3146":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:690:2845":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:13448:3646":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:2857:3973":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:11983:1054":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:40152:4941":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:14417:3917":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:43654:4732":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:7572:2720":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:10140:5390":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:9485:34782":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:7862:5284":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:3181:26741":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:5737:16205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:1527:13001":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:44050:5051":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:11946:26500":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:1288:4539":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:9806:18399":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:47595:5167":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:5025:15625":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"9:177:17374":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:10090:5652":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:5382:2996":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:41784:4546":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:7586:15800":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:653:12163":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"18:609:2829":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:9208:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:43772:5034":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:2513:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:42663:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:2962:17458":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:7494:4358":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:10802:5224":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:13991:3790":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:7622:4364":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:400:2873":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:7525:3992":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:2980:2175":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:8741:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:6136:15466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:2497:3958":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:2318:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"15:288:17411":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:4475:15567":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:14403:3914":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"10:36:34693":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:1732:2403":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:5074:15630":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:8826:5368":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:11034:3164":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:7631:4365":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:1520:13000":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:10196:4729":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:4605:11249":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:9821:3020":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:21981:4770":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:1495:12996":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:41504:29807":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:5614:2645":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"18:707:2848":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:14282:3885":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:9215:2220":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:4258:4674":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:2493:5209":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:21459:6043":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:9213:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:14189:3859":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:41801:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:8632:18377":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:42021:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:11464:5226":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:44139:5053":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:21:684":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:11542:3213":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:11032:2728":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:2519:3959":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:2959:2372":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:10338:4734":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:11929:5419":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:14007:3793":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:40865:4699":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:5383:2634":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:7255:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:7739:3983":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:1782:5202":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:10786:3143":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:48055:5185":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:4025:5898":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:4488:5925":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:44557:5070":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:13914:3768":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:11527:4744":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:47657:5168":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:6348:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:9361:4721":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"11:1068:4543":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:4550:15576":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:1681:13015":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:8794:18382":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:2208:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:6872:3986":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:12982:3493":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:6841:16710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:4441:4013":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:39413:2181":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:13155:3185":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:4368:15554":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:7414:4655":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:5994:18318":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:6531:2597":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:10310:4732":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"11:1818:4527":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:12089:3310":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:44277:11495":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:4196:2634":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:365:2602":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:4685:15586":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:7476:4660":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:11992:748":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:3435:5339":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:1506:12998":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:3238:4553":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:46253:5104":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:4965:4029":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:5979:16282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:4814:4024":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:42608:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:39271:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:1911:13183":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10863:3010":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:14015:3794":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:13757:3729":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:9952:2987":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:9939:3034":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:864:2314":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:2846:2170":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:8001:5290":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:11098:3172":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:5073:5238":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:10837:4736":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:123:11785":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:30439:29857":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:9604:3010":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:40452:4691":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:8086:4424":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"14:221:4525":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:5799:16270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:7918:5288":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:14315:3892":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:9344:34783":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:1503:4529":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:11105:5368":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:4380:15556":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:12526:3407":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:5051:15627":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:11162:23105":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:40391:4681":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:1492:4528":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:10071:5203":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:2781:3970":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:3196:2187":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"0:71:1778":{"crate_id":0,"path":["scopeguard","OnUnwind"],"kind":"enum"},"16:8252:4440":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:10351:3075":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:12174:3338":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"11:403:34705":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:1523:4630":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:1464:4530":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:13332:3553":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:22519:2261":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:8218:5035":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:4616:15581":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:2842:2169":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"14:0:1984":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:9665:34785":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:927:4532":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:2897:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:43824:5037":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:2349:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:14216:3868":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:1562:2314":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:8205:2868":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:2637:3964":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:5626:4042":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:6809:6026":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4754:15594":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:7564:15798":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:7351:5771":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:7384:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:47803:5171":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:20853:29715":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:6061:2706":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:45815:5083":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:1591:4553":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:12133:3327":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12539:3410":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:13055:3509":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:45714:5079":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:14037:3799":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:46207:5102":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:7680:2257":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:11155:3181":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:9227:2225":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:10148:3050":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:1442:2314":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:11990:643":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:4716:15589":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:5890:16277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:41674:4986":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:10266:3059":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:582:2878":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:7306:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:46485:5109":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:11490:4741":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:11566:4746":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:4395:2634":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:47859:5173":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:4323:4011":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:9032:2997":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:4489:15569":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:582:5756":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:6868:16712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:7926:4632":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:3183:33429":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:6484:4174":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:7532:5416":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:4906:5950":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:12435:3393":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:9172:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"18:515:2808":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:8125:4428":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"11:2201:4651":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:6618:16699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:7223:2620":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:3262:5218":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:40197:4946":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:8235:5886":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:5829:16273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:4620:4019":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:11317:5271":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:10912:5281":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:1569:13005":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:6250:4157":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:4781:15597":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:2743:2120":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:4506:15571":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:7529:15793":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:2693:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:6130:16318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:7609:17271":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:13435:3639":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10520:3093":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:9126:5263":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:7292:2314":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:6589:11985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:40382:4678":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:1426:4546":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:13513:3681":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:45606:5075":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:2314:3944":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:4987:2634":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:46909:5132":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:46382:5107":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:4879:1006":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:5299:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:43356:5014":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"13:110:34755":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:9571:34781":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:11951:5762":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:2762:2153":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:6886:3987":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:7741:5805":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"5:1257:4273":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:5771:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:9476:4722":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:7729:5200":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:579:12114":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:7433:4345":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:12727:3437":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:261:2871":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:4076:4546":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:6789:4237":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:12568:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:8889:5372":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:7284:2314":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:7128:28491":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"14:40:3259":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:2388:5844":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:45874:5086":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:4626:25803":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"5:6560:2314":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"11:97:34703":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:12711:3432":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:11234:3190":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:43934:11198":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:62:11730":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:2519:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"11:667:4528":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:2921:1840":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:149:2594":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:44305:11506":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:4638:15583":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:2213:1827":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:1059:4539":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:7568:34771":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11832:3262":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:1430:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:5771:5254":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:12936:3486":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:5940:4079":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"15:0:1985":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:10417:3082":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:4236:4527":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:5414:4036":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:1586:4552":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:7474:3990":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13492:3676":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:12566:3415":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:21126:4760":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:7661:11400":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:10249:3057":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:8902:6001":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:4794:15599":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"18:681:2843":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:6028:16288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:11997:1510":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:47868:5174":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:13803:3739":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:12412:3390":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:40872:4700":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:6456:3979":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:12905:3480":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:40282:4948":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"11:399:34704":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:10161:3051":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:2757:2156":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:3299:5219":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:41657:4546":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:20669:30417":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:6427:4172":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:22006:29860":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:7763:18327":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:1696:13017":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:2700:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:11315:11457":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10066:3042":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:6787:30326":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:10471:3086":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:43971:5045":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:10080:3044":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:2773:2155":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:8924:18386":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"18:755:2861":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:11994:746":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:43277:5009":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:4506:4015":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:46875:5131":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:43526:5027":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:9675:2681":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:11454:3208":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:10925:5247":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:40894:4971":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:12891:3477":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:22027:29863":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"18:0:1988":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:2690:33399":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:482:12101":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:5044:15626":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:8328:5952":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:13971:3784":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:4496:15570":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:2590:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:276:2192":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:43328:5010":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:7910:5287":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:5342:4035":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:2960:33396":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:640:5759":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:10747:5283":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:3977:5895":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:9706:3012":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:41982:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:3301:5220":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:3344:5873":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:40668:4696":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:10812:28510":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:8989:22677":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:45584:5074":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:7659:2260":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:7025:4267":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:11623:3221":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:4854:15607":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:20974:6037":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:7591:2722":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:44182:4751":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:9966:3010":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:12186:3341":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:3181:30424":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:22072:30105":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:6625:5952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12864:3475":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:4841:4025":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:41792:2314":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:885:4531":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:6153:2710":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"11:793:4547":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:14395:3911":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:12118:3321":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:5987:16283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:2811:2162":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:878:2616":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:6288:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:43403:4949":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:13964:3783":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:11783:4717":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:2556:2696":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:44582:5071":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:47978:5182":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:2217:5831":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:7708:5760":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:3744:4005":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:2825:3972":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:7407:4090":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:3260:5217":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:6537:5996":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"0:40:1793":{"crate_id":0,"path":["scopeguard","guard_on_unwind"],"kind":"function"},"1:0:1399":{"crate_id":1,"path":["std"],"kind":"module"},"2:4335:2230":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:5231:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:11388:18390":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:21210:6029":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:6018:18319":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:6771:2645":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:7584:4363":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:7233:33430":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:21563:30151":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:1733:13020":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:43568:4730":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:1580:4551":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:46405:5108":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:7255:4986":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:6850:4242":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:2378:5839":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:14341:3901":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:40098:4936":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:43494:5023":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:13719:3715":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:7734:5278":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:573:12113":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:45630:5076":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:7885:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:45540:5072":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:44357:11507":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:46845:5130":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:43849:4938":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:632:5193":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"14:31:4518":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:22717:4788":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:6386:4169":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:11038:2729":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"13:226:34756":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"14:202:11200":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:41904:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:7250:12061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:4164:5920":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:5008:15623":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:4785:29800":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:4308:5230":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:10444:3084":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:1921:5816":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:6796:16706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:47059:5133":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:2759:3969":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:3810:4007":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:11345:11187":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:5368:11175":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:3184:29208":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:5364:11174":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:4365:2636":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"11:332:2600":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"11:749:2628":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:9655:3011":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"9:426:17308":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:9399:3006":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:7278:17082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:11993:745":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:7799:4377":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:5067:4032":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:615:5192":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"18:574:2811":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"11:1103:4544":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:547:12109":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:7277:2191":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:45652:5077":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:4944:15616":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:7427:4658":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:6232:4154":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"14:215:4523":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:4592:4018":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:40074:4934":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:11074:2894":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:9012:5380":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:10316:5653":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:13604:3694":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:4928:4028":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:6815:4238":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:6800:2659":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"18:699:2846":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:6820:16708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:5745:5253":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:4917:15613":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"9:486:17305":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:7445:4346":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:11999:1508":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:2925:2173":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:14197:3862":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:9899:3030":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:805:5772":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:39455:4802":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:11354:2964":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:4868:4026":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:7575:15799":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:7521:2878":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:41733:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:7833:4381":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:8451:5002":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:3834:5227":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:11485:5227":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:11600:18392":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:7339:4651":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:12769:3458":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:6534:5259":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:43956:5040":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:3141:2180":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:12966:3489":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:13923:3769":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:10529:3094":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:4729:15591":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:10552:2257":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:13303:3533":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:9913:3031":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:7635:2271":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:7654:2258":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"11:657:2314":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:2210:5208":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:7511:15790":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:7012:4264":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:11905:3279":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:4895:15611":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:40524:4966":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:11849:11192":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:644:2811":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"18:481:2809":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:13882:3760":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:895:4527":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:530:3933":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:13083:3513":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:8904:32135":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:14205:3863":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:40400:4958":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:10458:3085":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:40432:4962":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"18:766:22347":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11979:3292":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:6740:11404":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:6864:4244":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"18:652:2811":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:39420:4800":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"15:327:17416":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"0:37:1790":{"crate_id":0,"path":["scopeguard","guard_on_success"],"kind":"function"},"6:562:12111":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:4380:2668":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:2691:2115":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:40110:4937":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:10792:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:11995:747":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"14:160:4518":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"18:590:2822":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:9471:5282":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:10737:25879":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"8:0:1979":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:923:4529":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:5793:16269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:20650:30422":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:10352:4735":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:6081:2634":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:4374:15555":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:7707:4367":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:7313:34775":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:8560:5365":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:4955:15618":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:12691:3431":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:7523:15792":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:30381:29867":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:21551:4758":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:4556:15577":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:47993:5183":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:22387:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"11:817:4535":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:21205:5849":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:8224:5336":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:11778:11186":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:854:4546":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:22651:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:4524:15573":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:9183:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}