{"root":"0:0:1989","crate_version":"1.2.0","includes_private":false,"index":{"0:34:1910":{"id":"0:34:1910","crate_id":0,"name":"guard","span":{"filename":"src/lib.rs","begin":[375,0],"end":[380,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"Always","id":"0:68:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3083:136","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10:1890":{"id":"0:10:1890","crate_id":0,"name":"Strategy","span":{"filename":"src/lib.rs","begin":[201,0],"end":[205,1]},"visibility":"public","docs":"Controls in which cases the associated code should be run","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:11:1893"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:12","0:14","0:16"]}}},"0:68:1898":{"id":"0:68:1898","crate_id":0,"name":"Always","span":{"filename":"src/lib.rs","begin":[213,0],"end":[213,18]},"visibility":"public","docs":"Always run on scope exit.\n\n“Always” run: on regular exit from a scope or on unwinding from a panic.\nCan not run on abort, process exit, and other catastrophic events where\ndestructors don’t run.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:8873:5993-0:68:1898","a:2:2872:2247-0:68:1898","a:2:2832:250-0:68:1898","a:2:8874:6202-0:68:1898","a:2:2815:240-0:68:1898","b:2:2610-0:68:1898","b:2:2621-0:68:1898","b:2:3450-0:68:1898","b:2:2303-0:68:1898","b:2:2616-0:68:1898","b:2:2606-0:68:1898","b:2:2300-0:68:1898","0:12","0:69"]}}},"a:2:8874:6202-0:74:1903":{"id":"a:2:8874:6202-0:74:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8874:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12822:30985":{"id":"2:12822:30985","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:11425"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:11423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12834:27627":{"id":"2:12834:27627","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39873:27634","Self::is_ascii":"2:12833:25234"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41924:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39873:27634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:2265":{"id":"5:5527:2265","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12778:26478":{"id":"2:12778:26478","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:11425","str::rsplitn":"2:12781:26480"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43950:5034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12725:26443":{"id":"2:12725:26443","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12051:1628"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2606-0:21:1926":{"id":"b:2:2606-0:21:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2583:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2580:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2609:2431"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:71:1901":{"id":"0:71:1901","crate_id":0,"name":"OnUnwind","span":{"filename":"src/lib.rs","begin":[220,0],"end":[220,20]},"visibility":"public","docs":"Run on scope exit through unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:8873:5993-0:71:1901","a:2:2872:2247-0:71:1901","a:2:2832:250-0:71:1901","a:2:8874:6202-0:71:1901","a:2:2815:240-0:71:1901","b:2:2610-0:71:1901","b:2:2621-0:71:1901","b:2:3450-0:71:1901","b:2:2303-0:71:1901","b:2:2616-0:71:1901","b:2:2606-0:71:1901","b:2:2300-0:71:1901","0:14","0:72"]}}},"b:2:2300-0:21:1926":{"id":"b:2:2300-0:21:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2294:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2302:2206"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12810:30983":{"id":"2:12810:30983","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:11425"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12435:11422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2621-0:74:1903":{"id":"b:2:2621-0:74:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2590:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:131","2:2625:1604"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:32:1935":{"id":"0:32:1935","crate_id":0,"name":"with_strategy","span":{"filename":"src/lib.rs","begin":[326,4],"end":[332,5]},"visibility":"public","docs":"Create a `ScopeGuard` that owns `v` (accessible through deref) and calls\n`dropfn` when its destructor runs.\n\nThe `Strategy` decides whether the scope guard's closure should run.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2619:131":{"id":"2:2619:131","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2590:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:2:2606-0:74:1903":{"id":"b:2:2606-0:74:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2583:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2580:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:2431"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:62:625":{"id":"0:62:625","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[470,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[455,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3083:136","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3062:1888","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:57:589"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12713":{"id":"2:12713","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12714:863","2:12715:2438","2:12716:30966","2:12717:30967","2:12719:30968","2:12722:23017","2:12723:30969","2:12724:336","2:12725:26443","2:12726:1973","2:12728:26440","2:12730:26441","2:12732:26442","2:12734:30970","2:12735:30971","2:12736:26465","2:12737:26466","2:12738:5050","2:12739:5222","2:12740:4832","2:12741:28424","2:12742:28420","2:12743:23190","2:12744:30972","2:12745:28812","2:12746:26484","2:12749:26485","2:12752:26486","2:12755:2478","2:12759:2437","2:12763:23189","2:12766:26474","2:12769:26476","2:12772:30973","2:12775:30974","2:12778:26478","2:12781:26480","2:12784:26482","2:12787:26483","2:12790:2218","2:12793:30975","2:12796:30976","2:12799:30977","2:12802:30978","2:12804:30979","2:12806:30980","2:12808:30981","2:12809:30982","2:12810:30983","2:12813:30984","2:12816:24776","2:12819:26487","2:12822:30985","2:12825:30986","2:12828:30987","2:12831:30988","2:12833:25234","2:12834:27627","2:12835:25238","2:12836:25239","2:12837:25240","2:12838:30989","2:12840:5985","2:12841:30990"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12728:26440":{"id":"2:12728:26440","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41926:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41924:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:708":{"id":"0:67:708","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[486,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9806:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9787:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:252":{"id":"0:51:252","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[448,4],"end":[448,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:12738:5050":{"id":"2:12738:5050","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12034:444"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43816:5042","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12730:26441":{"id":"2:12730:26441","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[480,0],"end":[491,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9831:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3083:136","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9831:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:67:708"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12804:30979":{"id":"2:12804:30979","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12724:336":{"id":"2:12724:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12725:26443","`u8`":"1:12051:1628"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12784:26482":{"id":"2:12784:26482","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41924:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12833:25234":{"id":"2:12833:25234","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2612:735":{"id":"2:2612:735","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12772:30973":{"id":"2:12772:30973","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12410:11425","str::split":"2:12763:23189","prim@char":"1:12034:444","`DoubleEndedIterator`":"2:7780:124","str::rsplit_terminator":"2:12775:30974"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43896:5204","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5545:25237":{"id":"5:5545:25237","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12837:25240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12828:30987":{"id":"2:12828:30987","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:11425"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:11423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2300-0:71:1901":{"id":"b:2:2300-0:71:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2294:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2302:2206"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:74:1903":{"id":"0:74:1903","crate_id":0,"name":"OnSuccess","span":{"filename":"src/lib.rs","begin":[227,0],"end":[227,21]},"visibility":"public","docs":"Run on regular scope exit, when not unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:8873:5993-0:74:1903","a:2:2872:2247-0:74:1903","a:2:2832:250-0:74:1903","a:2:8874:6202-0:74:1903","a:2:2815:240-0:74:1903","b:2:2610-0:74:1903","b:2:2621-0:74:1903","b:2:3450-0:74:1903","b:2:2303-0:74:1903","b:2:2616-0:74:1903","b:2:2606-0:74:1903","b:2:2300-0:74:1903","0:75","0:16"]}}},"b:2:2616-0:71:1901":{"id":"b:2:2616-0:71:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2590:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2586:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2619:131","2:2620:1606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2606-0:71:1901":{"id":"b:2:2606-0:71:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2583:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2580:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:2431"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12835:25238":{"id":"2:12835:25238","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5542:31652":{"id":"5:5542:31652","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2318","`String`":"5:7520:246"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2318","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:587":{"id":"0:52:587","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[450,4],"end":[452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12742:28420":{"id":"2:12742:28420","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12741:28424"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44129:5213","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2610-0:71:1901":{"id":"b:2:2610-0:71:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:735"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12722:23017":{"id":"2:12722:23017","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11965:11426"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9831:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:708"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12802:30978":{"id":"2:12802:30978","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12806:30980":{"id":"2:12806:30980","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12715:2438":{"id":"2:12715:2438","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[315,0],"end":[370,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3083:136","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:32:1935","0:33:1948"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:37:1913":{"id":"0:37:1913","crate_id":0,"name":"guard_on_success","span":{"filename":"src/lib.rs","begin":[388,0],"end":[393,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnSuccess","id":"0:74:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3083:136","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2872:2247-0:71:1901":{"id":"a:2:2872:2247-0:71:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2872:2247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:15:1893"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12759:2437":{"id":"2:12759:2437","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41926:194","prim@char":"1:12034:444","self::pattern":"2:12410:11425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41924:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:11423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2872:2247-0:74:1903":{"id":"a:2:2872:2247-0:74:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2872:2247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12739:5222":{"id":"2:12739:5222","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12034:444"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43822:5202","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12741:28424":{"id":"2:12741:28424","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12742:28420"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44120:5212","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12831:30988":{"id":"2:12831:30988","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12371:130","`FromStr`":"2:12370:6213"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42069:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12370:6213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12370:6213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12726:1973":{"id":"2:12726:1973","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41926:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41924:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12766:26474":{"id":"2:12766:26474","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:11425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12226:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:1893":{"id":"0:13:1893","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[231,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3450-0:71:1901":{"id":"b:2:3450-0:71:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3452:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[443,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3083:136","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3049:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:51:252","0:52:587"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2610-0:68:1898":{"id":"b:2:2610-0:68:1898","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:735"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2832:250-0:68:1898":{"id":"a:2:2832:250-0:68:1898","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2832:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2610-0:74:1903":{"id":"b:2:2610-0:74:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:735"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:21:1926":{"id":"0:21:1926","crate_id":0,"name":"ScopeGuard","span":{"filename":"src/lib.rs","begin":[304,0],"end":[313,1]},"visibility":"public","docs":"`ScopeGuard` is a scope guard that may own a protected value.\n\nIf you place a guard in a local variable, the closure can\nrun regardless how you leave the scope — through regular return or panic\n(except if panic or other code aborts; so as long as destructors run).\nIt is run only once.\n\nThe `S` parameter for [`Strategy`](trait.Strategy.html) determines if\nthe closure actually runs.\n\nThe guard's closure will be called with the held value in the destructor.\n\nThe `ScopeGuard` implements `Deref` so that you can access the inner value.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Always","id":"0:68:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3083:136","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:28","a:2:8873:5993-0:21:1926","a:2:2872:2247-0:21:1926","a:2:8874:6202-0:21:1926","a:2:2815:240-0:21:1926","b:2:2610-0:21:1926","b:2:2621-0:21:1926","b:2:3450-0:21:1926","b:2:2303-0:21:1926","b:2:2616-0:21:1926","b:2:2606-0:21:1926","b:2:2300-0:21:1926","0:63","0:58","0:47","0:43","0:53"]}}},"2:12732:26442":{"id":"2:12732:26442","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12723:30969":{"id":"2:12723:30969","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:1912":{"id":"0:19:1912","crate_id":0,"name":"defer_on_success","span":{"filename":"src/lib.rs","begin":[271,0],"end":[275,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on successful scope exit).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_success {\n    ($($t:tt)*) => { ... };\n}"}},"2:12716:30966":{"id":"2:12716:30966","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12740:4832":{"id":"2:12740:4832","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43832:3030","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[435,0],"end":[441,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2832:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3083:136","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2832:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:57:589":{"id":"0:57:589","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[460,4],"end":[462,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12":{"id":"0:12","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,0],"end":[234,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:13:1893"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12769:26476":{"id":"2:12769:26476","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12410:11425","`DoubleEndedIterator`":"2:7780:124","prim@char":"1:12034:444","str::split":"2:12763:23189"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43864:5032","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:11423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2300-0:74:1903":{"id":"b:2:2300-0:74:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2294:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2302:2206"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2621-0:21:1926":{"id":"b:2:2621-0:21:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2590:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2624:131","2:2625:1604"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12808:30981":{"id":"2:12808:30981","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3450-0:74:1903":{"id":"b:2:3450-0:74:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3452:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5526:31648":{"id":"5:5526:31648","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2318","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2318","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530:31649":{"id":"5:5530:31649","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:6115":{"id":"5:5543:6115","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8874:6202-0:71:1901":{"id":"a:2:8874:6202-0:71:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8874:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12752:26486":{"id":"2:12752:26486","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:11425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:11423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3450-0:68:1898":{"id":"b:2:3450-0:68:1898","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3452:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9831:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:70:708"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:20:1915":{"id":"0:20:1915","crate_id":0,"name":"defer_on_unwind","span":{"filename":"src/lib.rs","begin":[285,0],"end":[289,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on unwinding from panic).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_unwind {\n    ($($t:tt)*) => { ... };\n}"}},"a:2:8873:5993-0:74:1903":{"id":"a:2:8873:5993-0:74:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8873:5993","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12781:26480":{"id":"2:12781:26480","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12034:444","str::splitn":"2:12778:26478","self::pattern":"2:12410:11425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43968:5035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:11423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:708":{"id":"0:76:708","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9806:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9787:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12734:30970":{"id":"2:12734:30970","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12040:1523","str::slice_mut_unchecked":"2:12735:30971","crate::ops::Index":"2:3112:2302"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12744:30972":{"id":"2:12744:30972","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44110:5211","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9831:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:708"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1989":{"id":"0:0:1989","crate_id":0,"name":"scopeguard","span":{"filename":"src/lib.rs","begin":[1,0],"end":[595,1]},"visibility":"public","docs":"A scope guard will run a given closure when it goes out of scope,\neven if the code between panics.\n(as long as panic doesn't abort)\n\n# Examples\n\n## Hello World\n\nThis example creates a scope guard with an example function:\n\n```\nextern crate scopeguard;\n\nfn f() {\n    let _guard = scopeguard::guard((), |_| {\n        println!(\"Hello Scope Exit!\");\n    });\n\n    // rest of the code here.\n\n    // Here, at the end of `_guard`'s scope, the guard's closure is called.\n    // It is also called if we exit this scope through unwinding instead.\n}\n# fn main() {\n#    f();\n# }\n```\n\n## `defer!`\n\nUse the `defer` macro to run an operation at scope exit,\neither regular scope exit or during unwinding from a panic.\n\n```\n#[macro_use(defer)] extern crate scopeguard;\n\nuse std::cell::Cell;\n\nfn main() {\n    // use a cell to observe drops during and after the scope guard is active\n    let drop_counter = Cell::new(0);\n    {\n        // Create a scope guard using `defer!` for the current scope\n        defer! {\n            drop_counter.set(1 + drop_counter.get());\n        }\n\n        // Do regular operations here in the meantime.\n\n        // Just before scope exit: it hasn't run yet.\n        assert_eq!(drop_counter.get(), 0);\n\n        // The following scope end is where the defer closure is called\n    }\n    assert_eq!(drop_counter.get(), 1);\n}\n```\n\n## Scope Guard with Value\n\nIf the scope guard closure needs to access an outer value that is also\nmutated outside of the scope guard, then you may want to use the scope guard\nwith a value. The guard works like a smart pointer, so the inner value can\nbe accessed by reference or by mutable reference.\n\n### 1. The guard owns a file\n\nIn this example, the scope guard owns a file and ensures pending writes are\nsynced at scope exit.\n\n```\nextern crate scopeguard;\n\nuse std::fs::*;\nuse std::io::{self, Write};\n# // Mock file so that we don't actually write a file\n# struct MockFile;\n# impl MockFile {\n#     fn create(_s: &str) -> io::Result<Self> { Ok(MockFile) }\n#     fn write_all(&self, _b: &[u8]) -> io::Result<()> { Ok(()) }\n#     fn sync_all(&self) -> io::Result<()> { Ok(()) }\n# }\n# use self::MockFile as File;\n\nfn try_main() -> io::Result<()> {\n    let f = File::create(\"newfile.txt\")?;\n    let mut file = scopeguard::guard(f, |f| {\n        // ensure we flush file at return or panic\n        let _ = f.sync_all();\n    });\n    // Access the file through the scope guard itself\n    file.write_all(b\"test me\\n\").map(|_| ())\n}\n\nfn main() {\n    try_main().unwrap();\n}\n\n```\n\n### 2. The guard restores an invariant on scope exit\n\n```\nextern crate scopeguard;\n\nuse std::mem::ManuallyDrop;\nuse std::ptr;\n\n// This function, just for this example, takes the first element\n// and inserts it into the assumed sorted tail of the vector.\n//\n// For optimization purposes we temporarily violate an invariant of the\n// Vec, that it owns all of its elements.\n//\n// The safe approach is to use swap, which means two writes to memory,\n// the optimization is to use a “hole” which uses only one write of memory\n// for each position it moves.\n//\n// We *must* use a scope guard to run this code safely. We\n// are running arbitrary user code (comparison operators) that may panic.\n// The scope guard ensures we restore the invariant after successful\n// exit or during unwinding from panic.\nfn insertion_sort_first<T>(v: &mut Vec<T>)\n    where T: PartialOrd\n{\n    struct Hole<'a, T: 'a> {\n        v: &'a mut Vec<T>,\n        index: usize,\n        value: ManuallyDrop<T>,\n    }\n\n    unsafe {\n        // Create a moved-from location in the vector, a “hole”.\n        let value = ptr::read(&v[0]);\n        let mut hole = Hole { v: v, index: 0, value: ManuallyDrop::new(value) };\n\n        // Use a scope guard with a value.\n        // At scope exit, plug the hole so that the vector is fully\n        // initialized again.\n        // The scope guard owns the hole, but we can access it through the guard.\n        let mut hole_guard = scopeguard::guard(hole, |hole| {\n            // plug the hole in the vector with the value that was // taken out\n            let index = hole.index;\n            ptr::copy_nonoverlapping(&*hole.value, &mut hole.v[index], 1);\n        });\n\n        // run algorithm that moves the hole in the vector here\n        // move the hole until it's in a sorted position\n        for i in 1..hole_guard.v.len() {\n            if *hole_guard.value >= hole_guard.v[i] {\n                // move the element back and the hole forward\n                let index = hole_guard.index;\n                hole_guard.v.swap(index, index + 1);\n                hole_guard.index += 1;\n            } else {\n                break;\n            }\n        }\n\n        // When the scope exits here, the Vec becomes whole again!\n    }\n}\n\nfn main() {\n    let string = String::from;\n    let mut data = vec![string(\"c\"), string(\"a\"), string(\"b\"), string(\"d\")];\n    insertion_sort_first(&mut data);\n    assert_eq!(data, vec![\"a\", \"b\", \"c\", \"d\"]);\n}\n\n```\n\n\n# Crate Features\n\n- `use_std`\n  + Enabled by default. Enables the `OnUnwind` and `OnSuccess` strategies.\n  + Disable to use `no_std`.\n\n# Rust Version\n\nThis version of the crate requires Rust 1.20 or later.\n\nThe scopeguard 1.x release series will use a carefully considered version\nupgrade policy, where in a later 1.x version, we will raise the minimum\nrequired Rust version.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/scopeguard/1/\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1890","0:68:1898","0:71:1901","0:74:1903","0:21:1926","0:34:1910","0:37:1913","0:40:1916","0:18:1907","0:19:1912","0:20:1915"],"is_stripped":false}}},"a:2:2815:240-0:74:1903":{"id":"a:2:2815:240-0:74:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2815:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2302:2206":{"id":"2:2302:2206","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12763:23189":{"id":"2:12763:23189","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12410:11425","`DoubleEndedIterator`":"2:7780:124","prim@char":"1:12034:444","str::split_whitespace":"2:12741:28424","str::rsplit":"2:12769:26476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43846:5027","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5541:31651":{"id":"5:5541:31651","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2625:1604":{"id":"2:2625:1604","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42069:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2590:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2609:2431":{"id":"2:2609:2431","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2583:138"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12746:26484":{"id":"2:12746:26484","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:11425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12787:26483":{"id":"2:12787:26483","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41924:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:11423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[465,0],"end":[478,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3083:136","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3073:1962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:62:625"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2305:22702":{"id":"2:2305:22702","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2616-0:74:1903":{"id":"b:2:2616-0:74:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2590:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2586:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2619:131","2:2620:1606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2610-0:21:1926":{"id":"b:2:2610-0:21:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2612:735"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12743:23190":{"id":"2:12743:23190","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44100:5210","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12841:30990":{"id":"2:12841:30990","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4608:30990"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44163:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2616-0:68:1898":{"id":"b:2:2616-0:68:1898","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2590:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2586:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2619:131","2:2620:1606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5525":{"id":"5:5525","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5526:31648","5:5527:2265","5:5530:31649","5:5533:31650","5:5541:31651","5:5542:31652","5:5543:6115","5:5544:25236","5:5545:25237"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2815:240-0:68:1898":{"id":"a:2:2815:240-0:68:1898","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2815:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12799:30977":{"id":"2:12799:30977","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12410:11425","`DoubleEndedIterator`":"2:7780:124","prim@char":"1:12034:444","str::match_indices":"2:12796:30976"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44014:5207","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:11423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12819:26487":{"id":"2:12819:26487","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:11425"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41924:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:11423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2624:131":{"id":"2:2624:131","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32346:6220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12840:5985":{"id":"2:12840:5985","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4611:5985"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44154:4969","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12749:26485":{"id":"2:12749:26485","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:11425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17:1893":{"id":"0:17:1893","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[247,4],"end":[249,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12790:2218":{"id":"2:12790:2218","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12410:11425","`DoubleEndedIterator`":"2:7780:124","prim@char":"1:12034:444","str::rmatches":"2:12793:30975"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44050:5208","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:250-0:74:1903":{"id":"a:2:2832:250-0:74:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2832:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8874:6202-0:21:1926":{"id":"a:2:8874:6202-0:21:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8874:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8874:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8874:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12735:30971":{"id":"2:12735:30971","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12040:1523","crate::ops::IndexMut":"2:3116:2303","str::slice_unchecked":"2:12734:30970"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12836:25239":{"id":"2:12836:25239","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12825:30986":{"id":"2:12825:30986","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:11425"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3452:1619":{"id":"2:3452:1619","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39686:5101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12714:863":{"id":"2:12714:863","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12034:444"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2815:240-0:21:1926":{"id":"a:2:2815:240-0:21:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2815:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2815:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2815:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12837:25240":{"id":"2:12837:25240","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[250,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:17:1893"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70:708":{"id":"0:70:708","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9806:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9787:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:1948":{"id":"0:33:1948","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[357,4],"end":[369,5]},"visibility":"public","docs":"“Defuse” the guard and extract the value without calling the closure.\n\n```\nextern crate scopeguard;\n\nuse scopeguard::{guard, ScopeGuard};\n\nfn conditional() -> bool { true }\n\nfn main() {\n    let mut guard = guard(Vec::new(), |mut v| v.clear());\n    guard.push(1);\n\n    if conditional() {\n        // a condition maybe makes us decide to\n        // “defuse” the guard and get back its inner parts\n        let value = ScopeGuard::into_inner(guard);\n    } else {\n        // guard still exists in this branch\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["guard",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12838:30989":{"id":"2:12838:30989","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4610:30989"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44145:5111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8874:6202-0:68:1898":{"id":"a:2:8874:6202-0:68:1898","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8874:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12745:28812":{"id":"2:12745:28812","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44138:5049","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12717:30967":{"id":"2:12717:30967","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2303-0:21:1926":{"id":"b:2:2303-0:21:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2297:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2305:22702"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2606-0:68:1898":{"id":"b:2:2606-0:68:1898","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2583:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2580:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:2431"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12775:30974":{"id":"2:12775:30974","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12410:11425","str::split":"2:12763:23189","prim@char":"1:12034:444","str::split_terminator":"2:12772:30973"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43914:5205","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:11423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8873:5993-0:21:1926":{"id":"a:2:8873:5993-0:21:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8873:5993","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8873:5993","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8873:5993","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2872:2247-0:68:1898":{"id":"a:2:2872:2247-0:68:1898","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2872:2247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:18:1907":{"id":"0:18:1907","crate_id":0,"name":"defer","span":{"filename":"src/lib.rs","begin":[257,0],"end":[261,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (always run).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer {\n    ($($t:tt)*) => { ... };\n}"}},"0:15:1893":{"id":"0:15:1893","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[239,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:708":{"id":"0:73:708","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9806:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9787:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12737:26466":{"id":"2:12737:26466","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12736:26465"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12793:30975":{"id":"2:12793:30975","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12410:11425","`DoubleEndedIterator`":"2:7780:124","prim@char":"1:12034:444","str::matches":"2:12790:2218"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44068:5209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:11423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2616-0:21:1926":{"id":"b:2:2616-0:21:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2590:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2586:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2619:131","2:2620:1606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2815:240-0:71:1901":{"id":"a:2:2815:240-0:71:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2815:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12736:26465":{"id":"2:12736:26465","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12737:26466"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:1916":{"id":"0:40:1916","crate_id":0,"name":"guard_on_unwind","span":{"filename":"src/lib.rs","begin":[425,0],"end":[430,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.\n\n## Examples\n\nFor performance reasons, or to emulate “only run guard on unwind” in\nno-std environments, we can also use the default guard and simply manually\ndefuse it at the end of scope like the following example. (The performance\nreason would be if the [`OnUnwind`]'s call to [std::thread::panicking()] is\nan issue.)\n\n```\nextern crate scopeguard;\n\nuse scopeguard::ScopeGuard;\n# fn main() {\n{\n    let guard = scopeguard::guard((), |_| {});\n\n    // rest of the code here\n\n    // we reached the end of scope without unwinding - defuse it\n    ScopeGuard::into_inner(guard);\n}\n# }\n```","links":{"std::thread::panicking()":"1:500:1117","`OnUnwind`":"0:71:1901"},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnUnwind","id":"0:71:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3083:136","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8873:5993-0:71:1901":{"id":"a:2:8873:5993-0:71:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8873:5993","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12719:30968":{"id":"2:12719:30968","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12717:30967"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12796:30976":{"id":"2:12796:30976","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12410:11425","`DoubleEndedIterator`":"2:7780:124","prim@char":"1:12034:444","str::rmatch_indices":"2:12799:30977"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43996:5206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8873:5993-0:68:1898":{"id":"a:2:8873:5993-0:68:1898","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8873:5993","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:11:1893":{"id":"0:11:1893","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,28]},"visibility":"default","docs":"Return `true` if the guard’s associated code should run\n(in the context where this method is called).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12809:30982":{"id":"2:12809:30982","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2621-0:68:1898":{"id":"b:2:2621-0:68:1898","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2590:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:131","2:2625:1604"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2621-0:71:1901":{"id":"b:2:2621-0:71:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2590:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:131","2:2625:1604"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2303-0:68:1898":{"id":"b:2:2303-0:68:1898","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2297:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2305:22702"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2303-0:74:1903":{"id":"b:2:2303-0:74:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2297:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2305:22702"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2620:1606":{"id":"2:2620:1606","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42069:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2590:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2303-0:71:1901":{"id":"b:2:2303-0:71:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2297:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2305:22702"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2300-0:68:1898":{"id":"b:2:2300-0:68:1898","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2294:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2302:2206"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5533:31650":{"id":"5:5533:31650","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5544:25236":{"id":"5:5544:25236","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12836:25239"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2872:2247-0:21:1926":{"id":"a:2:2872:2247-0:21:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2872:2247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2872:2247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2872:2247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3450-0:21:1926":{"id":"b:2:3450-0:21:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1926","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3452:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2832:250-0:71:1901":{"id":"a:2:2832:250-0:71:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2832:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12813:30984":{"id":"2:12813:30984","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:11425"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12755:2478":{"id":"2:12755:2478","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41926:194","prim@char":"1:12034:444","self::pattern":"2:12410:11425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41924:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12816:24776":{"id":"2:12816:24776","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:11425"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41924:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:4814:15907":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:40440:5119":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:41884:5015":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:6666:13210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:4010:2804":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:14470:4075":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:40421:5118":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:7462:4517":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:6164:2885":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:42318:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:22551:5065":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:5419:3160":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:6893:4416":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:2953:2293":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:14057:3946":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:11390:3366":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:6003:5801":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:12374:3513":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:898:4699":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:7616:16107":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:6222:16653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:44454:5236":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:7343:12315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:6927:17045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:4202:2810":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:6718:6190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:636:2997":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:46235:5263":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"11:860:4709":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:6263:16655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:11217:22828":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:9035:5551":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"13:0:2104":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:2946:229":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"16:7041:4436":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:10448:3239":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"11:298:5793":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:4767:708":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:8979:18724":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:1840:182":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"11:2368:2804":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:48015:5344":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"15:288:17747":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:10739:3279":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:10604:3259":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:42690:2347":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:11049:3324":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:46525:5278":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:44277:5223":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:46010:5254":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:6989:2836":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:39625:219":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:1537:13256":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:14270:4014":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:12410:11425":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:14421:4060":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:47953:5343":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:21852:5060":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:9301:81":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:4835:4194":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:4859:29546":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:8097:4594":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"18:699:3008":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:41903:5017":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:8843:5536":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:2209:3051":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:40289:5104":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:1797:5375":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:2815:240":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:4566:15884":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:3364:2314":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:40664:5135":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:1507:13252":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:11236:3348":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"11:2494:4826":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:3338:2823":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:9787:229":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:12811:3601":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:7318:4476":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:10667:4718":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:4325:4975":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:1763:29166":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:5928:16609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:21363:6082":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:6531:4354":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:12152:5046":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"11:1145:4717":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:43804:5201":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:47095:5304":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:40715:5137":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:41848:5158":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:22575:5070":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:8331:6190":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:12038:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:9618:32594":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:6612:2891":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:2905:2284":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"18:690:3007":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:8243:30045":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:533:2380":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"15:327:17752":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:42944:29164":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:8134:4599":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:2406:205":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:8896:18721":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:39700:5102":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:4444:2844":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:0:310":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:9197:24796":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"10:36:32498":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:6248:16654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:10198:3215":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"18:548:146":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:11935:11712":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:5123:15942":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:5053:5407":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:4174:4972":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:2353:2505":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:12099:3462":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"18:538:2980":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:22253:2514":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:44050:5208":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:6847:2833":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:6583:4358":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:12466:3549":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:7660:4537":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:11357:5436":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:6569:4155":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:21546:5061":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:43189:5172":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:44145:5111":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:43816:5042":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:4755:15900":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:46905:5301":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:10772:3282":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:2469:5797":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:1967:201":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:3077:134":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:10926:5034":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:4676:15894":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:4994:2810":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:10686:3273":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:5640:2821":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:8979:110":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:43181:5170":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:13891:3902":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"14:31:4690":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:5712:4218":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:44653:11761":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:9110:155":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:7651:16112":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:23161:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:6440:30105":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:3734:5394":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:11587:3380":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:4746:6149":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:3179:4699":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:7262:2442":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:3272:2306":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:6361:4335":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:6434:4995":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:4847:15911":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:4966:6194":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:5403:3159":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:3168:25738":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"18:491:2972":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:30686:28581":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:5823:4987":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"9:237:5177":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:8905:6238":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:9836:123":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:7287:11640":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:7408:4826":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:4884:15916":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:3282:257":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:7755:5447":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:6828:2821":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:6594:2442":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:40641:4984":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:12052:1625":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:13982:3923":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:4480:15873":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"11:2085:4713":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"11:1051:17722":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:10812:5031":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:1434:4718":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:10495:242":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:43640:5185":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13568:3816":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:9004:18725":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:9712:32589":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:7722:4156":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:10421:3106":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:8849:18720":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:14146:3968":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:8167:4603":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:6837:17040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11262:3349":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:8536:5402":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:42916:29165":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:13779:3876":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:4040:6137":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:13612:3846":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:48351:5360":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:1419:4699":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:10774:5030":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:11951:5040":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:3186:4723":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:1558:13258":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:4320:4974":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:7600:2898":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:11024:3322":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:8873:5993":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"10:44:4731":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:7556:17578":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:10751:3280":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4800:15905":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:2590:260":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:4783:15903":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:10097:5558":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:22466:5063":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:44836:174":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:2210:2514":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:4030:6136":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:2970:30506":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:7420:6003":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:13012:158":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:7701:11646":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:1542:2804":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:7866:5451":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:9702:3174":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:5363:4205":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:13217:2869":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:4351:15862":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:3996:6135":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:5743:4223":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"11:1525:17723":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:14119:3961":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:6346:4333":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:5383:5408":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:6741:13395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:5760:18655":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:4841:15910":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:7457:3019":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:6646:236":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:10764:24804":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:10210:2855":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:5384:18653":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:1546:2823":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"14:7:4690":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:40435:103":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:43668:5189":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:7492:4526":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"11:868:4710":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:13852:3891":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:40622:5131":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:6813:17038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"11:759:4702":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:6542:5427":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:43715:5123":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:9848:2349":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:44561:11744":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:12057:1683":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:44573:11748":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:9575:32587":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:11382:3364":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"11:1850:2804":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:48289:5358":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"11:1127:4716":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:8239:4497":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:6889:17042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:2810:4142":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:10981:3173":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:9791:32595":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:2369:128":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:44014:5207":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"11:1855:2823":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:13310:6005":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:6513:4346":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:4710:15897":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:40673:4988":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:5144:2818":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:7137:24720":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:2875:2249":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:2400:198":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"14:202:11439":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12946:3640":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:43790:5198":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:10535:3253":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:10735:5029":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:46081:5257":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:9087:3160":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:2788:4141":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:10279:3222":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:3083:136":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:2826:247":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:7388:17419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:3737:5395":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:2936:2294":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"13:226:32564":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:1501:13251":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13056:3656":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:7453:4827":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:2427:2122":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:47355:5308":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"0:37:1913":{"crate_id":0,"path":["scopeguard","guard_on_success"],"kind":"function"},"17:10317:3226":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:43770:5197":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:10095:5024":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:7738:139":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:9661:32592":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:40774:5140":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:12738:3591":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"14:221:4697":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:4774:4192":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:5448:108":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:6204:4294":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:40632:4981":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:8309:5512":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:12831:3602":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:13950:3913":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:7006:4432":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:43896:5204":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:6804:17037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:6945:266":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:11449:18727":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:4344:4181":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:4914:15920":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:2974:2298":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:45926:5251":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:5088:4202":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:5435:4206":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:47171:5306":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:3764:4175":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:2987:2301":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:44369:5052":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:12481:11431":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:8546:4699":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:5015:15931":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"11:666:4699":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:5885:16604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:1970:200":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:7902:5381":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:47205:5307":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:13114:3665":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:5140:15944":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:10276:2858":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:30560:1886":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"18:719:3014":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:32382:5093":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:12173:3475":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:2526:4130":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5588:4151":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:13923:3909":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:3191:30723":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:10441:3236":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:11359:18851":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:12175:5047":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:4233:5398":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"18:660:2998":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:6985:25624":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:23192:184":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:7371:17418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:9243:3028":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:46647:5281":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"18:0:2115":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:11309:5431":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:6560:2773":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:4543:15881":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:40603:5128":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:12055:1624":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:10794:5450":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:1961:2534":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:3888:4178":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:11595:5583":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:1820:2600":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:11618:3381":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:7581:2896":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"0:40:1916":{"crate_id":0,"path":["scopeguard","guard_on_unwind"],"kind":"function"},"16:5696:18654":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"15:0:2112":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:46935:5302":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:5085:15938":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:31162:199":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:5989:223":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:4744:6148":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:6467:4345":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"11:2487:32505":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:10521:3252":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:12045:684":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:12037:1136":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:7509:2819":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:4998:15928":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"7:31:17623":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:6934:17046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"7:0:1673":{"crate_id":7,"path":["unwind"],"kind":"module"},"13:110:32563":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:6468:2890":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:483:12355":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:1481:4703":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"18:590:2984":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:0:2109":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:41695:5014":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:7924:5455":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:2316:107":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:44420:11438":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:4897:4978":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:43760:5196":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:13011:3647":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:3830:4177":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:13452:3723":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:5748:5419":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:22299:6348":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:11087:3330":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:7381:25096":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:43236:5182":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:44226:11437":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:3232:3052":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:10085:3203":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:46859:5300":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:40750:2995":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:6432:5426":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"18:644:2973":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:641:5368":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:7534:4162":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:13034:29956":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:8007:5457":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:12935:3638":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:1650:13266":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:42162:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:8221:5210":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:23223:185":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:48184:5351":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:13189:3680":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:46479:5276":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:7751:2317":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:3112:2302":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:7780:124":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:10968:5037":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:2587:2873":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"11:427:32514":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:40280:5103":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:1822:5376":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:3049:120":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:2574:4132":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:207:2782":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:12046:789":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:44263:5220":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:2864:4144":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:12191:5048":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:46188:5262":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:8238:6124":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:14325:4033":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:6376:18658":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:10617:3260":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:9456:32588":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:13967:3921":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:4628:15891":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11846:3405":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:4082:104":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:13086:3659":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"11:2074:4711":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:5897:16606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:42554:5022":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:8687:18715":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:10508:3251":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:5334:2784":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:14111:3960":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:11152:3335":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:21822:6082":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:4428:15867":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:4584:15886":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:2601:2859":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:39873:27634":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:13694:3858":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:2012:3044":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:7102:18662":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:4647:15892":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:14379:4054":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:7253:4806":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:8214:5027":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:5627:223":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:624:32601":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:12646:3577":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:3325:6111":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:12000:25097":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:3073:1962":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:10917:3315":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:7633:16109":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:6120:16623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:11539:5396":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:12226:3488":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:4399:2357":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:7090:4444":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:7269:32585":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:4496:15875":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:5727:4221":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:2927:2287":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:11216:3343":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:952:4710":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:276:2318":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4789:15904":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11762:3394":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:7739:6037":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:12032:395":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:4870:15914":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"18:531:2977":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:2364:204":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:14222:4013":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:1910:695":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:13817:3881":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:22413:5062":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:39679:2307":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:4205:4973":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:7610:16106":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:62:11983":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:1576:13260":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:5866:4240":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:22170:6082":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:5570:6218":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:7792:18665":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:4806:4193":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:9608:3172":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:8154:4600":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:10475:2901":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:638:5366":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:10814:122":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:40594:5127":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:21437:5061":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13102:3663":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:2907:4146":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:47703:5340":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"14:187:17735":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"15:394:17758":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:6700:17034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:6520:2784":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:9278:3029":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:4889:4196":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:44248:5215":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13869:3896":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:2297:100":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:3287:140":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:11180:11760":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:12622:3576":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"11:2394:2823":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:6268:32583":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:6386:4338":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"0:74:1903":{"crate_id":0,"path":["scopeguard","OnSuccess"],"kind":"enum"},"6:4939:1086":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:43197:5173":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:10540:5389":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:12209:3480":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:13423:3703":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:7907:5453":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:3672:6126":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:44120:5212":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:22199:2514":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:588:12369":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:8892:5539":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"11:1541:4720":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:39521:216":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:5017:4200":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:13149:3677":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:8985:2379":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:11047:2904":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:12112:3464":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:14309:4029":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:12998:3646":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"11:2334:4718":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"4:0:2105":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"14:0:2111":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:22610:5072":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:10833:25831":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:1651:2267":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"11:1876:4724":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4824:15908":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:1596:13262":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:10266:3221":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:629:4800":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:14347:4039":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:8012:6114":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:12485:3554":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11935:3429":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:5951:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:43750:5195":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:2380:4124":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:46381:5273":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:9481:2900":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:30333:6127":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:40317:5107":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:23068:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:8552:5531":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:7483:4830":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:7889:172":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:4639:23039":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:3327:2313":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:8766:18717":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:8147:5495":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:4908:15919":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"11:680:4718":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:923:4704":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"9:426:17644":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:3315:4172":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:5052:15935":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:21535:6082":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:2149:4809":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:2837:1884":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:44129:5213":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:6071:16617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:563:12365":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:2596:4133":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:44597:11760":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:12791:3598":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:2722:4138":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:7645:16111":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:40301:28500":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:1784:2823":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:2823:2244":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:22328:6349":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:7664:2386":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:6171:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:6072:2881":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:785:2787":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:6844:4410":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:1718:13273":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:7014:2839":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:43436:29254":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:2537:6082":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:9960:3194":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:9276:2600":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:14283:4020":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:12435:11422":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:43658:5188":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:9148:5553":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:14084:3953":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:489:12356":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:4082:4718":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:1551:4722":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:8921:6237":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:4989:15927":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:4556:15883":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:3220:4722":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:678:253":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:10431:3234":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:6401:4149":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:3808:2823":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:3232:4114":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:4902:15918":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:44342:5226":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:8954:18723":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:42042:5162":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:7353:2442":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:13576:3817":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:10715:3277":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:22519:5064":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:13740:3867":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:13086:5058":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:8050:4590":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:7879:133":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:5867:2804":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:7692:17606":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"11:2260:4711":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:6041:18657":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:7657:16113":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:42697:2348":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:44772:230":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:9165:5554":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:555:12364":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:7467:28505":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:23130:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:13216:3684":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:44616:125":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:44593:11746":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:7849:5449":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:4932:15922":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:13488:3754":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:43206:150":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:10098:3204":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:40376:11488":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:40552:5123":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:504:2375":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:11873:3413":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:12050:784":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:10647:3265":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:8714:18716":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:11307:3354":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:3915:4179":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:5009:15930":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:5859:16602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:7235:28627":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:6196:5425":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:11394:131":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:5117:15941":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:580:12368":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:46281:5270":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:9532:32591":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:2880:2251":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:8386:6198":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:3655:3068":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:5111:15940":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:10013:3173":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:4745:15899":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:8282:6160":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:10988:5536":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:8181:4168":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:2696:4137":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:837:4699":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:43741:5194":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:2406:4125":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:46032:5255":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:11001:3321":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:47561:5339":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:12197:3479":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:10323:108":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:2150:18783":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:45836:5247":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:4105:11398":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:5891:16605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"11:357:2776":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:6136:31864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:7436:4260":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:42120:4718":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:3246:4725":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:4637:23037":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:22700:5084":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:40764:4998":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:44585:11751":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:12226:5029":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:44762:222":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"18:614:32599":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:14101:3957":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:5982:4256":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:9824:18736":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"11:1842:4699":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:881:2792":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:6226:4309":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:1055:4711":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:42972:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:4968:15925":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"11:703:4700":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"18:671:3004":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:256:3032":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:1691:13270":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:8275:5397":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13072:3657":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:11372:5438":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:3512:6103":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:9129:5430":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:8829:5535":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:10534:5385":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"0:10:1890":{"crate_id":0,"path":["scopeguard","Strategy"],"kind":"trait"},"5:1522:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:44294:5224":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"18:681:3005":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:14025:3935":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:9565:3171":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"0:71:1901":{"crate_id":0,"path":["scopeguard","OnUnwind"],"kind":"enum"},"2:43914:5205":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:6813:6264":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:13803:3880":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:7705:11645":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:13677:3856":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11328:3357":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:3692:2442":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:2586:261":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:12686:3585":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:41655:164":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:22146:6354":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:5955:16567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"11:2467:29247":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:44577:11752":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:8327:5514":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:14014:3931":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:3049:17796":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:7702:17607":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"9:357:17657":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:14523:4084":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:6961:17048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:4613:4188":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:6898:2893":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:2969:17795":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:8795:18718":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4698:15896":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:6341:6358":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:7530:3040":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:7316:2442":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"11:2165:3239":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:2970:2297":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:10037:3200":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:8992:22860":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:7782:4541":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"11:731:4701":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:8281:4612":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:4800:2877":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:6687:4382":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:7342:32584":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:12041:1609":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:6545:4356":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:43846:5027":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:7534:4834":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:6676:2784":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:7708:4166":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4830:15909":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:10692:5027":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:10954:5036":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:1703:6153":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:26163:269":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:569:12366":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"0:20:1915":{"crate_id":0,"path":["scopeguard","defer_on_unwind"],"kind":"macro"},"17:11075:3329":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:41143:5145":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:12751:3593":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:41992:4718":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:9897:18738":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:7677:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:11527:2529":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:4938:844":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:41170:5008":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:1126:5796":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:13907:3905":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:1019:2784":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:4500:2359":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"18:755:3023":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:40650:5132":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:7282:2804":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:7733:5991":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:5310:123":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:14297:4026":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:3293:2308":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"7:78:17630":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:6742:4395":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:4535:15880":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:2978:2299":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:9850:2350":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"18:564:2982":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:1639:13265":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:781:98":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:11614:5439":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:4070:4971":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:6189:4292":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:10166:18756":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:44154:4969":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:2967:2502":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:7545:4835":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:2043:4807":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"0:18:1907":{"crate_id":0,"path":["scopeguard","defer"],"kind":"macro"},"2:1749:2532":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:44406:5227":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:6691:17033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:43822:5202":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:2832:4143":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9489:32590":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:6261:4326":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:2580:156":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:46427:5274":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"12:0:2110":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:44110:5211":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:2913:2876":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:2964:2296":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:4578:15885":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:3225:30721":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"0:34:1910":{"crate_id":0,"path":["scopeguard","guard"],"kind":"function"},"2:42279:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:6485:4150":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:2872:2247":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:22197:28821":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:9831:114":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:2884:2280":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:13245:3687":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:415:178":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:22333:6347":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:9306:88":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:3312:29553":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:46333:5272":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"3:0:469":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:2200:626":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:5612:4153":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:7520:246":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:5537:2810":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:8477:5526":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:4044:6138":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:1281:4713":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:5242:206":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:5995:4105":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:6012:16614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:5044:15934":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:1874:5377":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:7365:17417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:10140:18755":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:14500:4080":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:7622:16108":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:30600:2271":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:30792:28575":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:11491:3374":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:10629:3263":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:41678:5012":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:2822:2243":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:4529:15879":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:7523:4530":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:11816:3401":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:12049:788":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:11789:3395":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:4616:15890":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"9:0:2107":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10576:3256":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:8859:5538":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:2899:2281":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:3280:5389":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:22664:28584":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:21365:6270":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:11112:3332":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:3282:5390":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:12048:787":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:123:12038":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:48274:5357":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:8353:5401":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:12035:1644":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:1514:13253":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:40904:5143":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:11486:5039":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:2583:138":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:40914:5000":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:22185:6355":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"16:5963:4249":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:21221:29718":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:11720:18730":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:7554:4163":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:45856:5248":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:2577:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:12712:3588":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:7028:2894":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:10562:3255":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:41825:28589":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:3502:6080":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:4523:15878":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"18:574:2973":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:6156:4287":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:4641:23041":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:10904:3314":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:1591:13261":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:4776:15902":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:14034:3938":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:9946:3193":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:2923:2288":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:13255:145":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:868:4702":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:7302:30509":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:12051:1628":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:13175:3679":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:2827:112":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:42201:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:4161:6157":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:4917:6188":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:5075:15937":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:44100:5210":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:5910:16607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:8002:5456":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:5634:4208":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:12847:3607":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:48236:5355":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:5130:15943":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:9842:2347":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:41975:167":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:11965:11426":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:12053:1626":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:11236:155":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"5:1511:4701":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"18:96:22682":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:7474:4518":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:6901:4157":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:5378:11413":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:7598:16104":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:21976:6268":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:8494:6212":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:12725:3589":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:22587:28497":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:23761:239":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:1557:4723":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:2212:2515":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"11:2351:2442":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:4666:15893":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:495:12357":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:4389:2843":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11911:3428":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:13287:3694":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:9934:3191":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11662:3383":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:2203:5380":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:12438:3542":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:44431:5228":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:11711:3354":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:6169:16626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:4058:4970":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:6415:4341":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:23099:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:11342:5435":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13229:3685":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12672:3287":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:0:1515":{"crate_id":1,"path":["std"],"kind":"module"},"5:3576:176":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:3728:4807":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:9763:32593":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:10662:3269":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:5648:4212":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:3080:135":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:22726:6128":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:44878:5246":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:6114:16622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:7360:32586":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:4571:6180":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:12044:3454":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:12699:3586":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:12005:5992":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:1664:13267":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:44589:11745":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:11743:3391":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"11:1869:4723":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:10371:3229":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"11:992:4445":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:22602:5071":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:2206:1949":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:9922:3188":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:687:113":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:4585:4187":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:48099:5346":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:8170:6081":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:10789:18825":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"19:0:1116":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:11548:3377":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:904:2823":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:1539:2442":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:12040:1523":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:9476:5448":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:40388:5113":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:11818:2912":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:21192:29725":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:6047:16615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:46678:5282":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:44641:5237":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:3243:5388":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:582:3040":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:13061:208":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:4453:2358":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:45902:5250":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:35:2780":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:5755:5422":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12497:3556":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:4172:2810":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:2766:4140":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"11:772:4703":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:4977:15926":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:2381:6077":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:4764:15901":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:14435:4062":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:1632:13264":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:10479:3247":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"11:389:2778":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:6279:4329":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:12641:114":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:10024:3174":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:2877:109":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:13206:110":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:3677:2784":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:42683:2345":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:11453:5038":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:9846:209":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:13547:3806":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:12577:3570":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:5661:4217":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:41152:2853":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:4878:15915":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:4738:6129":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"11:101:32499":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:40702:4994":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:9049:22947":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:2744:4139":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11192:3056":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:1472:4702":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:7932:4807":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:5974:16611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:910:4719":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:21209:29716":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"11:1635:1926":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"14:40:3429":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:4921:4197":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:39686:5101":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:3982:6133":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:46170:5261":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:42956:4568":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:42981:2355":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:10249:6222":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:43968:5035":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:9806:137":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:13041:3652":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:42000:2442":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:919:4701":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:42137:199":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"9:330:17697":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:42069:229":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:42999:131":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:10963:3319":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:5797:254":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:12960:3642":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:4922:15921":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:32386:4497":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:4955:15924":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:2668:131":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:8803:202":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:500:1117":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"1:10340:5808":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:5433:5414":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"11:2479:32504":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:9999:3150":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:9887:3185":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:46457:5275":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:10759:23140":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:40274:4969":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:3600:4174":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:2139:2375":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:21974:6082":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:40572:5125":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:48195:5352":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:31190:2983":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:2284:17767":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:44441:5232":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:4434:2812":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:10055:150":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:7639:16110":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12423:3538":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:3445:5392":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:40725:5138":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:48137:5347":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4516:15877":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:21827:6272":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:5049:4201":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:14069:3949":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:10955:5415":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:47891:5342":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:940:4707":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13990:3924":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:6456:4344":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7613:4535":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:3968:6132":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:8874:6202":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:9015:5547":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:43218:5177":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"11:1092:4715":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:2538:11498":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:4557:4186":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:4808:15906":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:5710:4985":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:6545:6233":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"18:507:2973":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:10341:3227":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12971:3643":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:261:2784":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:21416:6082":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:13555:3809":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:40682:5136":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:11174:18849":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:8454:5177":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:12033:1020":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:894:2804":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:46133:5259":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:1697:13271":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:9913:3186":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:3065:3063":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:10824:5393":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:3150:97":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:8797:5533":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:9973:3195":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"11:829:6004":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:6913:17044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:915:4700":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:12054:1627":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:9781:3176":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:6079:16618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:0:868":{"crate_id":6,"path":["libc"],"kind":"module"},"6:527:12360":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:10727:3278":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:3986:2810":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:22975:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:11296:3352":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:8195:4605":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:14336:4038":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:6781:13378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12599:3571":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:9173:3026":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:4364:15863":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:12659:3580":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:1710:13272":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:11688:18729":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:7651:4536":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:2428:4126":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:1296:4711":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:4131:24726":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:11508:18728":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:9838:2345":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:6658:12405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:42061:2390":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:5941:16566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:14002:3930":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:654:12417":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:9187:24780":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:5921:16608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:42052:11704":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:7718:5990":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:10589:3257":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"11:483:147":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:6318:4331":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:6332:4147":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:1075:3041":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:14174:3976":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:45880:5249":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:11478:5394":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:2548:4131":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"18:113:22683":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:22:722":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:2931:2289":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:13839:3885":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:10946:4783":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:12370:6213":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:3743:4808":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:13025:3650":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"18:766:22693":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:2210:6064":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:3565:3055":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:41924:197":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:6445:2851":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:1073:4717":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:3201:5385":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"11:344:32509":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:10638:3264":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:12063:3455":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:2911:2283":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:149:2770":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:6879:4414":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:2709:4839":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:5397:5412":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:12087:3459":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:4040:2784":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:12137:3466":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:1407:149":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:7332:4825":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:4473:2253":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"11:822:4704":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:2305:17793":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:4401:2810":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:40581:5126":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:881:4703":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:2519:5382":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:8201:5143":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:2881:4145":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:6228:15778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:6898:17043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4947:15923":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:22239:6356":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:2825:248":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:7668:16114":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:43950:5034":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:2450:4127":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:2618:4134":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:32407:5095":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:10157:5559":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:9105:238":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:30594:2270":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:8563:5532":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:724:147":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:11384:24732":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:6100:16620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:40734:4996":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:39647:2305":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:2369:6071":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:12059:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:2948:2292":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:5121:4203":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:1496:13250":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:7513:4529":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:7679:16115":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:11315:5582":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:10241:3193":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:12124:3465":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12238:3491":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:4488:15874":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:2178:30540":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:8960:5540":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:9973:5155":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:40468:5120":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:2869:2246":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:5641:5416":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:1500:4700":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"11:817:4719":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:46151:5260":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11317:3356":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"9:393:17643":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:4:1099":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:10293:3173":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:21153:2983":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:8937:6239":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:14515:4081":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:8867:2442":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:5829:16538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:11621:5439":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:11099:3331":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"8:0:2106":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:44780:210":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:946:4709":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:40928:5001":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:11574:3378":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:42009:5160":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:3797:4176":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:8660:18702":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:12430:11423":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:40482:6051":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:6107:16621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:4371:2812":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:11640:3056":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"11:1846:2442":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:7067:4442":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:11053:2905":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:7284:5160":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:44565:11747":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:3557:2804":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:7065:2450":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:41114:5003":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:6128:16624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:8595:18704":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:7694:4165":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:41861:5397":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:6764:13380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:4742:6146":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:2657:119":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:12424:3010":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:39461:2312":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:12253:3497":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:14127:3963":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:12039:1490":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:4506:15876":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:10384:3230":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:5992:16613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:363:2399":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:6868:17041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:3448:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"3:234:229":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:9351:3034":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:40525:5121":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:2978:30631":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13793:3879":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:11607:25862":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:12115:5043":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"9:450:17642":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:4153:6156":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:7621:18664":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"11:796:2823":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:48259:5356":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:39561:215":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:42357:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:39508:2304":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:32346:6220":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:40515:2845":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:3461:4173":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:14479:4077":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:13275:3354":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:10942:5447":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:9071:3159":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:0:2113":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:48155:5348":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:47141:5305":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:1310:4717":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:10367:3228":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:44853:5245":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:13260:3691":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:1903:6047":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"0:21:1926":{"crate_id":0,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"5:4855:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:44163:5110":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:14077:3952":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:1110:30499":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:4595:15887":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:12034:444":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:5905:4243":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:13633:3851":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:4823:6145":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:6299:223":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:13299:3701":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"18:582:2983":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:6819:17039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:8205:11644":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:1744:649":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:10782:5574":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:10740:5568":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:8191:5126":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"11:2286:4713":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:4677:11482":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:5782:5423":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:400:3035":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:1568:4725":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:5973:2886":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:5574:4148":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:23006:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:1772:2531":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:8294:131":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:504:3039":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:9052:18703":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:12025:3449":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:1570:13259":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:8293:5510":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:40369:5111":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:10411:3232":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:10469:3246":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:3990:6134":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:1535:4699":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:8404:5523":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:2371:6072":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"11:2238:4445":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:46701:5283":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:10398:3231":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:12544:3562":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"11:2317:4699":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:9868:3183":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:43728:5193":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:8974:5541":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:6425:4342":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"9:52:17660":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:9373:3161":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:12056:838":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:11983:5589":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:4316:224":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:43678:5190":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:40361:4969":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:12268:3503":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:4497:4184":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6818:4409":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:48210:5353":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:12453:3547":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:46311:5271":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:4893:15917":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:1528:13255":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:10580:2385":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:2574:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:2889:2285":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:22535:29279":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:14449:4069":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:7128:5551":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:7604:2823":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:482:2871":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:10485:6082":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:2623:5383":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:10215:3218":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:1064:4713":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:8927:18722":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:12016:24792":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:7517:2880":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:41162:5006":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:13724:3864":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:4375:15864":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:43864:5032":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:9095:180":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:4603:15888":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:7324:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:43021:2356":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"9:177:17710":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:4610:15889":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:3396:2810":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:3602:4718":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:8826:18719":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:6711:17035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5068:15936":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10673:3270":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:7361:2442":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:5969:16610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:3484:2344":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"18:515:2970":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:4627:6135":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:10078:5375":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:1680:2784":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:6083:17766":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:22107:6353":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:48221:5354":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:1644:625":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:4854:15912":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:43589:5184":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:8287:6161":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:6017:18656":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:3209:214":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12185:3478":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"0:19:1912":{"crate_id":0,"path":["scopeguard","defer_on_success"],"kind":"macro"},"1:3162:24979":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:4313:5399":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:4440:15869":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:1563:4724":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"11:693:2442":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:507:12359":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:5798:4227":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:42515:94":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:4169:6158":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"11:1687:149":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:6243:4316":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:46503:5277":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:39581:218":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:7620:2827":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:48061:5345":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:10308:2864":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:14043:3939":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:30616:2355":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:5004:15929":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:10769:5449":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:12294:3508":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:14091:3954":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:7839:3107":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:23037:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:1682:13269":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:4862:4195":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:542:12362":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:7644:6082":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:10113:3205":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:48175:5350":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:11199:5430":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:40452:28505":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11455:2908":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:12281:3507":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:557:2382":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:2644:4135":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:8158:5393":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:3589:4699":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:9100:237":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:39537:213":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:45948:5252":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:21418:6266":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:7503:4161":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"11:785:2804":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11972:3442":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:2251:30538":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:12008:3447":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:8138:3019":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:41137:5005":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:14157:3969":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:6159:16625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:42476:87":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:6474:2804":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:10047:146":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:4455:15712":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11063:3328":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:12047:786":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:4641:4189":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:41128:5144":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:5573:6219":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:6798:17036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:7742:159":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:7391:18663":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:8873:5417":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:7541:5586":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:14356:4041":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:5130:207":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:5632:2810":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:2178:3048":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:5816:4232":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"11:1072:32512":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:42240:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:23254:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:4745:4191":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:10090:6087":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"18:599:32602":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:5023:15932":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:46111:5258":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"11:423:32513":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:14317:4032":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:7844:5448":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:10548:3254":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:1041:4445":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"18:736:22692":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:2968:30764":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:434:3038":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:12877:3626":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:7582:4532":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4860:15913":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:5982:16612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:23285:183":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:357:2398":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:44569:11749":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"11:2058:4445":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:44474:5053":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:42676:2346":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:7436:2389":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:12532:3560":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:1184:3043":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:44138:5049":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:5382:11414":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:10127:3207":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:11146:5534":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:2321:4115":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:47813:5341":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:14461:4071":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:9027:5549":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:4053:4180":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:40341:5109":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:1531:4805":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:12766:3596":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:6753:4396":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:1146:30501":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:1913:13438":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:5867:16603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:10432:5533":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:4417:4182":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:2294:99":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:22648:28498":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:9138:3025":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:8851:4699":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:10842:25825":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:2355:6067":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:727:3017":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:10495:3249":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:4719:4190":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:2948:131":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:44823:5242":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:32393:5094":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:10643:4699":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:11160:5535":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:11352:3359":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:3116:2303":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:6929:4418":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"14:215:4695":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:122:2774":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:261:3033":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:44581:11750":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:11202:3338":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:4461:15871":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:7292:2796":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:22714:5085":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:42435:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:14402:4055":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:2057:4808":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:7736:4539":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"0:0:1989":{"crate_id":0,"path":["scopeguard"],"kind":"module"},"16:5939:4099":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:2958:2295":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:3938:6130":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:4949:4198":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:21163:29712":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:2504:4129":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:533:12361":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:9788:2344":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:1490:4719":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:5104:15939":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:2894:2282":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:7496:4833":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:6943:17047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"18:521:22694":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:6696:4383":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"11:1882:4725":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6721:18660":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:646:5987":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:1759:5373":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:40331:5108":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:11138:3334":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:39603:217":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:622:5365":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:1521:13254":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:2832:250":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:4493:6163":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:11368:3361":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:11338:18850":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:8072:4591":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:0:524":{"crate_id":2,"path":["core"],"kind":"module"},"11:2473:32500":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:3441:3054":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13827:3882":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:9522:3170":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:9493:29256":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:12155:3474":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:6107:2810":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:3031:2311":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:8875:1968":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:6499:4167":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:7015:4435":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:23316:5089":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:5146:15945":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:1558:2810":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:574:12367":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:1761:5374":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:4527:4185":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:10699:3275":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:22284:6082":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:40545:5122":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"16:7768:4154":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:22693:30103":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:45980:5253":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:5673:4152":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:8227:5503":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:7833:2316":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:9488:30042":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:929:6004":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:1681:1172":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:4702:6189":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:7597:32580":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:3839:5396":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:5417:5413":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"11:1562:4721":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:43440:5025":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:9022:5548":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:9391:132":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:2982:2300":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:7645:2400":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:6944:32581":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"11:2461:32502":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:41984:4699":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:4385:5400":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:11163:3336":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:11536:3376":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:11408:18726":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:12044:682":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:7862:4553":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"9:507:4786":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:13711:3859":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:825:2790":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:22062:6352":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:3493:25913":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:9070:5910":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:7856:5450":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:4182:6159":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:42926:2355":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:40693:4993":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:43228:5181":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:6251:2886":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:12889:3628":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:1265:4445":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:39422:2315":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:6086:16619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:6248:4989":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:3212:4724":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:41712:6125":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:13163:3678":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:11887:3414":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:4462:4183":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:10970:24782":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"18:481:2971":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:4986:4199":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:11282:3351":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:40402:11489":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:10187:3213":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:40353:5110":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:9753:3175":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:1734:13274":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4473:15872":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:14135:3964":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:15:2221":{"crate_id":2,"path":["core","write"],"kind":"macro"},"5:1450:2442":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:9844:2348":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:13974:3922":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:11125:3333":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:21544:6267":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:11992:3443":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:46050:5256":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:80:22681":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:5084:5407":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:46781:5284":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:5634:2886":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:10228:3219":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:596:12370":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:9469:132":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:5830:4233":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:475:12354":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:588:5984":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:43689:5191":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:4356:267":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:501:12358":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:2339:4117":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:6059:16616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"15:306:17748":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:6598:5804":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:4388:15865":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:2359:4123":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:11036:2903":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:6857:2835":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:11245:3381":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"14:165:17728":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:6968:18661":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:9986:3197":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:2201:132":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:2670:4136":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:41741:29162":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:10847:5032":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"11:1036:4713":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:13136:3676":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:6352:4334":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:7884:18666":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:32494:2252":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:11172:25829":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:12912:3637":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:11292:2906":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:12514:3559":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:9329:3030":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:7054:4439":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:46549:5279":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:10060:3201":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:6960:4421":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:9103:3024":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:21190:29727":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:5322:4204":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:7690:2385":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:44068:5209":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"11:841:4707":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4434:15868":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:6148:2869":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:4449:15870":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:40612:5129":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:12415:5020":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:9446:3169":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:46600:5280":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:3427:5506":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:10293:2859":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:21207:29721":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:2472:4128":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12984:3645":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"0:68:1898":{"crate_id":0,"path":["scopeguard","Always"],"kind":"enum"},"1:3932:6131":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:12058:1231":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:2915:2286":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"9:486:17641":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:7568:4164":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:9651:3173":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:1604:13263":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:44815:5240":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:47017:5303":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12555:3563":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:6915:4158":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13915:3907":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:43649:5186":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:1546:13257":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:48164:5349":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:13203:3683":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:2698:30511":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:7916:5454":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:1674:13268":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:4724:15898":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"11:1862:4722":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:3368:5145":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:4471:6162":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:1382:96":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:7896:122":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:11227:3347":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:4248:1966":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:8115:4596":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:30628:28579":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:10885:5033":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:3165:25751":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:4838:413":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:2919:2290":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:4705:6162":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:536:4103":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:7171:11648":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:13877:3899":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:8986:5020":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:4686:15895":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:8208:3030":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:14164:3971":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:13898:3904":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:3241:5387":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:5982:2818":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:8196:6006":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:4401:15866":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:3032:4169":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:12474:3551":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:14537:4087":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:9853:18737":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:6682:12238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:6428:5144":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:7544:4531":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:9208:3027":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:3062:1888":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"14:160:4690":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:7828:4549":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:707:3010":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:2663:5384":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:7669:2388":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:12306:3511":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:11273:3350":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:860:2442":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:4052:6140":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:2933:17794":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:9840:2346":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:22627:28585":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:4908:6187":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:10099:5557":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:3203:5386":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:2974:30630":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:9633:2366":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"16:6600:18659":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:8205:18667":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:44865:4730":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:42396:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:7270:4824":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:12999:143":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:6792:4408":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:42128:2442":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:10537:5387":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:4549:15882":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:21864:29722":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:41121:5004":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"11:324:32507":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:32400:2357":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:13759:3868":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:12779:3597":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:21175:29712":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:0:2114":{"crate_id":17,"path":["object"],"kind":"module"},"2:21424:6269":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"18:609:2991":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:11952:3432":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:10804:133":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"5:4242:4699":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:652:2973":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:10457:3242":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:5827:2879":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:2231:30507":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:43832:3030":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"11:1010:4711":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:7604:16105":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:10940:5035":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:43421:5183":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:5033:15933":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:8301:5503":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:11518:5395":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:548:12363":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:8815:5534":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:48312:5359":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:850:4718":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:5152:15946":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:8233:5505":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:42112:4699":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:43996:5206":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:13686:3857":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:10930:3317":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:11390:24724":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:10950:3318":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:13668:3852":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:11474:3127":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"10:0:2108":{"crate_id":10,"path":["adler"],"kind":"module"},"1:6359:179":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:3299:2310":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:5502:5415":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:119:12037":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"11:2303:4728":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:40395:5114":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:12075:3458":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:2943:2291":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:8199:6010":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}