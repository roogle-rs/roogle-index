{"root":"0:0:2152","crate_version":"1.2.0","includes_private":false,"index":{"2:12977:25104":{"id":"2:12977:25104","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12609:11769","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::split":"2:12971:25100"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43192:5283","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:11767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2408-0:21:2090":{"id":"b:2:2408-0:21:2090","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2402:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2410:23773"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13021:31565":{"id":"2:13021:31565","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:11769"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2698:138":{"id":"2:2698:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31708:6563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"5:5617:6451":{"id":"5:5617:6451","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:31549":{"id":"2:12924:31549","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12922:31548"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12939:31551":{"id":"2:12939:31551","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12271:1658","str::slice_mut_unchecked":"2:12940:31552","crate::ops::Index":"2:38910:2466"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13039:31569":{"id":"2:13039:31569","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12570:137","`FromStr`":"2:12569:6399"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41434:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12569:6399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12569:6399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:2071":{"id":"0:18:2071","crate_id":0,"name":"defer","span":{"filename":"src/lib.rs","begin":[257,0],"end":[261,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (always run).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer {\n    ($($t:tt)*) => { ... };\n}"}},"2:13048:26276":{"id":"2:13048:26276","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:37506"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[455,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3149:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3128:2052","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:57:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12960:24495":{"id":"2:12960:24495","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:11769"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:11767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12949:29578":{"id":"2:12949:29578","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12950:29581"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43448:5464","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2405-0:71:2065":{"id":"b:2:2405-0:71:2065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2399:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2407:2365"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2694:1743":{"id":"2:2694:1743","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41434:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2695-0:71:2065":{"id":"b:2:2695-0:71:2065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2698:138","2:2699:1741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31780:237-0:74:2067":{"id":"a:2:31780:237-0:74:2067","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31780:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:20:2079":{"id":"0:20:2079","crate_id":0,"name":"defer_on_unwind","span":{"filename":"src/lib.rs","begin":[285,0],"end":[289,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on unwinding from panic).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_unwind {\n    ($($t:tt)*) => { ... };\n}"}},"b:2:2680-0:71:2065":{"id":"b:2:2680-0:71:2065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2683:2596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[480,0],"end":[491,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10045:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3149:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10045:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:67:776"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12948:5080":{"id":"2:12948:5080","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43160:3156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13017:31563":{"id":"2:13017:31563","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13051:6321":{"id":"2:13051:6321","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4701:6321"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43482:5217","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5604:32267":{"id":"5:5604:32267","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:2057":{"id":"0:13:2057","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[231,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15:2057":{"id":"0:15:2057","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[239,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3516-0:71:2065":{"id":"b:2:3516-0:71:2065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3514:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3518:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2903:246-0:74:2067":{"id":"a:2:2903:246-0:74:2067","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2903:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2408-0:74:2067":{"id":"b:2:2408-0:74:2067","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2402:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2410:23773"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12931:2136":{"id":"2:12931:2136","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41293:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2903:246-0:68:2062":{"id":"a:2:2903:246-0:68:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2903:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5607:32268":{"id":"5:5607:32268","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5619:24846":{"id":"5:5619:24846","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13045:24844"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2903:246-0:71:2065":{"id":"a:2:2903:246-0:71:2065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2903:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2684-0:74:2067":{"id":"b:2:2684-0:74:2067","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2686:805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2684-0:21:2090":{"id":"b:2:2684-0:21:2090","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2686:805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:76:776":{"id":"0:76:776","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10019:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10000:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41416:6546-0:21:2090":{"id":"a:2:41416:6546-0:21:2090","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41416:6546","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41416:6546","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41416:6546","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13030:31566":{"id":"2:13030:31566","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:11769"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:11767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12974:25102":{"id":"2:12974:25102","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:11769"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12425:5280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:2090":{"id":"0:21:2090","crate_id":0,"name":"ScopeGuard","span":{"filename":"src/lib.rs","begin":[304,0],"end":[313,1]},"visibility":"public","docs":"`ScopeGuard` is a scope guard that may own a protected value.\n\nIf you place a guard in a local variable, the closure can\nrun regardless how you leave the scope — through regular return or panic\n(except if panic or other code aborts; so as long as destructors run).\nIt is run only once.\n\nThe `S` parameter for [`Strategy`](trait.Strategy.html) determines if\nthe closure actually runs.\n\nThe guard's closure will be called with the held value in the destructor.\n\nThe `ScopeGuard` implements `Deref` so that you can access the inner value.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Always","id":"0:68:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3149:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:28","a:2:31837:2408-0:21:2090","a:2:41415:6329-0:21:2090","a:2:31780:237-0:21:2090","a:2:41416:6546-0:21:2090","b:2:2695-0:21:2090","b:2:3516-0:21:2090","b:2:2408-0:21:2090","b:2:2680-0:21:2090","b:2:2405-0:21:2090","b:2:2684-0:21:2090","b:2:2690-0:21:2090","0:53","0:47","0:58","0:63","0:43"]}}},"b:2:2408-0:68:2062":{"id":"b:2:2408-0:68:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2402:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2410:23773"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2405-0:74:2067":{"id":"b:2:2405-0:74:2067","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2399:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2407:2365"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12947:5474":{"id":"2:12947:5474","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12265:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43150:5454","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5615:32269":{"id":"5:5615:32269","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2699:1741":{"id":"2:2699:1741","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41434:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10045:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:776"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:37:2077":{"id":"0:37:2077","crate_id":0,"name":"guard_on_success","span":{"filename":"src/lib.rs","begin":[388,0],"end":[393,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnSuccess","id":"0:74:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3149:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12933:25068":{"id":"2:12933:25068","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41293:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12941:25094":{"id":"2:12941:25094","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12943:25098","str::split_at_mut":"2:12942:25095"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[315,0],"end":[370,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3149:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:32:2099","0:33:2112"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13044:24845":{"id":"2:13044:24845","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:15:2057"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2152":{"id":"0:0:2152","crate_id":0,"name":"scopeguard","span":{"filename":"src/lib.rs","begin":[1,0],"end":[595,1]},"visibility":"public","docs":"A scope guard will run a given closure when it goes out of scope,\neven if the code between panics.\n(as long as panic doesn't abort)\n\n# Examples\n\n## Hello World\n\nThis example creates a scope guard with an example function:\n\n```\nextern crate scopeguard;\n\nfn f() {\n    let _guard = scopeguard::guard((), |_| {\n        println!(\"Hello Scope Exit!\");\n    });\n\n    // rest of the code here.\n\n    // Here, at the end of `_guard`'s scope, the guard's closure is called.\n    // It is also called if we exit this scope through unwinding instead.\n}\n# fn main() {\n#    f();\n# }\n```\n\n## `defer!`\n\nUse the `defer` macro to run an operation at scope exit,\neither regular scope exit or during unwinding from a panic.\n\n```\n#[macro_use(defer)] extern crate scopeguard;\n\nuse std::cell::Cell;\n\nfn main() {\n    // use a cell to observe drops during and after the scope guard is active\n    let drop_counter = Cell::new(0);\n    {\n        // Create a scope guard using `defer!` for the current scope\n        defer! {\n            drop_counter.set(1 + drop_counter.get());\n        }\n\n        // Do regular operations here in the meantime.\n\n        // Just before scope exit: it hasn't run yet.\n        assert_eq!(drop_counter.get(), 0);\n\n        // The following scope end is where the defer closure is called\n    }\n    assert_eq!(drop_counter.get(), 1);\n}\n```\n\n## Scope Guard with Value\n\nIf the scope guard closure needs to access an outer value that is also\nmutated outside of the scope guard, then you may want to use the scope guard\nwith a value. The guard works like a smart pointer, so the inner value can\nbe accessed by reference or by mutable reference.\n\n### 1. The guard owns a file\n\nIn this example, the scope guard owns a file and ensures pending writes are\nsynced at scope exit.\n\n```\nextern crate scopeguard;\n\nuse std::fs::*;\nuse std::io::{self, Write};\n# // Mock file so that we don't actually write a file\n# struct MockFile;\n# impl MockFile {\n#     fn create(_s: &str) -> io::Result<Self> { Ok(MockFile) }\n#     fn write_all(&self, _b: &[u8]) -> io::Result<()> { Ok(()) }\n#     fn sync_all(&self) -> io::Result<()> { Ok(()) }\n# }\n# use self::MockFile as File;\n\nfn try_main() -> io::Result<()> {\n    let f = File::create(\"newfile.txt\")?;\n    let mut file = scopeguard::guard(f, |f| {\n        // ensure we flush file at return or panic\n        let _ = f.sync_all();\n    });\n    // Access the file through the scope guard itself\n    file.write_all(b\"test me\\n\").map(|_| ())\n}\n\nfn main() {\n    try_main().unwrap();\n}\n\n```\n\n### 2. The guard restores an invariant on scope exit\n\n```\nextern crate scopeguard;\n\nuse std::mem::ManuallyDrop;\nuse std::ptr;\n\n// This function, just for this example, takes the first element\n// and inserts it into the assumed sorted tail of the vector.\n//\n// For optimization purposes we temporarily violate an invariant of the\n// Vec, that it owns all of its elements.\n//\n// The safe approach is to use swap, which means two writes to memory,\n// the optimization is to use a “hole” which uses only one write of memory\n// for each position it moves.\n//\n// We *must* use a scope guard to run this code safely. We\n// are running arbitrary user code (comparison operators) that may panic.\n// The scope guard ensures we restore the invariant after successful\n// exit or during unwinding from panic.\nfn insertion_sort_first<T>(v: &mut Vec<T>)\n    where T: PartialOrd\n{\n    struct Hole<'a, T: 'a> {\n        v: &'a mut Vec<T>,\n        index: usize,\n        value: ManuallyDrop<T>,\n    }\n\n    unsafe {\n        // Create a moved-from location in the vector, a “hole”.\n        let value = ptr::read(&v[0]);\n        let mut hole = Hole { v: v, index: 0, value: ManuallyDrop::new(value) };\n\n        // Use a scope guard with a value.\n        // At scope exit, plug the hole so that the vector is fully\n        // initialized again.\n        // The scope guard owns the hole, but we can access it through the guard.\n        let mut hole_guard = scopeguard::guard(hole, |hole| {\n            // plug the hole in the vector with the value that was // taken out\n            let index = hole.index;\n            ptr::copy_nonoverlapping(&*hole.value, &mut hole.v[index], 1);\n        });\n\n        // run algorithm that moves the hole in the vector here\n        // move the hole until it's in a sorted position\n        for i in 1..hole_guard.v.len() {\n            if *hole_guard.value >= hole_guard.v[i] {\n                // move the element back and the hole forward\n                let index = hole_guard.index;\n                hole_guard.v.swap(index, index + 1);\n                hole_guard.index += 1;\n            } else {\n                break;\n            }\n        }\n\n        // When the scope exits here, the Vec becomes whole again!\n    }\n}\n\nfn main() {\n    let string = String::from;\n    let mut data = vec![string(\"c\"), string(\"a\"), string(\"b\"), string(\"d\")];\n    insertion_sort_first(&mut data);\n    assert_eq!(data, vec![\"a\", \"b\", \"c\", \"d\"]);\n}\n\n```\n\n\n# Crate Features\n\n- `use_std`\n  + Enabled by default. Enables the `OnUnwind` and `OnSuccess` strategies.\n  + Disable to use `no_std`.\n\n# Rust Version\n\nThis version of the crate requires Rust 1.20 or later.\n\nThe scopeguard 1.x release series will use a carefully considered version\nupgrade policy, where in a later 1.x version, we will raise the minimum\nrequired Rust version.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/scopeguard/1/\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:2054","0:68:2062","0:71:2065","0:74:2067","0:21:2090","0:34:2074","0:37:2077","0:40:2080","0:18:2071","0:19:2076","0:20:2079"],"is_stripped":false}}},"2:12951:28709":{"id":"2:12951:28709","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43428:5462","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:32266":{"id":"5:5600:32266","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2482","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2482","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12952:31553":{"id":"2:12952:31553","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43438:5463","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31837:2408-0:71:2065":{"id":"a:2:31837:2408-0:71:2065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31837:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2690-0:71:2065":{"id":"b:2:2690-0:71:2065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2660:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2693:138","2:2694:1743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13016:31562":{"id":"2:13016:31562","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12950:29581":{"id":"2:12950:29581","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12949:29578"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43457:5465","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12971:25100":{"id":"2:12971:25100","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12609:11769","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::split_whitespace":"2:12949:29578","str::rsplit":"2:12977:25104"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43174:5278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[443,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3149:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3115:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:51:248","0:52:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12935:25069":{"id":"2:12935:25069","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:25099":{"id":"2:12944:25099","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12943:25098"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41416:6546-0:71:2065":{"id":"a:2:41416:6546-0:71:2065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41416:6546","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2680-0:21:2090":{"id":"b:2:2680-0:21:2090","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2683:2596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12940:31552":{"id":"2:12940:31552","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12271:1658","crate::ops::IndexMut":"2:3178:2467","str::slice_unchecked":"2:12939:31551"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13024:23788":{"id":"2:13024:23788","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:11769"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31780:237-0:21:2090":{"id":"a:2:31780:237-0:21:2090","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31780:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31780:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31780:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13042:26271":{"id":"2:13042:26271","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39264:11844","Self::is_ascii":"2:13041:24848"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39264:11844","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13014:31561":{"id":"2:13014:31561","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12957:24493":{"id":"2:12957:24493","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:11769"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:2065":{"id":"0:71:2065","crate_id":0,"name":"OnUnwind","span":{"filename":"src/lib.rs","begin":[220,0],"end":[220,20]},"visibility":"public","docs":"Run on scope exit through unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:31837:2408-0:71:2065","a:2:41415:6329-0:71:2065","a:2:2903:246-0:71:2065","a:2:31780:237-0:71:2065","a:2:41416:6546-0:71:2065","b:2:2695-0:71:2065","b:2:3516-0:71:2065","b:2:2408-0:71:2065","b:2:2680-0:71:2065","b:2:2405-0:71:2065","b:2:2684-0:71:2065","b:2:2690-0:71:2065","0:72","0:14"]}}},"2:12928:31550":{"id":"2:12928:31550","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:2062":{"id":"0:68:2062","crate_id":0,"name":"Always","span":{"filename":"src/lib.rs","begin":[213,0],"end":[213,18]},"visibility":"public","docs":"Always run on scope exit.\n\n“Always” run: on regular exit from a scope or on unwinding from a panic.\nCan not run on abort, process exit, and other catastrophic events where\ndestructors don’t run.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:31837:2408-0:68:2062","a:2:41415:6329-0:68:2062","a:2:2903:246-0:68:2062","a:2:31780:237-0:68:2062","a:2:41416:6546-0:68:2062","b:2:2695-0:68:2062","b:2:3516-0:68:2062","b:2:2408-0:68:2062","b:2:2680-0:68:2062","b:2:2405-0:68:2062","b:2:2684-0:68:2062","b:2:2690-0:68:2062","0:69","0:12"]}}},"0:12":{"id":"0:12","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,0],"end":[234,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:13:2057"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70:776":{"id":"0:70:776","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10019:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10000:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2408-0:71:2065":{"id":"b:2:2408-0:71:2065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2402:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2410:23773"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[435,0],"end":[441,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2903:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3149:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2903:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12919:963":{"id":"2:12919:963","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12265:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2680-0:74:2067":{"id":"b:2:2680-0:74:2067","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2683:2596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12921:31547":{"id":"2:12921:31547","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:29599":{"id":"2:12953:29599","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43466:5300","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13007:31558":{"id":"2:13007:31558","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12609:11769","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::match_indices":"2:13004:31557"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43342:5459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:11767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13041:24848":{"id":"2:13041:24848","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13052:31571":{"id":"2:13052:31571","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4698:31571"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43491:5362","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:2099":{"id":"0:32:2099","crate_id":0,"name":"with_strategy","span":{"filename":"src/lib.rs","begin":[326,4],"end":[332,5]},"visibility":"public","docs":"Create a `ScopeGuard` that owns `v` (accessible through deref) and calls\n`dropfn` when its destructor runs.\n\nThe `Strategy` decides whether the scope guard's closure should run.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31780:237-0:71:2065":{"id":"a:2:31780:237-0:71:2065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31780:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13027:25113":{"id":"2:13027:25113","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:11769"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:11767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2695-0:74:2067":{"id":"b:2:2695-0:74:2067","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2698:138","2:2699:1741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:34:2074":{"id":"0:34:2074","crate_id":0,"name":"guard","span":{"filename":"src/lib.rs","begin":[375,0],"end":[380,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"Always","id":"0:68:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3149:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12937:25070":{"id":"2:12937:25070","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10045:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:70:776"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:57:612":{"id":"0:57:612","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[460,4],"end":[462,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5601:2425":{"id":"5:5601:2425","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:776":{"id":"0:73:776","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10019:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10000:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10045:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:776"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31837:2408-0:68:2062":{"id":"a:2:31837:2408-0:68:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31837:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2405-0:21:2090":{"id":"b:2:2405-0:21:2090","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2399:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2407:2365"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3516-0:21:2090":{"id":"b:2:3516-0:21:2090","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3514:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3518:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12983:31555":{"id":"2:12983:31555","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12609:11769","str::split":"2:12971:25100","prim@char":"1:12265:458","str::split_terminator":"2:12980:31554"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43242:5457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:11767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2684-0:68:2062":{"id":"b:2:2684-0:68:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2686:805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2690-0:68:2062":{"id":"b:2:2690-0:68:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2660:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2693:138","2:2694:1743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3516-0:74:2067":{"id":"b:2:3516-0:74:2067","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3514:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3518:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41415:6329-0:21:2090":{"id":"a:2:41415:6329-0:21:2090","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41415:6329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41415:6329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41415:6329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[465,0],"end":[478,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3149:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3139:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:62:648"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12989:25108":{"id":"2:12989:25108","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12265:458","str::splitn":"2:12986:25106","self::pattern":"2:12609:11769"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43296:5286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:11767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41415:6329-0:68:2062":{"id":"a:2:41415:6329-0:68:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41415:6329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2690-0:21:2090":{"id":"b:2:2690-0:21:2090","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2660:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2693:138","2:2694:1743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13046:26274":{"id":"2:13046:26274","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:37506"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17:2057":{"id":"0:17:2057","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[247,4],"end":[249,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12995:25111":{"id":"2:12995:25111","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:11767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:2067":{"id":"0:74:2067","crate_id":0,"name":"OnSuccess","span":{"filename":"src/lib.rs","begin":[227,0],"end":[227,21]},"visibility":"public","docs":"Run on regular scope exit, when not unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:31837:2408-0:74:2067","a:2:41415:6329-0:74:2067","a:2:2903:246-0:74:2067","a:2:31780:237-0:74:2067","a:2:41416:6546-0:74:2067","b:2:2695-0:74:2067","b:2:3516-0:74:2067","b:2:2408-0:74:2067","b:2:2680-0:74:2067","b:2:2405-0:74:2067","b:2:2684-0:74:2067","b:2:2690-0:74:2067","0:16","0:75"]}}},"2:12998:2377":{"id":"2:12998:2377","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12609:11769","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::rmatches":"2:13001:31556"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43378:5460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13045:24844":{"id":"2:13045:24844","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5599":{"id":"5:5599","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5600:32266","5:5601:2425","5:5604:32267","5:5607:32268","5:5615:32269","5:5616:32270","5:5617:6451","5:5618:24847","5:5619:24846"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2407:2365":{"id":"2:2407:2365","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:2076":{"id":"0:19:2076","crate_id":0,"name":"defer_on_success","span":{"filename":"src/lib.rs","begin":[271,0],"end":[275,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on successful scope exit).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_success {\n    ($($t:tt)*) => { ... };\n}"}},"a:2:31837:2408-0:74:2067":{"id":"a:2:31837:2408-0:74:2067","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31837:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5616:32270":{"id":"5:5616:32270","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2482","`String`":"5:7615:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2482","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[250,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:17:2057"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2695-0:21:2090":{"id":"b:2:2695-0:21:2090","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2698:138","2:2699:1741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41415:6329-0:71:2065":{"id":"a:2:41415:6329-0:71:2065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41415:6329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:40:2080":{"id":"0:40:2080","crate_id":0,"name":"guard_on_unwind","span":{"filename":"src/lib.rs","begin":[425,0],"end":[430,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.\n\n## Examples\n\nFor performance reasons, or to emulate “only run guard on unwind” in\nno-std environments, we can also use the default guard and simply manually\ndefuse it at the end of scope like the following example. (The performance\nreason would be if the [`OnUnwind`]'s call to [std::thread::panicking()] is\nan issue.)\n\n```\nextern crate scopeguard;\n\nuse scopeguard::ScopeGuard;\n# fn main() {\n{\n    let guard = scopeguard::guard((), |_| {});\n\n    // rest of the code here\n\n    // we reached the end of scope without unwinding - defuse it\n    ScopeGuard::into_inner(guard);\n}\n# }\n```","links":{"std::thread::panicking()":"1:499:1236","`OnUnwind`":"0:71:2065"},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnUnwind","id":"0:71:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3149:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3516-0:68:2062":{"id":"b:2:3516-0:68:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3514:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3518:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:67:776":{"id":"0:67:776","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[486,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10019:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10000:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:2603":{"id":"2:12920:2603","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:334":{"id":"2:12929:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12930:25071","`u8`":"1:12282:1785"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31837:2408-0:21:2090":{"id":"a:2:31837:2408-0:21:2090","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:31837:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:31837:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31837:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2090","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2680-0:68:2062":{"id":"b:2:2680-0:68:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2683:2596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12930:25071":{"id":"2:12930:25071","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12282:1785"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13004:31557":{"id":"2:13004:31557","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12609:11769","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::rmatch_indices":"2:13007:31558"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43324:5458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10:2054":{"id":"0:10:2054","crate_id":0,"name":"Strategy","span":{"filename":"src/lib.rs","begin":[201,0],"end":[205,1]},"visibility":"public","docs":"Controls in which cases the associated code should be run","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:11:2057"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:16","0:12","0:14"]}}},"a:2:31780:237-0:68:2062":{"id":"a:2:31780:237-0:68:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31780:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2410:23773":{"id":"2:2410:23773","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12943:25098":{"id":"2:12943:25098","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12944:25099"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13018:31564":{"id":"2:13018:31564","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:11769"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12635:11766","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2695-0:68:2062":{"id":"b:2:2695-0:68:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2698:138","2:2699:1741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13033:31567":{"id":"2:13033:31567","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:11769"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41416:6546-0:74:2067":{"id":"a:2:41416:6546-0:74:2067","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41416:6546","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12918":{"id":"2:12918","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12919:963","2:12920:2603","2:12921:31547","2:12922:31548","2:12924:31549","2:12927:25025","2:12928:31550","2:12929:334","2:12930:25071","2:12931:2136","2:12933:25068","2:12935:25069","2:12937:25070","2:12939:31551","2:12940:31552","2:12941:25094","2:12942:25095","2:12943:25098","2:12944:25099","2:12946:5301","2:12947:5474","2:12948:5080","2:12949:29578","2:12950:29581","2:12951:28709","2:12952:31553","2:12953:29599","2:12954:25112","2:12957:24493","2:12960:24495","2:12963:2643","2:12967:2602","2:12971:25100","2:12974:25102","2:12977:25104","2:12980:31554","2:12983:31555","2:12986:25106","2:12989:25108","2:12992:25110","2:12995:25111","2:12998:2377","2:13001:31556","2:13004:31557","2:13007:31558","2:13010:31559","2:13012:31560","2:13014:31561","2:13016:31562","2:13017:31563","2:13018:31564","2:13021:31565","2:13024:23788","2:13027:25113","2:13030:31566","2:13033:31567","2:13036:31568","2:13039:31569","2:13041:24848","2:13042:26271","2:13043:24849","2:13044:24845","2:13045:24844","2:13046:26274","2:13047:26275","2:13048:26276","2:13049:31570","2:13051:6321","2:13052:31571"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2686:805":{"id":"2:2686:805","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5618:24847":{"id":"5:5618:24847","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13044:24845"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2684-0:71:2065":{"id":"b:2:2684-0:71:2065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2686:805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:52:610":{"id":"0:52:610","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[450,4],"end":[452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2693:138":{"id":"2:2693:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:13047:26275":{"id":"2:13047:26275","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:37506"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3518:1756":{"id":"2:3518:1756","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39078:5353","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12963:2643":{"id":"2:12963:2643","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41293:191","prim@char":"1:12265:458","self::pattern":"2:12609:11769"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11:2057":{"id":"0:11:2057","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,28]},"visibility":"default","docs":"Return `true` if the guard’s associated code should run\n(in the context where this method is called).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:33:2112":{"id":"0:33:2112","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[357,4],"end":[369,5]},"visibility":"public","docs":"“Defuse” the guard and extract the value without calling the closure.\n\n```\nextern crate scopeguard;\n\nuse scopeguard::{guard, ScopeGuard};\n\nfn conditional() -> bool { true }\n\nfn main() {\n    let mut guard = guard(Vec::new(), |mut v| v.clear());\n    guard.push(1);\n\n    if conditional() {\n        // a condition maybe makes us decide to\n        // “defuse” the guard and get back its inner parts\n        let value = ScopeGuard::into_inner(guard);\n    } else {\n        // guard still exists in this branch\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["guard",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12954:25112":{"id":"2:12954:25112","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:11769"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12980:31554":{"id":"2:12980:31554","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12609:11769","str::split":"2:12971:25100","prim@char":"1:12265:458","`DoubleEndedIterator`":"2:7986:131","str::rsplit_terminator":"2:12983:31555"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43224:5456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12986:25106":{"id":"2:12986:25106","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:11769","str::rsplitn":"2:12989:25108"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43278:5285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13001:31556":{"id":"2:13001:31556","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12609:11769","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::matches":"2:12998:2377"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43396:5461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:11767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13049:31570":{"id":"2:13049:31570","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4700:31570"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43473:5363","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12967:2602":{"id":"2:12967:2602","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41293:191","prim@char":"1:12265:458","self::pattern":"2:12609:11769"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:11767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12942:25095":{"id":"2:12942:25095","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12941:25094","str::split_at_mut_checked":"2:12944:25099"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41416:6546-0:68:2062":{"id":"a:2:41416:6546-0:68:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41416:6546","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12922:31548":{"id":"2:12922:31548","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2683:2596":{"id":"2:2683:2596","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2657:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41415:6329-0:74:2067":{"id":"a:2:41415:6329-0:74:2067","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41415:6329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12992:25110":{"id":"2:12992:25110","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2405-0:68:2062":{"id":"b:2:2405-0:68:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2399:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2407:2365"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13010:31559":{"id":"2:13010:31559","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13036:31568":{"id":"2:13036:31568","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:11769"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:11767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:248":{"id":"0:51:248","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[448,4],"end":[448,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:62:648":{"id":"0:62:648","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[470,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13043:24849":{"id":"2:13043:24849","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2690-0:74:2067":{"id":"b:2:2690-0:74:2067","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2660:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2067","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2693:138","2:2694:1743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13012:31560":{"id":"2:13012:31560","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:25025":{"id":"2:12927:25025","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12157:11770"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12946:5301":{"id":"2:12946:5301","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12265:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43144:5293","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:6775:17468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:10255:5849":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:39769:5363":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:4590:2523":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:9253:5841":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:10882:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:7851:3021":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:6729:17462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:1809:672":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:10819:5859":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"5:4470:2925":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:1607:4971":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:6519:17442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:12289:3472":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:4952:16675":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:43466:5300":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:10654:2549":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:31757:5346":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:22634:6477":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:22108:6698":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:11048:5283":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:4543:2522":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:6698:17458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:532:12707":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:12157:11770":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:12089:3455":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:2528:4375":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:12248:23811":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:6664:17454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:5897:4472":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"14:7:4936":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:11661:3389":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:497:12704":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"18:754:3148":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:13375:3605":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:42263:2519":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:10861:5865":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:12597:3506":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:1887:5665":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:733:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:11443:3362":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"11:2151:4959":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:3329:4417":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:10395:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:4406:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:15222:4056":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:40083:5243":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:15456:4116":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:45626:5548":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:11751:5685":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:7656:19515":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:9273:5845":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:538:12708":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:15445:4115":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:22623:5338":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:9091:5830":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:12276:730":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:4845:6494":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:5756:4457":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"13:0:2263":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:7441:29844":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"11:2326:4957":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:8499:6460":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:12408:3487":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"15:288:18597":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:7552:5075":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:11606:5732":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:42253:29718":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:15778:4224":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:9150:6581":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:13606:3658":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:42531:5425":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:2657:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:11617:27041":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:14189:3775":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:4805:6533":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:2528:6124":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:1707:13620":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:12125:12053":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:2660:4381":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:15058:4015":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:11026:19591":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:31781:2407":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:41085:6461":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:3833:5684":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:5215:2934":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:7910:19517":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:13999:3733":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:8264:5750":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:3149:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:5236:16703":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"11:2140:4957":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:21988:6695":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:43278:5285":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:12201:3465":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:5336:16716":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:15582:4167":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:13473:3622":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:2572:4377":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:8301:4858":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:6504:4587":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:14876:3964":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:10050:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:4837:776":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:10251:3152":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:2684:4382":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:41069:5263":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:1172:6123":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:8274:6450":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:12863:3524":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:282:2899":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:41757:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:5400:16724":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"11:1903:4968":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:8645:6542":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"9:330:18546":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:3899:4423":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:39974:5379":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:45381:5535":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:6562:17446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"11:430:33762":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:1574:4945":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:1063:4959":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:7446:17876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:8000:6327":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:11016:3028":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"11:832:4965":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:5847:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"11:856:4953":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:9886:19574":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:1142:4962":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:944:4945":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:6976:4663":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:11621:3385":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:5802:19504":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:41253:5264":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:3588:27219":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:9329:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:4502:4429":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:31837:2408":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:45594:5546":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:39761:5217":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:1593:13610":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"11:2554:33774":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:11126:5828":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:22120:30314":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:5241:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:3286:32873":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:15116:4028":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:1581:2919":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"18:651:3098":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:22:791":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:11853:3414":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13116:3548":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"18:659:3123":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:13986:3732":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:513:3165":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:5742:4453":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:12399:3486":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:542:4345":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:356:2562":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:4695:6530":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:150:2886":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:5200:16699":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"11:0:2268":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:2188:130":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"16:2374:4368":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:1580:13608":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"9:392:18492":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:11528:3031":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:5515:16736":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:12543:3505":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:1860:2699":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:39925:5374":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:10054:2510":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:39753:5362":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"9:0:2266":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:8105:3238":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:40497:5253":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:6665:19510":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"18:718:3139":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:7144:19513":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:42774:5276":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:8132:5745":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:12530:3504":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"0:34:2074":{"crate_id":0,"path":["scopeguard","guard"],"kind":"function"},"6:6900:17498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:5352:16718":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:10234:5663":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"6:5477:16732":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11313:3349":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:9115:2607":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:16235:4335":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:12280:875":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:2437:6408":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:10671:33860":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:12289:1357":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:3013:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:4141:6485":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:40044:5387":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:31838:2410":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:5014:16683":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:12311:5294":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:12808:3521":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:7938:2552":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:12189:3464":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:11367:3329":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:10498:2979":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:2439:6409":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:21779:5313":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:8300:16919":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:10309:5275":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:5225:16702":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:21901:6419":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:1949:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11877:3416":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:3597:6417":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:8590:6534":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:31708:6563":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:13235:3576":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:41357:4964":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:4767:11827":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:7697:2939":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:14436:3823":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:22206:6419":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"18:643:3098":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:13946:3724":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:10064:2514":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:8136:4842":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:1831:2939":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"18:706:3135":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:5423:16726":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:45442:5538":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:403:3161":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:11654:5289":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:10412:6131":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:7823:19516":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12671:3510":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:5075:4447":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:10269:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:14066:3743":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11128:3284":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:10915:33854":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:38981:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:15151:4038":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11595:3382":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"18:581:3108":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:39992:5381":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:6991:33841":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11354:3355":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:13972:3423":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"11:1676:2090":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:41562:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:9065:5828":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:9219:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:724:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:40504:5396":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:5307:4449":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:7429:13725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"11:1923:4971":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:22175:2681":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"1:10127:5407":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:3473:3180":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:45948:5606":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:30271:29717":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"6:5102:16691":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:33582:2454":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:5636:16748":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:10137:19555":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:3264:3178":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:6588:4591":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:726:6464":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:41434:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"0:37:2077":{"crate_id":0,"path":["scopeguard","guard_on_success"],"kind":"function"},"16:7428:19514":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:39682:5355":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:6066:4501":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:13439:2989":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:39041:2469":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:6621:17449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:3842:4422":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:6480:4394":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:5212:16700":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:827:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:4175:11742":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:10844:4945":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:5367:19503":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:12270:1624":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:45812:5570":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:3522:5800":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:40155:5392":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:2310:32818":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:10304:6423":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:5466:16730":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:9848:2530":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:6880:16575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:10001:2508":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:9334:3010":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"16:4468:4428":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:43457:5465":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:6945:2952":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"11:787:4949":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:1510:13601":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:7461:17878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:5653:16750":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:2936:18645":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:43733:5479":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:7082:2957":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:15957:4252":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:3607:6439":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:14111:3748":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:22220:6691":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:1156:32840":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:2278:6401":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:871:2905":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:1098:3167":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:2949:2441":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:4270:6508":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:12572:3309":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"11:1087:33775":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13877:3717":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:3233:29140":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:11840:28889":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:1939:5666":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:8404:6342":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:8306:16920":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:13459:5312":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"18:698:3133":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:4097:6483":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:44187:5499":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:1569:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:2394:4369":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:39895:2966":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:4241:2925":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:14587:3841":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12993:19582":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:2338:4360":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:7638:5083":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:16223:4332":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:9516:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:2115:5055":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"5:4926:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:3778:4420":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:13674:3660":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:38866:2476":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:9671:19557":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:10321:6565":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:640:5656":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:4587:4432":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:2708:4383":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:3115:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:10547:3026":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:15092:4026":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:6962:4403":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:2274:2113":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:4531:4430":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:1526:13603":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:7299:3019":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"11:837:4950":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:5870:5712":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:12237:6328":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"18:80:23753":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:7813:4787":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:11743:3396":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:11623:27036":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:43428:5462":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:12238:3468":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:9078:5829":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:8452:5378":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:15931:3561":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:10018:19558":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:5407:1205":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:15023:4011":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:11634:3387":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:5415:4451":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:13146:3552":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:15078:4023":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:2355:4362":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:2548:4376":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:42034:2512":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"11:2469:2939":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:12494:3497":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:1578:2607":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:13455:3621":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:14723:3850":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:12624:3135":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:1558:4947":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:7933:2550":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:2976:2463":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:5400:3294":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:5489:16734":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:13308:3594":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:43768:5484":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:3369:5679":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:5361:16719":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:11293:19609":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:14372:3804":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:46316:5620":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:13509:3627":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:14414:3812":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:7314:13556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:41053:5261":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:12281:856":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:1490:13598":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"11:1887:2607":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:21750:6419":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:849:4964":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:6872:4654":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:15190:4049":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:3623:2919":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:2497:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:5781:4397":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:8259:4742":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:43012:5442":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"11:1025:4957":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:13553:3644":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:3038:2455":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:7036:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:12342:3479":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:2691:5673":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:41482:4964":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:39071:2471":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:9286:23813":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:2768:4386":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5064:16689":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:43554:11781":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:11812:3409":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:5039:16686":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:7914:6419":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:31867:2409":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:12683:3511":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:3938:5686":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:45206:5517":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"15:327:18602":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:12621:3507":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:43590:5472":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:3143:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"18:0:2274":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:8202:4413":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:9201:5834":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:1585:2939":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:16187:4325":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"5:7427:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:7584:17886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:5930:5235":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:8110:5742":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:12141:5291":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:6754:2899":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:4232:28628":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:41837:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:40145:5247":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:7755:4401":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:7052:4677":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:23085:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:1675:2925":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"6:1535:13604":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13738:3689":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:32863:2447":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:9640:3025":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:12277:881":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:15249:4060":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:4152:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:43575:5467":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:4979:16679":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:11027:3029":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:2759:31281":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:8175:4846":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"11:2304:4690":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:15:2380":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:13089:3542":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:4151:4964":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12076:3454":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:8144:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:10919:23799":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:2986:2465":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:15126:4029":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:3334:2470":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"7:0:1835":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:8413:11995":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:10218:3151":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:5283:16709":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:10901:5683":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:2491:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:5296:16711":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:43378:5460":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:4959:16676":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:10261:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:1429:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:4352:4426":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:6628:5244":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:11471:5874":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"2:4194:11810":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:45074:5501":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:9703:31200":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:1192:32838":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:40074:5242":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:860:4354":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:8542:6510":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:7811:5880":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:9356:3016":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:12056:3453":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:4410:5222":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:8259:16913":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:4986:5226":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:12265:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:11380:5873":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:45671:5565":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:637:5654":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:6821:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:545:12709":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11567:3372":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:12278:863":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:2271:5670":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:43094:5448":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:5385:3293":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:7419:2607":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:12268:1256":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:43002:5441":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:16032:3579":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:7799:4399":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:14271:3790":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:5195:5697":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:45480:5540":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:945:4955":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:45136:5509":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:909:4965":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:8216:4851":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:11898:3418":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:12768:19559":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:5528:5703":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:12287:937":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:725:6419":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:7888:4799":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:5722:4398":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:45398:5536":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:867:3158":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:14079:3744":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:2954:2446":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:8748:6556":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:2854:4390":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:15383:4100":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:6752:5720":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:38941:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:5250:16705":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:2627:11843":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:14038:3738":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:8710:5429":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:21299:6419":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:7686:4782":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"14:187:18585":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:45302:5523":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:6874:17497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:33099:2450":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:7473:4505":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:16069:4296":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:9054:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:22332:5315":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:11854:5733":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:4334:5688":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:3029:3192":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"15:306:18598":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:10997:3319":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:6398:4392":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:11551:5876":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:2033:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:43799:5304":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:13292:3590":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:41:2895":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:1761:2427":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:0:968":{"crate_id":6,"path":["libc"],"kind":"module"},"2:44100:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"9:424:18493":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:8462:5395":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:45360:5534":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:10691:6419":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:45783:5569":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:42334:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:11688:3033":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:7944:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:7406:28622":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:11755:3399":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:40012:5229":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:6532:17444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:4870:16666":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:5863:5709":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:43160:3156":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:261:3159":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:2449:6414":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"0:74:2067":{"crate_id":0,"path":["scopeguard","OnSuccess"],"kind":"enum"},"16:5960:4485":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:14131:3749":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:10970:5830":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:5483:16733":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:1628:13612":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:14298:3793":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:45413:5537":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:1653:13614":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:5544:5704":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:38914:2468":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:15324:4082":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"8:0:2265":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:6650:17452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:9048:5827":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:11583:3378":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:11405:3358":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:11545:5725":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:2838:4389":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:46223:5613":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:5405:2899":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:15010:4006":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:6026:4341":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:9361:3017":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:6439:5237":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:14855:3956":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:6088:3006":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:1357:4963":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:43342:5459":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:43604:5475":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"11:2124:4690":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:40062:5388":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:10092:19579":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:14091:3745":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:12630:11767":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:13211:3575":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:0:2273":{"crate_id":17,"path":["object"],"kind":"module"},"2:39676:5217":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:11467:3363":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:7713:2943":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:6412:6702":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:9781:19572":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:40096:5389":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:564:12712":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:8197:18419":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:11841:3413":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:16093:4301":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:8482:5462":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"10:36:33756":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:41271:5266":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:3514:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:8012:18257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:42292:4814":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"0:18:2071":{"crate_id":0,"path":["scopeguard","defer"],"kind":"macro"},"5:3039:32406":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:3374:31104":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:6639:2972":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:2981:2464":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:1590:4968":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:39802:11834":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:14475:3826":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:8188:4849":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:6623:3013":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:37672:2461":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:16176:4324":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:22094:6419":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:15678:4201":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:9938:19576":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:6672:2607":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"11:396:2893":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:43192:5283":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:9260:5842":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:6927:4659":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:3236:24435":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:7800:3166":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:14012:3735":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:2626:6419":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:7628:5082":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:8039:2480":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:4131:6484":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"11:2231:3375":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"0:68:2062":{"crate_id":0,"path":["scopeguard","Always"],"kind":"enum"},"1:7870:3023":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:5028:943":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:45273:5521":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:6120:19507":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:5290:16710":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11166:3336":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"11:700:2607":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:5370:16720":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:30620:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:35631:2457":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:45721:5567":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:40490:5252":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:8188:5749":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:586:12715":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:44210:5500":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:6447:17438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:46281:5617":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:578:12714":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:3771:6462":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:12150:3458":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:1578:5051":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:7537:17882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:5390:16723":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:15463:4118":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:6689:17457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:8788:5692":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:42280:29609":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:4742:23831":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"5:3252:32874":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:6033:2934":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:6456:19509":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:11715:3393":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:43898:12089":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"9:482:18490":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:12792:3258":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:5617:16745":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:7412:13727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:3273:4970":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:39850:29648":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8269:5751":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:6231:4532":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:6385:4574":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:10622:33857":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:9088:2131":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:11578:5729":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:2237:32812":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:6494:4586":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:42923:5436":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:11497:3365":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:21352:6419":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:6802:4640":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:1723:13621":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:15168:4043":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:4932:16673":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"11:351:33757":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:11711:5684":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:2037:3170":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:8226:19518":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"18:491:3097":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:3874:2939":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:14868:3963":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:8253:16912":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:9387:5724":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:523:12706":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:7168:5845":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:32981:2449":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:1968:6383":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:3461:5397":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:2903:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:10887:33855":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:11176:5724":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:43023:5443":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:21791:30952":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:2651:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:4414:5689":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:8122:5744":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:40030:5384":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:7493:11991":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:7061:4680":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:15760:4218":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:13412:3611":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:5630:16747":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:31771:5347":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:3146:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:5917:2919":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:559:12711":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:4262:5220":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:7509:4763":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:10954:19589":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13581:3654":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:21223:30946":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:7590:4408":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:7648:4781":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:5588:16743":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:39788:5365":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:3389:2477":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:4718:4435":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:45871:5573":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:44108:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:6441:17437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:43918:12087":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:21235:30946":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:13844:3709":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:15748:4216":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:437:3164":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:6278:4539":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:22492:5323":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:45221:5518":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:2732:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:7516:17881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:9138:5833":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:41113:29637":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:6263:2989":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"18:573:3098":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:4787:16660":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:16079:4297":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:12371:5298":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:22541:29649":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:7256:24051":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:30207:2050":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:11557:3370":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:39001:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:5020:6532":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:903:2939":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:2612:4379":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:32257:2443":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:1754:648":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:11127:5285":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:8160:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:1874:29646":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:6279:3005":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:5164:5697":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11075:3329":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:6574:4412":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:6317:4561":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:2317:2682":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:7663:3144":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:15473:4123":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:922:4950":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:7769:4785":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:10439:3295":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:5914:4477":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:8095:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:3361:2474":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:7618:4778":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:8567:5806":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:11915:19678":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:2978:2996":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:2208:5056":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:8166:5671":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:11687:5290":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:15814:4228":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:9099:4945":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:14516:3831":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:2669:2979":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:6158:2925":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:13272:3589":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:7695:4783":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:1537:4965":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:41197:29651":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:1547:4946":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:10877:3311":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:16121:4308":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:12443:3492":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:8247:16911":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"18:113:23755":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:6629:17450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:39839:5371":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:43902:12093":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:11214:3339":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:2421:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:42027:2511":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:5559:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:6079:4347":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:10818:3310":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:11102:3331":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:41340:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:21903:6611":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:2808:4388":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:1328:4959":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:3579:2508":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:12328:3474":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:893:2919":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:38910:2466":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:42552:5429":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"11:123:2889":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:6670:17455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:4415:5223":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:13297:5309":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"11:811:2939":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:7958:2549":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:4563:2412":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:0:543":{"crate_id":2,"path":["core"],"kind":"module"},"1:3276:5675":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:40519:5397":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:8271:16915":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:6915:17499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:13485:3625":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:11227:3340":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:6706:17459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:15720:4207":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:2902:18644":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"10:44:4977":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:11086:5284":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:4924:16672":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:5671:16752":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:7111:4687":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:12464:19703":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:11510:3366":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:12508:3500":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:46144:5610":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"9:447:18491":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:12348:5297":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"0:21:2090":{"crate_id":0,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"6:4811:16662":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:2478:4373":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:44162:5498":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:31782:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:43174:5278":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:43940:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:12433:3490":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:12043:3451":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:5037:4446":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:10848:5743":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:12707:3513":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:15734:4209":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:6634:29613":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:45288:5522":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:42308:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"7:78:18479":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:5181:16697":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:7651:29401":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:4106:2899":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:4153:6488":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:7376:11998":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"5:4440:2928":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:6047:4494":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:13421:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:13387:3606":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:41231:5687":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:13832:3707":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"18:635:3122":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:14386:3806":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:6634:4400":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:32443:2442":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:46395:5631":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:5502:16735":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:2203:3174":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:21360:6612":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:5494:5698":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"11:2443:2919":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:41796:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:21477:6610":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:6478:17441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:7359:17875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:42515:5422":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8171:5747":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:10769:33852":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12516:3502":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:15273:4069":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:3540:5682":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:5266:16707":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:12283:1767":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:12683:11775":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:11772:5686":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:39776:11833":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:297:2482":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:13774:3698":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:3247:4969":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:13046:3538":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13538:3638":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:2592:4378":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:46365:5629":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:4425:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:6756:17465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:8265:16914":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:15569:4161":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:33040:2448":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:7321:5412":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:8006:6373":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:8804:5825":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:12949:3182":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:6587:5716":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:4254:6506":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:13325:3596":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:7485:17880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:42755:5435":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:22469:5318":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:4262:6507":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"11:2542:29921":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:14986:4004":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:7006:4666":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:1481:4964":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:7330:12581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:1621:13611":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"15:394:18608":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:11013:5282":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:14177:3773":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:3240:4945":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:3925:4424":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:6583:5396":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:5756:5706":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"11:1896:2939":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:3097:2475":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:8469:3156":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:12724:19580":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:7348:17874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:12030:3450":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:8073:4836":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:2438:4371":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:5557:16740":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:39704:29725":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:31869:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:2069:2701":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:41718:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"14:31:4936":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:3669:3197":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:43324:5458":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:3031:32405":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:5942:2999":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:553:12710":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:4614:4433":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:5146:16695":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:9916:19575":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:10185:3149":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:10893:5278":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:40002:5383":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:42562:5433":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:4424:4427":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:12272:1746":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:41601:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:10905:3312":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:41490:2607":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:43120:5450":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:3836:5685":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:6104:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:3491:2925":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"14:40:3576":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:8118:4840":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:5677:16753":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:11139:5829":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"11:1582:4966":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"11:2352:4959":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:11688:3391":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:16138:4310":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:4821:3187":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:3597:3181":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:8294:16918":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:2315:2681":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:8420:5683":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:517:12705":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:3399:2939":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:46418:5632":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:13497:3626":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11605:3383":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"18:507:3098":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:42770:29496":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:414:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:12232:29403":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"13:226:33776":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:2945:2406":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:4986:3189":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:42355:2520":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:2896:2402":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:7565:29648":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:8407:6346":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:14341:3799":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:7339:17873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:43104:5449":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:43894:12090":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:13723:3685":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:5006:4445":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:4909:16670":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:42570:5434":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11788:3405":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:11189:3337":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"11:2548:33763":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"9:238:5429":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:43062:5445":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:42974:5437":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:3139:2126":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:3794:5053":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:12264:1137":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"9:53:18509":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"11:2423:2607":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:46202:5612":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:25485:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:12388:3485":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:2784:5087":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:4336:2130":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11547:3237":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:6895:4655":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:37507:2458":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:30239:2430":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:15769:4222":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"11:2403:4964":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:4479:2964":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11702:3392":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:12284:1773":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:13064:3541":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:22603:29720":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:4140:5219":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:5320:16714":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:11211:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:12422:3488":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:4830:4439":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:4283:6509":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:5353:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:45331:5525":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:5995:4488":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:5472:16731":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:1054:4957":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:45463:5539":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:4927:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:11158:12105":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:46173:5611":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:15102:4027":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:5052:16688":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:39821:5370":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:13594:3655":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"0:40:2080":{"crate_id":0,"path":["scopeguard","guard_on_unwind"],"kind":"function"},"16:5700:4396":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:40538:5255":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:6532:4589":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:45527:5543":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:15176:4046":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:33755:2456":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"0:10:2054":{"crate_id":0,"path":["scopeguard","Strategy"],"kind":"trait"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:4740:23829":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"6:5445:16728":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:45611:5547":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:4985:16680":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:13015:3490":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:44171:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:10828:33859":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:39905:5373":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:11537:3368":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:6782:19511":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:11016:3321":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:41374:5412":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:8399:3144":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:13959:3727":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:9521:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:1343:4957":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:12569:6399":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:44198:4976":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12225:3467":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:21250:30954":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"18:589:3109":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11115:3333":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:2730:5674":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:10058:2512":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:12282:1785":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:7397:33850":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:597:3166":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:14212:3784":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:1692:6502":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:7907:11997":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:40053:5236":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:11169:5288":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:7014:19512":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:4595:6512":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:473:12700":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:1065:2899":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:21755:6615":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:43049:5375":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:7107:2960":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:11799:3406":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:6187:3001":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:7580:4777":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:12851:3523":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:6427:4578":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:5643:16749":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:1585:13609":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:43975:12106":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:8282:16916":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:14503:3830":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:5686:4393":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:6940:4661":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:7497:4762":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:40528:2974":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:2508:4374":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:1559:13606":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:1680:13617":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:0:2272":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:21281:30957":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:12362:3484":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:5742:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"11:1917:4970":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:15333:4085":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:7984:12659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:6460:17439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:46115:5609":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:10606:5675":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"6:4837:16664":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:37562:2459":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:6849:4653":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:11392:3357":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:9214:5835":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:6505:17398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:12615:5269":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"0:71:2065":{"crate_id":0,"path":["scopeguard","OnUnwind"],"kind":"enum"},"5:6591:2899":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:7132:4689":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:5107:4448":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:1686:13618":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:7592:5081":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:15410:4107":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:4091:6482":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:2748:4385":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:2660:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:7306:33847":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:362:2563":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:10062:2513":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:46327:5621":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:6746:17464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:14449:3824":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:6435:17436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:40021:5232":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:5449:11757":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:5002:16682":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:672:5046":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:7604:4409":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:12929:3528":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"11:299:6120":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:14311:3794":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:1547:13605":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:30260:2519":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:43669:5478":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:39732:5360":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"12:0:2269":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:16151:4316":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:32629:2445":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:43084:5447":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:6054:6128":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:3281:4968":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:22561:29608":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:14284:3792":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"11:687:4964":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:503:2539":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:14599:3848":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:5927:4478":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:2175:19636":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:6636:17451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"11:1566:18572":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:3614:4419":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:10872:5744":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:46244:5614":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"18:670:3129":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:3029:32421":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:7915:2564":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:13363:3602":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:15342:4086":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:10399:3156":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:12454:3493":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:10044:19578":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"11:2536:33770":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:11825:3411":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:12371:3528":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:1517:13602":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:1602:4970":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"14:220:4943":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:3810:4421":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:6821:17470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13252:3579":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"11:883:4956":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:3743:2899":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:8328:16922":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:10513:2984":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:41679:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:1663:13615":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:45833:5571":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:11256:3343":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:4971:16678":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"9:357:18506":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:11419:3309":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"19:0:1235":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:2654:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:3028:2667":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:39021:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:10953:23796":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:4145:6486":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:33236:2452":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:4940:4443":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:6300:4554":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:12279:869":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:3637:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:22385:5316":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:3239:24295":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:5528:16737":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:1885:5664":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:10868:4964":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:7395:5072":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:5347:4450":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:6606:4599":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:6620:4601":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:1862:5663":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:43144:5293":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:4948:29436":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:44141:5493":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:46070:5608":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:1824:5661":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:15799:4227":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:10930:5741":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:22438:5317":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:6414:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:7948:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:10701:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:10284:3153":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:1883:2698":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:30647:3108":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:43242:5457":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:14560:3838":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:8093:4837":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:7385:2911":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:2458:4372":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:3349:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:6491:17397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6409:17434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:3757:2607":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:43747:11782":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:13494:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13753:3694":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:8021:5741":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:7528:4772":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:11828:5877":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:5046:16687":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:13424:3612":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:45495:5541":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:14147:3754":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:42523:5424":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:4864:16665":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:4069:6480":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:43758:5480":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:6763:17466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"5:3809:5054":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:41426:2554":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:1671:13616":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5329:16715":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:11592:5730":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:5083:16690":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:9232:23793":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:6695:5717":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:2655:2993":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"18:726:3142":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:10609:5677":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"6:4891:16501":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:11150:23807":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:15376:4099":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:10155:3293":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:5191:16698":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:5681:6561":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:40131:3120":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:11647:3388":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:45573:5545":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:6560:4395":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:41291:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:46290:5618":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:45256:5520":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:3426:2478":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:7549:4775":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:10661:3307":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:2898:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:16050:3589":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:481:2991":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:499:1236":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"1:588:6320":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:45168:5511":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:10975:5281":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"11:1910:4969":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:13899:3718":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:14463:3825":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:39795:5366":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:1072:4963":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:9807:19562":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12278:3471":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:9107:5832":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:5508:5702":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:10481:2978":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:4876:16667":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:39091:5354":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:22122:2681":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"6:1639:13613":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"14:160:4936":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:220:2897":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:14994:4005":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:8341:18455":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:8547:6511":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:13272:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:46270:5616":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:7575:17885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:31746:5345":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:3326:5677":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:1791:1298":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"18:623:33866":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:12216:5883":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:8432:6418":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:7602:17887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:6433:4579":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:41416:6546":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:33409:2453":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:13526:3635":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"11:1007:4690":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:8535:5687":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:38963:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:11847:5733":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:22525:5325":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:45189:5516":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:4976:4444":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:5421:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:12286:1761":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:7546:17883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:8006:18256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:39078:5353":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13399:3609":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:872:3159":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:11033:3030":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:43150:5454":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"11:742:4947":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:5831:4466":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:43133:5453":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:8029:18258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:22161:6699":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:7570:4407":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:8451:31199":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:7911:11996":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:6379:17369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:1519:4948":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:6714:17460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:5817:4463":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:8553:5804":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"18:765:23765":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"11:673:4945":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:41876:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:4916:16671":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:6466:4583":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:5382:16722":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:46457:5648":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:11142:3309":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:5643:2925":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:4293:5221":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:10045:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:7957:2481":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"18:521:23766":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:46025:5607":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:12557:3329":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:256:3158":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:9121:5707":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:39932:5375":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:10504:5827":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:3307:4971":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:41405:5414":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:465:12699":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:7986:6326":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:1503:13600":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:5684:6562":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:2290:32806":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:4487:5690":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:15289:4071":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:613:33863":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:867:4948":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:15266:4068":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"18:598:33864":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:8317:16921":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:12659:3509":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"18:680:3130":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:15356:4093":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:6311:5715":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:4:1218":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:5739:2925":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:11493:27033":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"5:2198:2539":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:41640:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:11051:3324":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"18:531:3102":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:7580:5078":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:2418:4370":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"11:2562:33771":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:4847:6496":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13173:3560":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:43914:12086":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:5863:19505":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:6749:4627":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:14051:3740":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:11141:5286":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:15944:3575":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"5:7604:2935":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:831:2902":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:7986:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8115:5743":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:2495:2281":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:5011:6531":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:14489:3827":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:42540:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:10720:33858":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:2269:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:12285:1779":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:6788:33025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:22253:6690":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:13437:3613":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:4849:6497":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:15624:4180":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:40106:5390":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:5436:16727":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:1496:13599":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:15521:4160":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:7363:5071":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:41365:2607":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:12300:19702":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:46380:5630":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:4083:6481":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:6543:4590":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:859:2607":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:14402:3810":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:15390:4101":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:16165:4319":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:3663:4964":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:7536:2553":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:14847:3953":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:5816:5233":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:10936:5280":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:4885:16668":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"0:20:2079":{"crate_id":0,"path":["scopeguard","defer_on_unwind"],"kind":"macro"},"17:14575:3490":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:10052:2509":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:43922:12105":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:10350:3155":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:10415:2976":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:39961:5378":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:39264:11844":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:15368:4096":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:14933:3998":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"11:800:2919":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:45153:5510":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:42013:2510":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:3328:5678":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:9225:2543":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:9180:6582":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:9858:19573":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"11:774:4948":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:12127:3457":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:2301:649":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:22517:5324":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:6412:19508":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:42992:5440":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:15039:4014":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:5897:5713":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:14912:3993":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:31750:4742":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:8475:5278":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:40546:5257":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:481:3096":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11153:3310":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:8488:5797":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:3355:2472":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:5122:16693":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:7377:11999":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:6545:2919":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:3371:5680":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13785:3701":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:6813:4641":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:15197:4051":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6160:18616":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:13797:3703":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:1603:4967":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:43448:5464":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:41031:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:10019:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:7539:4406":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:6597:17447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:45104:5505":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:13245:31008":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:43296:5286":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:918:4947":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:11442:5029":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:9351:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:9342:2925":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:3011:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:8288:16917":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:3344:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:6366:3006":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:11063:3327":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:9165:6580":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:15426:4110":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:12264:3470":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:31780:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:6477:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:45850:5572":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"11:1051:4959":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"11:434:33765":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:7857:4795":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:38830:2479":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:10982:19590":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:43696:5303":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:22453:29619":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:10838:26787":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"6:5314:16713":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:491:12703":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:22503:29631":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:6263:4537":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:9346:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:12824:19581":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:45121:5508":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:9199:5269":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:4802:4438":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:6609:17448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:41219:5410":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:11773:3401":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:8612:5691":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:5112:16692":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"18:538:3105":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:14325:3797":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:43473:5363":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:2964:2444":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:39952:5377":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:12695:3512":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:1565:13607":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11242:3341":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:2878:4391":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"18:563:3107":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"11:1107:4961":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:5134:16694":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:4800:16661":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:6935:2950":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:15400:4104":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:11341:3354":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:15596:4173":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:10068:19561":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:6766:3014":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:6698:6576":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:14968:3999":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:11241:27025":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:14356:3803":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:4743:4436":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:41415:6329":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:10534:33856":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:2104:5054":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:5174:6501":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:5020:16684":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:21301:6613":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:3650:4945":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:1485:13597":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:5665:16751":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:4965:16677":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:43438:5463":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:4311:4945":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:2455:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:39693:5356":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:44149:5495":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:5536:16738":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"10:0:2267":{"crate_id":10,"path":["adler"],"kind":"module"},"2:42020:2509":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:12843:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:15206:4052":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:3196:4359":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:44090:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"14:165:18578":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:12051:3037":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:3475:4418":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:39877:6386":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:4128:5218":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:939:4953":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"11:2369:4974":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:8662:5817":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:16269:3611":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:10524:3305":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:1466:4945":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:928:6340":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:7389:13742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:2421:2670":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:10759:3309":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:2908:2048":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:12288:1845":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:40290:5249":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:10612:5679":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:40304:5250":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:2460:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:8196:5053":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:6768:17467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"16:6353:4352":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:10573:33853":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:1207:3169":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:3178:2467":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:45738:5568":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:5457:16729":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:12107:3309":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"18:515:3095":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:21269:30950":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:4504:2928":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:951:4956":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:2587:5672":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:15822:4231":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:42317:2519":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:2399:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:1497:2607":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"0:0:2152":{"crate_id":0,"path":["scopeguard"],"kind":"module"},"1:5749:3006":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:8815:5826":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:45512:5542":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:9306:6233":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:8798:4945":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:914:4946":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:4641:4434":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:21354:6609":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:45317:5524":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:11155:5287":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:12900:3527":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:12213:3466":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:7455:2607":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"9:502:5032":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:557:2546":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:12269:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:7633:33842":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:7355:2607":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7098:4684":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:6657:17453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:2090:5053":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:39865:5372":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:1596:4969":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:12271:1658":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:6001:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:4730:6483":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:46342:5622":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:15836:4234":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:43621:5476":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:10253:5850":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"11:2569:5074":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:43075:5446":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:9265:5843":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:2788:4387":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:2636:4380":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:7452:17877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"18:96:23754":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:10170:3294":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:9628:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"14:214:4941":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:12318:3182":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:4808:6512":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:11324:3351":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"15:0:2271":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:5453:11758":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:1528:4949":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"18:689:3132":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:2998:4414":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:5565:16741":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:6542:17445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:2423:6404":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:6098:19506":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:11731:2696":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:4897:16669":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:3278:5676":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:4039:6478":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:1727:2899":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:7741:4411":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:4051:2925":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:6811:17469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:11730:3395":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:15138:4032":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:38926:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:6648:4603":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:8351:18456":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:16212:4330":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:1040:4690":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:21372:5314":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:14260:3789":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:7463:2607":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:4617:6513":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:4903:2997":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"9:178:18559":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:16105:4303":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:645:6323":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:12353:3483":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:10612:3306":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:10317:3154":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:43964:5490":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:2938:2404":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:40513:5254":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:21468:6419":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:5031:16685":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:39719:5359":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:15701:4202":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:21267:30959":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:12263:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"13:109:33823":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:2234:3177":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:5244:16704":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:4076:2919":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:12485:19704":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:10419:3160":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:5546:16739":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:29809:6463":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:9467:5664":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"18:608:3116":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:13344:3601":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:7355:4721":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:6758:4628":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:6721:17461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:6678:17456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:14752:3870":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:6524:17443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:14529:3832":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:22248:6692":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:12635:11766":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:37617:2460":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:45089:5504":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:7521:6339":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"11:1066:18571":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:5376:16721":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:39983:5380":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:880:4949":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:533:2544":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:12887:3525":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:11764:3400":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:5260:16706":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:7510:5074":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:5065:2925":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4992:16681":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:4271:2925":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:2383:4945":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"11:328:33761":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:15418:4108":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:5277:16708":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:15281:4070":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:6417:17435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:0:2264":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:16198:4326":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:5344:16717":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:41474:4945":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:43910:12092":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:43781:5488":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:7049:6607":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:7559:4776":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:38251:2462":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:21479:5314":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:5713:2937":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:4489:2521":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:7346:5052":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:8586:5808":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:927:2907":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"11:102:33769":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:6948:4402":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:45544:5544":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:43482:5217":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:43224:5456":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:9984:19577":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:16259:3606":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:8155:4845":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:40280:5395":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:4942:16674":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:621:5653":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:6393:6701":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:7085:4681":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:12609:11769":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:13922:3723":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:31764:2521":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:41499:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:0:1650":{"crate_id":1,"path":["std"],"kind":"module"},"6:479:12701":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:8408:5789":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:14246:3787":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:11269:19608":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"16:6335:4571":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:2030:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:41523:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:2303:18617":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11493:3364":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:10910:23794":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:15655:4188":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:2323:18643":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:12969:3530":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:3035:32407":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:40115:5245":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:3271:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:45235:5519":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:7467:17879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:4744:23833":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:14977:4003":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"11:1891:2919":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:4882:4441":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:5076:6538":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:4033:6479":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:22070:6697":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:5160:16696":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:7405:32813":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:44083:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:39742:5361":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:8494:5799":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:10843:27045":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:45700:5566":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:13549:6341":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:12290:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:4771:4437":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:5613:5705":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"5:1312:4690":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:7306:12752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:12387:5299":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:4824:16663":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:6471:17440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:21213:3108":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:7379:33851":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:4926:6493":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:43491:5362":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:22032:6696":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:14235:3785":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:11193:23814":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:9405:5847":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:44086:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:2743:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:13766:3696":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"11:710:4946":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:12425:5280":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:4062:4425":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:12266:1806":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:5624:16746":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"14:202:11783":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:13024:19583":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:43906:12091":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"14:0:2270":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"11:844:6340":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:15313:4078":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"11:875:4955":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:4913:4442":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:5581:16742":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"7:31:18472":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:6442:4580":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:10891:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:46261:5615":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:7727:4410":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:13187:3561":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:1975:759":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"5:7435:5073":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:12275:714":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:4856:4440":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13814:3706":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:5219:16701":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:8733:5820":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:12251:3469":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:3418:6447":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:11524:3367":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:30245:2431":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:7271:2615":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:12175:3460":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:7375:2919":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:15646:4186":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:12584:3310":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:5598:16744":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:6912:2937":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:15616:4179":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:4560:4431":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:6342:33848":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"11:364:2891":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:10710:3308":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:41349:4945":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:10056:2511":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:15301:4077":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:570:12713":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:15608:4176":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:3014:18646":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:41417:12045":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:11674:3390":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:8561:5797":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:1699:13619":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:9755:19554":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:2664:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:16249:4336":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"5:7615:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"3:0:485":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:5769:4462":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:8180:5748":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:10938:5705":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:43890:12088":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:15992:4282":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:9369:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:2402:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:15635:4185":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:11089:3330":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:39834:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:9737:19556":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:10060:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:836:4945":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:7366:6534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:10000:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:5306:16712":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:15214:4054":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:6738:17463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:41915:5273":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:7561:17884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:3128:2052":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:5415:16725":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:32922:2451":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:14545:3834":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:9635:5742":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"11:1883:4945":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:7227:3018":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:4534:2965":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:22576:29719":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:7723:3000":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:2728:4384":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:13855:3710":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:5846:4468":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:21252:30956":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:9708:29760":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"0:19:2076":{"crate_id":0,"path":["scopeguard","defer_on_success"],"kind":"macro"},"17:14025:3736":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:2648:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:46301:5619":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12478:3495":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:11574:3375":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:43396:5461":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:14788:3901":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:13568:3650":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:485:12702":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11865:3415":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:1826:5662":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:22610:5337":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:11042:3322":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"18:735:23764":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:3211:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:42983:5438":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:12647:3508":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:43886:12085":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"11:1160:4963":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:15434:4111":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}