{"root":"0:0:2016","crate_version":"1.2.0","includes_private":false,"index":{"2:12893:2469":{"id":"2:12893:2469","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42427:198","prim@char":"1:12106:458","self::pattern":"2:12541:11571"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:11569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42554:6348-0:71:1928":{"id":"a:2:42554:6348-0:71:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42554:6348","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2966:254-0:71:1928":{"id":"a:2:2966:254-0:71:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12967:24014":{"id":"2:12967:24014","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:2292":{"id":"5:5538:2292","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:21:1953":{"id":"b:2:2754-0:21:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2757:135","2:2758:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:21:1953":{"id":"0:21:1953","crate_id":0,"name":"ScopeGuard","span":{"filename":"src/lib.rs","begin":[304,0],"end":[313,1]},"visibility":"public","docs":"`ScopeGuard` is a scope guard that may own a protected value.\n\nIf you place a guard in a local variable, the closure can\nrun regardless how you leave the scope — through regular return or panic\n(except if panic or other code aborts; so as long as destructors run).\nIt is run only once.\n\nThe `S` parameter for [`Strategy`](trait.Strategy.html) determines if\nthe closure actually runs.\n\nThe guard's closure will be called with the held value in the destructor.\n\nThe `ScopeGuard` implements `Deref` so that you can access the inner value.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Always","id":"0:68:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:28","a:2:32928:2275-0:21:1953","a:2:42553:6139-0:21:1953","a:2:42554:6348-0:21:1953","a:2:32846:244-0:21:1953","b:2:2444-0:21:1953","b:2:2748-0:21:1953","b:2:2754-0:21:1953","b:2:3560-0:21:1953","b:2:2759-0:21:1953","b:2:2441-0:21:1953","b:2:2744-0:21:1953","0:63","0:47","0:43","0:53","0:58"]}}},"2:12877:27572":{"id":"2:12877:27572","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44579:5313","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12879:29033":{"id":"2:12879:29033","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44617:5152","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:30876":{"id":"2:12930:30876","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12541:11571","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::rmatch_indices":"2:12933:30877"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44475:5309","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:254-0:74:1930":{"id":"a:2:2966:254-0:74:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:11:1920":{"id":"0:11:1920","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,28]},"visibility":"default","docs":"Return `true` if the guard’s associated code should run\n(in the context where this method is called).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[455,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3172:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:57:606"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2444-0:74:1930":{"id":"b:2:2444-0:74:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:23025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12867:24238":{"id":"2:12867:24238","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12869:24242","str::split_at_mut":"2:12868:24239"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12875:28906":{"id":"2:12875:28906","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12876:29014"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44599:5315","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1925":{"id":"0:68:1925","crate_id":0,"name":"Always","span":{"filename":"src/lib.rs","begin":[213,0],"end":[213,18]},"visibility":"public","docs":"Always run on scope exit.\n\n“Always” run: on regular exit from a scope or on unwinding from a panic.\nCan not run on abort, process exit, and other catastrophic events where\ndestructors don’t run.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:32928:2275-0:68:1925","a:2:42553:6139-0:68:1925","a:2:2966:254-0:68:1925","a:2:42554:6348-0:68:1925","a:2:32846:244-0:68:1925","b:2:2444-0:68:1925","b:2:2748-0:68:1925","b:2:2754-0:68:1925","b:2:3560-0:68:1925","b:2:2759-0:68:1925","b:2:2441-0:68:1925","b:2:2744-0:68:1925","0:12","0:69"]}}},"2:12889:2510":{"id":"2:12889:2510","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42427:198","prim@char":"1:12106:458","self::pattern":"2:12541:11571"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[480,0],"end":[491,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9987:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9987:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:67:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42553:6139-0:21:1953":{"id":"a:2:42553:6139-0:21:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42553:6139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42553:6139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42553:6139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12924:2244":{"id":"2:12924:2244","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12541:11571","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::rmatches":"2:12927:30875"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44529:5311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12845:883":{"id":"2:12845:883","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12106:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3560-0:68:1925":{"id":"b:2:3560-0:68:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3562:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12900:24246":{"id":"2:12900:24246","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:11571"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12357:5132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:68:1925":{"id":"b:2:2759-0:68:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2758:1631":{"id":"2:2758:1631","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42572:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:24252":{"id":"2:12915:24252","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12106:458","str::splitn":"2:12912:24250","self::pattern":"2:12541:11571"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44447:5138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:11569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2750:753":{"id":"2:2750:753","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:71:1928":{"id":"b:2:2748-0:71:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:753"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:20:1942":{"id":"0:20:1942","crate_id":0,"name":"defer_on_unwind","span":{"filename":"src/lib.rs","begin":[285,0],"end":[289,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on unwinding from panic).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_unwind {\n    ($($t:tt)*) => { ... };\n}"}},"2:12859:24212":{"id":"2:12859:24212","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42427:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12874:4934":{"id":"2:12874:4934","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44311:3022","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12880:24256":{"id":"2:12880:24256","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:11571"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12865:30870":{"id":"2:12865:30870","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12112:1548","str::slice_mut_unchecked":"2:12866:30871","crate::ops::Index":"2:40008:2333"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12873:5325":{"id":"2:12873:5325","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12106:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44301:5305","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9987:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12950:23046":{"id":"2:12950:23046","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:11571"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12854:30869":{"id":"2:12854:30869","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12897:24244":{"id":"2:12897:24244","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12541:11571","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::split_whitespace":"2:12875:28906","str::rsplit":"2:12903:24248"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44325:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2446:23025":{"id":"2:2446:23025","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[315,0],"end":[370,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:32:1962","0:33:1975"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:57:606":{"id":"0:57:606","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[460,4],"end":[462,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2762:135":{"id":"2:2762:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32776:6366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:15:1920"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:51:256":{"id":"0:51:256","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[448,4],"end":[448,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:0:2016":{"id":"0:0:2016","crate_id":0,"name":"scopeguard","span":{"filename":"src/lib.rs","begin":[1,0],"end":[595,1]},"visibility":"public","docs":"A scope guard will run a given closure when it goes out of scope,\neven if the code between panics.\n(as long as panic doesn't abort)\n\n# Examples\n\n## Hello World\n\nThis example creates a scope guard with an example function:\n\n```\nextern crate scopeguard;\n\nfn f() {\n    let _guard = scopeguard::guard((), |_| {\n        println!(\"Hello Scope Exit!\");\n    });\n\n    // rest of the code here.\n\n    // Here, at the end of `_guard`'s scope, the guard's closure is called.\n    // It is also called if we exit this scope through unwinding instead.\n}\n# fn main() {\n#    f();\n# }\n```\n\n## `defer!`\n\nUse the `defer` macro to run an operation at scope exit,\neither regular scope exit or during unwinding from a panic.\n\n```\n#[macro_use(defer)] extern crate scopeguard;\n\nuse std::cell::Cell;\n\nfn main() {\n    // use a cell to observe drops during and after the scope guard is active\n    let drop_counter = Cell::new(0);\n    {\n        // Create a scope guard using `defer!` for the current scope\n        defer! {\n            drop_counter.set(1 + drop_counter.get());\n        }\n\n        // Do regular operations here in the meantime.\n\n        // Just before scope exit: it hasn't run yet.\n        assert_eq!(drop_counter.get(), 0);\n\n        // The following scope end is where the defer closure is called\n    }\n    assert_eq!(drop_counter.get(), 1);\n}\n```\n\n## Scope Guard with Value\n\nIf the scope guard closure needs to access an outer value that is also\nmutated outside of the scope guard, then you may want to use the scope guard\nwith a value. The guard works like a smart pointer, so the inner value can\nbe accessed by reference or by mutable reference.\n\n### 1. The guard owns a file\n\nIn this example, the scope guard owns a file and ensures pending writes are\nsynced at scope exit.\n\n```\nextern crate scopeguard;\n\nuse std::fs::*;\nuse std::io::{self, Write};\n# // Mock file so that we don't actually write a file\n# struct MockFile;\n# impl MockFile {\n#     fn create(_s: &str) -> io::Result<Self> { Ok(MockFile) }\n#     fn write_all(&self, _b: &[u8]) -> io::Result<()> { Ok(()) }\n#     fn sync_all(&self) -> io::Result<()> { Ok(()) }\n# }\n# use self::MockFile as File;\n\nfn try_main() -> io::Result<()> {\n    let f = File::create(\"newfile.txt\")?;\n    let mut file = scopeguard::guard(f, |f| {\n        // ensure we flush file at return or panic\n        let _ = f.sync_all();\n    });\n    // Access the file through the scope guard itself\n    file.write_all(b\"test me\\n\").map(|_| ())\n}\n\nfn main() {\n    try_main().unwrap();\n}\n\n```\n\n### 2. The guard restores an invariant on scope exit\n\n```\nextern crate scopeguard;\n\nuse std::mem::ManuallyDrop;\nuse std::ptr;\n\n// This function, just for this example, takes the first element\n// and inserts it into the assumed sorted tail of the vector.\n//\n// For optimization purposes we temporarily violate an invariant of the\n// Vec, that it owns all of its elements.\n//\n// The safe approach is to use swap, which means two writes to memory,\n// the optimization is to use a “hole” which uses only one write of memory\n// for each position it moves.\n//\n// We *must* use a scope guard to run this code safely. We\n// are running arbitrary user code (comparison operators) that may panic.\n// The scope guard ensures we restore the invariant after successful\n// exit or during unwinding from panic.\nfn insertion_sort_first<T>(v: &mut Vec<T>)\n    where T: PartialOrd\n{\n    struct Hole<'a, T: 'a> {\n        v: &'a mut Vec<T>,\n        index: usize,\n        value: ManuallyDrop<T>,\n    }\n\n    unsafe {\n        // Create a moved-from location in the vector, a “hole”.\n        let value = ptr::read(&v[0]);\n        let mut hole = Hole { v: v, index: 0, value: ManuallyDrop::new(value) };\n\n        // Use a scope guard with a value.\n        // At scope exit, plug the hole so that the vector is fully\n        // initialized again.\n        // The scope guard owns the hole, but we can access it through the guard.\n        let mut hole_guard = scopeguard::guard(hole, |hole| {\n            // plug the hole in the vector with the value that was // taken out\n            let index = hole.index;\n            ptr::copy_nonoverlapping(&*hole.value, &mut hole.v[index], 1);\n        });\n\n        // run algorithm that moves the hole in the vector here\n        // move the hole until it's in a sorted position\n        for i in 1..hole_guard.v.len() {\n            if *hole_guard.value >= hole_guard.v[i] {\n                // move the element back and the hole forward\n                let index = hole_guard.index;\n                hole_guard.v.swap(index, index + 1);\n                hole_guard.index += 1;\n            } else {\n                break;\n            }\n        }\n\n        // When the scope exits here, the Vec becomes whole again!\n    }\n}\n\nfn main() {\n    let string = String::from;\n    let mut data = vec![string(\"c\"), string(\"a\"), string(\"b\"), string(\"d\")];\n    insertion_sort_first(&mut data);\n    assert_eq!(data, vec![\"a\", \"b\", \"c\", \"d\"]);\n}\n\n```\n\n\n# Crate Features\n\n- `use_std`\n  + Enabled by default. Enables the `OnUnwind` and `OnSuccess` strategies.\n  + Disable to use `no_std`.\n\n# Rust Version\n\nThis version of the crate requires Rust 1.20 or later.\n\nThe scopeguard 1.x release series will use a carefully considered version\nupgrade policy, where in a later 1.x version, we will raise the minimum\nrequired Rust version.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/scopeguard/1/\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1917","0:68:1925","0:71:1928","0:74:1930","0:21:1953","0:34:1937","0:37:1940","0:40:1943","0:18:1934","0:19:1939","0:20:1942"],"is_stripped":false}}},"b:2:2444-0:71:1928":{"id":"b:2:2444-0:71:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:23025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2441-0:68:1925":{"id":"b:2:2441-0:68:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2232"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12861:24213":{"id":"2:12861:24213","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42553:6139-0:74:1930":{"id":"a:2:42553:6139-0:74:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42553:6139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12872:5153":{"id":"2:12872:5153","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12106:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44295:5145","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:74:1930":{"id":"b:2:2759-0:74:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12912:24250":{"id":"2:12912:24250","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:11571","str::rsplitn":"2:12915:24252"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44429:5137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:30883":{"id":"2:12944:30883","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:11571"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12566:11568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12965:30888":{"id":"2:12965:30888","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12502:134","`FromStr`":"2:12501:6359"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42572:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12501:6359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12501:6359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12973:25407":{"id":"2:12973:25407","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:33851"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:21:1953":{"id":"b:2:2441-0:21:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2443:2232"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:13:1920":{"id":"0:13:1920","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[231,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:74:1930":{"id":"b:2:2744-0:74:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2463"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[443,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3159:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:51:256","0:52:604"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12903:24248":{"id":"2:12903:24248","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12541:11571","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::split":"2:12897:24244"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44343:5135","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:11569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12974:25408":{"id":"2:12974:25408","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:33851"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:31577":{"id":"5:5537:31577","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2349","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2349","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:24255":{"id":"2:12921:24255","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:11569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536":{"id":"5:5536","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5537:31577","5:5538:2292","5:5541:31578","5:5544:31579","5:5552:31580","5:5553:31581","5:5554:6261","5:5555:24016","5:5556:24017"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2744-0:71:1928":{"id":"b:2:2744-0:71:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2463"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:71:1928":{"id":"0:71:1928","crate_id":0,"name":"OnUnwind","span":{"filename":"src/lib.rs","begin":[220,0],"end":[220,20]},"visibility":"public","docs":"Run on scope exit through unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:32928:2275-0:71:1928","a:2:42553:6139-0:71:1928","a:2:2966:254-0:71:1928","a:2:42554:6348-0:71:1928","a:2:32846:244-0:71:1928","b:2:2444-0:71:1928","b:2:2748-0:71:1928","b:2:2754-0:71:1928","b:2:3560-0:71:1928","b:2:2759-0:71:1928","b:2:2441-0:71:1928","b:2:2744-0:71:1928","0:72","0:14"]}}},"a:2:32846:244-0:74:1930":{"id":"a:2:32846:244-0:74:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32846:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42553:6139-0:71:1928":{"id":"a:2:42553:6139-0:71:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42553:6139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3560-0:21:1953":{"id":"b:2:3560-0:21:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3562:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2744-0:21:1953":{"id":"b:2:2744-0:21:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2747:2463"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2748-0:68:1925":{"id":"b:2:2748-0:68:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:753"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12850:30868":{"id":"2:12850:30868","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12848:30867"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12883:24257":{"id":"2:12883:24257","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:11571"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:6261":{"id":"5:5554:6261","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12853:24194":{"id":"2:12853:24194","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12096:11572"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12":{"id":"0:12","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,0],"end":[234,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:13:1920"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[435,0],"end":[441,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2966:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2444-0:68:1925":{"id":"b:2:2444-0:68:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:23025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12876:29014":{"id":"2:12876:29014","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12875:28906"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44608:5316","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32928:2275-0:74:1930":{"id":"a:2:32928:2275-0:74:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32928:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12940:30880":{"id":"2:12940:30880","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12855:340":{"id":"2:12855:340","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12856:24215","`u8`":"1:12123:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12943:30882":{"id":"2:12943:30882","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:21:1953":{"id":"b:2:2444-0:21:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2446:23025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2748-0:74:1930":{"id":"b:2:2748-0:74:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:753"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:37:1940":{"id":"0:37:1940","crate_id":0,"name":"guard_on_success","span":{"filename":"src/lib.rs","begin":[388,0],"end":[393,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnSuccess","id":"0:74:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:1939":{"id":"0:19:1939","crate_id":0,"name":"defer_on_success","span":{"filename":"src/lib.rs","begin":[271,0],"end":[275,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on successful scope exit).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_success {\n    ($($t:tt)*) => { ... };\n}"}},"2:12959:30886":{"id":"2:12959:30886","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:11571"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32846:244-0:68:1925":{"id":"a:2:32846:244-0:68:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32846:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12969:24018":{"id":"2:12969:24018","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12844":{"id":"2:12844","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12845:883","2:12846:2470","2:12847:30866","2:12848:30867","2:12850:30868","2:12853:24194","2:12854:30869","2:12855:340","2:12856:24215","2:12857:2000","2:12859:24212","2:12861:24213","2:12863:24214","2:12865:30870","2:12866:30871","2:12867:24238","2:12868:24239","2:12869:24242","2:12870:24243","2:12872:5153","2:12873:5325","2:12874:4934","2:12875:28906","2:12876:29014","2:12877:27572","2:12878:30872","2:12879:29033","2:12880:24256","2:12883:24257","2:12886:24258","2:12889:2510","2:12893:2469","2:12897:24244","2:12900:24246","2:12903:24248","2:12906:30873","2:12909:30874","2:12912:24250","2:12915:24252","2:12918:24254","2:12921:24255","2:12924:2244","2:12927:30875","2:12930:30876","2:12933:30877","2:12936:30878","2:12938:30879","2:12940:30880","2:12942:30881","2:12943:30882","2:12944:30883","2:12947:30884","2:12950:23046","2:12953:24259","2:12956:30885","2:12959:30886","2:12962:30887","2:12965:30888","2:12967:24014","2:12968:25403","2:12969:24018","2:12970:24019","2:12971:24020","2:12972:25406","2:12973:25407","2:12974:25408","2:12975:30889","2:12977:6131","2:12978:30890"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70:726":{"id":"0:70:726","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9962:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9943:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9987:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:70:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12936:30878":{"id":"2:12936:30878","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5541:31578":{"id":"5:5541:31578","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:24259":{"id":"2:12953:24259","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:11571"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:11569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5544:31579":{"id":"5:5544:31579","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3560-0:71:1928":{"id":"b:2:3560-0:71:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3562:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3560-0:74:1930":{"id":"b:2:3560-0:74:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3562:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9987:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:18:1934":{"id":"0:18:1934","crate_id":0,"name":"defer","span":{"filename":"src/lib.rs","begin":[257,0],"end":[261,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (always run).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer {\n    ($($t:tt)*) => { ... };\n}"}},"a:2:32846:244-0:21:1953":{"id":"a:2:32846:244-0:21:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32846:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32846:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32846:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12856:24215":{"id":"2:12856:24215","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12123:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:71:1928":{"id":"b:2:2441-0:71:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2232"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12918:24254":{"id":"2:12918:24254","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32928:2275-0:68:1925":{"id":"a:2:32928:2275-0:68:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32928:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:15:1920":{"id":"0:15:1920","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[239,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12971:24020":{"id":"2:12971:24020","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10:1917":{"id":"0:10:1917","crate_id":0,"name":"Strategy","span":{"filename":"src/lib.rs","begin":[201,0],"end":[205,1]},"visibility":"public","docs":"Controls in which cases the associated code should be run","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:11:1920"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:14","0:12","0:16"]}}},"0:73:726":{"id":"0:73:726","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9962:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9943:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42554:6348-0:21:1953":{"id":"a:2:42554:6348-0:21:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42554:6348","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42554:6348","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42554:6348","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2759-0:21:1953":{"id":"b:2:2759-0:21:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2762:135","2:2763:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:52:604":{"id":"0:52:604","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[450,4],"end":[452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[465,0],"end":[478,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3183:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:62:642"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:40:1943":{"id":"0:40:1943","crate_id":0,"name":"guard_on_unwind","span":{"filename":"src/lib.rs","begin":[425,0],"end":[430,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.\n\n## Examples\n\nFor performance reasons, or to emulate “only run guard on unwind” in\nno-std environments, we can also use the default guard and simply manually\ndefuse it at the end of scope like the following example. (The performance\nreason would be if the [`OnUnwind`]'s call to [std::thread::panicking()] is\nan issue.)\n\n```\nextern crate scopeguard;\n\nuse scopeguard::ScopeGuard;\n# fn main() {\n{\n    let guard = scopeguard::guard((), |_| {});\n\n    // rest of the code here\n\n    // we reached the end of scope without unwinding - defuse it\n    ScopeGuard::into_inner(guard);\n}\n# }\n```","links":{"std::thread::panicking()":"1:500:1143","`OnUnwind`":"0:71:1928"},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnUnwind","id":"0:71:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12866:30871":{"id":"2:12866:30871","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12112:1548","crate::ops::IndexMut":"2:3222:2334","str::slice_unchecked":"2:12865:30870"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2757:135":{"id":"2:2757:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12886:24258":{"id":"2:12886:24258","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:11571"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:11569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42553:6139-0:68:1925":{"id":"a:2:42553:6139-0:68:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42553:6139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3562:1644":{"id":"2:3562:1644","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40190:5204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12868:24239":{"id":"2:12868:24239","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12867:24238","str::split_at_mut_checked":"2:12870:24243"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:30879":{"id":"2:12938:30879","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17:1920":{"id":"0:17:1920","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[247,4],"end":[249,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12869:24242":{"id":"2:12869:24242","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12870:24243"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12962:30887":{"id":"2:12962:30887","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:11571"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:11569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12978:30890":{"id":"2:12978:30890","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4737:30890"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44642:5213","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5556:24017":{"id":"5:5556:24017","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12971:24020"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:726":{"id":"0:76:726","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9962:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9943:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:68:1925":{"id":"b:2:2744-0:68:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2463"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:62:642":{"id":"0:62:642","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[470,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12942:30881":{"id":"2:12942:30881","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:68:1925":{"id":"b:2:2754-0:68:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32928:2275-0:21:1953":{"id":"a:2:32928:2275-0:21:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32928:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32928:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32928:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5553:31581":{"id":"5:5553:31581","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2349","`String`":"5:7544:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2349","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12970:24019":{"id":"2:12970:24019","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:24016":{"id":"5:5555:24016","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12970:24019"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12847:30866":{"id":"2:12847:30866","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[250,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:17:1920"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2443:2232":{"id":"2:2443:2232","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:21:1953":{"id":"b:2:2748-0:21:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2750:753"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:33:1975":{"id":"0:33:1975","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[357,4],"end":[369,5]},"visibility":"public","docs":"“Defuse” the guard and extract the value without calling the closure.\n\n```\nextern crate scopeguard;\n\nuse scopeguard::{guard, ScopeGuard};\n\nfn conditional() -> bool { true }\n\nfn main() {\n    let mut guard = guard(Vec::new(), |mut v| v.clear());\n    guard.push(1);\n\n    if conditional() {\n        // a condition maybe makes us decide to\n        // “defuse” the guard and get back its inner parts\n        let value = ScopeGuard::into_inner(guard);\n    } else {\n        // guard still exists in this branch\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["guard",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:74:1930":{"id":"b:2:2754-0:74:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12956:30885":{"id":"2:12956:30885","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:11571"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:11569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42554:6348-0:74:1930":{"id":"a:2:42554:6348-0:74:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42554:6348","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12909:30874":{"id":"2:12909:30874","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12541:11571","str::split":"2:12897:24244","prim@char":"1:12106:458","str::split_terminator":"2:12906:30873"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44393:5308","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:11569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12846:2470":{"id":"2:12846:2470","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:31580":{"id":"5:5552:31580","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12972:25406":{"id":"2:12972:25406","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:33851"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12975:30889":{"id":"2:12975:30889","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4739:30889"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44624:5214","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:30875":{"id":"2:12927:30875","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12541:11571","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::matches":"2:12924:2244"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44547:5312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:11569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32846:244-0:71:1928":{"id":"a:2:32846:244-0:71:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32846:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42554:6348-0:68:1925":{"id":"a:2:42554:6348-0:68:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42554:6348","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2754-0:71:1928":{"id":"b:2:2754-0:71:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:67:726":{"id":"0:67:726","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[486,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9962:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9943:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2763:1629":{"id":"2:2763:1629","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42572:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12968:25403":{"id":"2:12968:25403","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40377:24193","Self::is_ascii":"2:12967:24014"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40377:24193","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12857:2000":{"id":"2:12857:2000","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42427:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:74:1930":{"id":"b:2:2441-0:74:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2232"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12848:30867":{"id":"2:12848:30867","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2747:2463":{"id":"2:2747:2463","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2721:142"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12878:30872":{"id":"2:12878:30872","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44589:5314","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:30873":{"id":"2:12906:30873","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12541:11571","str::split":"2:12897:24244","prim@char":"1:12106:458","`DoubleEndedIterator`":"2:7934:128","str::rsplit_terminator":"2:12909:30874"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44375:5307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:1962":{"id":"0:32:1962","crate_id":0,"name":"with_strategy","span":{"filename":"src/lib.rs","begin":[326,4],"end":[332,5]},"visibility":"public","docs":"Create a `ScopeGuard` that owns `v` (accessible through deref) and calls\n`dropfn` when its destructor runs.\n\nThe `Strategy` decides whether the scope guard's closure should run.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32928:2275-0:71:1928":{"id":"a:2:32928:2275-0:71:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32928:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12870:24243":{"id":"2:12870:24243","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12869:24242"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12977:6131":{"id":"2:12977:6131","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4740:6131"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44633:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:254-0:68:1925":{"id":"a:2:2966:254-0:68:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:34:1937":{"id":"0:34:1937","crate_id":0,"name":"guard","span":{"filename":"src/lib.rs","begin":[375,0],"end":[380,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1953","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"Always","id":"0:68:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12933:30877":{"id":"2:12933:30877","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12541:11571","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::match_indices":"2:12930:30876"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44493:5310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:11569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:71:1928":{"id":"b:2:2759-0:71:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12863:24214":{"id":"2:12863:24214","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:1930":{"id":"0:74:1930","crate_id":0,"name":"OnSuccess","span":{"filename":"src/lib.rs","begin":[227,0],"end":[227,21]},"visibility":"public","docs":"Run on regular scope exit, when not unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:32928:2275-0:74:1930","a:2:42553:6139-0:74:1930","a:2:2966:254-0:74:1930","a:2:42554:6348-0:74:1930","a:2:32846:244-0:74:1930","b:2:2444-0:74:1930","b:2:2748-0:74:1930","b:2:2754-0:74:1930","b:2:3560-0:74:1930","b:2:2759-0:74:1930","b:2:2441-0:74:1930","b:2:2744-0:74:1930","0:16","0:75"]}}},"2:12947:30884":{"id":"2:12947:30884","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:11571"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:2721:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:21555:6415":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:1570:13412":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:2492:2148":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:41653:2845":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:44393:5308":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:6878:2823":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:48692:5456":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:48295:5444":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:13478:3510":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:41405:5246":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:640:5471":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:7054:4541":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:1546:13410":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:44229:5298":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:7884:18819":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:42349:5261":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:12387:19005":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:4908:16072":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:6222:16806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:6136:32213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:44447:5138":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:44137:5291":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:47653:5409":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:11412:3226":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:10852:18890":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:4705:23927":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"14:187:17888":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:5897:16759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:6662:5937":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:6263:16808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12548:3369":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"5:3230:31799":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:6764:13533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"11:883:4812":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:4401:16019":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:507:12512":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:12112:1548":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:4810:6295":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:1789:2811":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:12118:807":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:43668:5275":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:119:12190":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:45120:5340":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:46430:5355":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:3461:4275":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:32837:5198":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:5403:3153":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:9256:23907":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:7599:3032":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:13684:3558":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:32816:4599":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:48619:5450":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:2574:4234":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:11550:5497":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:6228:2876":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:34073:2316":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:31620:2975":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:1826:5477":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:44642:5213":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:14181:3650":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:22597:5166":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:281:2349":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:7660:4639":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:8081:6260":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:3418:29375":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:6315:2877":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:1501:13404":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13235:3456":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:10925:18892":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:32847:2274":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:6248:16807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:47082:5383":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:10137:3018":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:42362:5500":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:15680:4082":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:4428:16020":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:46462:5356":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:40823:5210":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:501:12511":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:5345:2772":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:41087:5229":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:12560:3370":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"5:3581:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:43460:2386":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:43451:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:4183:5073":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"11:1923:4827":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"19:0:1142":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:11456:23901":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:2032:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:11690:3265":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:45241:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:10172:3019":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:4366:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:26433:273":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:13407:3486":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:4710:16050":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:48657:5453":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:14904:3865":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:2666:2850":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:40908:11636":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:5993:2806":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:45262:214":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:9031:1995":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:12077:3320":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:5967:5089":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"11:1903:4824":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:48794:5462":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:1682:13422":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:13742:3567":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:44848:5155":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:2436:6218":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:6376:18811":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"11:787:4805":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10608:3168":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"18:113:23007":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:9759:18875":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:12898:18883":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:3065:3058":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:922:4806":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:489:12509":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:14266:3663":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:6691:17186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:15160:3920":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"18:766:23017":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:4377:5502":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"11:2548:32868":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:266:2772":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:7722:4258":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:13909:3593":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:14878:3859":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:5955:16720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:9791:2397":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:8071:5559":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:7808:6183":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:10941:3182":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:43169:2378":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:14170:3649":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:11065:3196":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:13182:3449":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11027:3144":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:23800:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"13:0:2130":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:4989:16080":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:10265:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"5:7286:2474":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"0:71:1928":{"crate_id":0,"path":["scopeguard","OnUnwind"],"kind":"enum"},"9:0:2133":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:3183:1989":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:11173:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:10962:3187":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:14001:3605":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:3753:4910":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:22831:5187":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"18:96:23006":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:12758:3384":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:6012:16767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:14359:3684":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:5363:4307":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:10990:2896":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:11399:3225":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:8344:5500":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:3996:6277":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:10315:3026":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:5743:4325":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:44239:5299":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:8399:30057":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:9054:2410":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"18:0:2141":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:3388:261":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:10479:5490":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"18:736:23016":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:3217:4826":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:2504:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:13922:3595":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:5939:4201":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:475:12507":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:11381:5534":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:2983:30473":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:5682:2798":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:16049:4170":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:15224:3938":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:4862:4297":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:8239:4599":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:9169:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:13441:6151":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:8181:4270":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:42425:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:22733:5174":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:10035:3153":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:7096:2885":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:6741:13548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:15087:3906":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:7611:3011":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:928:6150":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:4947:16076":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:2644:4237":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:22370:6502":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:11071:5137":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:42938:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:4776:16055":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12356:3353":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:3222:2334":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:41170:5238":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:22105:6228":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:5005:2798":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:7503:4263":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:7802:6137":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:36723:2324":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:5992:16766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:621:5468":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:5123:16095":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:42899:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:9962:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:15631:4067":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:10510:3166":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:5696:18807":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:12113:1634":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:3187:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:2744:4241":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:3389:6257":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"0:21:1953":{"crate_id":0,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"2:1923:2563":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:4884:16069":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:10682:5670":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:4774:4294":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:14399:3687":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:12566:11568":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:7006:4534":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:5859:16755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:7582:4634":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"18:531:2969":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12432:3364":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:13202:3450":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"0:20:1942":{"crate_id":0,"path":["scopeguard","defer_on_unwind"],"kind":"macro"},"2:22666:28923":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:5574:4250":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:7657:16266":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:7787:6136":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:859:2474":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:7855:11797":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:893:2792":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:44269:5301":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:41221:5240":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:10775:23077":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:4381:2800":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"18:521:23018":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:14099:3635":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:12117:702":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:3764:4277":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:16087:4184":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:10919:5133":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:13633:3545":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:6560:2761":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"15:306:17901":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:12612:11577":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"14:7:4792":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:45297:5343":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:6169:16779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:482:2862":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"11:1025:4813":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:6606:2474":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:12129:1708":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:2718:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:4417:4284":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:7388:17572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:21338:28616":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:5588:4253":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"11:2469:2811":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:44295:5145":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"0:37:1940":{"crate_id":0,"path":["scopeguard","guard_on_success"],"kind":"function"},"17:10618:32958":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"14:221:4799":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:15842:3421":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:6114:16775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"0:18:1934":{"crate_id":0,"path":["scopeguard","defer"],"kind":"macro"},"1:11679:27823":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:3226:28078":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:3343:2811":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:4986:4301":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:40107:221":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:2353:2547":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"18:582:2975":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:11657:3259":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:11369:3223":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4686:16048":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:4473:16025":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:15733:4091":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13285:3465":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:11727:3271":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:44529:5311":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:7520:4935":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:9985:5258":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"11:328:32867":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:8378:5615":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:11307:3218":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:10884:5550":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:6467:4447":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"14:160:4792":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:9678:18863":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:13254:3461":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:6047:16768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:44375:5307":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:21340:28625":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:4237:11612":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:1596:13415":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:46338:5351":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:12718:18882":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:14426:3691":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:6696:4485":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:48703:5457":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:22328:28841":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:574:12520":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:3830:4279":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"9:486:17794":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:5878:2792":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:44194:5226":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:10736:5553":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"18:755:3015":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:14373:3685":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:15301:3961":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:2228:3043":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:8072:4693":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:16098:4185":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:11800:3278":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:12596:3373":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:6915:4260":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:2675:6228":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:10711:5552":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:7015:4537":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:7534:4264":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:42501:2474":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:7385:2474":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:41644:5248":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:47183:5386":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"7:0:1698":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:5891:2870":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:595:3032":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"11:2352:4815":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:7768:4256":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:14887:3863":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:46909:5377":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:6171:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12091:3324":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:5044:16087":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:14843:3858":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:12110:339":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:11667:5686":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:7391:18816":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:16016:4163":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:8546:5629":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:13976:3603":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:4691:6281":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:38764:2328":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:44220:5297":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:1576:13413":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:48646:5452":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:1286:4815":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"11:2304:4547":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:13162:3439":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13765:3570":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:7324:11798":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:42543:5265":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:7913:5551":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:3010:2273":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:40974:5223":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:1718:13426":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:5052:16088":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:2035:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:44953:5156":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:4506:16029":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:42179:5114":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:6118:2798":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:10784:23059":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:569:12519":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:12850:3048":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:7206:27519":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:11345:3222":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:13516:3518":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:10207:3020":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:41629:5247":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:43057:5125":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:21321:28628":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:2256:30617":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:46615:5362":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13448:3498":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:7892:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4968:16078":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:22415:6228":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:9944:2375":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:7569:4937":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:10355:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:48833:5463":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:1591:13414":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:1674:13421":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:44899:11584":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:3159:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:2420:6213":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:11932:3310":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:8355:6156":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:5637:6365":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:14413:3690":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:7277:4908":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:9234:5657":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"2:21496:6416":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:1574:4801":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:3378:2337":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"11:1887:2474":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:2973:30624":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:62:12136":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:10246:6233":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:5030:6340":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:1824:5476":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:5111:16093":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:14633:3710":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:40065:219":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"14:202:11585":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:7948:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:7918:5552":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:21983:5163":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:12283:5149":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:15287:3959":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:8621:5634":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:45064:11904":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:13336:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:4449:16023":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:4411:2798":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:624:32961":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:23060:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:7639:16263":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:11617:3253":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:13395:3485":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:44157:5293":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:7935:5554":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:12345:3352":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:23242:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:44207:5296":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:10907:23053":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:40204:5205":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:9943:18862":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:10984:2895":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"11:1891:2792":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:3003:2271":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:3509:5495":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:4582:2389":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:2144:2406":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:2339:4219":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:6913:17197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:4889:4298":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:6401:4251":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:40859:5213":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:45056:11905":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:12246:5146":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13724:3566":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12930:18884":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:5634:4310":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:46514:5358":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:40988:6197":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"14:165:17881":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:6969:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:40041:217":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:10293:3022":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:4584:16039":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:16062:4176":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:13218:3454":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:2062:4910":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:3029:2311":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:12418:3362":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:6352:4436":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:44249:5300":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:16032:4168":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:12684:3121":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:10746:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:41240:5098":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:44343:5135":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:4814:16060":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:6960:4523":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:11767:3275":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:12128:858":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:10090:5478":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:32959:2276":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:6658:12558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:44068:5287":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"7:31:17776":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:16004:4161":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:14786:3824":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:7038:2831":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:9179:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:8296:5606":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:11890:2903":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:5322:4306":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:14145:3645":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"18:599:32963":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:8920:4801":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:12306:5150":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:10471:32954":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:15125:3914":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:6079:16771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:3046:2331":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:7671:2871":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"11:1566:17876":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4535:16033":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:3014:2308":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:1536:4907":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:8351:6306":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:5117:16094":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:4334:5075":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:10423:2849":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:44147:5292":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:5995:4207":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:22238:6499":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:1802:2294":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:3460:2798":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:909:4821":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12166:3330":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"10:44:4833":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:6053:227":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:8307:6270":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:10000:2379":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:3315:4274":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:3193:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:7356:4927":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:7492:4628":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:8362:5613":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:6898:17196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:33955:2314":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:4449:5076":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"11:832:4821":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:46563:5360":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:21284:2975":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:4887:6291":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:11439:3228":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:7908:3101":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"14:40:3436":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:8216:5598":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:15133:3916":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:45072:11899":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:12953:3398":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:6226:4411":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:4050:2772":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:4808:16059":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:7306:2792":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:3594:4801":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:9320:2632":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:4549:16035":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:45305:5345":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:536:4205":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:6718:6336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:12119:804":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:6100:16773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:12474:3169":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:9998:2378":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"8:0:2132":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:588:12522":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:41078:5228":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:7668:16267":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:15192:3930":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:3232:23630":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:14324:3672":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10775:3171":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:22193:6498":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:4095:2798":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:12255:3343":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:15903:4142":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:9118:23075":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:6391:5091":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:6363:227":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:3232:4216":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:6492:5247":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:3667:2792":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:16109:4186":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:21958:6418":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:8277:3022":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:43155:2377":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:45076:11913":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:42493:4820":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:40901:5217":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:13436:3495":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:2438:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:13383:3482":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:43685:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:15244:3945":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:3141:2342":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:31024:2297":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:10667:32956":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:14296:3666":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:12273:3388":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:47007:5381":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:7377:2474":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10896:3179":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:6107:16774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:46318:5350":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:5812:5522":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:1495:4821":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:1914:29042":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:4217:6302":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:4595:16040":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:1691:13423":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:40946:5222":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:6128:16777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:44705:11583":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:3041:2330":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:1639:13418":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:13787:3577":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:5777:2798":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:9987:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:43435:4670":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:4824:16061":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:1697:13424":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:48497:5447":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:12126:1652":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:12828:3388":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"11:875:4811":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:886:2780":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:7343:12468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:6868:17194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:23610:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"11:1676:1953":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:16134:4192":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:23990:5192":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:45254:234":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:11598:5141":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:14662:3730":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:11141:3201":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:2696:4239":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:16180:3471":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:46670:5365":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:24031:243":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:2406:4227":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:6083:17919":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:5928:16762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:40882:11635":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"0:19:1939":{"crate_id":0,"path":["scopeguard","defer_on_success"],"kind":"macro"},"17:15535:4040":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:46863:5376":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:6587:2843":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:43162:2376":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:15493:4027":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:7985:5557":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:15671:4078":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12784:3385":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:15659:4076":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:32846:244":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:4755:16053":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:46492:5357":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:9994:2376":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:4835:4296":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"18:681:2997":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:4602:2279":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:9006:6385":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:3305:5490":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:4303:5074":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:8097:4696":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:256:3024":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:5982:4358":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:44624:5214":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:21675:6413":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:0:314":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:5194:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:11226:3211":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"11:299:5926":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:5067:864":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:7318:4578":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:48718:5458":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"11:1910:4825":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:8936:2474":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:12055:5692":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:8396:5617":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:12131:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:42554:6348":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:6531:4456":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:7610:16259":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:21666:6228":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:5140:16097":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:1516:4803":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:3736:6272":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:10950:3184":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4955:16077":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:42572:233":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:5461:5515":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:5419:3154":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:41615:5105":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:44325:5130":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:1131:5929":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:4610:16042":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4516:16030":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:4676:16047":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:7450:27557":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"11:351:32863":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:4738:6275":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:2305:17946":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:14221:3654":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:38654:2326":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:13869:3587":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:4377:1993":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:16076:4179":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:32873:251":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:7544:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:9996:2377":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:1514:13406":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:47837:5411":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:2509:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:43176:2379":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11549:3248":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:15117:3912":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:8370:5606":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:15356:3975":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:1832:1199":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:6819:17192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:44493:5310":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:3801:5498":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:15480:4021":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:4866:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:15868:4112":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"11:1107:4817":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10657:3169":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:15253:3946":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:4523:16031":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:6569:4257":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:7782:4643":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:8281:4714":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:11743:3273":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:12555:3002":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:12301:3346":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:4972:6333":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:6014:5934":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:14921:3866":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:1607:4827":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:11590:5498":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:6545:4458":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:3346:5493":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:11978:3314":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:39343:2329":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:13989:3604":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:3196:31798":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:1455:2474":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12180:3331":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:10357:2847":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:2728:5487":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:4902:16071":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:2275:6210":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:8928:5641":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:3433:2344":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:6961:17201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:2966:254":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:10803:3172":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:11154:23055":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"16:5963:4351":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:12029:3317":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:42631:2474":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:47499:5406":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"11:2562:32870":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:6361:4437":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:14057:3614":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:12127:3327":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"11:123:2762":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:6576:5097":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:5393:11560":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:42979:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:12066:11865":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:15589:4061":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:40778:5071":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:6742:4497":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:48543:5448":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:8523:5280":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:12335:3350":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:12121:806":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:14235:3657":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:7513:4631":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:11321:3169":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:9139:6043":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:4977:16079":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:6711:17188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:2110:2566":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:2712:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:5306:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"0:10:1917":{"crate_id":0,"path":["scopeguard","Strategy"],"kind":"trait"},"1:918:4803":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:13707:3563":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:41671:5110":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:4932:16075":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:2832:4245":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:9488:5551":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"11:364:2764":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:40190:5204":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:14470:3698":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:8167:4705":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"11:2231:3235":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:4:1125":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:6929:4520":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:45044:11900":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:42564:2421":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:596:12523":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:6485:4252":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:5155:2806":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:2703:30481":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:5867:16756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:48666:5454":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:637:5469":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:5023:16085":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:15384:3983":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:7736:4641":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:3251:4827":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:0:2139":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:11604:3252":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:5612:4255":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:15079:3903":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:609:2983":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:2457:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:2971:1911":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:533:2411":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:13882:3283":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:42242:29053":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:2266:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:7622:16261":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:44128:5289":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:7621:18817":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:43915:29038":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:1496:13403":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:5853:5087":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:7896:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:21547:6228":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:15294:3960":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:42326:28912":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:7645:16264":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:21494:6228":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:10191:6368":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:4745:16052":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:2969:17948":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:2728:264":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:9559:18858":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:14251:3659":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:6159:16778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:4830:16062":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:5698:2877":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"11:1896:2811":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:11426:3227":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:22384:2546":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:6798:17189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4461:16024":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:7759:2416":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:8290:5313":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:2810:4244":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"11:1582:4822":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:11666:3260":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:15557:4046":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:6513:4448":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:7316:2784":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:46985:5380":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:7053:26105":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"14:31:4792":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:11497:3242":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:15200:3931":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:5819:5525":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:11991:3315":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:15990:4157":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:21352:28622":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:47129:5384":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12659:18860":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:3558:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:4116:6286":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:4698:16049":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:10633:6228":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:39922:2346":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:7679:16268":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:3557:27799":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:6279:4431":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:2788:4243":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:42615:4801":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:34191:2317":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:7692:17759":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:12109:1162":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:14896:3864":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:11817:18979":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:11294:3217":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:7971:5484":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:6156:4389":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:12052:3318":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"11:1051:4815":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4860:16066":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:2284:17920":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:3184:4801":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:48435:5446":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:4094:6282":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:5634:6364":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:23151:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:8912:5639":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:1387:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:5146:16098":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:46593:5361":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:11204:23937":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:12153:3329":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"14:0:2137":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:13896:3592":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:4806:6292":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:22330:2546":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:12445:3365":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:6583:4460":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:10992:5135":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:6804:17190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"11:844:6150":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:21568:5164":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:5384:18806":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:6901:4259":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"11:2403:4820":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:15689:4084":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"11:687:4820":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:11755:3274":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:588:6130":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:4344:4283":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:1585:2811":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:4449:5503":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"18:590:2976":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:4496:16028":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:5088:4304":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:3191:4825":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:9464:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:5435:4308":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:3566:6226":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:6666:13363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:11444:5541":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:12510:3367":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:44475:5309":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:1528:13408":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"15:394:17911":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"18:564:2974":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:45095:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:14439:3692":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:46532:5359":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:22277:6500":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:4297:5501":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:15507:4033":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:11523:3245":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:34501:2320":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:1632:13417":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:654:12570":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:6415:4443":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:42821:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:42704:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:3315:218":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:38599:2325":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:11779:3276":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:2526:4232":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"13:226:32928":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:22316:6501":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:10892:5518":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:12324:3348":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:12116:700":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:15645:4069":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:12572:3371":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"16:6017:18809":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:12120:805":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:4246:6305":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:8990:6383":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:5648:4314":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:8632:5635":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:3576:6249":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:21953:6228":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:10422:3165":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:6818:4511":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:15710:4087":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:4182:2798":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:40:2768":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"9:393:17796":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:8227:5496":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:43919:5128":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:11041:3169":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"11:774:4804":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:9651:18873":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:23515:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:435:3030":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:580:12521":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:30759:6273":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:13097:3421":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:44910:5331":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:10455:2855":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:21995:28626":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:3172:1915":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:11611:5499":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:4585:4289":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:4046:6279":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:12096:11572":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"0:68:1925":{"crate_id":0,"path":["scopeguard","Always"],"kind":"enum"},"6:1710:13425":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:5808:258":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:4032:6278":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:6868:2821":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"18:644:2965":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:14757:3813":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:6943:17200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:15566:4048":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"11:1087:32881":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:2542:29712":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:10520:32959":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:13419:3487":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:2435:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:10374:5636":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:495:12510":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:2766:4242":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:1795:642":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:8270:5246":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:4212:2798":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:11243:3214":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:16170:3466":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:7993:5558":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:1809:666":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:4060:6281":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"14:215:4797":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:4218:11544":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:2446:6223":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:13219:5161":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:4808:6294":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:2847:4941":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:6877:6410":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:15612:4062":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:4195:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:16160:4196":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:11414:5538":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:40025:220":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:4573:2836":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:880:4805":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:15212:3937":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:3460:3046":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:43715:5285":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:13026:3408":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:4789:16057":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:2169:18937":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:3470:2345":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:5661:4319":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:6582:29050":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:14822:3853":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:41208:5096":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:5566:5518":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:42860:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"18:538:2972":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:12380:3355":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:4854:16065":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:9217:5656":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"18:707:3002":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:11269:3189":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:40183:2338":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:47263:5387":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:2972:2534":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:15367:3976":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:22544:5165":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:48043:5442":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:12999:3402":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:5374:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:8302:5608":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:44547:5312":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:7477:4929":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:13856:3584":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:2864:4246":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:44742:5323":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:0:888":{"crate_id":6,"path":["libc"],"kind":"module"},"2:21549:6412":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:45360:5349":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:6260:5528":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:3393:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:212:2770":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:7828:4651":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:44608:5316":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:22650:5167":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"13:110:32927":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:45048:11902":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:12746:3383":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:7294:4926":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"3:234:233":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:22706:5173":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"9:177:17863":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"11:2423:2474":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:12111:1515":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:7677:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:46793:5374":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:3600:4276":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:12125:1651":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:45335:5348":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:47687:5410":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:3738:4909":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:5068:16089":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:41051:5225":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:4629:2390":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:1446:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:11117:11913":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:11109:23068":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:22741:5175":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:8884:5637":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:13334:3472":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:6532:2881":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:6086:16772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:12106:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:32848:252":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:41663:5108":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:5049:4303":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:15546:4045":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:4641:4291":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:7859:11796":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:6456:4446":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7613:4637":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:7090:4546":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:5727:4323":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"11:837:4806":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:11672:2561":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:13145:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:12244:3339":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:15374:3978":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:6423:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:6059:16769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:542:12515":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:3307:5491":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:3344:5492":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:14455:3694":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:39961:2343":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:48771:5461":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:12202:19003":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:500:1143":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"17:10988:3190":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:8898:5638":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:9084:5650":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"11:2554:32874":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:8043:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11088:3197":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:13948:3598":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:5866:4342":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:34132:2315":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:44756:5326":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:31592:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11476:3235":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:4806:4295":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:4351:16015":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:40795:5207":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:8154:4702":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:46384:5353":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:40867:5071":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:40784:5206":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"18:727:3009":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:1664:13420":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:8615:4801":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:46961:5379":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:14698:3761":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:2907:4248":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"18:636:2989":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:47417:5405":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:2268:5483":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:14989:3883":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"11:2569:4928":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:21323:28613":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:48373:5445":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:13809:3578":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:11958:3313":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:849:4820":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:1913:13591":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:12191:3332":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:46717:5366":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:357:2429":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:7669:2889":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:13491:3514":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:11469:3232":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:1990:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:32928:2275":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:7651:4638":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"11:2369:4830":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:5017:4302":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:10701:23942":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:1094:3033":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:3155:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:11387:5685":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:47577:5407":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:12082:5143":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:42555:11857":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:836:4801":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:1486:4805":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:7365:17570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:6318:4433":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:6332:4249":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:8001:4909":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:11099:5139":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:2380:4226":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:14969:3875":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:13935:3596":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:11215:3209":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:11083:5637":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:2548:4233":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:3888:4280":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:22:740":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:13695:3561":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:0:2135":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:16146:4195":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:41156:5235":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:1203:3035":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:8563:6358":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:12410:3360":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:1885:2632":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:44283:5304":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:13145:3436":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:1424:4801":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:2806:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:15725:4088":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:15432:4020":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:830:2778":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:11113:3199":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:2504:4231":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:44773:5327":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:4454:5077":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:11945:3311":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:6879:4516":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:5921:16761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:12107:1669":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:5651:2809":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:10559:3167":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:42196:5116":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:14208:3653":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:7284:5263":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"11:2124:4547":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:3049:17949":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:1596:4825":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11168:18909":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:7219:2482":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:2881:4247":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:14156:3647":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:6609:6379":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:43478:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:10476:5488":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:9943:233":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:15037:3889":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:2596:4235":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:1315:4819":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:10569:32952":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:12322:5151":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:4388:16018":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:6682:12391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:2450:4229":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"9:357:17810":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:22682:5168":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:41622:5106":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:10881:18891":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"11:434:32876":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:2618:4236":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:22758:28915":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:6721:18813":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:4928:3055":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:6844:4512":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:7102:18815":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"18:80:23005":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:645:6133":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:11113:5140":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:11256:3215":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:7650:2887":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:22795:28942":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:10785:32955":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:12220:3048":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:9992:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:10282:5941":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:4002:6276":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:47160:5385":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:31222:29010":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:34014:2318":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:8974:6384":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:11097:5638":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:11136:5533":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"6:7616:16260":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:4981:6334":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:7269:32950":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:12772:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:48677:5455":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:16123:4190":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"5:3225:4824":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"18:652:2965":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:15267:3953":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:6531:2772":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:6228:15931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:4616:16043":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13056:3412":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:12797:3387":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:548:12516":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:40847:5212":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:4171:5072":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:10726:32951":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:5760:18808":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:5712:4320":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:9096:5652":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:31046:2386":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:10643:246":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:5026:5080":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:4647:16045":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:8050:4692":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"11:102:32872":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:7340:2474":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:10016:18857":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:12541:11571":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:14950:3874":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:11462:23899":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:41179:5090":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:10203:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:6927:17198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:1270:4547":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"18:614:32960":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:7067:4544":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:9651:30293":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:1708:2798":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"11:800:2792":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:42476:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:527:12513":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"11:1007:4547":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:22845:5188":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:7824:5550":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:3801:2474":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:41031:5224":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:13322:3471":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:7326:30618":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:7694:4267":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:10837:5130":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:34847:2323":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:3399:2339":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:45244:226":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:34328:2319":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:2434:6217":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:4603:16041":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"7:78:17783":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:41199:5095":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:12396:3357":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:11485:3238":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:149:2758":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:12230:3334":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12701:3381":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:32961:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:47387:5404":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:4764:16054":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:10337:3155":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:483:12508":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:15049:3892":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:22301:6228":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:10706:23934":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:11085:5138":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:7934:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:5969:16763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:12103:3325":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:363:2430":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"11:1160:4819":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11714:3269":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:10812:4820":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:6352:6504":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:14194:3652":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:7348:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:10788:4801":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:8400:6336":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:43660:5273":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:555:12517":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:22459:6495":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:41415:5102":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:12459:3189":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:40927:5221":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:4488:16027":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:1590:4824":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:3491:5609":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:2351:2546":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:4578:16038":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:1604:13416":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:4529:16032":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:44119:5288":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:12105:1044":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"10:0:2134":{"crate_id":10,"path":["adler"],"kind":"module"},"2:41429:5103":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:6710:240":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:9493:2891":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"16:7436:4362":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:7651:16265":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:10756:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"18:671:2996":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"0:74:1930":{"crate_id":0,"path":["scopeguard","OnSuccess"],"kind":"enum"},"18:690:2999":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:13083:3420":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:48581:5449":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:15311:3964":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:13194:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:4847:16064":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:5705:5519":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"18:481:2963":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11701:3266":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:10482:5492":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:43676:5276":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"11:700:2474":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:6037:2877":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:7738:2419":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:8076:5560":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:15961:3449":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:40807:29051":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:10522:2416":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:8283:5130":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:11536:3247":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:7702:17760":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:10051:3154":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:1685:2772":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:5905:4345":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:2959:2269":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:2546:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:15235:3942":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:3548:2375":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"11:2151:4815":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:4528:2388":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:44599:5315":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:7713:6228":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:14122:3644":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:4766:6335":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:8356:6307":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:44633:5071":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:10109:5661":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:13273:3462":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:12546:5122":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:4566:16037":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:40894:5216":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:4701:23923":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"15:327:17905":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:7862:4655":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:533:12514":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:2933:17947":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:46815:5375":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"11:1066:17875":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"18:699:3000":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:5033:16086":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:12972:3401":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"11:1603:4823":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:2236:30621":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:13347:2860":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:3818:2811":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:5015:16084":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"11:856:4809":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13309:3469":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:10973:2894":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:13297:3466":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:1072:4819":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:7491:29013":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:1558:13411":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:507:2965":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:2722:4240":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:41270:5100":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:557:2413":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:10813:32953":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:6120:16776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:14509:3708":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:13832:3583":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:6425:4444":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:8872:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:563:12518":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:11274:5684":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:31116:29031":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:15519:4036":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:42743:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:45052:11901":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:6687:4484":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:9091:5651":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:4497:4286":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:12130:1258":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:4364:16016":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:7558:4936":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:44168:5294":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:5691:227":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:7708:4268":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:6268:32949":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:13584:3520":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:14765:3816":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"11:1142:4818":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"9:52:17813":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:14778:3823":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11459:3230":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:1040:4547":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:11632:3255":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:11631:5142":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:2048:4909":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:38709:2327":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:11645:3256":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:11001:3191":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:21306:28618":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:7474:4620":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:5148:5510":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:6845:2809":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:42510:5263":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:3432:5248":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:4557:4288":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:6837:17193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:3584:3047":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:7441:11791":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:13347:3473":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:7444:6149":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:1862:5478":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:9061:23047":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:4878:16068":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:44821:5329":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:1439:4820":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:6189:4394":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:14087:3633":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:42156:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:5004:16082":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:41138:5083":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:7533:2807":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:3903:5499":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:11590:3251":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:11686:5542":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:8605:5505":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:6963:2884":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:6261:4428":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:15108:3911":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:1939:5480":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:12104:408":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:48185:5443":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:42385:5117":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:4020:2792":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:15184:3929":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:9198:5533":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:44579:5313":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"11:673:4801":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:45132:11914":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:5798:4329":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:43900:5286":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:2688:5486":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:12614:18881":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:9174:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:7556:17731":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:6243:4418":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:2584:5485":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:5982:16765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:3190:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:4557:6309":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:4949:4300":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:261:3025":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:4455:15865":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:23895:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:15:2247":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:4108:6284":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:41231:5241":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12486:3366":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:41118:5232":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:3607:4820":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:12600:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:6889:17195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:4635:6326":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:10432:32957":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:683:257":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:44727:5318":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:5846:5526":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:2418:2537":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:4777:726":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"16:7523:4632":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:4535:6308":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:40012:2335":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:8422:5504":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:48741:5459":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:123:12191":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:43395:29030":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:12140:3328":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:5512:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:4375:16017":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4841:16063":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:1477:4804":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:6813:17191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:42782:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:6606:5530":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:8205:18820":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:6781:13531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:10724:5676":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:2540:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:1063:4815":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:22718:28897":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:4769:6308":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:10251:5127":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:46633:5363":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:2979:30472":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:7507:4932":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:41256:2987":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:12872:3390":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:7628:2811":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:1115:31664":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:5816:4334":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:3229:23631":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:5104:16092":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:7714:2431":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:4666:16046":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:945:4811":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"11:2443:2792":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:4543:16034":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:47341:5403":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:1581:2792":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:15980:4156":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:5891:16758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:9646:30054":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:13663:3554":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:15337:3970":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:23705:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:0:540":{"crate_id":2,"path":["core"],"kind":"module"},"2:32823:5197":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:2183:30612":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:7554:4265":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:48756:5460":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:8134:4701":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:42485:4801":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:13648:3549":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"11:2326:4813":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:5962:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:22779:29032":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:43423:28933":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:44429:5137":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:2321:4217":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:14282:3664":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:4233:6304":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:511:3031":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:12124:1650":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:46362:5352":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:4053:4282":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:32776:6366":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:2715:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:9918:18879":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:6753:4498":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:5121:4305":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:4613:4290":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:1521:13407":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:4445:228":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:33721:2312":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:4806:11629":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:939:4809":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:2154:4911":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:11126:3200":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:7598:16257":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:41058:5226":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:43697:5280":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:1975:713":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:4719:4292":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:22824:28928":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:9481:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:11429:5539":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:1527:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:42665:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:951:4812":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:7342:32947":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:43405:2386":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:43707:5284":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:4556:16036":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:9860:18878":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:14934:3871":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:15345:3971":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:5829:16691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"9:426:17797":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:3051:2332":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:4967:426":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:30990:1913":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:7976:5556":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:41638:5107":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:3251:3044":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"11:710:4802":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:44301:5305":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13365:3481":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:4988:29681":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:13504:3515":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:46763:5373":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:41280:5243":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:4628:16044":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:914:4802":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"0:0:2016":{"crate_id":0,"path":["scopeguard"],"kind":"module"},"1:3265:5488":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"11:2383:4801":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:401:3027":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:4104:6283":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:40129:223":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:15321:3967":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:11693:5542":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:9813:18877":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:6968:18814":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:22107:6414":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:48637:5451":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:1024:2772":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:21677:5164":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:6934:17199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:7371:17571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:2031:3036":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:4922:16074":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:12127:1649":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:1900:2564":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:9104:5654":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:9790:18876":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:3267:5489":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:5075:16090":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:5910:16760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:11563:3249":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:15101:3909":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:6386:4440":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"11:1917:4826":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:10004:2380":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"12:0:2136":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:1505:4802":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:4800:16058":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:4092:4820":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12366:19004":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"18:491:2964":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:4195:27522":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:9624:18856":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:10211:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:6499:4269":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:6496:5529":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:13961:3600":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:14041:3609":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:5085:16091":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:4527:4287":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:44920:5335":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:12561:11569":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:2975:30474":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"18:515:2962":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:4518:2835":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:15855:3435":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:13386:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:5673:4254":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:45347:4832":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:3687:2772":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:2472:4230":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:1734:13427":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:41147:5086":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:43500:2387":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:44885:5330":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:7128:5654":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4480:16026":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:12122:802":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:12123:1653":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:11576:3250":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:13121:3435":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:40085:222":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:22464:6493":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:5130:16096":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:10974:3189":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:21294:28618":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:10102:3017":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:4225:6303":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:2724:265":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:42404:5119":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:45040:11897":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:10002:213":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:4921:4299":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:40837:5211":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:22430:6494":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:2652:2864":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:11155:3203":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:8352:6152":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:11334:4885":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:2977:2867":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:40958:29013":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:1887:5479":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:7432:4928":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:32830:2388":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:8942:5520":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:1054:4813":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:11052:3170":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"9:450:17795":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:47031:5382":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11507:3243":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:0:1540":{"crate_id":1,"path":["std"],"kind":"module"},"16:3032:4271":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:14312:3670":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:9043:5644":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:12921:3350":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:15013:3887":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:4462:4285":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:10417:2892":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:15279:3956":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:9142:5122":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:8260:5229":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:22857:6274":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:12584:3372":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:45060:11903":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:9730:18874":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:4893:16070":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:11194:18910":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:4440:16022":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:42640:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:41109:5231":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:9891:18859":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:5481:5516":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:2676:11645":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:15747:4094":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:7013:2828":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"15:0:2138":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:41188:5239":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:44589:5314":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:46939:5378":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:7925:5553":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:6792:4510":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:867:4804":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:42553:6139":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12009:3169":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:42213:6271":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"4:0:2131":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:13463:3504":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:5941:16719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11014:3193":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10915:3181":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:15177:3928":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:5830:4335":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:11675:3261":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:4870:16067":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:6700:17187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:5885:16757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:32929:2277":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:9048:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:2359:4225":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:31058:29040":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:3405:2341":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:40875:5214":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:4054:6280":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:2670:4238":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:4252:4801":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:15329:3968":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:8361:11795":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:14485:3350":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:1968:6193":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:12357:5132":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:6485:2792":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:46652:5364":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:2474:5930":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:7633:16262":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"0:40:1943":{"crate_id":0,"path":["scopeguard","guard_on_unwind"],"kind":"function"},"2:34674:2321":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:11030:5136":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:14385:3686":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:12264:3344":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"11:1883:4801":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:5152:16099":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:1301:4813":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:47623:5408":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:5009:16083":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:7965:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:32812:5196":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:14346:3683":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"9:507:4888":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:4939:1112":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:3655:3063":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:11364:2897":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:11395:3224":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:6676:2882":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:4773:3053":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:23424:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:14497:3701":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:634:4902":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:903:2811":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"5:7460:2420":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:3012:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:5389:11559":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:8195:4707":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:7360:32948":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:7568:4266":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:10957:5134":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:45318:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"18:719:3006":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:15003:3886":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:11449:3100":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:6136:2872":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:44311:3022":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:2428:4228":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:3915:4281":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:1537:13409":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:41128:5234":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:14021:3608":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:12501:6359":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:7597:32945":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:504:2406":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:4783:16056":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:10006:2381":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:8115:4698":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:1151:31665":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:15527:4039":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:9164:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:2961:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:6346:4435":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"0:34:1937":{"crate_id":0,"path":["scopeguard","guard"],"kind":"function"},"2:10880:5132":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:1507:13405":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:8473:5626":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:43018:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:40008:2333":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:6944:32944":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:7987:2347":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:4998:16081":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:10067:3016":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"15:288:17900":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:2341:643":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:12536:3368":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:10925:5639":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:2271:1976":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:12077:6138":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:7544:4633":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:15943:3439":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:11527:2899":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:903:4801":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:1650:13419":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:8239:6227":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:45068:11898":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:12290:3345":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"18:574:2965":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:44617:5152":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:22969:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:9459:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:6688:2772":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:15062:3898":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:8866:5636":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"11:430:32880":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:4914:16073":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:7604:16258":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"10:36:32862":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:1602:4826":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:6071:16770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:7905:2348":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"11:811:2811":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:6600:18812":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:33535:2309":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:3010:233":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"11:2536:32875":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:9968:18880":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"3:0:485":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"5:790:2775":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:7389:29366":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:10716:3170":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:4745:4293":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:6212:2860":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"9:237:5280":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:1578:2474":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"11:396:2766":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:6204:4396":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13754:3569":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:42623:4820":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:7644:2815":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:13167:29759":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:10111:5660":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:12088:23071":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:7325:11799":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:3019:2313":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:4434:16021":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:15027:3888":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"11:742:4803":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:40941:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:13676:3556":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:33349:2310":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:40377:24193":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:5497:5517":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:2197:3040":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:4703:23925":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:7610:5689":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"11:2140:4813":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:8961:5642":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:5974:16764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"9:330:17850":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:31030:2298":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:12072:27561":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:23333:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:4444:2800":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:8455:6344":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:9029:5643":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:5447:5511":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:8207:3011":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:7792:18818":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:3082:2322":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:3798:5497":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:5117:5510":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10242:3021":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:7462:4619":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:41021:2837":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:4864:2868":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:4724:16051":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:6893:4518":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:0:2140":{"crate_id":17,"path":["object"],"kind":"module"},"16:3797:4278":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:12115:3326":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:10440:2850":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:40151:2336":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:1703:6299":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:10766:5496":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"18:660:2990":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12310:3347":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:6041:18810":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:44933:5339":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:7041:4538":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:2795:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:7733:2417":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:46408:5354":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:41100:5230":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}