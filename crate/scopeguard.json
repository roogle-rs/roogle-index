{"root":"0:0:2559","crate_version":"1.2.0","includes_private":false,"index":{"b:2:3036-0:71:2473":{"id":"b:2:3036-0:71:2473","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3039:138","2:3040:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32713:2825-0:68:2470":{"id":"a:2:32713:2825-0:68:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32713:2825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3860-0:68:2470":{"id":"b:2:3860-0:68:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32655:2824","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3858:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3862:1841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2718:2781":{"id":"2:2718:2781","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:811":{"id":"0:70:811","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10409:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10390:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13526:32231":{"id":"2:13526:32231","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:2498":{"id":"0:21:2498","crate_id":0,"name":"ScopeGuard","span":{"filename":"src/lib.rs","begin":[304,0],"end":[313,1]},"visibility":"public","docs":"`ScopeGuard` is a scope guard that may own a protected value.\n\nIf you place a guard in a local variable, the closure can\nrun regardless how you leave the scope ‚Äî through regular return or panic\n(except if panic or other code aborts; so as long as destructors run).\nIt is run only once.\n\nThe `S` parameter for [`Strategy`](trait.Strategy.html) determines if\nthe closure actually runs.\n\nThe guard's closure will be called with the held value in the destructor.\n\nThe `ScopeGuard` implements `Deref` so that you can access the inner value.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Always","id":"0:68:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3493:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2462","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:28","a:2:32713:2825-0:21:2498","a:2:3279:2821-0:21:2498","a:2:42515:6791-0:21:2498","a:2:42516:7013-0:21:2498","a:2:32654:237-0:21:2498","b:2:3021-0:21:2498","b:2:3860-0:21:2498","b:2:3036-0:21:2498","b:2:3025-0:21:2498","b:2:3031-0:21:2498","b:2:2719-0:21:2498","b:2:2716-0:21:2498","0:47","0:53","0:43","0:58","0:63"]}}},"2:13534:25205":{"id":"2:13534:25205","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12453:1871"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13545:25228":{"id":"2:13545:25228","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13547:25232","str::split_at_mut":"2:13546:25229"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:2465":{"id":"0:13:2465","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[231,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13539:25203":{"id":"2:13539:25203","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13548:25233":{"id":"2:13548:25233","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13547:25232"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3279:2821-0:68:2470":{"id":"a:2:3279:2821-0:68:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3279:2821","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13650:25089":{"id":"2:13650:25089","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:37450"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3036-0:68:2470":{"id":"b:2:3036-0:68:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3039:138","2:3040:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2719-0:21:2498":{"id":"b:2:2719-0:21:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32655:2824","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2713:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2721:24261"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[455,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3493:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2462","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3465:2460","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:57:639"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13581:25238":{"id":"2:13581:25238","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13212:12235","`DoubleEndedIterator`":"2:8374:130","prim@char":"1:12434:476","str::split":"2:13575:25234"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44309:5723","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:12233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3021-0:71:2473":{"id":"b:2:3021-0:71:2473","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3024:3020"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3862:1841":{"id":"2:3862:1841","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40137:5809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:811":{"id":"0:73:811","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10409:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10390:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:2475":{"id":"0:74:2475","crate_id":0,"name":"OnSuccess","span":{"filename":"src/lib.rs","begin":[227,0],"end":[227,21]},"visibility":"public","docs":"Run on regular scope exit, when not unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:32713:2825-0:74:2475","a:2:3244:247-0:74:2475","a:2:3279:2821-0:74:2475","a:2:42515:6791-0:74:2475","a:2:42516:7013-0:74:2475","a:2:32654:237-0:74:2475","b:2:3021-0:74:2475","b:2:3860-0:74:2475","b:2:3036-0:74:2475","b:2:3025-0:74:2475","b:2:3031-0:74:2475","b:2:2719-0:74:2475","b:2:2716-0:74:2475","0:16","0:75"]}}},"2:13567:3067":{"id":"2:13567:3067","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42424:191","prim@char":"1:12434:476","self::pattern":"2:13212:12235"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13599:25245":{"id":"2:13599:25245","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:12233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[480,0],"end":[491,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10443:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3493:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2462","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10443:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:67:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13543:32234":{"id":"2:13543:32234","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12440:1741","str::slice_mut_unchecked":"2:13544:32235","crate::ops::Index":"2:39968:2883"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42515:6791-0:74:2475":{"id":"a:2:42515:6791-0:74:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42515:6791","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32654:237-0:68:2470":{"id":"a:2:32654:237-0:68:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:33:2519":{"id":"0:33:2519","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[357,4],"end":[369,5]},"visibility":"public","docs":"‚ÄúDefuse‚Äù the guard and extract the value without calling the closure.\n\n```\nextern crate scopeguard;\n\nuse scopeguard::{guard, ScopeGuard};\n\nfn conditional() -> bool { true }\n\nfn main() {\n    let mut guard = guard(Vec::new(), |mut v| v.clear());\n    guard.push(1);\n\n    if conditional() {\n        // a condition maybe makes us decide to\n        // ‚Äúdefuse‚Äù the guard and get back its inner parts\n        let value = ScopeGuard::into_inner(guard);\n    } else {\n        // guard still exists in this branch\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["guard",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3021-0:74:2475":{"id":"b:2:3021-0:74:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3024:3020"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:20:2487":{"id":"0:20:2487","crate_id":0,"name":"defer_on_unwind","span":{"filename":"src/lib.rs","begin":[285,0],"end":[289,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on unwinding from panic).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_unwind {\n    ($($t:tt)*) => { ... };\n}"}},"2:13637:32250":{"id":"2:13637:32250","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:12235"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5720":{"id":"5:5720","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5721:32948","5:5722:2841","5:5725:32949","5:5728:32950","5:5736:32951","5:5737:32952","5:5738:6916","5:5739:24413","5:5740:24414"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32654:237-0:71:2473":{"id":"a:2:32654:237-0:71:2473","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32713:2825-0:74:2475":{"id":"a:2:32713:2825-0:74:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32713:2825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13640:32251":{"id":"2:13640:32251","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:12235"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:12233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13561:24582":{"id":"2:13561:24582","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:12235"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42516:7013-0:74:2475":{"id":"a:2:42516:7013-0:74:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42516:7013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3025-0:21:2498":{"id":"b:2:3025-0:21:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3027:841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5740:24414":{"id":"5:5740:24414","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13649:24417"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42515:6791-0:68:2470":{"id":"a:2:42515:6791-0:68:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42515:6791","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42515:6791-0:21:2498":{"id":"a:2:42515:6791-0:21:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42515:6791","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42515:6791","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42515:6791","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3025-0:68:2470":{"id":"b:2:3025-0:68:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3027:841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:10:2462":{"id":"0:10:2462","crate_id":0,"name":"Strategy","span":{"filename":"src/lib.rs","begin":[201,0],"end":[205,1]},"visibility":"public","docs":"Controls in which cases the associated code should be run","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:11:2465"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:16","0:14","0:12"]}}},"a:2:42516:7013-0:21:2498":{"id":"a:2:42516:7013-0:21:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42516:7013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42516:7013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42516:7013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13575:25234":{"id":"2:13575:25234","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13212:12235","`DoubleEndedIterator`":"2:8374:130","prim@char":"1:12434:476","str::split_whitespace":"2:13553:30628","str::rsplit":"2:13581:25238"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44291:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3031-0:21:2498":{"id":"b:2:3031-0:21:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3001:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3034:138","2:3035:1828"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10443:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:62:678":{"id":"0:62:678","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[470,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13558:25246":{"id":"2:13558:25246","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:12235"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13587:32238":{"id":"2:13587:32238","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13212:12235","str::split":"2:13575:25234","prim@char":"1:12434:476","str::split_terminator":"2:13584:32237"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44359:5908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:12233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[315,0],"end":[370,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3493:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2462","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:32:2507","0:33:2519"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13621:32246":{"id":"2:13621:32246","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13616:32243":{"id":"2:13616:32243","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13648:24416":{"id":"2:13648:24416","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:2462","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:15:2465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13535:2543":{"id":"2:13535:2543","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42424:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:2482":{"id":"0:34:2482","crate_id":0,"name":"guard","span":{"filename":"src/lib.rs","begin":[375,0],"end":[380,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"Always","id":"0:68:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3493:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5722:2841":{"id":"5:5722:2841","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13622:32247":{"id":"2:13622:32247","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:12235"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13238:12232","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5737:32952":{"id":"5:5737:32952","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2899","`String`":"5:7798:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2899","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11:2465":{"id":"0:11:2465","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,28]},"visibility":"default","docs":"Return `true` if the guard‚Äôs associated code should run\n(in the context where this method is called).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:3039:138":{"id":"2:3039:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32578:7030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13596:25244":{"id":"2:13596:25244","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2716-0:74:2475":{"id":"b:2:2716-0:74:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32655:2824","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:2781"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3279:2821-0:71:2473":{"id":"a:2:3279:2821-0:71:2473","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3279:2821","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[443,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3493:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2462","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3452:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:51:249","0:52:637"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13552:5519":{"id":"2:13552:5519","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44277:3577","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3031-0:74:2475":{"id":"b:2:3031-0:74:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3001:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3034:138","2:3035:1828"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:67:811":{"id":"0:67:811","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[486,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10409:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10390:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:2479":{"id":"0:18:2479","crate_id":0,"name":"defer","span":{"filename":"src/lib.rs","begin":[257,0],"end":[261,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (always run).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer {\n    ($($t:tt)*) => { ... };\n}"}},"2:13584:32237":{"id":"2:13584:32237","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13212:12235","str::split":"2:13575:25234","prim@char":"1:12434:476","`DoubleEndedIterator`":"2:8374:130","str::rsplit_terminator":"2:13587:32238"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44341:5907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13651:25090":{"id":"2:13651:25090","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:37450"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13537:25202":{"id":"2:13537:25202","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42424:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13631:25247":{"id":"2:13631:25247","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:12235"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:12233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3279:2821-0:74:2475":{"id":"a:2:3279:2821-0:74:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3279:2821","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3244:247-0:74:2475":{"id":"a:2:3244:247-0:74:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13571:3026":{"id":"2:13571:3026","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42424:191","prim@char":"1:12434:476","self::pattern":"2:13212:12235"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:12233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3021-0:68:2470":{"id":"b:2:3021-0:68:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3024:3020"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32654:237-0:74:2475":{"id":"a:2:32654:237-0:74:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:12":{"id":"0:12","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,0],"end":[234,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:2462","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:13:2465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[435,0],"end":[441,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3493:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2462","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:68:2470":{"id":"0:68:2470","crate_id":0,"name":"Always","span":{"filename":"src/lib.rs","begin":[213,0],"end":[213,18]},"visibility":"public","docs":"Always run on scope exit.\n\n‚ÄúAlways‚Äù run: on regular exit from a scope or on unwinding from a panic.\nCan not run on abort, process exit, and other catastrophic events where\ndestructors don‚Äôt run.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:32713:2825-0:68:2470","a:2:3244:247-0:68:2470","a:2:3279:2821-0:68:2470","a:2:42515:6791-0:68:2470","a:2:42516:7013-0:68:2470","a:2:32654:237-0:68:2470","b:2:3021-0:68:2470","b:2:3860-0:68:2470","b:2:3036-0:68:2470","b:2:3025-0:68:2470","b:2:3031-0:68:2470","b:2:2719-0:68:2470","b:2:2716-0:68:2470","0:69","0:12"]}}},"2:13557:30645":{"id":"2:13557:30645","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44583:5740","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13590:25240":{"id":"2:13590:25240","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:12235","str::rsplitn":"2:13593:25242"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44395:5725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13523:1008":{"id":"2:13523:1008","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12434:476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13532:32233":{"id":"2:13532:32233","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5728:32950":{"id":"5:5728:32950","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13531:25126":{"id":"2:13531:25126","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12759:12236"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32713:2825-0:21:2498":{"id":"a:2:32713:2825-0:21:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32713:2825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32713:2825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32713:2825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10443:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:70:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3860-0:21:2498":{"id":"b:2:3860-0:21:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32655:2824","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3858:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3862:1841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13525:32230":{"id":"2:13525:32230","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13551:5925":{"id":"2:13551:5925","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12434:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44267:5905","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:249":{"id":"0:51:249","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[448,4],"end":[448,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:13652:25091":{"id":"2:13652:25091","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:37450"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13522":{"id":"2:13522","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13523:1008","2:13524:3027","2:13525:32230","2:13526:32231","2:13528:32232","2:13531:25126","2:13532:32233","2:13533:336","2:13534:25205","2:13535:2543","2:13537:25202","2:13539:25203","2:13541:25204","2:13543:32234","2:13544:32235","2:13545:25228","2:13546:25229","2:13547:25232","2:13548:25233","2:13550:5741","2:13551:5925","2:13552:5519","2:13553:30628","2:13554:30606","2:13555:28587","2:13556:32236","2:13557:30645","2:13558:25246","2:13561:24582","2:13564:24584","2:13567:3067","2:13571:3026","2:13575:25234","2:13578:25236","2:13581:25238","2:13584:32237","2:13587:32238","2:13590:25240","2:13593:25242","2:13596:25244","2:13599:25245","2:13602:2793","2:13605:32239","2:13608:32240","2:13611:32241","2:13614:32242","2:13616:32243","2:13618:32244","2:13620:32245","2:13621:32246","2:13622:32247","2:13625:32248","2:13628:24356","2:13631:25247","2:13634:32249","2:13637:32250","2:13640:32251","2:13643:32252","2:13645:24411","2:13646:25086","2:13647:24415","2:13648:24416","2:13649:24417","2:13650:25089","2:13651:25090","2:13652:25091","2:13653:32253","2:13655:6784","2:13656:32254"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10443:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:17:2465":{"id":"0:17:2465","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[247,4],"end":[249,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13564:24584":{"id":"2:13564:24584","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:12235"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:12233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42515:6791-0:71:2473":{"id":"a:2:42515:6791-0:71:2473","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42515:6791","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:40:2488":{"id":"0:40:2488","crate_id":0,"name":"guard_on_unwind","span":{"filename":"src/lib.rs","begin":[425,0],"end":[430,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.\n\n## Examples\n\nFor performance reasons, or to emulate ‚Äúonly run guard on unwind‚Äù in\nno-std environments, we can also use the default guard and simply manually\ndefuse it at the end of scope like the following example. (The performance\nreason would be if the [`OnUnwind`]'s call to [std::thread::panicking()] is\nan issue.)\n\n```\nextern crate scopeguard;\n\nuse scopeguard::ScopeGuard;\n# fn main() {\n{\n    let guard = scopeguard::guard((), |_| {});\n\n    // rest of the code here\n\n    // we reached the end of scope without unwinding - defuse it\n    ScopeGuard::into_inner(guard);\n}\n# }\n```","links":{"std::thread::panicking()":"1:528:1307","`OnUnwind`":"0:71:2473"},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnUnwind","id":"0:71:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3493:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15:2465":{"id":"0:15:2465","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[239,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13602:2793":{"id":"2:13602:2793","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13212:12235","`DoubleEndedIterator`":"2:8374:130","prim@char":"1:12434:476","str::rmatches":"2:13605:32239"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44495:5911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13541:25204":{"id":"2:13541:25204","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:639":{"id":"0:57:639","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[460,4],"end":[462,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13645:24411":{"id":"2:13645:24411","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32654:237-0:21:2498":{"id":"a:2:32654:237-0:21:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[465,0],"end":[478,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3493:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2462","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3481:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:62:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5736:32951":{"id":"5:5736:32951","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13533:336":{"id":"2:13533:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13534:25205","`u8`":"1:12453:1871"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13646:25086":{"id":"2:13646:25086","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40323:12311","Self::is_ascii":"2:13645:24411"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40323:12311","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2716-0:21:2498":{"id":"b:2:2716-0:21:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32655:2824","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2718:2781"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13544:32235":{"id":"2:13544:32235","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12440:1741","crate::ops::IndexMut":"2:3522:2884","str::slice_unchecked":"2:13543:32234"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3860-0:74:2475":{"id":"b:2:3860-0:74:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32655:2824","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3858:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3862:1841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:32:2507":{"id":"0:32:2507","crate_id":0,"name":"with_strategy","span":{"filename":"src/lib.rs","begin":[326,4],"end":[332,5]},"visibility":"public","docs":"Create a `ScopeGuard` that owns `v` (accessible through deref) and calls\n`dropfn` when its destructor runs.\n\nThe `Strategy` decides whether the scope guard's closure should run.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3024:3020":{"id":"2:3024:3020","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2998:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2719-0:68:2470":{"id":"b:2:2719-0:68:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32655:2824","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2713:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2721:24261"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13528:32232":{"id":"2:13528:32232","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13526:32231"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3025-0:74:2475":{"id":"b:2:3025-0:74:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3027:841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13553:30628":{"id":"2:13553:30628","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13554:30606"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44565:5915","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13618:32244":{"id":"2:13618:32244","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13628:24356":{"id":"2:13628:24356","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:12235"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13546:25229":{"id":"2:13546:25229","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13545:25228","str::split_at_mut_checked":"2:13548:25233"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3027:841":{"id":"2:3027:841","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13555:28587":{"id":"2:13555:28587","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44545:5913","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13608:32240":{"id":"2:13608:32240","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13212:12235","`DoubleEndedIterator`":"2:8374:130","prim@char":"1:12434:476","str::rmatch_indices":"2:13611:32241"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44441:5909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13634:32249":{"id":"2:13634:32249","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:12235"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:12233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13656:32254":{"id":"2:13656:32254","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5053:32254"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44608:5818","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13524:3027":{"id":"2:13524:3027","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2719-0:71:2473":{"id":"b:2:2719-0:71:2473","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32655:2824","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2713:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2721:24261"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5738:6916":{"id":"5:5738:6916","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3040:1826":{"id":"2:3040:1826","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[250,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:2462","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:17:2465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3244:247-0:68:2470":{"id":"a:2:3244:247-0:68:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32713:2825-0:71:2473":{"id":"a:2:32713:2825-0:71:2473","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32713:2825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3244:247-0:71:2473":{"id":"a:2:3244:247-0:71:2473","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:76:811":{"id":"0:76:811","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10409:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10390:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13547:25232":{"id":"2:13547:25232","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13548:25233"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3036-0:74:2475":{"id":"b:2:3036-0:74:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3039:138","2:3040:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13620:32245":{"id":"2:13620:32245","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13643:32252":{"id":"2:13643:32252","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13173:137","`FromStr`":"2:13172:6862"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13172:6862","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13172:6862","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5721:32948":{"id":"5:5721:32948","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2899","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2899","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:2484":{"id":"0:19:2484","crate_id":0,"name":"defer_on_success","span":{"filename":"src/lib.rs","begin":[271,0],"end":[275,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on successful scope exit).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_success {\n    ($($t:tt)*) => { ... };\n}"}},"a:2:42516:7013-0:68:2470":{"id":"a:2:42516:7013-0:68:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42516:7013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13655:6784":{"id":"2:13655:6784","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5056:6784"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44599:5657","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2716-0:68:2470":{"id":"b:2:2716-0:68:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32655:2824","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:2781"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5725:32949":{"id":"5:5725:32949","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5739:24413":{"id":"5:5739:24413","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13648:24416"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3279:2821-0:21:2498":{"id":"a:2:3279:2821-0:21:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3279:2821","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3279:2821","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3279:2821","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:0:2559":{"id":"0:0:2559","crate_id":0,"name":"scopeguard","span":{"filename":"src/lib.rs","begin":[1,0],"end":[595,1]},"visibility":"public","docs":"A scope guard will run a given closure when it goes out of scope,\neven if the code between panics.\n(as long as panic doesn't abort)\n\n# Examples\n\n## Hello World\n\nThis example creates a scope guard with an example function:\n\n```\nextern crate scopeguard;\n\nfn f() {\n    let _guard = scopeguard::guard((), |_| {\n        println!(\"Hello Scope Exit!\");\n    });\n\n    // rest of the code here.\n\n    // Here, at the end of `_guard`'s scope, the guard's closure is called.\n    // It is also called if we exit this scope through unwinding instead.\n}\n# fn main() {\n#    f();\n# }\n```\n\n## `defer!`\n\nUse the `defer` macro to run an operation at scope exit,\neither regular scope exit or during unwinding from a panic.\n\n```\n#[macro_use(defer)] extern crate scopeguard;\n\nuse std::cell::Cell;\n\nfn main() {\n    // use a cell to observe drops during and after the scope guard is active\n    let drop_counter = Cell::new(0);\n    {\n        // Create a scope guard using `defer!` for the current scope\n        defer! {\n            drop_counter.set(1 + drop_counter.get());\n        }\n\n        // Do regular operations here in the meantime.\n\n        // Just before scope exit: it hasn't run yet.\n        assert_eq!(drop_counter.get(), 0);\n\n        // The following scope end is where the defer closure is called\n    }\n    assert_eq!(drop_counter.get(), 1);\n}\n```\n\n## Scope Guard with Value\n\nIf the scope guard closure needs to access an outer value that is also\nmutated outside of the scope guard, then you may want to use the scope guard\nwith a value. The guard works like a smart pointer, so the inner value can\nbe accessed by reference or by mutable reference.\n\n### 1. The guard owns a file\n\nIn this example, the scope guard owns a file and ensures pending writes are\nsynced at scope exit.\n\n```\nextern crate scopeguard;\n\nuse std::fs::*;\nuse std::io::{self, Write};\n# // Mock file so that we don't actually write a file\n# struct MockFile;\n# impl MockFile {\n#     fn create(_s: &str) -> io::Result<Self> { Ok(MockFile) }\n#     fn write_all(&self, _b: &[u8]) -> io::Result<()> { Ok(()) }\n#     fn sync_all(&self) -> io::Result<()> { Ok(()) }\n# }\n# use self::MockFile as File;\n\nfn try_main() -> io::Result<()> {\n    let f = File::create(\"newfile.txt\")?;\n    let mut file = scopeguard::guard(f, |f| {\n        // ensure we flush file at return or panic\n        let _ = f.sync_all();\n    });\n    // Access the file through the scope guard itself\n    file.write_all(b\"test me\\n\").map(|_| ())\n}\n\nfn main() {\n    try_main().unwrap();\n}\n\n```\n\n### 2. The guard restores an invariant on scope exit\n\n```\nextern crate scopeguard;\n\nuse std::mem::ManuallyDrop;\nuse std::ptr;\n\n// This function, just for this example, takes the first element\n// and inserts it into the assumed sorted tail of the vector.\n//\n// For optimization purposes we temporarily violate an invariant of the\n// Vec, that it owns all of its elements.\n//\n// The safe approach is to use swap, which means two writes to memory,\n// the optimization is to use a ‚Äúhole‚Äù which uses only one write of memory\n// for each position it moves.\n//\n// We *must* use a scope guard to run this code safely. We\n// are running arbitrary user code (comparison operators) that may panic.\n// The scope guard ensures we restore the invariant after successful\n// exit or during unwinding from panic.\nfn insertion_sort_first<T>(v: &mut Vec<T>)\n    where T: PartialOrd\n{\n    struct Hole<'a, T: 'a> {\n        v: &'a mut Vec<T>,\n        index: usize,\n        value: ManuallyDrop<T>,\n    }\n\n    unsafe {\n        // Create a moved-from location in the vector, a ‚Äúhole‚Äù.\n        let value = ptr::read(&v[0]);\n        let mut hole = Hole { v: v, index: 0, value: ManuallyDrop::new(value) };\n\n        // Use a scope guard with a value.\n        // At scope exit, plug the hole so that the vector is fully\n        // initialized again.\n        // The scope guard owns the hole, but we can access it through the guard.\n        let mut hole_guard = scopeguard::guard(hole, |hole| {\n            // plug the hole in the vector with the value that was // taken out\n            let index = hole.index;\n            ptr::copy_nonoverlapping(&*hole.value, &mut hole.v[index], 1);\n        });\n\n        // run algorithm that moves the hole in the vector here\n        // move the hole until it's in a sorted position\n        for i in 1..hole_guard.v.len() {\n            if *hole_guard.value >= hole_guard.v[i] {\n                // move the element back and the hole forward\n                let index = hole_guard.index;\n                hole_guard.v.swap(index, index + 1);\n                hole_guard.index += 1;\n            } else {\n                break;\n            }\n        }\n\n        // When the scope exits here, the Vec becomes whole again!\n    }\n}\n\nfn main() {\n    let string = String::from;\n    let mut data = vec![string(\"c\"), string(\"a\"), string(\"b\"), string(\"d\")];\n    insertion_sort_first(&mut data);\n    assert_eq!(data, vec![\"a\", \"b\", \"c\", \"d\"]);\n}\n\n```\n\n\n# Crate Features\n\n- `use_std`\n  + Enabled by default. Enables the `OnUnwind` and `OnSuccess` strategies.\n  + Disable to use `no_std`.\n\n# Rust Version\n\nThis version of the crate requires Rust 1.20 or later.\n\nThe scopeguard 1.x release series will use a carefully considered version\nupgrade policy, where in a later 1.x version, we will raise the minimum\nrequired Rust version.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/scopeguard/1/\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:2462","0:68:2470","0:71:2473","0:74:2475","0:21:2498","0:34:2482","0:37:2485","0:40:2488","0:18:2479","0:19:2484","0:20:2487"],"is_stripped":false}}},"2:3034:138":{"id":"2:3034:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:13614:32242":{"id":"2:13614:32242","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13653:32253":{"id":"2:13653:32253","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5055:32253"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44590:5819","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13554:30606":{"id":"2:13554:30606","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13553:30628"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44574:5916","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3025-0:71:2473":{"id":"b:2:3025-0:71:2473","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3027:841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13593:25242":{"id":"2:13593:25242","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12434:476","str::splitn":"2:13590:25240","self::pattern":"2:13212:12235"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44413:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:12233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13647:24415":{"id":"2:13647:24415","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3031-0:68:2470":{"id":"b:2:3031-0:68:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3001:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3034:138","2:3035:1828"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3021-0:21:2498":{"id":"b:2:3021-0:21:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3024:3020"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13625:32248":{"id":"2:13625:32248","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:12235"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3860-0:71:2473":{"id":"b:2:3860-0:71:2473","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32655:2824","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3858:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3862:1841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13578:25236":{"id":"2:13578:25236","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:12235"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13027:5720","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13649:24417":{"id":"2:13649:24417","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13611:32241":{"id":"2:13611:32241","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13212:12235","`DoubleEndedIterator`":"2:8374:130","prim@char":"1:12434:476","str::match_indices":"2:13608:32240"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44459:5910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:12233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:637":{"id":"0:52:637","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[450,4],"end":[452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:2485":{"id":"0:37:2485","crate_id":0,"name":"guard_on_success","span":{"filename":"src/lib.rs","begin":[388,0],"end":[393,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnSuccess","id":"0:74:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3493:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2721:24261":{"id":"2:2721:24261","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3031-0:71:2473":{"id":"b:2:3031-0:71:2473","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3001:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3034:138","2:3035:1828"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13556:32236":{"id":"2:13556:32236","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44555:5914","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2719-0:74:2475":{"id":"b:2:2719-0:74:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32655:2824","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2713:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2721:24261"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13605:32239":{"id":"2:13605:32239","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13212:12235","`DoubleEndedIterator`":"2:8374:130","prim@char":"1:12434:476","str::matches":"2:13602:2793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44513:5912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:5709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:12233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42516:7013-0:71:2473":{"id":"a:2:42516:7013-0:71:2473","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42516:7013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:71:2473":{"id":"0:71:2473","crate_id":0,"name":"OnUnwind","span":{"filename":"src/lib.rs","begin":[220,0],"end":[220,20]},"visibility":"public","docs":"Run on scope exit through unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:32713:2825-0:71:2473","a:2:3244:247-0:71:2473","a:2:3279:2821-0:71:2473","a:2:42515:6791-0:71:2473","a:2:42516:7013-0:71:2473","a:2:32654:237-0:71:2473","b:2:3021-0:71:2473","b:2:3860-0:71:2473","b:2:3036-0:71:2473","b:2:3025-0:71:2473","b:2:3031-0:71:2473","b:2:2719-0:71:2473","b:2:2716-0:71:2473","0:72","0:14"]}}},"b:2:2716-0:71:2473":{"id":"b:2:2716-0:71:2473","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32655:2824","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:2781"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3035:1828":{"id":"2:3035:1828","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3036-0:21:2498":{"id":"b:2:3036-0:21:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3039:138","2:3040:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13550:5741":{"id":"2:13550:5741","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12434:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44261:5733","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:15050:4269":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"11:685:5404":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:6953:5034":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:7883:4942":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:42828:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:40100:2886":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12225:3835":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:7282:5097":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"11:830:5405":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:2840:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:4359:6974":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:11135:3407":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:12992:3934":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:13227:3556":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"11:671:5385":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:13537:3928":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:10704:6886":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:6716:17933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"6:6526:17916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:3304:28990":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:8223:5227":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:15939:4537":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:31067:30773":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:957:5386":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:5196:17174":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:44694:5918":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"11:1158:5403":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:2173:5494":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:11892:6137":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:13218:5709":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:6493:17873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:46372:5970":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:8620:6140":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:46987:6023":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"11:835:5390":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:4230:6953":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:11457:3757":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"17:14152:4098":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:5139:17170":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:5387:17198":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:11105:6287":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:4636:2975":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:41026:3394":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11163:3741":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:41677:5696":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:15953:4539":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:44866:12248":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:47347:6062":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:16179:4617":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:10729:3576":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:4168:6947":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:7578:6302":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:12950:5737":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:384:2985":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:8014:18730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:23279:30597":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:45347:5951":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:9499:6304":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:5025:17160":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:41635:5849":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4997:17157":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:1636:5490":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:8374:130":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:5341:17192":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:14886:4239":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:4812:6948":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:12983:20186":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:21973:31317":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:14327:4138":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:5570:12222":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:23210:5767":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:7842:24359":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"1:9259:7047":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:41246:5684":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:2450:4796":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:7804:24357":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"17:11448:3755":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11475:20068":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"6:4984:17155":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:6209:3427":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:13145:3945":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:12454:1853":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:5449:4885":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:9433:5708":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"2:4763:5662":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:42643:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:3125:5526":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:11985:3803":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:15602:4453":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:46970:6022":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"14:214:5381":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"9:236:5881":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:8101:3421":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:8255:17388":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:14031:4065":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:11318:6177":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:9754:3444":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:4684:2537":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:46241:5956":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:16171:4614":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"11:785:5389":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"11:2228:3811":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"16:3048:19118":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:16311:4654":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:6018:6166":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:15148:4283":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:23187:5762":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:12451:914":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:41114:5834":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:7838:19987":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:9354:6299":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:1905:6116":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:45041:12576":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:12163:3828":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:16714:4754":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"18:531:3523":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:6790:34384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:2640:4811":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:34294:2868":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"11:123:3310":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:47103:6027":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:7259:5096":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:11421:3754":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:1507:14076":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:9159:6285":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:3913:6138":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:46258:5959":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:8546:5282":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:13070:3741":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:9319:2964":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:8238:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"11:2566:5513":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:12433:1188":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:11319:34505":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:8052:2970":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:8279:6204":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:5224:4878":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"18:689:3553":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:10460:2931":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:41621:5691":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:1551:14081":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6462:17912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5629:17222":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"7:32:18945":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:6998:5035":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:6837:5022":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:12234:3836":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:5614:6151":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:10778:3721":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"2:2343:3122":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:10709:5715":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:15844:4508":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:14902:4241":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:9148:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:8031:18731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"15:394:19080":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"16:8066:19988":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13515:20057":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:10456:2930":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"11:772:5388":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:14807:4229":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:11073:6158":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"6:5375:17196":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:40820:5817":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:11013:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:3490:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:41421:5688":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:11831:3766":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:3330:5410":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13890:4041":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:14312:4136":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"16:8179:5225":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:10454:2929":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:16786:4770":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:12293:3845":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:42537:12520":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:10991:3405":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"17:13921:4045":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:317:3579":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:15731:4482":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:15931:4534":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:10551:114":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:40893:5821":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13361:3961":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:16019:4554":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:23487:5793":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:2155:3119":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:8043:34490":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:2570:4808":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:10928:3737":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:8041:3565":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:9359:6300":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:43674:5885":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:8581:6254":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:16008:4553":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8646:6252":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:4890:17144":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:5482:17208":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:15496:4437":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:12028:3808":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"18:573:3519":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:6825:7043":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:34640:2870":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:11691:3776":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:7332:13054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:6507:17874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:4921:17147":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12673:3898":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:23410:5786":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"11:2545:34450":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:6487:3427":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:7747:12507":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:3587:4854":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"5:4368:5385":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:16145:4605":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:11998:3804":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:45203:30698":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:4824:24550":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:11492:5468":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:910:5388":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:1123:3320":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:11149:3447":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:16026:4556":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:1852:703":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:8216:6199":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:12952:3930":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:4881:17143":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:43867:30702":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"17:16507:4015":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:6823:17943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:44097:5889":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:5399:988":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:1627:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:2081:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:6731:5012":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:11818:3791":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:485:13175":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:1415:5403":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12687:3902":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:4929:17148":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:5357:17194":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"5:6838:3031":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4914:17146":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:13994:5753":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:47493:6068":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:7828:24329":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:994:5396":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:23443:5789":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:4397:3346":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:7159:5070":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:40130:2888":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:43120:2927":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:45298:5949":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:3039:3417":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:12204:3832":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:45017:12560":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:13322:20056":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:8165:4837":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:15410:4392":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:4346:6973":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:12913:5734":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:46731:5997":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:12108:3824":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:7350:18347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:23454:5790":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:8501:6244":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:8585:5286":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:6713:5002":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:41262:3541":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:5635:17223":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:8528:5280":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:2018:794":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:8233:19989":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:43652:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:12260:20159":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"2:42441:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:2082:1373":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:2715:3414":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:46226:5955":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:1657:14090":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:2998:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:3400:6130":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:14140:4095":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:6178:6581":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:4560:3346":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:3239:118":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:13798:4019":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:14520:4169":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:14043:4066":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:40934:5823":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:8789:150":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:1785:3320":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:4777:6995":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:8562:5718":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:6462:19980":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:2435:19116":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:40022:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:4915:2829":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:8361:6205":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"18:635:3543":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:7539:18355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:879:5385":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:11773:6183":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:1889:3365":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:14750:4217":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:22753:7163":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:22829:7165":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:15665:4466":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:45025:12562":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:7508:5127":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:10820:2970":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:3286:2823":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:12056:3818":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"11:1888:3340":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:5727:3719":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:9185:6287":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"11:1564:19044":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:47689:6101":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:1667:14091":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:12446:763":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:12280:3843":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:4844:4866":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:15315:4309":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:45037:12558":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:1230:6576":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:4174:6948":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:7954:3442":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"18:598:34509":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:6765:17939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:8336:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:15876:4516":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:6666:17927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:12176:3829":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:12444:744":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"1:12445:747":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:45287:30618":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"6:1643:14089":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:15946:4538":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:22186:5758":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:40735:5657":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:7986:13132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:2149:3094":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"16:6064:4834":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:45215:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:13871:4036":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:952:5405":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:10218:20043":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:3684:6903":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:6588:4972":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"17:13983:4053":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:3695:4855":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:13451:3967":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:7586:18359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:5622:17221":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:5628:6155":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:3001:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:586:13188":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:21919:3529":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:982:5393":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5450:17204":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:32624:5185":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:1645:5410":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:1401:5397":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:12787:3910":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:46632:5992":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:15777:4492":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:3307:29659":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:971:6804":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"11:2323:5397":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:13055:3766":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:14438:4159":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:9313:116":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:2479:6867":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:3731:2894":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"11:2440:3340":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:46763:5999":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"11:1893:3365":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:8627:6975":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:1982:6119":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:3092:33246":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:8827:6277":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:6125:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:10669:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:1625:14087":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:6822:6170":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:6283:3346":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:6658:4991":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:44459:5910":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:6711:3340":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:46710:5996":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:5428:17202":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:5991:6165":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:11753:6332":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:39972:2885":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:6950:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:5494:17210":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"11:1064:19043":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:42244:30697":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:14375:4148":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:11020:6312":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"2:44359:5908":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:6157:3357":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:15739:4485":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:5017:6958":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:7014:3400":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:41184:5675":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:1563:14082":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:6400:3426":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:7372:4839":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:11579:3770":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:44740:5927":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:16385:4669":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:908:3580":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"16:7386:5106":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:6389:4931":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:13554:3975":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"1:8226:6200":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:14652:4187":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:44277:3577":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:41083:5831":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:583:3586":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"14:0:2684":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"11:1907:5409":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:8094:6789":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:1597:14086":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:11817:5728":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:15573:4445":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:44106:5891":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:1489:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:12216:3834":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:528:1307":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"2:22894:3105":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"16:6914:5031":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:4826:24552":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:40137:5809":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"18:507:3519":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:3800:3320":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:47627:6084":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:46858:6018":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:13970:4052":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:6305:5674":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"18:608:3537":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:521:24249":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:7518:18354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:8267:17390":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"13:110:34469":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:2415:19089":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:3665:24300":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"18:491:3518":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:14963:4252":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:12452:895":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:8909:6283":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:9749:6197":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:4308:28389":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:8804:5881":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"3:0:510":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:2798:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:14573:4177":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"11:2380:5385":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:11268:6285":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"11:2533:34460":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:9295:6291":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:5288:17185":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:7869:12460":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:3249:2456":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:2242:129":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:44555:5914":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:11606:3741":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"12:0:2683":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:41205:5681":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:13969:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:7807:34496":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:7223:5084":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:40771:5812":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:14599:4180":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:7762:5517":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:16241:4639":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:46579:5989":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:10462:2932":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:8209:4835":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:14168:3410":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"5:7609:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12570:3893":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:45335:5416":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:5742:3720":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:8258:6124":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"0:37:2485":{"crate_id":0,"path":["scopeguard","guard_on_success"],"kind":"function"},"1:12455:1859":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:15981:4546":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:473:13173":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:5141:3346":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:9771:128":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"5:282:3320":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:6917:17972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:6781:5015":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:5127:17169":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:965:5390":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:3268:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:5282:6150":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:12009:6333":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:8013:6882":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"14:165:19050":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:22007:7080":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:16750:4763":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:11789:5726":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"18:698:3554":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:4015:6139":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:7463:18351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:2713:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:14460:4160":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:46410:5972":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:3456:3365":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:12743:5731":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:2645:6125":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:2612:3106":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"11:351:34443":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:11167:3449":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:5680:114":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"5:7284:3386":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:4218:6950":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:3768:2895":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:5007:17158":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:44887:5935":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:7818:31415":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:44250:5904":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:14099:4084":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:889:3323":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13157:3946":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:12976:3932":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:12306:3847":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"1:11049:26719":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:44608:5818":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:6535:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:6480:17914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:12448:920":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:15531:4438":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:46468:5976":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:9445:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:23465:5791":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:6794:5016":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"1:5802:7028":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:42516:7013":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:4957:17151":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:13385:3962":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:6740:17936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:10803:3577":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:11759:6182":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:46393:5971":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:12826:3912":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:6225:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"11:1140:5402":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"8:0:2679":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:11864:3794":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:21958:31330":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:6239:4909":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:16761:4764":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"0:40:2488":{"crate_id":0,"path":["scopeguard","guard_on_unwind"],"kind":"function"},"11:698:3031":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:5255:17181":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:10296:20046":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:7703:6803":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:12035:6186":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:4869:17141":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:14269:4125":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13733:4001":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:578:13187":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:8483:5276":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:2796:4818":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:6927:3320":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:5648:17225":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:5255:4879":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:13041:3942":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:8882:6145":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:5412:1258":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"14:40:4016":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:5217:17176":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:45083:5941":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:10391:2926":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:3716:31913":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:1220:3588":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:16555:4720":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:10549:3720":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:1869:6115":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:7746:24466":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:538:13181":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13818:4029":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:8302:17395":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:2950:4825":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:1487:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:7044:4836":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:41214:5682":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:16739:4762":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"15:288:19069":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:5192:7005":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:2900:4823":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:11592:3703":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:11427:6331":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:13854:4034":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:1616:5387":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5586:17218":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:2751:6126":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:5102:6996":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:13306:3958":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:42865:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:23509:5795":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"5:1002:5385":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:41063:5829":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:8121:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:5111:6997":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:47612:6083":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:2736:113":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:1489:14073":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:1617:5385":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:16218:4626":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:5488:17209":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:12149:3827":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:2966:4826":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:23983:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:40323:12311":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:5186:17173":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:13945:4049":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:8284:17392":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:961:5387":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:2585:6577":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:7424:19985":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:3834:4856":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:44267:5905":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:16084:4598":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:5051:17163":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12886:3923":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:2084:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:2477:3094":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:8263:6202":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:38730:2877":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:6144:19977":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:14084:4078":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:46273:5960":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:7899:3587":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:23373:6882":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:47082:6026":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:16775:4768":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"9:422:18965":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:45274:5946":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:7548:18356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:3691:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:12459:1933":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:7907:5204":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:11161:3448":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:5676:17228":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:14708:4196":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:7554:19986":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"11:1085:34449":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:11114:3740":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:3858:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"14:202:12249":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:6652:17925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:11623:5721":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:7212:5083":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:33881:2863":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:7557:3340":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13909:4042":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:10141:20041":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6882:17051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:41123:5835":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:11503:3761":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"1:8898:6282":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:6564:17919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:7211:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:14533:3862":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:10977:34504":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"18:538:3526":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:16332:4660":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:15549:4443":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:8612:4849":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:3697:2889":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10332:20047":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:8549:5848":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"18:726:3563":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:12816:3603":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:40839:5657":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:3096:33245":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"11:1105:5401":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:41227:5842":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:559:13184":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:13290:3678":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:8290:17393":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6337:4925":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:21956:31328":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:546:4781":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:6723:17934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"5:3931:3365":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:11757:20088":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:5689:4887":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:628:6783":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:13181:3948":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:10784:3722":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:8569:5913":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:10954:6323":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:15753:4488":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:40831:5818":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:5734:6158":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:13172:6862":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:10777:6130":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:10235:2948":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:7798:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:6381:17845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:6440:19979":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:12699:3903":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:7577:5511":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:1083:5133":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:3320:2881":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"9:328:19018":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:5462:17205":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"11:299:6573":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:5241:17179":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:15351:4340":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:5417:4884":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:12302:5729":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:10394:20049":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:7617:5512":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:12335:5730":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"16:4694:4863":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:7765:5164":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:3967:3340":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:13082:3742":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:10660:6284":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:8296:17394":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:212:3318":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:6680:4997":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"17:11026:34502":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:41056:5828":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"5:4208:5404":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:11041:26724":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:4482:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"11:102:34448":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:6368:4777":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:4184:4859":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:40150:5810":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:1690:14094":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:6813:17942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:1605:5386":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"11:2349:5399":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"11:1900:5408":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:2590:4809":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:7498:28385":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:23432:5788":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"11:430:34455":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:6114:3346":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:6573:4969":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:6852:5024":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:7938:5213":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:15475:4432":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:22843:3105":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"2:45208:151":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:14640:4186":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:11281:3743":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:16036:4561":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:10411:6313":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:11582:3450":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:5230:17178":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:13212:12235":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:8330:17398":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:13169:3947":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:6191:5672":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:12537:3890":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:3707:5385":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:12941:3929":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:3441:4853":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:13958:4051":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:1621:3031":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11678:3775":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:3126:19119":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11527:3765":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11788:3787":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:15887:4520":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:6808:4828":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:5125:6998":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:5060:4872":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:10597:3572":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:16668:4741":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:2710:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:11539:3766":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:9209:3031":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:13547:3974":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"17:12122:3825":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:15024:4267":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:1867:6114":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:14125:116":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:10448:129":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:12249:3840":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:5593:17219":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:22937:7158":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:5117:17168":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11515:3762":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:15064:4272":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"10:44:5417":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"18:670:3550":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:2332:6864":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:14358:4145":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:46497:5985":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:14405:4151":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"11:2137:5397":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"14:31:5376":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:47257:6060":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:45029:12563":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:3074:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:44574:5916":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:9463:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"11:1674:2498":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:12021:29908":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:12052:3456":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"1:2323:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:13349:3960":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:45005:12556":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:7333:24337":{"crate_id":1,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:11335:26556":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"11:396:3314":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:5525:3320":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:42791:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:6866:19982":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:4:1271":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"5:780:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:43627:5874":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:41152:5671":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:10368:20048":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:7528:5491":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:1624:3340":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:41143:5668":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:3338:5408":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:46343:5968":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:5131:3608":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"11:2551:34457":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:12044:3814":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:10973:24536":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"0:0:2559":{"crate_id":0,"path":["scopeguard"],"kind":"module"},"5:7567:3332":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:12973:5738":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:11617:3742":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:39924:2893":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:10443:120":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:6902:17971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8556:3577":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:46454:5975":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:12438:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:47455:6066":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11465:3758":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"5:726:5485":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:11065:6196":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:8669:5185":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:3703:2891":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:7487:18353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:8739:7009":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:43015:5713":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:2834:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:15852:4509":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:5357:5665":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:6942:5033":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:45266:5944":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:2045:678":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:47053:6025":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:12432:420":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:44126:5893":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"10:0:2681":{"crate_id":10,"path":["adler"],"kind":"module"},"2:47533:6072":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:4473:5658":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:41036:5827":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:5044:17162":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"9:0:2680":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:8539:5832":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:472:3582":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:40960:5825":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:44176:5896":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:4539:12276":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:11734:5724":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:41161:5837":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:5311:17188":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:3566:3346":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:15864:4515":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:47376:6063":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:16656:4739":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:12335:3852":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:3309:33630":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:43467:2938":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:2378:20115":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:2295:31942":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:42554:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:3487:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:11124:34506":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:10097:20039":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"16:8598:5289":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:40782:30625":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:4792:17136":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:14975:4254":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:6708:6169":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:45009:12559":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"18:623:34511":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:6876:17970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:15077:4273":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:15106:4276":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:42680:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:5282:4880":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:7601:3031":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:2920:4824":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:43446:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:3317:2880":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:12550:3892":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:31035:2846":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:3434:2892":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:4929:4869":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:5198:4877":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:44583:5740":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:12776:3909":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:46518:5986":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:8697:6144":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:5265:17182":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:22880:7166":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:32713:2825":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:10283:5860":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"16:8711:5298":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:14692:4191":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:2760:3388":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"1:12460:1435":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:45021:12564":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:506:3585":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:2816:33028":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:42754:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:10780:6132":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:3481:2533":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:4766:4864":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:680:3551":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:16198:4623":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"18:706:3556":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:0:568":{"crate_id":2,"path":["core"],"kind":"module"},"2:4827:3392":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:5298:438":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:47650:6085":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6521:17915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:45233:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:9142:6284":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:7990:5218":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"14:7:5376":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:5172:4876":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:12851:3921":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:23156:5761":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:12727:12528":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:5359:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:7341:18346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:4902:17145":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:6437:17909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:8756:6274":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:1650:5411":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:2146:3120":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:11353:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:46550:5988":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:14346:4143":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:1586:5389":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:7563:18357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:44037:5887":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:15701:4471":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:42350:5863":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:1555:3031":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:15621:4454":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"9:53:18981":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:15679:4467":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:46358:5969":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:7462:5120":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:7980:4843":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:11345:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:45324:5950":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:597:2967":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:3110:4850":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:7416:5109":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:14393:4149":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:7058:5046":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:4842:17140":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:8209:6198":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:2840:4820":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:9380:24566":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:47513:6070":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:3141:3613":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:6623:17922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:13119:3944":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:12347:3853":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:9172:6286":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:985:3328":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"11:1049:5399":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:11432:20067":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:2227:3591":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:36689:2873":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:4338:6972":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:40000:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:3086:33633":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:16297:4647":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:12648:3896":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:44590:5819":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:32638:2939":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:7003:5683":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:42216:6926":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:8892:5385":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:7789:34494":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:2530:4806":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:31056:2937":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:16595:4019":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:13448:120":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:3851:5492":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:22841:30665":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:6777:17941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:6700:17931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:42902:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:3364:5411":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:44545:5913":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:11720:3779":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:10863:3404":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"2:3279:2821":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:6904:5030":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"18:96:24238":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:40810:5816":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:6042:4832":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:5348:4882":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:3452:125":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12723:3905":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:41105:5833":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:8671:6263":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:16822:4046":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"11:0:2682":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:11804:26974":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:6449:17911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:43363:2937":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:16377:4666":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:12962:20185":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"18:80:24237":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"11:2301:5133":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"0:20:2487":{"crate_id":0,"path":["scopeguard","defer_on_unwind"],"kind":"macro"},"6:7577:18358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:1514:14077":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:22462:7082":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"18:481:3517":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:15973:4545":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:15896:4523":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"0:10:2462":{"crate_id":0,"path":["scopeguard","Strategy"],"kind":"trait"},"17:11733:20087":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:9423:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:13757:4015":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:923:5389":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:15997:4549":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:11309:3744":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:47476:6067":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:4330:6971":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:2325:6123":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:4699:6978":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:2148:3121":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:5664:6157":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:3073:124":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:11075:34501":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:22615:6882":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"14:160:5376":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:7192:19984":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13222:20054":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:2328:2520":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:23421:5787":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:31041:2847":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:16642:4735":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"5:7718:2976":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:42717:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:44852:5930":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:13471:3603":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:8565:5285":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:12385:6336":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:7016:5042":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:5541:17214":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:34082:2864":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:10696:3575":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:11492:5385":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:821:6929":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:6384:3408":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:8353:18929":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:45094:12577":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:8271:6203":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:34813:2872":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:13233:12233":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4947:17150":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:2729:3413":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:4970:17153":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:8261:17389":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:6443:17910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:46920:6020":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"9:390:18964":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:2222:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11065:3739":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:4152:4858":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:42362:6140":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:6814:5676":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"18:589:3530":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:364:3312":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:6028:4829":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:12449:902":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:5709:19976":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:523:13179":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:39888:2896":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:13592:3978":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:6890:4830":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:1711:14096":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:505:3411":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:0:1733":{"crate_id":1,"path":["std"],"kind":"module"},"1:936:3340":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:7471:5123":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:3347:6128":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:2790:6127":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:42594:5385":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:12583:3894":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:10418:20050":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:3720:5404":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:4605:5660":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:11958:3801":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:2368:31993":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:14072:4075":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:5395:17199":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:30773:6928":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:46681:5995":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12135:3826":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:6098:4894":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:1930:6118":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:9326:24358":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:42941:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:6041:3340":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:6843:5023":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:10516:20053":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:41276:5686":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:2052:2843":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:8199:3659":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:46837:6017":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"18:563:3528":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12920:3926":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:0:2687":{"crate_id":17,"path":["object"],"kind":"module"},"16:7949:4842":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:8371:6915":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:47302:6061":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:553:13183":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:9215:6160":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:8343:18928":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"11:881:5396":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:4404:4862":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:4485:5659":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:12736:3906":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:39309:2878":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:3088:33027":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:6159:4900":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:2486:4804":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:1727:14097":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:11787:6185":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:21929:31326":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:23050:5759":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:8792:6809":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"7:0:1923":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:9450:3437":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:4411:6141":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:41628:5692":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:7401:34488":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:42466:3031":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:43664:5881":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:6631:17923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:5107:17167":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:15160:4287":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:14997:4265":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:44513:5912":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:3522:2884":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:9584:6117":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:22965:7159":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:42978:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:14260:6805":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:12417:26560":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:13209:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:11088:26577":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:22791:7164":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:16264:4640":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:1696:6967":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:5349:17193":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"5:7645:3031":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:21975:31320":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:2995:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:6525:3364":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"18:113:24239":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:1633:5408":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:4116:6943":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:13095:3943":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:41092:5832":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:44877:5931":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:3686:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:13877:5840":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:15829:4506":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:22815:6882":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:1632:14088":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:8836:31584":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:32745:115":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:5562:17216":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:8298:5239":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:9193:5385":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12840:3917":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:6084:4890":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:44900:5939":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:4837:2939":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:11292:26722":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:16520:4690":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:988:5395":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:11383:26562":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:3349:6129":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:43635:5876":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"11:2121:5133":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:33185:2859":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:322:3580":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:23520:5796":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:21987:31323":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:11878:3741":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:6984:4848":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:8204:6197":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:14148:3408":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:5319:30649":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:16728:4757":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:12409:20160":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:23235:5768":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:7647:3039":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:12441:1831":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:6502:19088":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"0:68:2470":{"crate_id":0,"path":["scopeguard","Always"],"kind":"enum"},"16:896:4790":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:44261:5733":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:43880:30223":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:7716:34493":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:2348:33139":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:1589:14085":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:9367:6302":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:15439:4403":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:26383:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:44237:5901":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:10564:3570":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:8287:5492":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:3295:2862":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:8510:6136":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:2596:679":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"11:328:34447":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:32578:7030":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:13837:5748":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"6:8249:17387":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:46949:6021":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:5318:4881":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:4816:17138":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:14416:4152":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:42506:5867":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:6256:4914":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:10390:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:8798:12464":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:10998:3406":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"17:12860:3922":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:6063:3420":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:12008:3658":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:3343:33631":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:7178:7074":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"11:1023:5397":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:7909:6187":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:6308:3422":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:3072:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"16:4810:4865":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:8427:2897":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:11971:3802":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:7454:18350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:22066:7079":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:10167:20042":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:32656:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:4983:4871":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:7637:3031":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"9:480:18962":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:4573:3349":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:903:3579":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:1928:6117":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:6411:17907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:4946:2941":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:44441:5909":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"10:36:34441":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:10115:20040":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:12447:742":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"1:5541:129":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"18:643:3519":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:8273:17391":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12191:3831":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:43421:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:677:6107":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:12458:977":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:46600:5990":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:12371:3855":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:13570:20058":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:15689:4468":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"11:1920:5411":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6269:4915":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:23171:31144":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:5381:17197":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:4497:3349":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:12869:3967":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:12066:3819":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:3014:19117":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12018:3806":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:22174:6882":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:12035:3811":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:8636:19991":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:2620:4810":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:6205:19978":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:3854:3602":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:12798:20184":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:5126:12293":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:7316:14029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:16159:4611":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:11747:6178":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:6625:4975":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:3443:6132":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"11:1884:3031":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:661:6106":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:6408:4938":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:7431:14201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"18:651:3519":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:46808:6016":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11653:3773":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:10031:20038":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:40741:5811":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:46535:5987":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:16812:4774":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"5:7774:5520":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:40847:5819":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:15540:4442":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:2551:2695":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:6744:3434":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:13286:12241":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:8730:6264":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"2:2746:12208":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"2:8292:12465":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:4994:3418":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:3674:6880":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:3085:3091":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:10568:6584":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"6:517:13178":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:6544:17918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:43127:2929":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:9470:2538":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:9481:6177":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:8308:17396":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:45211:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:10477:7032":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:33397:2858":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:11953:6139":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:14832:4232":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:41008:6849":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:5319:17189":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:297:2899":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:34015:2865":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:46211:5952":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:14205:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:1838:12421":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"16:6822:19981":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:11358:20065":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:11541:5718":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:12406:6790":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:3402:6131":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"11:740:5387":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:43113:2928":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11291:34499":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:15431:4402":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:5334:17191":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:31441:3529":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:11926:3799":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:14917:4245":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:41669:5694":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:15655:4465":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:2992:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:10630:3573":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:10823:3581":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:13238:12232":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6691:17930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:3613:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:1370:5133":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:10938:34500":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4990:17156":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:1097:5397":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:5551:17215":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:10246:20044":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11016:3738":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:8137:4846":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:11803:5727":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:8028:5219":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:22923:6882":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:15989:4548":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:824:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:40927:5822":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:2495:6872":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:31414:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:13854:5751":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:9232:6290":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"11:1005:5133":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:491:13176":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:11798:26969":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:23476:5792":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"5:2162:5493":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:12759:12236":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:7521:5130":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:6680:17929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:1494:14074":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:465:13172":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:4875:17142":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:7086:3362":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:3866:5493":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:7392:3439":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:44599:5657":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"18:718:3560":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:9904:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:7896:3369":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:31003:2458":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:44723:5926":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:13014:3939":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:12453:1871":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:15586:4450":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:44413:5726":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:2011:6846":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:32620:5801":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:12373:3117":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:47502:6069":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:44495:5911":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:8575:6252":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:13719:4000":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:22:826":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:7448:18349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:3503:3599":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:5179:6966":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:2660:4812":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"18:581:3529":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:15557:4444":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:14055:4067":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:14483:4165":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:46305:5962":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:3375:2871":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:46290:5961":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:11696:5723":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:43408:30701":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:13427:3965":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"2:22078:5758":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13398:3964":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:12435:1893":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:5420:17201":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:12401:24479":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13635:3982":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:12028:6186":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:680:6109":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"0:34:2482":{"crate_id":0,"path":["scopeguard","guard"],"kind":"function"},"16:4873:4867":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:42200:5702":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:14773:4226":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:2684:4813":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:12457:1847":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:14845:4234":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:5520:17212":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"0:18:2479":{"crate_id":0,"path":["scopeguard","defer"],"kind":"macro"},"16:7075:19983":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:5507:17211":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:9742:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:15905:4524":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:5877:6159":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:5300:3357":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:23321:31120":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:5282:17184":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:7423:3440":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:12439:1707":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:12749:3907":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:39968:2883":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:15418:4395":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:4492:6142":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:10978:26966":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:15836:4507":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:6879:6173":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:45308:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:5984:6162":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:7361:18348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:5574:12223":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:2880:4822":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:5757:4888":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:1386:5399":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:43884:5716":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:6748:17937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:8080:6788":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:5144:4875":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:23352:6942":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:4298:3346":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:4328:3346":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:12931:3928":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:5649:4886":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:3910:6137":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"11:2559:34458":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:15090:4274":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:44565:5915":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:41435:5689":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:6704:5849":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:13028:3941":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:16187:4618":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:4940:6962":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:6173:4903":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:8345:2898":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:5224:17177":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:44198:5898":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:44291:5718":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:789:119":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"18:735:24247":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:14114:4090":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:41193:5841":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:22617:7078":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:15286:4289":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:3599:6255":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:8366:6206":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:7305:5098":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:10774:6128":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:14019:4062":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:14127:4094":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"0:19:2484":{"crate_id":0,"path":["scopeguard","defer_on_success"],"kind":"macro"},"1:685:6786":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:40:3316":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:16613:4029":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:7030:5044":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:7959:5216":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:40955:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"11:2148:5399":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:10663:3574":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:10793:3725":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"2:21941:31326":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:5424:3359":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"1:9308:6292":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:12450:908":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:573:2965":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"18:765:24248":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:4146:6945":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:42422:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:15785:4494":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:16362:4665":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:5863:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:6598:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:42184:5700":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:3536:5850":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:22058:6882":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:1684:14093":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:11553:3767":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:3676:2887":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:3889:3618":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:12392:3857":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:44137:5894":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:7752:12302":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:44673:12247":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:8105:5223":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:2860:4821":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:4829:17139":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10843:3727":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:4160:6946":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:41286:5845":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:10861:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:4133:3340":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:8288:12466":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:5670:17227":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:5271:17183":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:33609:2861":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:1569:14083":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:3297:5385":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:12095:3823":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:4956:4870":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:8014:4845":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:7391:14218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:8492:3565":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:5405:17200":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:10090:31585":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:11706:3777":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:4896:6999":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:13933:4046":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:7786:3358":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:11630:3772":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:497:13177":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"15:306:19070":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:8151:4847":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:40998:3577":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:6638:17924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:46875:6019":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:8723:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:6534:17917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12906:3925":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:437:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:8842:7023":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:5249:17180":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:42619:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:16632:4734":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:2437:3598":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:34149:2866":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:5682:17229":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12897:3924":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:7969:5217":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:23103:5760":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:11736:5881":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"2:3465:2460":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:15812:4498":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:3848:6927":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:5658:17226":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:12605:3741":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:3084:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:4976:17154":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:40986:5826":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"11:2466:3365":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:42475:5865":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:10450:2927":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"5:1539:5404":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:1339:3590":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:43643:5877":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:6970:4831":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:43134:2930":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"11:1580:5406":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:6738:34492":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:2506:4805":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:892:5404":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:2505:6877":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:155:3307":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:6893:3435":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:4902:4868":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:32655:2824":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:12762:3908":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:16323:4656":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:14796:4227":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:7168:5071":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:44218:5900":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:45033:12557":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:9347:6298":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"18:613:34512":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:1584:14084":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:5036:17161":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:13942:31295":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:4566:6143":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:3325:2882":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"6:5069:17165":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13610:3981":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:1539:14080":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:3237:2819":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:32743:2826":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:2820:4819":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:43429:2937":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:22005:6882":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:12437:1329":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:3305:2860":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:44918:5744":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:3244:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:22484:5757":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:7542:5132":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:11335:6882":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:5477:17207":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:44208:5899":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:6432:6168":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:11300:12576":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:4758:5661":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:5019:17159":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:14284:4129":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:6731:17935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:42458:5404":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:3987:3626":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"17:667:3587":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"7:79:18952":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:9428:3431":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"15:327:19074":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:16684:4746":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:47008:6024":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"6:4896:16977":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:14627:4185":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:22184:7077":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:1969:3346":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"11:1601:5407":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:10661:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"18:515:3516":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:570:13186":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:8000:4844":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"0:21:2498":{"crate_id":0,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"2:41237:5843":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:45013:12561":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:12456:1865":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:8252:128":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:7587:33123":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:11566:3768":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:6578:7169":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"6:5295:17186":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:1639:5409":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:9909:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:44788:5929":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:0:2686":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:42546:2977":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:14872:4236":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:41411:5848":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"11:2539:30467":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:46617:5991":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:3445:6133":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:8482:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:4908:811":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:44341:5907":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:47559:6074":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:15:2796":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:9583:5709":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:2406:3595":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:10409:6314":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:23328:5781":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:46439:5974":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:5971:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:10095:31372":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:11057:6263":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"2:40971:12507":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:22970:7157":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:11902:3798":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:46326:5967":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:378:2984":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:2467:4798":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:7880:3365":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:16798:4773":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:4208:6949":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:10534:3719":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:4110:6944":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:885:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:45225:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:5648:6156":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"11:1880:5385":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:9455:3438":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:11232:20068":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"14:187:19057":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:15036:4268":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:5205:17175":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:4267:4861":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:6749:4788":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:2256:2959":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:902:3031":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:545:13182":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:4222:6951":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:7259:3383":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:11851:3793":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:12625:3895":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:1595:5405":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10442:20051":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:12319:3850":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:8325:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:5113:4874":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:8320:19990":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:8626:5291":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:40080:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:11281:6286":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:7537:3031":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:4754:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:32631:5802":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:4884:3393":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"11:873:5395":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11777:3785":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"11:434:34451":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:4241:4860":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:5805:7029":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:7009:31142":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:12440:1741":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:13193:3949":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:11222:3742":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:13205:3950":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:15714:4477":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:4100:3031":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:4938:6961":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:22457:6882":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:41644:5693":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:10458:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:8199:18892":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:7337:5102":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:42402:5705":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:7120:3378":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:1106:5399":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:16494:4001":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:11932:6138":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"9:445:18963":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:4805:17137":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:0:1013":{"crate_id":6,"path":["libc"],"kind":"module"},"2:43353:30700":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:3656:2926":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:532:13180":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:6757:3320":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:16341:4662":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:11003:6199":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:6659:17926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:3493:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:32654:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:47434:6065":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:42515:6791":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"14:220:5383":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:8503:5277":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:2990:4827":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:7821:5522":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:15121:4280":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"0:74:2475":{"crate_id":0,"path":["scopeguard","OnSuccess"],"kind":"enum"},"4:0:2678":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:7731:5865":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:4822:24548":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:33948:2867":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:42162:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:14586:4178":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:10994:6305":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:7308:13225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:3290:2857":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:5366:17195":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:39985:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:1250:33156":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:4937:17149":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:4520:12207":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:1115:5403":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:16832:4051":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:7414:14203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:44088:5888":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:10487:20052":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"2:46425:5973":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:44309:5723":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:946:3365":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"5:4163:3320":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:7469:18352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:14001:4061":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:47522:6071":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:14547:4174":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:3470:2879":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"11:2400:5404":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"9:176:19031":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:6111:4899":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:40797:5815":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:16209:4624":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:1703:14095":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:23259:30599":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:45059:131":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:5057:17164":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:12359:3854":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:8115:6196":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:7753:12303":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:9436:3346":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:32645:5803":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:5305:3610":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:46649:5993":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:2148:5492":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:7350:5104":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:11661:5722":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:1521:14078":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:7734:5514":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:14612:4182":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:8100:6836":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"11:2420:3031":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"5:1214:33150":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:14933:4246":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:41659:3402":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:8675:7001":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:2724:4815":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:8058:5221":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:7495:5124":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:3720:3601":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:8586:6925":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:43380:30699":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:2969:12310":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:4120:4857":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:23341:5782":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:10983:6198":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:12524:3889":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:3694:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:3617:6135":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"11:1914:5410":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:6608:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:3493:6910":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:1524:5385":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:15963:4542":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:5301:17187":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:15010:4266":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:5085:4873":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:47574:6075":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:13838:4030":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:14821:4231":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:2748:4816":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:5379:4883":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:44189:5897":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:6696:5000":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:2610:3105":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:13491:3969":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:14507:4166":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"13:229:34470":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:10703:3445":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:15919:4531":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:46748:5998":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:16283:4645":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"9:500:5471":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:11386:20066":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:5570:17217":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:9244:7048":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:5441:17203":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:8319:17397":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6419:17908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:11173:34503":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:5313:6150":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:8008:18729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:14859:4235":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:23498:5794":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:8632:6976":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:6672:17928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:532:2959":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:11869:3452":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:4997:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:12220:3458":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:9400:6686":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"19:0:1306":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:2772:4817":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:38675:2876":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"11:842:6804":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:14947:4248":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:4677:6977":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:42610:3031":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:2550:4807":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:6123:4833":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:12082:3821":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:4893:2940":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:7358:4838":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:40040:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"15:0:2685":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:6611:17921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:766:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:8638:6259":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:41175:5840":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:44709:5923":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"13:0:2677":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:8096:5222":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:6421:4783":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:42328:30631":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:6018:3346":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:14738:4215":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:9201:6289":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:2704:4814":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:6876:5027":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:41133:134":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:43392:5254":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:6640:4977":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"5:6559:7168":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:5325:17190":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:14299:4134":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"2:3005:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:14335:4140":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:16399:4672":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:5088:17166":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:8652:6261":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:1628:3365":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:6708:17932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:12434:476":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:38565:2874":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5603:17220":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:5473:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:23221:30604":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"18:754:3569":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:42384:5703":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:5471:17206":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:47597:6082":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:7545:5510":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:2266:5495":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"18:659:3544":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:7692:5513":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11805:3790":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:47405:6064":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:47180:6059":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:8029:2971":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"11:809:3365":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:1500:14075":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:34467:2869":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"9:355:18978":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:8034:2973":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:23294:30607":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:11952:3800":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"11:854:5393":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:6599:17920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:5165:17172":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:13027:5720":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:4527:3346":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:9440:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:10390:6116":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"6:6770:17940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:12989:5739":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:2803:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:564:13185":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:2968:6882":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"18:0:2688":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:6302:4922":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:40854:12299":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:41650:5850":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:4936:6959":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:1577:5388":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:6473:17913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:10274:20045":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:16132:4599":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:2989:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:4899:6977":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:8014:2986":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:12461:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:3308:4795":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:5834:3362":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:10409:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:3304:5409":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:11032:6136":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:22060:7076":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:7368:7001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:32714:2827":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:44815:5743":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:42602:5404":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:3310:29799":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:4964:17152":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:44116:5892":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:22496:31321":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:14220:4100":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:40060:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"11:798:3340":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:46664:5994":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"11:2366:5414":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"6:1530:14079":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:40942:5824":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:23243:5769":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:5533:17213":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:13006:3937":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:7816:24352":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"6:7604:18360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:4497:110":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:43682:5886":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:15641:4462":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:13266:20055":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:2518:6879":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"17:13692:3992":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:6758:17938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:14560:4175":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:16701:4748":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:11775:5725":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:13662:3988":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:38620:2875":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:44163:5829":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:479:13174":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:14672:4190":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:15769:4490":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:11584:5720":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:2493:6871":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:12711:3904":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:5870:3427":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:8519:6881":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:929:3326":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:7919:5205":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:6188:4905":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:23531:5797":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:15760:4489":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:7110:3376":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:7811:5521":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:1675:14092":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5641:17224":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:10452:2928":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:22709:7162":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:42450:5385":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:44395:5725":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:47548:6073":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:11516:5404":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:15136:3928":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:8267:5235":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:9274:7049":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"0:71:2473":{"crate_id":0,"path":["scopeguard","OnUnwind"],"kind":"enum"},"11:708:5386":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:11401:3751":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:5151:17171":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13781:4016":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}