{"root":"0:0:2582","crate_version":"1.2.0","includes_private":false,"index":{"b:2:3092-0:74:2498":{"id":"b:2:3092-0:74:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13665:6077":{"id":"2:13665:6077","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12451:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44381:6057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13725:32682":{"id":"2:13725:32682","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13326:12255","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12451:490","str::match_indices":"2:13722:32681"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44573:6062","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:12253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3077-0:74:2498":{"id":"b:2:3077-0:74:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:3040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3335:2844-0:21:2521":{"id":"a:2:3335:2844-0:21:2521","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3335:2844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3335:2844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3335:2844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13648:27244":{"id":"2:13648:27244","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12470:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17:2488":{"id":"0:17:2488","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[247,4],"end":[249,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:2496":{"id":"0:71:2496","crate_id":0,"name":"OnUnwind","span":{"filename":"src/lib.rs","begin":[220,0],"end":[220,20]},"visibility":"public","docs":"Run on scope exit through unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:32827:2847-0:71:2496","a:2:32768:248-0:71:2496","a:2:3335:2844-0:71:2496","a:2:42628:6811-0:71:2496","a:2:42629:7033-0:71:2496","a:2:3300:260-0:71:2496","b:2:2775-0:71:2496","b:2:2772-0:71:2496","b:2:3092-0:71:2496","b:2:3943-0:71:2496","b:2:3087-0:71:2496","b:2:3081-0:71:2496","b:2:3077-0:71:2496","0:72","0:14"]}}},"a:2:3335:2844-0:68:2493":{"id":"a:2:3335:2844-0:68:2493","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3335:2844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2775-0:74:2498":{"id":"b:2:2775-0:74:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:24274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13658:32676":{"id":"2:13658:32676","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12457:1765","crate::ops::IndexMut":"2:3605:2906","str::slice_unchecked":"2:13657:32675"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13672:27284":{"id":"2:13672:27284","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:12255"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13735:32687":{"id":"2:13735:32687","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13763:25490":{"id":"2:13763:25490","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13646:32674":{"id":"2:13646:32674","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13698:32678":{"id":"2:13698:32678","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13326:12255","str::split":"2:13689:27272","prim@char":"1:12451:490","`DoubleEndedIterator`":"2:8476:133","str::rsplit_terminator":"2:13701:32679"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44455:6059","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[455,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3576:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3548:2483","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:57:653"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2775-0:21:2521":{"id":"b:2:2775-0:21:2521","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2777:24274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:67:827":{"id":"0:67:827","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[486,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:2505":{"id":"0:34:2505","crate_id":0,"name":"guard","span":{"filename":"src/lib.rs","begin":[375,0],"end":[380,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"Always","id":"0:68:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3576:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13640:32672":{"id":"2:13640:32672","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2772-0:74:2498":{"id":"b:2:2772-0:74:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:2805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70:827":{"id":"0:70:827","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[480,0],"end":[491,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3576:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:67:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2774:2805":{"id":"2:2774:2805","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:2542":{"id":"0:33:2542","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[357,4],"end":[369,5]},"visibility":"public","docs":"“Defuse” the guard and extract the value without calling the closure.\n\n```\nextern crate scopeguard;\n\nuse scopeguard::{guard, ScopeGuard};\n\nfn conditional() -> bool { true }\n\nfn main() {\n    let mut guard = guard(Vec::new(), |mut v| v.clear());\n    guard.push(1);\n\n    if conditional() {\n        // a condition maybe makes us decide to\n        // “defuse” the guard and get back its inner parts\n        let value = ScopeGuard::into_inner(guard);\n    } else {\n        // guard still exists in this branch\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["guard",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11:2488":{"id":"0:11:2488","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,28]},"visibility":"default","docs":"Return `true` if the guard’s associated code should run\n(in the context where this method is called).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13692:27274":{"id":"2:13692:27274","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:12255"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13141:5873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3092-0:68:2493":{"id":"b:2:3092-0:68:2493","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:32:2530":{"id":"0:32:2530","crate_id":0,"name":"with_strategy","span":{"filename":"src/lib.rs","begin":[326,4],"end":[332,5]},"visibility":"public","docs":"Create a `ScopeGuard` that owns `v` (accessible through deref) and calls\n`dropfn` when its destructor runs.\n\nThe `Strategy` decides whether the scope guard's closure should run.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3335:2844-0:74:2498":{"id":"a:2:3335:2844-0:74:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3335:2844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13664:5894":{"id":"2:13664:5894","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12451:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44375:5886","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13668:30247":{"id":"2:13668:30247","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13667:30156"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44688:6068","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5738:33392":{"id":"5:5738:33392","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13647:350":{"id":"2:13647:350","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13648:27244","`u8`":"1:12470:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13701:32679":{"id":"2:13701:32679","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13326:12255","str::split":"2:13689:27272","prim@char":"1:12451:490","str::split_terminator":"2:13698:32678"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44473:6060","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:12253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13636":{"id":"2:13636","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13637:1024","2:13638:3047","2:13639:32671","2:13640:32672","2:13642:32673","2:13645:27138","2:13646:32674","2:13647:350","2:13648:27244","2:13649:2566","2:13651:27241","2:13653:27242","2:13655:27243","2:13657:32675","2:13658:32676","2:13659:27266","2:13660:27267","2:13661:27270","2:13662:27271","2:13664:5894","2:13665:6077","2:13666:5671","2:13667:30156","2:13668:30247","2:13669:29523","2:13670:32677","2:13671:30238","2:13672:27284","2:13675:27285","2:13678:27286","2:13681:3087","2:13685:3046","2:13689:27272","2:13692:27274","2:13695:27276","2:13698:32678","2:13701:32679","2:13704:27278","2:13707:27280","2:13710:27282","2:13713:27283","2:13716:2817","2:13719:32680","2:13722:32681","2:13725:32682","2:13728:32683","2:13730:32684","2:13732:32685","2:13734:32686","2:13735:32687","2:13736:32688","2:13739:32689","2:13742:24579","2:13745:27287","2:13748:32690","2:13751:32691","2:13754:32692","2:13757:32693","2:13759:25484","2:13760:27188","2:13761:25488","2:13762:25489","2:13763:25490","2:13764:27191","2:13765:27192","2:13766:27193","2:13767:32694","2:13769:6804","2:13770:32695"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13695:27276":{"id":"2:13695:27276","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13326:12255","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12451:490","str::split":"2:13689:27272"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44423:5876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:12253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13637:1024":{"id":"2:13637:1024","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12451:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3300:260-0:74:2498":{"id":"a:2:3300:260-0:74:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32827:2847-0:68:2493":{"id":"a:2:32827:2847-0:68:2493","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32827:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32768:248-0:68:2493":{"id":"a:2:32768:248-0:68:2493","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:37:2508":{"id":"0:37:2508","crate_id":0,"name":"guard_on_success","span":{"filename":"src/lib.rs","begin":[388,0],"end":[393,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnSuccess","id":"0:74:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3576:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:2502":{"id":"0:18:2502","crate_id":0,"name":"defer","span":{"filename":"src/lib.rs","begin":[257,0],"end":[261,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (always run).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer {\n    ($($t:tt)*) => { ... };\n}"}},"2:3090:149":{"id":"2:3090:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:2:3943-0:71:2496":{"id":"b:2:3943-0:71:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[315,0],"end":[370,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3576:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:32:2530","0:33:2542"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3081-0:71:2496":{"id":"b:2:3081-0:71:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:2485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:15:2488"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2582":{"id":"0:0:2582","crate_id":0,"name":"scopeguard","span":{"filename":"src/lib.rs","begin":[1,0],"end":[595,1]},"visibility":"public","docs":"A scope guard will run a given closure when it goes out of scope,\neven if the code between panics.\n(as long as panic doesn't abort)\n\n# Examples\n\n## Hello World\n\nThis example creates a scope guard with an example function:\n\n```\nextern crate scopeguard;\n\nfn f() {\n    let _guard = scopeguard::guard((), |_| {\n        println!(\"Hello Scope Exit!\");\n    });\n\n    // rest of the code here.\n\n    // Here, at the end of `_guard`'s scope, the guard's closure is called.\n    // It is also called if we exit this scope through unwinding instead.\n}\n# fn main() {\n#    f();\n# }\n```\n\n## `defer!`\n\nUse the `defer` macro to run an operation at scope exit,\neither regular scope exit or during unwinding from a panic.\n\n```\n#[macro_use(defer)] extern crate scopeguard;\n\nuse std::cell::Cell;\n\nfn main() {\n    // use a cell to observe drops during and after the scope guard is active\n    let drop_counter = Cell::new(0);\n    {\n        // Create a scope guard using `defer!` for the current scope\n        defer! {\n            drop_counter.set(1 + drop_counter.get());\n        }\n\n        // Do regular operations here in the meantime.\n\n        // Just before scope exit: it hasn't run yet.\n        assert_eq!(drop_counter.get(), 0);\n\n        // The following scope end is where the defer closure is called\n    }\n    assert_eq!(drop_counter.get(), 1);\n}\n```\n\n## Scope Guard with Value\n\nIf the scope guard closure needs to access an outer value that is also\nmutated outside of the scope guard, then you may want to use the scope guard\nwith a value. The guard works like a smart pointer, so the inner value can\nbe accessed by reference or by mutable reference.\n\n### 1. The guard owns a file\n\nIn this example, the scope guard owns a file and ensures pending writes are\nsynced at scope exit.\n\n```\nextern crate scopeguard;\n\nuse std::fs::*;\nuse std::io::{self, Write};\n# // Mock file so that we don't actually write a file\n# struct MockFile;\n# impl MockFile {\n#     fn create(_s: &str) -> io::Result<Self> { Ok(MockFile) }\n#     fn write_all(&self, _b: &[u8]) -> io::Result<()> { Ok(()) }\n#     fn sync_all(&self) -> io::Result<()> { Ok(()) }\n# }\n# use self::MockFile as File;\n\nfn try_main() -> io::Result<()> {\n    let f = File::create(\"newfile.txt\")?;\n    let mut file = scopeguard::guard(f, |f| {\n        // ensure we flush file at return or panic\n        let _ = f.sync_all();\n    });\n    // Access the file through the scope guard itself\n    file.write_all(b\"test me\\n\").map(|_| ())\n}\n\nfn main() {\n    try_main().unwrap();\n}\n\n```\n\n### 2. The guard restores an invariant on scope exit\n\n```\nextern crate scopeguard;\n\nuse std::mem::ManuallyDrop;\nuse std::ptr;\n\n// This function, just for this example, takes the first element\n// and inserts it into the assumed sorted tail of the vector.\n//\n// For optimization purposes we temporarily violate an invariant of the\n// Vec, that it owns all of its elements.\n//\n// The safe approach is to use swap, which means two writes to memory,\n// the optimization is to use a “hole” which uses only one write of memory\n// for each position it moves.\n//\n// We *must* use a scope guard to run this code safely. We\n// are running arbitrary user code (comparison operators) that may panic.\n// The scope guard ensures we restore the invariant after successful\n// exit or during unwinding from panic.\nfn insertion_sort_first<T>(v: &mut Vec<T>)\n    where T: PartialOrd\n{\n    struct Hole<'a, T: 'a> {\n        v: &'a mut Vec<T>,\n        index: usize,\n        value: ManuallyDrop<T>,\n    }\n\n    unsafe {\n        // Create a moved-from location in the vector, a “hole”.\n        let value = ptr::read(&v[0]);\n        let mut hole = Hole { v: v, index: 0, value: ManuallyDrop::new(value) };\n\n        // Use a scope guard with a value.\n        // At scope exit, plug the hole so that the vector is fully\n        // initialized again.\n        // The scope guard owns the hole, but we can access it through the guard.\n        let mut hole_guard = scopeguard::guard(hole, |hole| {\n            // plug the hole in the vector with the value that was // taken out\n            let index = hole.index;\n            ptr::copy_nonoverlapping(&*hole.value, &mut hole.v[index], 1);\n        });\n\n        // run algorithm that moves the hole in the vector here\n        // move the hole until it's in a sorted position\n        for i in 1..hole_guard.v.len() {\n            if *hole_guard.value >= hole_guard.v[i] {\n                // move the element back and the hole forward\n                let index = hole_guard.index;\n                hole_guard.v.swap(index, index + 1);\n                hole_guard.index += 1;\n            } else {\n                break;\n            }\n        }\n\n        // When the scope exits here, the Vec becomes whole again!\n    }\n}\n\nfn main() {\n    let string = String::from;\n    let mut data = vec![string(\"c\"), string(\"a\"), string(\"b\"), string(\"d\")];\n    insertion_sort_first(&mut data);\n    assert_eq!(data, vec![\"a\", \"b\", \"c\", \"d\"]);\n}\n\n```\n\n\n# Crate Features\n\n- `use_std`\n  + Enabled by default. Enables the `OnUnwind` and `OnSuccess` strategies.\n  + Disable to use `no_std`.\n\n# Rust Version\n\nThis version of the crate requires Rust 1.20 or later.\n\nThe scopeguard 1.x release series will use a carefully considered version\nupgrade policy, where in a later 1.x version, we will raise the minimum\nrequired Rust version.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/scopeguard/1/\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:2485","0:68:2493","0:71:2496","0:74:2498","0:21:2521","0:34:2505","0:37:2508","0:40:2511","0:18:2502","0:19:2507","0:20:2510"],"is_stripped":false}}},"2:13662:27271":{"id":"2:13662:27271","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13661:27270"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13651:27241":{"id":"2:13651:27241","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42537:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13719:32680":{"id":"2:13719:32680","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13326:12255","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12451:490","str::matches":"2:13716:2817"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44627:6064","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:12253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13678:27286":{"id":"2:13678:27286","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:12255"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:12253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42629:7033-0:68:2493":{"id":"a:2:42629:7033-0:68:2493","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42629:7033","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3945:1865":{"id":"2:3945:1865","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40252:5681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3335:2844-0:71:2496":{"id":"a:2:3335:2844-0:71:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3335:2844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13759:25484":{"id":"2:13759:25484","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13761:25488":{"id":"2:13761:25488","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13762:25489":{"id":"2:13762:25489","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3077-0:68:2493":{"id":"b:2:3077-0:68:2493","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:3040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5727:33390":{"id":"5:5727:33390","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3087-0:21:2521":{"id":"b:2:3087-0:21:2521","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3300:260-0:68:2493":{"id":"a:2:3300:260-0:68:2493","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2772-0:68:2493":{"id":"b:2:2772-0:68:2493","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:2805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3081-0:74:2498":{"id":"b:2:3081-0:74:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[443,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3576:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3535:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:51:262","0:52:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13707:27280":{"id":"2:13707:27280","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12451:490","str::splitn":"2:13704:27278","self::pattern":"2:13326:12255"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44527:5879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:12253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13742:24579":{"id":"2:13742:24579","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:12255"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5723:33389":{"id":"5:5723:33389","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2919","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2919","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32827:2847-0:71:2496":{"id":"a:2:32827:2847-0:71:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32827:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:13:2488":{"id":"0:13:2488","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[231,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2772-0:21:2521":{"id":"b:2:2772-0:21:2521","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2774:2805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13660:27267":{"id":"2:13660:27267","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13659:27266","str::split_at_mut_checked":"2:13662:27271"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42628:6811-0:71:2496":{"id":"a:2:42628:6811-0:71:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42628:6811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3083:857":{"id":"2:3083:857","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2772-0:71:2496":{"id":"b:2:2772-0:71:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:2805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32827:2847-0:21:2521":{"id":"a:2:32827:2847-0:21:2521","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32827:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32827:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32827:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42628:6811-0:21:2521":{"id":"a:2:42628:6811-0:21:2521","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42628:6811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42628:6811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42628:6811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13670:32677":{"id":"2:13670:32677","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44669:6066","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13671:30238":{"id":"2:13671:30238","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44697:5893","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13722:32681":{"id":"2:13722:32681","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13326:12255","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12451:490","str::rmatch_indices":"2:13725:32682"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44555:6061","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13766:27193":{"id":"2:13766:27193","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:37477"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12":{"id":"0:12","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,0],"end":[234,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:2485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:13:2488"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[435,0],"end":[441,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3576:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:20:2510":{"id":"0:20:2510","crate_id":0,"name":"defer_on_unwind","span":{"filename":"src/lib.rs","begin":[285,0],"end":[289,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on unwinding from panic).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_unwind {\n    ($($t:tt)*) => { ... };\n}"}},"b:2:2775-0:71:2496":{"id":"b:2:2775-0:71:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:24274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13739:32689":{"id":"2:13739:32689","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:12255"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13661:27270":{"id":"2:13661:27270","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13662:27271"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13760:27188":{"id":"2:13760:27188","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40436:12331","Self::is_ascii":"2:13759:25484"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40436:12331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13685:3046":{"id":"2:13685:3046","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42537:202","prim@char":"1:12451:490","self::pattern":"2:13326:12255"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:12253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42629:7033-0:74:2498":{"id":"a:2:42629:7033-0:74:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42629:7033","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:70:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:52:651":{"id":"0:52:651","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[450,4],"end":[452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13713:27283":{"id":"2:13713:27283","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:12253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5730:33391":{"id":"5:5730:33391","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:262":{"id":"0:51:262","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[448,4],"end":[448,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:10:2485":{"id":"0:10:2485","crate_id":0,"name":"Strategy","span":{"filename":"src/lib.rs","begin":[201,0],"end":[205,1]},"visibility":"public","docs":"Controls in which cases the associated code should be run","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:11:2488"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:12","0:16","0:14"]}}},"2:13638:3047":{"id":"2:13638:3047","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5739:33393":{"id":"5:5739:33393","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2919","`String`":"5:7802:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2919","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:57:653":{"id":"0:57:653","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[460,4],"end":[462,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15:2488":{"id":"0:15:2488","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[239,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3077-0:21:2521":{"id":"b:2:3077-0:21:2521","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3080:3040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13653:27242":{"id":"2:13653:27242","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13704:27278":{"id":"2:13704:27278","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:12255","str::rsplitn":"2:13707:27280"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44509:5878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42629:7033-0:71:2496":{"id":"a:2:42629:7033-0:71:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42629:7033","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3943-0:21:2521":{"id":"b:2:3943-0:21:2521","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3081-0:21:2521":{"id":"b:2:3081-0:21:2521","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:40:2511":{"id":"0:40:2511","crate_id":0,"name":"guard_on_unwind","span":{"filename":"src/lib.rs","begin":[425,0],"end":[430,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.\n\n## Examples\n\nFor performance reasons, or to emulate “only run guard on unwind” in\nno-std environments, we can also use the default guard and simply manually\ndefuse it at the end of scope like the following example. (The performance\nreason would be if the [`OnUnwind`]'s call to [std::thread::panicking()] is\nan issue.)\n\n```\nextern crate scopeguard;\n\nuse scopeguard::ScopeGuard;\n# fn main() {\n{\n    let guard = scopeguard::guard((), |_| {});\n\n    // rest of the code here\n\n    // we reached the end of scope without unwinding - defuse it\n    ScopeGuard::into_inner(guard);\n}\n# }\n```","links":{"std::thread::panicking()":"1:530:1324","`OnUnwind`":"0:71:2496"},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnUnwind","id":"0:71:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3576:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13767:32694":{"id":"2:13767:32694","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5149:32694"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44704:5971","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3087-0:74:2498":{"id":"b:2:3087-0:74:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13748:32690":{"id":"2:13748:32690","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:12255"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:12253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2777:24274":{"id":"2:2777:24274","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:2507":{"id":"0:19:2507","crate_id":0,"name":"defer_on_success","span":{"filename":"src/lib.rs","begin":[271,0],"end":[275,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on successful scope exit).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_success {\n    ($($t:tt)*) => { ... };\n}"}},"5:5722":{"id":"5:5722","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5723:33389","5:5724:2863","5:5727:33390","5:5730:33391","5:5738:33392","5:5739:33393","5:5740:6936","5:5741:25486","5:5742:25487"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2775-0:68:2493":{"id":"b:2:2775-0:68:2493","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:24274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3080:3040":{"id":"2:3080:3040","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3054:156"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[465,0],"end":[478,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3576:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3564:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:62:693"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13649:2566":{"id":"2:13649:2566","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42537:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13666:5671":{"id":"2:13666:5671","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44391:3729","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13734:32686":{"id":"2:13734:32686","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5724:2863":{"id":"5:5724:2863","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3943-0:74:2498":{"id":"b:2:3943-0:74:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13770:32695":{"id":"2:13770:32695","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5147:32695"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44722:5970","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3096:1850":{"id":"2:3096:1850","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42667:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32827:2847-0:74:2498":{"id":"a:2:32827:2847-0:74:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32827:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32768:248-0:21:2521":{"id":"a:2:32768:248-0:21:2521","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42629:7033-0:21:2521":{"id":"a:2:42629:7033-0:21:2521","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42629:7033","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42629:7033","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42629:7033","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13657:32675":{"id":"2:13657:32675","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12457:1765","str::slice_mut_unchecked":"2:13658:32676","crate::ops::Index":"2:40083:2905"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13716:2817":{"id":"2:13716:2817","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13326:12255","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12451:490","str::rmatches":"2:13719:32680"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44609:6063","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3300:260-0:71:2496":{"id":"a:2:3300:260-0:71:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13730:32684":{"id":"2:13730:32684","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13645:27138":{"id":"2:13645:27138","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12873:12256"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13728:32683":{"id":"2:13728:32683","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5741:25486":{"id":"5:5741:25486","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13762:25489"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:2498":{"id":"0:74:2498","crate_id":0,"name":"OnSuccess","span":{"filename":"src/lib.rs","begin":[227,0],"end":[227,21]},"visibility":"public","docs":"Run on regular scope exit, when not unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:32827:2847-0:74:2498","a:2:32768:248-0:74:2498","a:2:3335:2844-0:74:2498","a:2:42628:6811-0:74:2498","a:2:42629:7033-0:74:2498","a:2:3300:260-0:74:2498","b:2:2775-0:74:2498","b:2:2772-0:74:2498","b:2:3092-0:74:2498","b:2:3943-0:74:2498","b:2:3087-0:74:2498","b:2:3081-0:74:2498","b:2:3077-0:74:2498","0:75","0:16"]}}},"b:2:3077-0:71:2496":{"id":"b:2:3077-0:71:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:3040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3087-0:71:2496":{"id":"b:2:3087-0:71:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3092-0:21:2521":{"id":"b:2:3092-0:21:2521","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2521","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13710:27282":{"id":"2:13710:27282","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:68:2493":{"id":"b:2:3081-0:68:2493","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3095:149":{"id":"2:3095:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32692:7050","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13655:27243":{"id":"2:13655:27243","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[250,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:2485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:17:2488"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3091:1852":{"id":"2:3091:1852","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42667:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:693":{"id":"0:62:693","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[470,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:2493":{"id":"0:68:2493","crate_id":0,"name":"Always","span":{"filename":"src/lib.rs","begin":[213,0],"end":[213,18]},"visibility":"public","docs":"Always run on scope exit.\n\n“Always” run: on regular exit from a scope or on unwinding from a panic.\nCan not run on abort, process exit, and other catastrophic events where\ndestructors don’t run.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:32827:2847-0:68:2493","a:2:32768:248-0:68:2493","a:2:3335:2844-0:68:2493","a:2:42628:6811-0:68:2493","a:2:42629:7033-0:68:2493","a:2:3300:260-0:68:2493","b:2:2775-0:68:2493","b:2:2772-0:68:2493","b:2:3092-0:68:2493","b:2:3943-0:68:2493","b:2:3087-0:68:2493","b:2:3081-0:68:2493","b:2:3077-0:68:2493","0:12","0:69"]}}},"2:13639:32671":{"id":"2:13639:32671","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13754:32692":{"id":"2:13754:32692","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:12255"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:12253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13669:29523":{"id":"2:13669:29523","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44659:6065","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42628:6811-0:74:2498":{"id":"a:2:42628:6811-0:74:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42628:6811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:73:827":{"id":"0:73:827","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13732:32685":{"id":"2:13732:32685","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3087-0:68:2493":{"id":"b:2:3087-0:68:2493","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13751:32691":{"id":"2:13751:32691","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:12255"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13659:27266":{"id":"2:13659:27266","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13661:27270","str::split_at_mut":"2:13660:27267"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5740:6936":{"id":"5:5740:6936","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13769:6804":{"id":"2:13769:6804","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5150:6804"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44713:5810","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13642:32673":{"id":"2:13642:32673","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13640:32672"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3092-0:71:2496":{"id":"b:2:3092-0:71:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13689:27272":{"id":"2:13689:27272","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13326:12255","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12451:490","str::split_whitespace":"2:13667:30156","str::rsplit":"2:13695:27276"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44405:5871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13757:32693":{"id":"2:13757:32693","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13287:148","`FromStr`":"2:13286:6882"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42667:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13286:6882","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13286:6882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13764:27191":{"id":"2:13764:27191","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:37477"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13675:27285":{"id":"2:13675:27285","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:12255"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3943-0:68:2493":{"id":"b:2:3943-0:68:2493","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:21:2521":{"id":"0:21:2521","crate_id":0,"name":"ScopeGuard","span":{"filename":"src/lib.rs","begin":[304,0],"end":[313,1]},"visibility":"public","docs":"`ScopeGuard` is a scope guard that may own a protected value.\n\nIf you place a guard in a local variable, the closure can\nrun regardless how you leave the scope — through regular return or panic\n(except if panic or other code aborts; so as long as destructors run).\nIt is run only once.\n\nThe `S` parameter for [`Strategy`](trait.Strategy.html) determines if\nthe closure actually runs.\n\nThe guard's closure will be called with the held value in the destructor.\n\nThe `ScopeGuard` implements `Deref` so that you can access the inner value.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Always","id":"0:68:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3576:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:28","a:2:32827:2847-0:21:2521","a:2:32768:248-0:21:2521","a:2:3335:2844-0:21:2521","a:2:42628:6811-0:21:2521","a:2:42629:7033-0:21:2521","b:2:2775-0:21:2521","b:2:2772-0:21:2521","b:2:3092-0:21:2521","b:2:3943-0:21:2521","b:2:3087-0:21:2521","b:2:3081-0:21:2521","b:2:3077-0:21:2521","0:58","0:53","0:63","0:47","0:43"]}}},"0:76:827":{"id":"0:76:827","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5742:25487":{"id":"5:5742:25487","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13763:25490"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13681:3087":{"id":"2:13681:3087","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42537:202","prim@char":"1:12451:490","self::pattern":"2:13326:12255"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32768:248-0:71:2496":{"id":"a:2:32768:248-0:71:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13745:27287":{"id":"2:13745:27287","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:12255"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:12253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32768:248-0:74:2498":{"id":"a:2:32768:248-0:74:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13667:30156":{"id":"2:13667:30156","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13668:30247"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44679:6067","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13765:27192":{"id":"2:13765:27192","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:37477"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42628:6811-0:68:2493":{"id":"a:2:42628:6811-0:68:2493","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42628:6811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13736:32688":{"id":"2:13736:32688","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:12255"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13352:12252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:16728:4909":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:15812:4650":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"11:1920:5563":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:6580:7189":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:11163:3893":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:706:3708":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:5381:17216":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:4902:5020":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:3441:5005":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:5019:17178":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:42535:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:6159:5052":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:38735:2897":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:8049:2990":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:45388:6098":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:31555:3681":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:11848:5877":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:13537:4080":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:41524:6000":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:11810:5876":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:6910:5829":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:1530:14098":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:6813:17961":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"10:0:2705":{"crate_id":10,"path":["adler"],"kind":"module"},"2:4699:5813":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:8273:17410":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:5676:17247":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:297:2919":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"7:32:18964":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:6748:17956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"16:5649:5038":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:7707:6823":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:7030:5196":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:3780:2911":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:3338:5560":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:8209:4987":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:32759:5956":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:8438:176":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:11775:5875":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:41782:5847":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"18:563:3680":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:40436:12331":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:6781:5167":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:12550:4044":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:2802:12228":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"16:6998:5187":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:23568:5943":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:12452:1917":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:13515:20076":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"9:176:19050":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:497:13196":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:8302:17414":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:11818:3943":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:44364:6056":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:4225:6971":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:3539:6002":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:13055:3918":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:10115:20059":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:12475:993":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:8546:5434":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:16283:4797":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:47167:6177":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:7428:3649":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:3496:6930":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:41757:5846":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:2860:4973":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:15665:4618":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:3092:33503":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:10823:3733":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:5151:17190":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:1619:5537":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:38845:2899":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:46404:6113":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"0:10:2485":{"crate_id":0,"path":["scopeguard","Strategy"],"kind":"trait"},"11:328:34472":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:5319:17208":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:12458:1855":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:10534:3871":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:6942:5185":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:42629:7033":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"18:726:3715":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:11706:3929":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:5993:6317":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"18:608:3689":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:44609:6063":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:10296:20065":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:8014:4997":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:44902:6081":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:16761:4916":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:9496:6456":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:41006:5973":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:6211:3636":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:679:6259":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:22576:7102":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:16241:4791":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:1675:14111":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:12648:4048":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:14902:4393":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:40039:2915":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:12052:6338":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:5255:5031":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:8151:4999":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:47217:6179":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:12897:4076":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:46778:6146":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11465:3910":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"1:3313:25380":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:2467:4950":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:41772:3611":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:5551:17234":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:8824:6429":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:5295:17205":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:13095:4095":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:11000:6464":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"16:8669:5337":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"11:1158:5555":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:7099:5836":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:22033:3681":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:6144:19996":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13781:4168":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:12191:3983":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:22119:6902":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:11563:3659":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:45032:5897":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:5879:6311":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:7591:33573":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:1584:14103":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11998:3956":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:23373:30263":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"14:165:19069":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:789:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:3446:6284":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"11:102:34477":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:6749:4940":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:7561:3549":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:44527:5879":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"11:1023:5549":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:0:2710":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:1117:5555":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:10274:20064":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:47548:6217":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11971:3954":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:12035:3963":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"11:123:3519":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:599:2987":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:4983:5023":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:42619:6019":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:2086:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:5230:17197":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:6731:5164":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:7487:18372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:4941:6981":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:15919:4683":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:5527:3529":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:11821:6337":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:6876:17989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:3350:6280":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12906:4077":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:7168:5223":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:41256:5821":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:16714:4906":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:6440:19998":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:14832:4384":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:8553:3729":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"0:34:2505":{"crate_id":0,"path":["scopeguard","guard"],"kind":"function"},"16:4120:5009":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:16323:4808":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:5973:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:15829:4658":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"18:765:24267":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"18:635:3695":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:44303:6049":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:5085:5025":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:8165:4989":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:11129:3656":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:23084:7177":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"16:6028:4981":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:6840:3051":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:6713:5154":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:46877:6151":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:14031:4217":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:1907:6268":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:11012:6288":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:13547:4126":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"11:1888:3549":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"11:1580:5558":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:9212:6312":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:12028:3960":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:5395:17218":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:1605:5538":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"18:491:3670":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:13871:4188":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:15024:4419":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:7554:20005":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:4208:5556":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:1002:5537":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:11068:24585":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:15953:4691":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:5117:17187":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:4964:17171":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:47616:6221":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:6205:19997":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:40848:5810":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:8000:4996":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:3126:19138":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:6462:19999":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:506:3737":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"10:36:34463":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:3045:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:12225:3987":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:8528:5432":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:894:5556":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:16668:4893":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:8839:7043":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:7105:30261":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:5341:17211":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:12465:936":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:11553:3919":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:8649:6413":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:10700:3654":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:4890:17163":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13719:4152":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:10793:3877":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"17:10218:20062":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:14640:4338":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"0:19:2507":{"crate_id":0,"path":["scopeguard","defer_on_success"],"kind":"macro"},"5:7571:3541":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:11539:3918":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:1049:5551":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:6827:7063":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:8612:5001":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:6064:4986":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:7548:18375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"11:1601:5559":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:6437:17928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:44688:6068":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:5349:17212":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:3293:276":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:6269:5067":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:7563:18376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:6111:5051":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:42830:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:1703:14114":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:33300:2881":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:8223:6352":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:32738:5337":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:11249:3616":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"2:41068:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:38680:2896":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:14127:4246":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:44991:6083":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:10574:2952":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:3605:2906":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:8298:5391":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:11886:3661":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:996:5548":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"11:772:5540":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:8636:20010":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:8008:18748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:43741:6026":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:45173:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:2335:6884":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"9:480:18981":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:42904:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:884:201":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:4152:5010":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:5172:5028":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:5311:17207":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:14393:4301":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:7722:2996":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:44151:6039":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:10408:6465":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:22055:31888":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:3573:153":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:12359:4006":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:8626:5443":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:7855:12323":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:7789:34516":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:12583:4046":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:13222:20073":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"18:623:34533":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:1551:14100":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:43521:30253":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:12749:4059":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:6700:17950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:8091:6809":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:16750:4915":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:14573:4329":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:6952:244":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:44220:6043":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:23037:6902":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:5143:3555":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:41741:5845":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:0:2711":{"crate_id":17,"path":["object"],"kind":"module"},"17:15997:4701":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:23408:30208":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:10012:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:3075:237":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:43757:6029":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:16520:4842":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:4233:6973":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:1339:3742":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:23579:5944":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"6:6449:17930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:47741:6236":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:7749:3059":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:6573:5121":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:1626:3549":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11114:3892":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:11958:3953":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:8233:20008":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:41734:5844":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:12457:1765":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:5682:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:42571:5556":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:46989:6171":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:7337:5254":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:43778:6033":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:5357:17213":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"5:1636:5642":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:2437:3750":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:6824:6322":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12135:3978":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:23217:5913":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:8077:6808":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:13332:5862":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:3448:6285":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:8343:18947":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:10418:20069":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:12095:3975":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:15973:4697":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:3814:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:6914:5183":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:6790:33968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"11:299:6725":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:5576:12243":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:2209:3114":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"16:7938:5365":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:41084:12527":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:7743:24699":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:3085:3111":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"14:31:5528":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:7765:5316":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:41139:3603":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:22823:7182":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"16:6098:5046":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:667:3739":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:15621:4606":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:1932:6270":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:32769:250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:532:13199":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:3305:2480":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:7801:25540":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"2:4186:3051":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:5494:17229":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:4805:17156":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:317:3731":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:23393:30189":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:11085:6439":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:3051:174":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:1415:5555":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:2820:4971":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:6659:17945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:12776:4061":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:2112:2865":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:31117:2482":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:45208:12597":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:11281:3895":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:12371:4007":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"11:2366:5566":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:10568:2950":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:46524:6124":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:10861:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:4997:3627":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"11:488:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:44391:3729":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:5451:5818":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:2403:3142":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:12293:3997":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:7495:27105":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:12787:4062":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:3774:158":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:4852:5814":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:11909:6289":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:12082:3973":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:2406:3747":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:7495:5276":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:8058:5373":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:46507:6123":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:1696:6987":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:11124:34523":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:8031:2993":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:14859:4387":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:925:5541":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:10566:2949":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:22043:31888":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:2162:5645":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"18:754:3721":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:12237:3667":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:4829:25692":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:47122:6176":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:1652:5563":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:38790:2898":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:4929:17167":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"0:71:2496":{"crate_id":0,"path":["scopeguard","OnUnwind"],"kind":"enum"},"5:7778:5672":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:9169:6438":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:43505:5406":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:43091:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:889:3532":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:8635:6411":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:7223:5236":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"11:1880:5537":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:16198:4775":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:7951:3651":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"13:110:34492":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:7807:34518":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:8889:5537":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:4825:25688":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:6537:231":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:6310:3631":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"11:830:5557":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"11:842:6824":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:12941:4081":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:5387:17217":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:14975:4406":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:2256:2979":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:46714:6142":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:6173:5055":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:2498:6892":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:12434:24606":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:5541:17233":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:16008:4705":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:46951:6169":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:1667:14110":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:15939:4689":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:45380:6096":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"9:445:18982":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:12402:6488":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:1595:5557":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:12347:4005":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:33512:2880":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:13087:5891":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"18:507:3671":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:16132:4751":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:5872:3636":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:2896:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:22598:5910":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:14335:4292":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:14627:4337":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:0:582":{"crate_id":2,"path":["core"],"kind":"module"},"2:10198:30452":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:7813:25547":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"16:6794:5168":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"6:7518:18373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:4591:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:5205:17194":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:3042:3626":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:8028:5371":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:3297:5537":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:12260:20178":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"1:12462:763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:10843:3879":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:11777:3937":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:564:13204":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:14560:4327":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:24097:247":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:15739:4637":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:13733:4153":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:6611:17940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:3129:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:3335:2844":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:14533:4014":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:4778:2560":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:7541:3051":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:9768:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:2554:2719":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:439:196":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:47569:6218":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:31181:30154":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"6:7454:18369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:5493:1004":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:3931:3574":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:22300:5911":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:47803:6253":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12816:3755":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:13427:4117":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"17:12280:3995":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:41318:5834":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:3769:267":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:23357:5922":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:2521:6899":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"17:11527:3917":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:6708:17951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:10031:20057":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:1625:14106":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:9442:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:34409:2890":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:41196:5983":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:5420:17220":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:15010:4418":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:7044:4988":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:643:3671":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:4947:17169":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:41205:5984":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:8290:17412":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:7802:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:3181:5678":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:10974:6457":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:44787:12267":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:2331:2543":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:9256:7067":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"11:351:34474":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:11917:5880":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:15090:4426":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:5325:17209":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:8566:6065":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:7341:18365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:1563:14101":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:6411:17926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:16341:4814":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:2666:3125":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:8572:6404":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:3268:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:12456:1731":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:12470:1895":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:13205:4102":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:11173:34527":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:47416:6213":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"11:2380:5537":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:5362:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:4881:17162":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:2590:4961":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:9198:6441":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11457:3909":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"15:288:19088":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:12204:3984":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:3403:6282":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:47461:6214":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:5543:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:6473:17932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:3141:3765":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:8261:17408":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:12478:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:14239:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:15:2820":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:10657:6436":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:11655:5871":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:15531:4590":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:14672:4342":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:10442:20070":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:8260:6354":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:46664:6140":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:9433:3555":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:8284:5644":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:5804:7048":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:12826:4064":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:41099:5978":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:11280:12596":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:16632:4886":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"11:2400:5556":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"0:18:2502":{"crate_id":0,"path":["scopeguard","defer"],"kind":"macro"},"17:10141:20060":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"18:581:3681":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:7919:5357":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:7316:14048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:1577:5540":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:5572:12242":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:15557:4596":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:14282:3619":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:5305:3762":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:578:13206":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:3587:5006":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"17:11075:34522":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:8668:6415":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:7431:14220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:5198:5029":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:7641:3051":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:40245:2910":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:1214:33473":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:2652:694":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:46553:6126":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:6758:17957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:47101:6175":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"11:1085:34464":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:44573:6062":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:12711:4056":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8583:6945":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"0:20:2510":{"crate_id":0,"path":["scopeguard","defer_on_unwind"],"kind":"macro"},"16:6042:4984":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"11:1914:5562":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:7282:5249":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:3570:152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:12798:20203":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:40215:2908":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:10246:20063":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11985:3955":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:12423:6810":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:41534:5841":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:16159:4763":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:13471:3755":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:973:6824":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:6706:6001":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:13361:4113":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:5301:17206":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:43054:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:5666:6309":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:546:4933":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:43247:2950":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:45127:12581":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:43226:2948":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11566:3920":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:13157:4098":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:11248:6437":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:43994:30162":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:4569:6295":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7212:5235":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:5441:17222":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:8276:6356":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"11:671:5537":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:14152:4250":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:3140:149":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:5224:5030":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:1869:6266":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:2215:3139":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:41176:5981":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:46693:6141":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:16311:4806":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:13027:5887":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:12464:758":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:15785:4646":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:42715:5556":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:41350:5995":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:7358:4990":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:2890:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:10516:20072":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:1487:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:4680:6997":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:903:3731":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:10993:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"6:6526:17935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12335:4004":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:7578:6454":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:8938:31873":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:11473:5620":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:881:6949":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"5:3694:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:13119:4096":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:42357:30243":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:15641:4614":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:42707:5537":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:47636:6223":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:2668:3126":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"17:12886:4075":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:8900:12484":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:1085:5285":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:8879:6297":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:9452:3647":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"16:5757:5040":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:2854:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"11:2545:34466":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:5616:6303":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:44713:5810":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:3025:12330":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:4579:5812":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:46419:6114":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:7884:3574":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:12216:3986":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:14599:4332":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:13181:4100":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"9:500:5623":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:5040:2961":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:10784:3874":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:3687:6923":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:7192:20003":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:4133:3549":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:12463:779":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:4873:5019":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:1521:14097":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:47711:6234":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:4997:17176":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:7696:5665":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:5375:17215":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:583:3738":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:1230:6728":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:6588:5124":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"6:1500:14094":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:8249:17406":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:7448:18368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:12487:3137":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:10777:6284":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:43581:2958":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:3300:260":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:34130:2887":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:40083:2905":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:5044:17181":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:4929:5021":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:34197:2886":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:44251:6046":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:46763:6145":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:47519:6216":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:12392:4009":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:3659:2946":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:34928:2894":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:42978:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4984:17174":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:32828:2849":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:22288:6902":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:13798:4171":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:44240:6045":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12044:3966":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:10977:34524":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:47607:6220":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:43766:168":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:15981:4698":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:14947:4400":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:14821:4383":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:40967:12319":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:41389:5839":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:11401:3903":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:11515:3914":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:3458:2893":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:13014:4091":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:13306:4110":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"11:785:5541":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:3400:2902":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:5488:17228":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:8255:17407":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"8:0:2703":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:15077:4425":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:13951:5901":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:13451:4119":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:6408:5090":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:23524:5939":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:13570:20077":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:40960:5971":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:7900:3578":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:10368:20067":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:41340:5994":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:5533:17232":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:22729:6902":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"11:2551:34482":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:4937:17168":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:2368:32067":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:12451:490":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:12477:1456":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:11053:6310":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:4633:12296":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:45197:6093":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:7414:14222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:3677:6900":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:5742:3872":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:12472:1883":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:7854:12322":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"16:3048:19137":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:14416:4304":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:11503:3913":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"16:6837:5174":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:16084:4750":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"18:735:24266":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:4171:6967":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:768:165":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:44854:6079":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:5986:6314":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:10193:31869":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:46862:6150":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:45412:6101":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:46355:6108":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:43788:6037":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"11:1674:2521":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:8629:6996":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:11737:5874":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:5449:5037":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:12409:20179":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:10565:6736":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:23435:30244":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:14652:4339":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11878:3893":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"3:234:237":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:3553:2901":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"5:1524:5537":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:3696:222":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:6462:17931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:45119:12576":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:6746:3643":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:8363:6358":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:8179:5377":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:1643:14108":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:14807:4381":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:1984:6271":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:11864:3946":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:5334:17210":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:14140:4247":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:9478:6329":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:8736:7029":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:6738:34515":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:10817:2990":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:8206:6350":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:11037:6415":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"11:1105:5553":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:11851:3945":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:41399:5997":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:12467:924":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:4829:17158":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:9229:6442":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:42732:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:2435:19135":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:12149:3979":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:10338:2968":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:5426:3568":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"5:7649:3051":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:12860:4074":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:4341:6992":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:15769:4642":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:1647:5562":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:23487:6902":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:11678:3927":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:8043:34511":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:13266:20074":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:5020:6978":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:4810:5017":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:11065:3891":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:46340:6107":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"11:873:5547":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:8536:5984":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:11147:3658":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:15036:4420":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:6638:17943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:13662:4140":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"18:680:3703":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:8284:17411":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:7738:5666":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:517:13197":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:4939:6979":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"11:2533:34480":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:8895:6434":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:12319:4002":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:9305:6444":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:3564:2556":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:15963:4694":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"18:515:3668":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:16798:4925":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:10729:3728":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:23008:3125":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:14072:4227":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:904:3051":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:9425:3640":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:4914:17165":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:1123:3529":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:47726:6235":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:8368:6935":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:15050:4421":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:3503:3751":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"15:327:19093":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:16613:4181":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"5:1627:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:12476:1957":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"11:1564:19063":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:322:3732":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:5379:5035":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:11319:34521":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:45147:12577":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:3330:5562":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:1930:6269":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:45347:218":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:23590:5945":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:16209:4776":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:15679:4619":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:8516:6901":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:7532:5643":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:23557:5942":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:12857:5884":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:13635:4134":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:7058:5198":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"0:74:2498":{"crate_id":0,"path":["scopeguard","OnSuccess"],"kind":"enum"},"1:9139:6436":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:13945:4201":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:10332:20066":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:4857:5815":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:5105:7016":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:46922:6168":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:10500:237":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"18:613:34534":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:42756:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:44277:5981":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:45143:12583":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:7124:3587":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:33724:2883":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:22298:7097":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:485:13194":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:14872:4388":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:9460:173":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:45401:30708":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"6:1597:14105":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:14108:5906":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:479:13193":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:12952:4082":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:2530:4958":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:16822:4198":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:13491:4121":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"18:573:3671":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"11:2228:3963":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"16:7508:5279":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:23164:5912":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:3548:2483":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"11:2539:30872":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:43476:2957":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:5520:17231":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:4362:6994":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:6287:5825":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:6731:17954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:15852:4661":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:16812:4926":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:40195:227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:11579:3922":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:507:3620":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:7332:13073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:2083:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:42275:181":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:6904:5182":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:990:5547":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:7539:18374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:1099:5549":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:44966:6082":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:9292:6443":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:11889:5878":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:22174:7096":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:5127:17188":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:45317:30184":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"6:1507:14095":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:10549:3872":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:7883:5094":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:4902:6997":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:3786:2913":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:40895:30085":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"11:2566:5665":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:212:3527":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:12416:5882":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:13385:4114":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:8201:6349":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:13991:5992":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"6:6765:17958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:42793:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:14547:4326":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:5570:17236":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:14001:4213":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:7521:5282":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:44837:6078":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:1889:3574":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"11:740:5539":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:41236:5987":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:8267:17409":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:12056:3970":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"14:214:5533":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:2208:3141":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"5:6561:7188":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:15896:4675":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:43240:2949":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:3889:3770":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:929:3535":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:8031:18750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:6759:3529":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"15:0:2709":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:6881:6325":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:5392:452":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:22089:31884":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:7586:18378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:44290:6048":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:10928:3889":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:8394:12485":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:32859:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:41548:5842":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:3024:6902":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:3408:2904":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:4053:3549":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:6065:3629":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:16362:4817":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:598:34532":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:47764:6237":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6564:17938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:5562:17235":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:44351:6053":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:5271:17202":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:5807:7049":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:5629:17241":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:3341:2846":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:2020:810":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:40100:224":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:2660:4964":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:42497:5856":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:12026:6485":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:9739:150":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:43015:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:46372:6111":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:14933:4398":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:1785:3529":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:5131:3760":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"6:1690:14113":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:3834:5008":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:3851:5644":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:6895:3644":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:8546:6000":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:44704:5971":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:16187:4770":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:13082:3894":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"5:3096:33504":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:6710:6321":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:6890:4982":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"11:1140:5554":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:43796:6038":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:10487:20071":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"2:7110:3609":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:15586:4602":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:7090:3571":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:10934:6475":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:11105:3614":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"1:4349:6993":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:8565:5437":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:2570:4960":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:3851:6947":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:7839:25538":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"16:4844:5018":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:7386:5258":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:5009:2851":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:44823:6075":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:12471:1877":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:4614:12227":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:47490:6215":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:13028:4093":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:46440:6119":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:42515:5858":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"9:422:18984":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:11298:6329":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:44627:6064":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:8255:6276":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:6489:3636":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:6368:4929":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:12962:20204":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:2880:4974":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:5475:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:8503:5429":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12176:3981":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:6401:5827":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:9156:6437":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:7731:6017":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:9351:6451":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:12983:20205":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"11:1725:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:7577:18377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:8489:3717":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:11315:24610":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:13757:4167":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:8598:5441":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:9323:24575":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:8143:3717":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:42867:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:8011:3006":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:14220:4252":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:7397:3648":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"13:0:2701":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:42628:6811":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:41169:5980":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:44332:6052":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:47063:6173":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:11698:5873":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:22943:7185":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:11949:6290":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:1539:14099":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:11653:3925":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"11:854:5545":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:15475:4584":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:14886:4391":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"11:1907:5561":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:5689:5039":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"11:1893:3574":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:4404:5014":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:575:2985":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:3343:33569":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:8711:5450":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:8578:6406":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:1401:5549":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:23335:30163":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:15410:4544":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:15573:4597":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11448:3907":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:5635:17242":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:16145:4757":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:44375:5886":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:545:13201":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:3456:3574":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:7308:13244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:967:5542":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:40910:5967":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:670:3702":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:45438:6102":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:44659:6065":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:14327:4290":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:3307:29903":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:5265:17201":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:1871:6267":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:41121:6869":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:22867:7183":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:45449:5568":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:4211:6969":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:11805:3942":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:22955:30539":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:2029:3555":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"16:5727:3871":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:10630:3725":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:2206:3140":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:41274:5989":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:12474:1871":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:3517:2914":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:1657:14109":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:1898:12441":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:11045:6348":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"5:1555:3051":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:3310:25392":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:386:3005":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:44455:6059":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:3295:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:9364:6454":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:43493:30183":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:7825:5674":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:11016:3890":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:46568:6127":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:44722:5970":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:11931:5881":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:3602:6407":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:4999:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:3364:5563":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:15836:4659":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:14483:4317":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:16026:4708":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"11:2301:5285":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:44555:6061":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:14043:4218":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:4899:7019":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:3373:2879":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:5622:17240":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:4956:5022":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:14796:4379":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:5736:6310":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:41265:5824":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:7969:5369":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:46731:6143":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:3668:29191":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:30887:6948":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"5:7215:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:14284:4281":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:6419:17927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:1491:167":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:8584:189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:2326:150":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:16507:4167":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:6672:17947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:12468:930":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:45131:12580":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:2766:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:3720:5556":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:44697:5893":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:12625:4047":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:3851:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:4499:3558":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:10387:6268":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:4333:6991":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:15549:4595":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:1370:5285":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"11:1884:3051":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:10474:7052":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:8235:151":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:8353:18948":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:12673:4050":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:938:3549":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:46472:6121":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:985:3537":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:12840:4069":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:8559:5871":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:15887:4672":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:45339:238":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:46325:6104":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:2245:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"16:2920:4976":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:13890:4193":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:5405:17219":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:13854:4186":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:23612:5947":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:42475:6292":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:6599:17939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:44473:6060":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:2620:4962":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:11232:20087":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12008:3810":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:10501:2946":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:13921:4197":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:12466:918":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:6770:17959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"16:6822:20000":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:5057:17183":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:5603:17239":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:2950:4977":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:7542:5284":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:13286:6882":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:47627:6222":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:2482:6887":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:8249:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:15431:4554":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:16019:4706":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:42650:12540":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"13:229:34483":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:2900:4975":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:5285:6302":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11617:3894":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:5249:17199":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:908:3732":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:34264:2888":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:10562:2947":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:8801:6033":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:559:13203":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:34755:2892":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:15864:4667":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:10007:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:10570:217":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:3308:4947":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:41040:5974":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:10983:6351":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:44405:5871":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:530:1324":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"17:10696:3727":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:8507:6288":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:13983:4205":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:14997:4417":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:15160:4439":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:1711:14115":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:13349:4112":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:4766:5016":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:22571:6902":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:11733:20106":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"16:2966:4978":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:12455:349":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:4921:3601":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:3535:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:7462:5272":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:15064:4424":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:11787:6484":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:40884:5964":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:44509:5878":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:8427:157":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:32770:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:2840:4972":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:5366:17214":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:7604:18379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:6527:3573":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"2:41359:5837":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:9397:6740":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:10597:3724":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:13970:4204":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:11630:5556":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:42667:237":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:14917:4397":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:7350:18366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:44312:6050":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:14312:4288":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"2:4848:232":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:11720:3931":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:1630:3574":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"4:0:2702":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:12873:12256":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:11407:6483":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:42463:6015":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:5288:17204":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:7907:5356":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:1386:5551":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:14375:4300":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:44808:6070":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:8199:18911":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:16595:4171":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:4730:2995":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:11970:6291":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:8476:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:7825:25550":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"6:4990:17175":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:47084:6174":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:4484:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"0:68:2493":{"crate_id":0,"path":["scopeguard","Always"],"kind":"enum"},"1:1641:5561":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:2013:6866":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:8137:4998":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:14019:4214":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:7368:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:14319:163":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"9:236:6033":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:14460:4312":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:41073:5977":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:5195:7025":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:7613:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:31149:2868":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:14299:4286":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"2:40003:2916":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:465:13191":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:4875:17161":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:14520:4321":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:3916:6290":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:23349:5921":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:7896:3739":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:45139:12582":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:22172:6902":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:4184:5011":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:11781:6330":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:14099:4236":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:6625:5127":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:5348:5034":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12976:4084":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:46582:6128":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:6882:17070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:40087:2907":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:14114:4242":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:10773:164":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:570:13205":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"18:96:24257":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:2585:6729":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:22610:31885":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"18:538:3678":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:3110:5002":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:9536:5861":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"2:22180:7099":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:40854:5963":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:15286:4441":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:4910:827":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"5:1586:5541":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:15905:4676":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:6716:17952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:682:6261":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:47196:6178":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"2:45001:6087":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:881:5537":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:1589:14104":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:4529:3555":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:586:13207":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:45155:12596":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:2684:4965":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:39424:2900":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:5630:6307":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:16656:4891":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:6493:17892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:2816:3597":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"1:8196:3811":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:1539:5556":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:4149:6965":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:42329:6946":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:9145:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:523:13198":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:42441:30168":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:14612:4334":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:2450:4948":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:13692:4144":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:14346:4295":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:2349:5551":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:13145:4097":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:6713:3549":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:13141:5873":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:16399:4824":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:10958:29384":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"11:430:34476":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:6852:5176":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:46845:6149":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:13838:4182":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:14708:4348":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:12723:4057":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:5128:7018":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:8894:6829":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:2796:4970":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:5648:17244":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:6337:5077":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:41149:5979":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:47294:6211":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:7949:4994":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"14:7:5528":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4816:17157":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:10803:3729":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5088:17185":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:41306:5993":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:22905:7184":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:15315:4461":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:5658:17245":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:15731:4634":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:3854:3754":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:15496:4589":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:2105:693":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:15701:4623":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:12122:3977":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:5641:17243":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"11:1900:5560":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:32734:5954":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:16377:4818":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"18:689:3705":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:41055:5976":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:9241:7068":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:7350:5256":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:1632:14107":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:5471:17225":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:7959:5368":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:11112:3615":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"16:2724:4967":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:8330:17417":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:10560:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:5217:17195":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:3048:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:11903:5879":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"18:698:3706":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:10097:20058":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:40944:5970":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:5165:17191":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:6389:5083":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:43543:2957":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:1489:14092":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:11309:3896":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:589:3682":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11421:3906":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:13610:4133":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:45325:175":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:7259:5248":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:6696:5152":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:5186:17192":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:630:6803":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:10572:2951":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:15106:4428":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:14845:4386":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:12234:3988":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:41246:145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:14358:4297":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:8105:5375":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:3309:33570":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:40155:226":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:12454:1348":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:2769:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:6600:197":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:12069:3665":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"5:7751:12527":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5196:17193":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5051:17182":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:4815:6968":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:2142:1393":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:6210:3555":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:13933:4198":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:6680:5149":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"5:3088:32410":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:31170:2957":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:2772:4969":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:13169:4099":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:34582:2891":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:41047:5975":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:40252:5681":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:2550:4959":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:6123:4985":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:2378:20134":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:11606:3893":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:4978:3602":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:7075:20002":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:15876:4668":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:16297:4799":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:2282:200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:4113:6964":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:7361:18367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:23535:5940":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:42723:3051":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:13341:3708":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:3054:156":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:12306:3999":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"5:1250:33467":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:380:3004":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:4414:6293":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:44929:5896":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:4163:3529":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:13103:5892":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:5144:5027":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:45329:230":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:4163:6966":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:40175:225":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"18:718:3712":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:10963:6350":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"11:1005:5285":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"14:187:19076":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:6043:3549":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:2295:32044":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:12736:4058":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:7906:6339":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:8026:2991":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:47673:6226":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"11:0:2706":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:4298:3555":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:2496:6891":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:4018:6291":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:7463:18370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:7114:3585":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:6970:4983":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:6902:17990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:6421:4935":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:16739:4914":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"16:2506:4957":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:3057:271":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:15121:4432":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:15540:4594":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13322:20075":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:23270:5914":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:9447:3646":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"5:780:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:4792:17155":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:42313:5855":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:12841:12548":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:40923:5968":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:45461:6103":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:12699:4055":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:45151:12578":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:7581:5663":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"11:708:5538":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:23051:7178":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:13193:4101":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:912:5540":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:5462:17224":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:16642:4887":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:23466:6962":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:7716:34514":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:8624:6995":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"7:79:18971":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:41227:5986":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:7621:5664":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:16179:4769":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:8014:18749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:9751:3653":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"6:8308:17415":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:14084:4230":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:8483:5428":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:6084:5042":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:14738:4367":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:6434:6320":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:8296:17413":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:15148:4435":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:15946:4690":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:11606:5537":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:23623:5948":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"0:21:2521":{"crate_id":0,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"2:45135:12584":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"18:651:3671":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:44381:6057":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:6507:17893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:7391:14237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:4921:17166":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:40137:223":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:11592:3855":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:7159:5222":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:40115:221":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:39:3525":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:8213:6351":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:12473:1889":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:10774:6282":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:6640:5129":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:2508:6897":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:4370:5537":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:8585:5438":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:8694:6296":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:2648:6277":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"18:531:3675":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:16385:4821":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:2793:6279":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:41763:6002":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:6386:3617":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:7980:4995":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:2173:5646":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:6823:17962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11831:3918":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:15777:4644":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:2266:5647":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:16832:4203":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:15931:4686":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:5107:17186":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:43128:5866":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:12931:4080":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:5224:17196":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:23324:5920":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:6159:3566":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:4976:17173":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:31528:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:14055:4219":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:13290:3830":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"11:2466:3574":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:10519:155":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4902:17164":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:12461:760":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"0:37:2508":{"crate_id":0,"path":["scopeguard","guard_on_success"],"kind":"function"},"0:0:2582":{"crate_id":0,"path":["scopeguard"],"kind":"module"},"2:22994:7186":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:13818:4181":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:13562:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:15753:4640":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:11926:3951":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:1727:14116":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:3800:3529":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:13592:4130":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:5593:17238":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:10555:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:12762:4060":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:13398:4116":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:15602:4605":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:6302:5074":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:8727:6416":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"2:7920:30396":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:46649:6139":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:16264:4792":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:6691:17949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:8112:6348":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:7180:7094":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:9190:5537":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:6544:17937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:8223:5379":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"12:0:2707":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:46611:6137":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:954:5557":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:36804:2895":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:11432:20086":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:5670:17246":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:5482:17227":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:9206:3051":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:44669:6066":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:6777:17960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:6666:17946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:10564:2948":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"2:26497:281":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:14269:4277":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:41288:5992":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"9:0:2704":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"11:2323:5549":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:14405:4303":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:11902:3950":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:8643:6404":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:1684:14112":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:12524:4041":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"15:306:19089":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"15:394:19099":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:47647:6224":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:41327:5835":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:5113:5026":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:4702:6998":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:16555:4872":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:32857:2848":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:7016:5194":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:4221:6970":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:7424:20004":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:22192:5911":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:10781:168":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:3913:6289":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:9437:245":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:32827:2847":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:12992:4086":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:42588:6017":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:5682:17248":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:8319:17416":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6443:17929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:1569:14102":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:12249:3992":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:15418:4547":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:8891:161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:6680:17948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:12450:1204":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:6188:5057":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:3086:33625":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:10771:6280":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:32692:7050":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:13347:12253":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:12163:3980":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"5:7815:5673":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:7471:5275":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:4780:7015":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:687:6806":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:2990:4979":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"11:1064:19062":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:7838:20006":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:10280:6012":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:6723:17953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"16:6239:5061":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"11:881:5548":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:11021:24592":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:42563:5537":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:5255:17200":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:11793:6334":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:40952:5810":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:32745:5955":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:6843:5175":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:41297:5828":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:534:2979":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:4970:17172":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"11:2420:3051":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:8066:20007":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:984:5545":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:47371:6212":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:6381:17864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:6127:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:5036:17180":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:10816:6906":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:12449:5883":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:5069:17184":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:473:13192":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:1220:3740":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:22101:31879":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:9316:2984":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:13209:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:31155:2869":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:7469:18371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:10564:3722":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"14:160:5528":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"11:364:3521":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:3405:6283":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:11141:3657":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:7263:3592":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:2486:4956":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:10663:3726":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:5060:5024":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:8529:2917":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:22087:31882":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:885:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:5477:17226":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:9686:5862":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:6227:231":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:11807:6335":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:5865:231":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"11:685:5556":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:7990:5370":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:40933:5969":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:23285:30230":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6658:5143":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"18:0:2712":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:13070:3893":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:8203:3630":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"14:40:4168":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:2227:3743":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:2640:4963":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:8121:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:15351:4492":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:11386:20085":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:4241:5012":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:7766:5669":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"0:40:2511":{"crate_id":0,"path":["scopeguard","guard_on_unwind"],"kind":"function"},"11:809:3574":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:8010:6902":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:16332:4812":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:2748:4968":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:45422:191":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:4575:3558":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:4489:3555":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"11:2148:5551":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:11838:27097":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:7416:5261":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:4842:17159":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:4495:6294":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:15136:4080":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:41218:5985":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:15439:4555":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:22072:31891":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:9581:6269":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:46824:6148":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:5450:17223":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:6631:17942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:155:3516":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:8723:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"18:521:24268":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:33996:2885":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:11832:27102":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:11363:24952":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"11:2137:5549":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:10167:20061":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:45123:12579":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:11630:3924":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:10938:34528":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:835:5542":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"9:390:18983":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:5417:5036":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:2480:3114":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:12108:3976":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:8906:6435":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:43981:30182":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"2:23634:5949":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:6402:3635":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:42941:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:8096:5374":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:2704:4966":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:6502:19107":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:6876:5179":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:3620:6287":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:6285:3555":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:10778:3873":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"17:15655:4617":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:12920:4078":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:8617:6292":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:11358:20084":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:6917:17991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:4567:5811":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:1635:5560":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:113:24258":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:41748:6001":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"11:798:3549":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11788:3939":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:2148:5644":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:13064:5890":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:16218:4778":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:1514:14096":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:11029:24604":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:11222:3894":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:2859:146":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:46387:6112":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:40263:5962":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:7335:25542":{"crate_id":1,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:14056:31771":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:47662:6225":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"9:53:19000":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:2718:3623":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:44211:6041":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:472:3734":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:5413:30876":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:9271:7069":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:8320:20009":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:44230:6044":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:43560:149":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:896:4942":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:12038:29254":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:43749:6028":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:43998:5869":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:5282:17203":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:6180:6733":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:42579:3051":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:3378:2884":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"3:0:524":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:14262:3617":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"18:659:3696":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12018:3958":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:4119:6963":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:1108:5551":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:43535:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:6534:17936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12687:4054":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:3799:30350":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:5241:17198":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:9310:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:282:3529":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:6480:17933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:10548:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:15689:4620":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:5114:7017":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"16:6866:20001":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:5220:12313":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:4987:2960":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:13968:5904":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"2:46795:6147":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:13909:4194":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:5507:17230":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:42554:184":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:11717:6033":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"6:4957:17170":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:44322:6051":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:6740:17955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:2732:3622":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:14374:6825":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:15760:4641":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:4330:3555":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:396:3523":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:948:3574":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:3941:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:3403:2903":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:6256:5066":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7372:4991":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:10975:3613":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1:3077:149":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:43233:2947":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:22731:7098":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:8097:6856":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:5650:6308":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"14:202:12269":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:4869:17160":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:5428:17221":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:3987:3778":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"17:11291:34526":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:16494:4153":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:22070:31893":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:12605:3893":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:46486:6122":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:46539:6125":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:9356:6452":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:14773:4378":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:16684:4898":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:8390:12486":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:23442:5934":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:14750:4369":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:13958:4203":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:4562:3555":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"1:10953:24378":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:13326:12255":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:7549:5662":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:13352:12252":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:23645:5950":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:12066:3971":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:16775:4920":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:663:6258":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:13006:4089":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:6808:4980":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:1494:14093":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:6020:6318":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"11:698:3051":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:5302:3566":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:7790:3567":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:5318:5033":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:8358:6357":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:1623:3051":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:963:5539":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:23079:7179":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:44679:6067":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:23301:5915":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:8267:5387":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"14:220:5535":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:22929:6902":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:726:5637":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:6521:17934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:3866:5645":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:13554:4127":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"1:8498:6396":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:1616:5539":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:959:5538":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:3720:3753":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:4896:16996":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:4:1288":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:6953:5186":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:44980:12268":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:8447:2918":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:47034:6172":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:7986:13151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:9182:6439":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"14:0:2708":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"11:2440:3549":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:5007:17177":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:46746:6144":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"9:355:18997":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:14438:4311":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:0:1757":{"crate_id":1,"path":["std"],"kind":"module"},"1:12418:24704":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:3014:19136":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12851:4073":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:5709:19995":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:2816:32409":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:7305:5250":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"18:481:3669":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:22957:3125":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:2328:6275":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:16036:4713":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:3061:270":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:23455:5935":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:6931:3529":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"10:44:5569":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:9573:2561":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:9377:24594":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"18:80:24256":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:1854:719":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:6623:17941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:32768:248":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:4311:27100":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:3576:154":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:3707:5537":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:553:13202":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:3304:5561":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:16701:4900":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:15989:4700":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"11:434:34467":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:5282:5032":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:11261:6438":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:7605:3051":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"11:2121:5285":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:46972:6170":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:46632:6138":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:10394:20068":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:13400:12261":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:13041:4094":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:3695:5007":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:34063:2889":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:15714:4629":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:5316:6302":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11026:34525":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:7401:34512":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:45014:6091":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:46457:6120":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:16786:4922":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:5179:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:12537:4042":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:12045:6338":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:9420:198":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:11449:6902":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:22121:7100":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:4177:6968":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"7:0:1947":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:23601:5946":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:4943:6982":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:2348:33609":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:4827:25690":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:44202:6040":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:42297:5853":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:6652:17944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:42659:2997":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:11475:20087":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"17:11757:20107":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:16171:4766":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:12469:911":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:2754:6278":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:6984:5000":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:8672:7021":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:14963:4404":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:41375:3693":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:12570:4045":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:8753:6426":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:12869:4119":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:491:13195":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:43466:30087":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:11333:173":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:15844:4660":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:3388:2882":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:4931:2959":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:7288:3595":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:11691:3928":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:12449:434":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:8268:6355":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:2792:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:5836:3571":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:7971:12480":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:41111:3729":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:14692:4343":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:6608:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:45322:162":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:4694:5015":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:5586:17237":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:10821:5868":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:22:842":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:11952:3952":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:5139:17189":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:3569:3555":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:47688:6227":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:538:13200":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"9:328:19037":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:14586:4330":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"11:2559:34478":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:9746:6349":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:23546:5941":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:14507:4318":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:9344:6450":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:47590:6219":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:41790:5849":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:2415:19108":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:32752:2959":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:3352:6281":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:4267:5013":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:3759:2909":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:11459:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:14083:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:44423:5876":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:10406:6466":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:11272:24613":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:5025:17179":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":31}