{"root":"0:0:2000","crate_version":"1.2.0","includes_private":false,"index":{"2:12819:25791":{"id":"2:12819:25791","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12818:25790"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12798:30725":{"id":"2:12798:30725","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12824:28904":{"id":"2:12824:28904","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12823:28892"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44186:5334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8977:6114-0:68:1909":{"id":"a:2:8977:6114-0:68:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8977:6114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8977:6114-0:74:1914":{"id":"a:2:8977:6114-0:74:1914","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8977:6114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1914","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12860:25804":{"id":"2:12860:25804","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:11546","str::rsplitn":"2:12863:25806"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44007:5155","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2735:134":{"id":"2:2735:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:2740:134":{"id":"2:2740:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32427:6341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:21:1937":{"id":"0:21:1937","crate_id":0,"name":"ScopeGuard","span":{"filename":"src/lib.rs","begin":[304,0],"end":[313,1]},"visibility":"public","docs":"`ScopeGuard` is a scope guard that may own a protected value.\n\nIf you place a guard in a local variable, the closure can\nrun regardless how you leave the scope — through regular return or panic\n(except if panic or other code aborts; so as long as destructors run).\nIt is run only once.\n\nThe `S` parameter for [`Strategy`](trait.Strategy.html) determines if\nthe closure actually runs.\n\nThe guard's closure will be called with the held value in the destructor.\n\nThe `ScopeGuard` implements `Deref` so that you can access the inner value.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Always","id":"0:68:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3198:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:28","a:2:2988:2258-0:21:1937","a:2:8978:6323-0:21:1937","a:2:8977:6114-0:21:1937","a:2:2931:243-0:21:1937","b:2:2422-0:21:1937","b:2:2419-0:21:1937","b:2:2722-0:21:1937","b:2:2726-0:21:1937","b:2:2737-0:21:1937","b:2:3565-0:21:1937","b:2:2732-0:21:1937","0:43","0:47","0:63","0:53","0:58"]}}},"a:2:2988:2258-0:68:1909":{"id":"a:2:2988:2258-0:68:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2988:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8978:6323-0:71:1912":{"id":"a:2:8978:6323-0:71:1912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8978:6323","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1912","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2732-0:74:1914":{"id":"b:2:2732-0:74:1914","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2702:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1914","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2735:134","2:2736:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5536:31421":{"id":"5:5536:31421","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2329","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2329","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12898:24674":{"id":"2:12898:24674","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:11546"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12827:28898":{"id":"2:12827:28898","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44195:5170","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:1924":{"id":"0:37:1924","crate_id":0,"name":"guard_on_success","span":{"filename":"src/lib.rs","begin":[388,0],"end":[393,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnSuccess","id":"0:74:1914","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3198:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:716":{"id":"0:70:716","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9902:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9883:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[455,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3198:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3177:1899","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:57:597"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12820:5171":{"id":"2:12820:5171","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12032:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43873:5163","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:25653":{"id":"2:12915:25653","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2931:243-0:71:1912":{"id":"a:2:2931:243-0:71:1912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1912","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2424:22993":{"id":"2:2424:22993","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8978:6323-0:74:1914":{"id":"a:2:8978:6323-0:74:1914","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8978:6323","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1914","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:19:1923":{"id":"0:19:1923","crate_id":0,"name":"defer_on_success","span":{"filename":"src/lib.rs","begin":[271,0],"end":[275,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on successful scope exit).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_success {\n    ($($t:tt)*) => { ... };\n}"}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[480,0],"end":[491,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9927:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3198:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9927:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:67:716"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12854:30732":{"id":"2:12854:30732","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12492:11546","str::split":"2:12845:25798","prim@char":"1:12032:450","`DoubleEndedIterator`":"2:7884:127","str::rsplit_terminator":"2:12857:30733"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43953:5325","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12841:2448":{"id":"2:12841:2448","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42007:197","prim@char":"1:12032:450","self::pattern":"2:12492:11546"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:11544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2931:243-0:74:1914":{"id":"a:2:2931:243-0:74:1914","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1914","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12872:2229":{"id":"2:12872:2229","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12492:11546","`DoubleEndedIterator`":"2:7884:127","prim@char":"1:12032:450","str::rmatches":"2:12875:30734"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44107:5329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:30743":{"id":"2:12895:30743","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:11546"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2737-0:21:1937":{"id":"b:2:2737-0:21:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2740:134","2:2741:1615"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12910:30746":{"id":"2:12910:30746","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:11546"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:11544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11:1904":{"id":"0:11:1904","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,28]},"visibility":"default","docs":"Return `true` if the guard’s associated code should run\n(in the context where this method is called).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12922:25662":{"id":"2:12922:25662","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:33719"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:30749":{"id":"2:12926:30749","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4726:30749"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44220:5231","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2422-0:68:1909":{"id":"b:2:2422-0:68:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:2254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2416:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2424:22993"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5551:31424":{"id":"5:5551:31424","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:6236":{"id":"5:5553:6236","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:716":{"id":"0:73:716","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9902:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9883:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2000":{"id":"0:0:2000","crate_id":0,"name":"scopeguard","span":{"filename":"src/lib.rs","begin":[1,0],"end":[595,1]},"visibility":"public","docs":"A scope guard will run a given closure when it goes out of scope,\neven if the code between panics.\n(as long as panic doesn't abort)\n\n# Examples\n\n## Hello World\n\nThis example creates a scope guard with an example function:\n\n```\nextern crate scopeguard;\n\nfn f() {\n    let _guard = scopeguard::guard((), |_| {\n        println!(\"Hello Scope Exit!\");\n    });\n\n    // rest of the code here.\n\n    // Here, at the end of `_guard`'s scope, the guard's closure is called.\n    // It is also called if we exit this scope through unwinding instead.\n}\n# fn main() {\n#    f();\n# }\n```\n\n## `defer!`\n\nUse the `defer` macro to run an operation at scope exit,\neither regular scope exit or during unwinding from a panic.\n\n```\n#[macro_use(defer)] extern crate scopeguard;\n\nuse std::cell::Cell;\n\nfn main() {\n    // use a cell to observe drops during and after the scope guard is active\n    let drop_counter = Cell::new(0);\n    {\n        // Create a scope guard using `defer!` for the current scope\n        defer! {\n            drop_counter.set(1 + drop_counter.get());\n        }\n\n        // Do regular operations here in the meantime.\n\n        // Just before scope exit: it hasn't run yet.\n        assert_eq!(drop_counter.get(), 0);\n\n        // The following scope end is where the defer closure is called\n    }\n    assert_eq!(drop_counter.get(), 1);\n}\n```\n\n## Scope Guard with Value\n\nIf the scope guard closure needs to access an outer value that is also\nmutated outside of the scope guard, then you may want to use the scope guard\nwith a value. The guard works like a smart pointer, so the inner value can\nbe accessed by reference or by mutable reference.\n\n### 1. The guard owns a file\n\nIn this example, the scope guard owns a file and ensures pending writes are\nsynced at scope exit.\n\n```\nextern crate scopeguard;\n\nuse std::fs::*;\nuse std::io::{self, Write};\n# // Mock file so that we don't actually write a file\n# struct MockFile;\n# impl MockFile {\n#     fn create(_s: &str) -> io::Result<Self> { Ok(MockFile) }\n#     fn write_all(&self, _b: &[u8]) -> io::Result<()> { Ok(()) }\n#     fn sync_all(&self) -> io::Result<()> { Ok(()) }\n# }\n# use self::MockFile as File;\n\nfn try_main() -> io::Result<()> {\n    let f = File::create(\"newfile.txt\")?;\n    let mut file = scopeguard::guard(f, |f| {\n        // ensure we flush file at return or panic\n        let _ = f.sync_all();\n    });\n    // Access the file through the scope guard itself\n    file.write_all(b\"test me\\n\").map(|_| ())\n}\n\nfn main() {\n    try_main().unwrap();\n}\n\n```\n\n### 2. The guard restores an invariant on scope exit\n\n```\nextern crate scopeguard;\n\nuse std::mem::ManuallyDrop;\nuse std::ptr;\n\n// This function, just for this example, takes the first element\n// and inserts it into the assumed sorted tail of the vector.\n//\n// For optimization purposes we temporarily violate an invariant of the\n// Vec, that it owns all of its elements.\n//\n// The safe approach is to use swap, which means two writes to memory,\n// the optimization is to use a “hole” which uses only one write of memory\n// for each position it moves.\n//\n// We *must* use a scope guard to run this code safely. We\n// are running arbitrary user code (comparison operators) that may panic.\n// The scope guard ensures we restore the invariant after successful\n// exit or during unwinding from panic.\nfn insertion_sort_first<T>(v: &mut Vec<T>)\n    where T: PartialOrd\n{\n    struct Hole<'a, T: 'a> {\n        v: &'a mut Vec<T>,\n        index: usize,\n        value: ManuallyDrop<T>,\n    }\n\n    unsafe {\n        // Create a moved-from location in the vector, a “hole”.\n        let value = ptr::read(&v[0]);\n        let mut hole = Hole { v: v, index: 0, value: ManuallyDrop::new(value) };\n\n        // Use a scope guard with a value.\n        // At scope exit, plug the hole so that the vector is fully\n        // initialized again.\n        // The scope guard owns the hole, but we can access it through the guard.\n        let mut hole_guard = scopeguard::guard(hole, |hole| {\n            // plug the hole in the vector with the value that was // taken out\n            let index = hole.index;\n            ptr::copy_nonoverlapping(&*hole.value, &mut hole.v[index], 1);\n        });\n\n        // run algorithm that moves the hole in the vector here\n        // move the hole until it's in a sorted position\n        for i in 1..hole_guard.v.len() {\n            if *hole_guard.value >= hole_guard.v[i] {\n                // move the element back and the hole forward\n                let index = hole_guard.index;\n                hole_guard.v.swap(index, index + 1);\n                hole_guard.index += 1;\n            } else {\n                break;\n            }\n        }\n\n        // When the scope exits here, the Vec becomes whole again!\n    }\n}\n\nfn main() {\n    let string = String::from;\n    let mut data = vec![string(\"c\"), string(\"a\"), string(\"b\"), string(\"d\")];\n    insertion_sort_first(&mut data);\n    assert_eq!(data, vec![\"a\", \"b\", \"c\", \"d\"]);\n}\n\n```\n\n\n# Crate Features\n\n- `use_std`\n  + Enabled by default. Enables the `OnUnwind` and `OnSuccess` strategies.\n  + Disable to use `no_std`.\n\n# Rust Version\n\nThis version of the crate requires Rust 1.20 or later.\n\nThe scopeguard 1.x release series will use a carefully considered version\nupgrade policy, where in a later 1.x version, we will raise the minimum\nrequired Rust version.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/scopeguard/1/\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1901","0:68:1909","0:71:1912","0:74:1914","0:21:1937","0:34:1921","0:37:1924","0:40:1927","0:18:1918","0:19:1923","0:20:1926"],"is_stripped":false}}},"a:2:2988:2258-0:74:1914":{"id":"a:2:2988:2258-0:74:1914","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2988:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1914","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2948:253-0:74:1914":{"id":"a:2:2948:253-0:74:1914","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1914","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12925:6106":{"id":"2:12925:6106","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4729:6106"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44211:5090","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2722-0:21:1937":{"id":"b:2:2722-0:21:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2725:2442"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2419-0:71:1912":{"id":"b:2:2419-0:71:1912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:2254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1912","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2421:2217"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2419-0:68:1909":{"id":"b:2:2419-0:68:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:2254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2421:2217"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12799:30726":{"id":"2:12799:30726","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12821:5343":{"id":"2:12821:5343","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12032:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43879:5323","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919:25658":{"id":"2:12919:25658","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12923:30748":{"id":"2:12923:30748","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4728:30748"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44202:5232","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12886:30738":{"id":"2:12886:30738","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9927:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1914","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:716"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2726-0:71:1912":{"id":"b:2:2726-0:71:1912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1912","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2728:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:18:1918":{"id":"0:18:1918","crate_id":0,"name":"defer","span":{"filename":"src/lib.rs","begin":[257,0],"end":[261,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (always run).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer {\n    ($($t:tt)*) => { ... };\n}"}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[315,0],"end":[370,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3198:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:32:1946","0:33:1959"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12801:30727":{"id":"2:12801:30727","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12799:30726"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1912","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:15:1904"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12805:30728":{"id":"2:12805:30728","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2732-0:68:1909":{"id":"b:2:2732-0:68:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2702:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2735:134","2:2736:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12797:2449":{"id":"2:12797:2449","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12806:339":{"id":"2:12806:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12807:25768","`u8`":"1:12049:1639"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12826:30731":{"id":"2:12826:30731","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44167:5332","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12918:25657":{"id":"2:12918:25657","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:1904":{"id":"0:13:1904","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[231,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:1927":{"id":"0:40:1927","crate_id":0,"name":"guard_on_unwind","span":{"filename":"src/lib.rs","begin":[425,0],"end":[430,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.\n\n## Examples\n\nFor performance reasons, or to emulate “only run guard on unwind” in\nno-std environments, we can also use the default guard and simply manually\ndefuse it at the end of scope like the following example. (The performance\nreason would be if the [`OnUnwind`]'s call to [std::thread::panicking()] is\nan issue.)\n\n```\nextern crate scopeguard;\n\nuse scopeguard::ScopeGuard;\n# fn main() {\n{\n    let guard = scopeguard::guard((), |_| {});\n\n    // rest of the code here\n\n    // we reached the end of scope without unwinding - defuse it\n    ScopeGuard::into_inner(guard);\n}\n# }\n```","links":{"std::thread::panicking()":"1:500:1129","`OnUnwind`":"0:71:1912"},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnUnwind","id":"0:71:1912","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3198:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2722-0:71:1912":{"id":"b:2:2722-0:71:1912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1912","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2725:2442"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2726-0:74:1914":{"id":"b:2:2726-0:74:1914","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1914","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2728:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12907:30745":{"id":"2:12907:30745","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:11546"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:31422":{"id":"5:5540:31422","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2737-0:74:1914":{"id":"b:2:2737-0:74:1914","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1914","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:134","2:2741:1615"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[443,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3198:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3164:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:51:255","0:52:595"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12875:30734":{"id":"2:12875:30734","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12492:11546","`DoubleEndedIterator`":"2:7884:127","prim@char":"1:12032:450","str::matches":"2:12872:2229"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44125:5330","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:11544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15:1904":{"id":"0:15:1904","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[239,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2422-0:74:1914":{"id":"b:2:2422-0:74:1914","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:2254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2416:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1914","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2424:22993"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12920:25660":{"id":"2:12920:25660","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:33719"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2422-0:21:1937":{"id":"b:2:2422-0:21:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:2254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2416:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2424:22993"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12816:30729":{"id":"2:12816:30729","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12038:1534","str::slice_mut_unchecked":"2:12817:30730","crate::ops::Index":"2:3227:2313"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2948:253-0:68:1909":{"id":"a:2:2948:253-0:68:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8977:6114-0:21:1937":{"id":"a:2:8977:6114-0:21:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8977:6114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8977:6114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8977:6114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:62:633":{"id":"0:62:633","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[470,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8977:6114-0:71:1912":{"id":"a:2:8977:6114-0:71:1912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8977:6114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1912","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:12":{"id":"0:12","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,0],"end":[234,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:13:1904"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2931:243-0:68:1909":{"id":"a:2:2931:243-0:68:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[435,0],"end":[441,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3198:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:67:716":{"id":"0:67:716","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[486,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9902:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9883:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12837:2489":{"id":"2:12837:2489","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42007:197","prim@char":"1:12032:450","self::pattern":"2:12492:11546"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12901:25811":{"id":"2:12901:25811","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:11546"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:11544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12904:30744":{"id":"2:12904:30744","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:11546"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:11544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12916:25654":{"id":"2:12916:25654","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39954:25664","Self::is_ascii":"2:12915:25653"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39954:25664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:25661":{"id":"2:12921:25661","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:33719"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12881:30736":{"id":"2:12881:30736","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12492:11546","`DoubleEndedIterator`":"2:7884:127","prim@char":"1:12032:450","str::match_indices":"2:12878:30735"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44071:5328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:11544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12812:25766":{"id":"2:12812:25766","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10581:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10581:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:1959":{"id":"0:33:1959","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[357,4],"end":[369,5]},"visibility":"public","docs":"“Defuse” the guard and extract the value without calling the closure.\n\n```\nextern crate scopeguard;\n\nuse scopeguard::{guard, ScopeGuard};\n\nfn conditional() -> bool { true }\n\nfn main() {\n    let mut guard = guard(Vec::new(), |mut v| v.clear());\n    guard.push(1);\n\n    if conditional() {\n        // a condition maybe makes us decide to\n        // “defuse” the guard and get back its inner parts\n        let value = ScopeGuard::into_inner(guard);\n    } else {\n        // guard still exists in this branch\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["guard",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:31425":{"id":"5:5552:31425","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2329","`String`":"5:7534:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2329","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9927:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:70:716"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12845:25798":{"id":"2:12845:25798","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12492:11546","`DoubleEndedIterator`":"2:7884:127","prim@char":"1:12032:450","str::split_whitespace":"2:12823:28892","str::rsplit":"2:12851:25802"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43903:5148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17:1904":{"id":"0:17:1904","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[247,4],"end":[249,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:595":{"id":"0:52:595","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[450,4],"end":[452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:68:1909":{"id":"b:2:2726-0:68:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2728:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2732-0:71:1912":{"id":"b:2:2732-0:71:1912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2702:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1912","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2735:134","2:2736:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9927:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1912","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:716"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12795":{"id":"2:12795","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12796:872","2:12797:2449","2:12798:30725","2:12799:30726","2:12801:30727","2:12804:25710","2:12805:30728","2:12806:339","2:12807:25768","2:12808:1984","2:12810:25765","2:12812:25766","2:12814:25767","2:12816:30729","2:12817:30730","2:12818:25790","2:12819:25791","2:12820:5171","2:12821:5343","2:12822:4953","2:12823:28892","2:12824:28904","2:12825:28094","2:12826:30731","2:12827:28898","2:12828:25810","2:12831:25311","2:12834:25313","2:12837:2489","2:12841:2448","2:12845:25798","2:12848:25800","2:12851:25802","2:12854:30732","2:12857:30733","2:12860:25804","2:12863:25806","2:12866:25808","2:12869:25809","2:12872:2229","2:12875:30734","2:12878:30735","2:12881:30736","2:12884:30737","2:12886:30738","2:12888:30739","2:12890:30740","2:12891:30741","2:12892:30742","2:12895:30743","2:12898:24674","2:12901:25811","2:12904:30744","2:12907:30745","2:12910:30746","2:12913:30747","2:12915:25653","2:12916:25654","2:12917:25656","2:12918:25657","2:12919:25658","2:12920:25660","2:12921:25661","2:12922:25662","2:12923:30748","2:12925:6106","2:12926:30749"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5537:2276":{"id":"5:5537:2276","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2725:2442":{"id":"2:2725:2442","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2699:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12796:872":{"id":"2:12796:872","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12032:450"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2737-0:71:1912":{"id":"b:2:2737-0:71:1912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1912","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:134","2:2741:1615"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12892:30742":{"id":"2:12892:30742","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:11546"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12517:11543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:26940":{"id":"5:5555:26940","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12919:25658"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:31421","5:5537:2276","5:5540:31422","5:5543:31423","5:5551:31424","5:5552:31425","5:5553:6236","5:5554:26939","5:5555:26940"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:34:1921":{"id":"0:34:1921","crate_id":0,"name":"guard","span":{"filename":"src/lib.rs","begin":[375,0],"end":[380,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"Always","id":"0:68:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3198:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2421:2217":{"id":"2:2421:2217","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2732-0:21:1937":{"id":"b:2:2732-0:21:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2702:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2735:134","2:2736:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[465,0],"end":[478,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3198:139","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3188:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:62:633"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12818:25790":{"id":"2:12818:25790","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12819:25791"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2722-0:74:1914":{"id":"b:2:2722-0:74:1914","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1914","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2725:2442"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2737-0:68:1909":{"id":"b:2:2737-0:68:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:134","2:2741:1615"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12810:25765":{"id":"2:12810:25765","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42007:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10581:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10581:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3565-0:74:1914":{"id":"b:2:3565-0:74:1914","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:2254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3563:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1914","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3567:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:32:1946":{"id":"0:32:1946","crate_id":0,"name":"with_strategy","span":{"filename":"src/lib.rs","begin":[326,4],"end":[332,5]},"visibility":"public","docs":"Create a `ScopeGuard` that owns `v` (accessible through deref) and calls\n`dropfn` when its destructor runs.\n\nThe `Strategy` decides whether the scope guard's closure should run.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12863:25806":{"id":"2:12863:25806","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12032:450","str::splitn":"2:12860:25804","self::pattern":"2:12492:11546"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44025:5156","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:11544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:25656":{"id":"2:12917:25656","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8978:6323-0:68:1909":{"id":"a:2:8978:6323-0:68:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8978:6323","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3565-0:68:1909":{"id":"b:2:3565-0:68:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:2254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3563:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3567:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2419-0:21:1937":{"id":"b:2:2419-0:21:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:2254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2421:2217"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2741:1615":{"id":"2:2741:1615","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42150:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2988:2258-0:21:1937":{"id":"a:2:2988:2258-0:21:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2988:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2988:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2988:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12814:25767":{"id":"2:12814:25767","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10581:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10581:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12828:25810":{"id":"2:12828:25810","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:11546"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8978:6323-0:21:1937":{"id":"a:2:8978:6323-0:21:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8978:6323","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8978:6323","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8978:6323","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3565-0:71:1912":{"id":"b:2:3565-0:71:1912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:2254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3563:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1912","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3567:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2931:243-0:21:1937":{"id":"a:2:2931:243-0:21:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12807:25768":{"id":"2:12807:25768","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12049:1639"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12825:28094":{"id":"2:12825:28094","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44157:5331","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12878:30735":{"id":"2:12878:30735","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12492:11546","`DoubleEndedIterator`":"2:7884:127","prim@char":"1:12032:450","str::rmatch_indices":"2:12881:30736"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44053:5327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2728:743":{"id":"2:2728:743","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:31423":{"id":"5:5543:31423","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12848:25800":{"id":"2:12848:25800","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:11546"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12308:5150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2948:253-0:71:1912":{"id":"a:2:2948:253-0:71:1912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1912","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12851:25802":{"id":"2:12851:25802","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12492:11546","`DoubleEndedIterator`":"2:7884:127","prim@char":"1:12032:450","str::split":"2:12845:25798"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43921:5153","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:11544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[250,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1914","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:17:1904"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:51:255":{"id":"0:51:255","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[448,4],"end":[448,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:57:597":{"id":"0:57:597","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[460,4],"end":[462,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3567:1630":{"id":"2:3567:1630","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39767:5222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2736:1617":{"id":"2:2736:1617","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42150:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:26939":{"id":"5:5554:26939","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12918:25657"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1909":{"id":"0:68:1909","crate_id":0,"name":"Always","span":{"filename":"src/lib.rs","begin":[213,0],"end":[213,18]},"visibility":"public","docs":"Always run on scope exit.\n\n“Always” run: on regular exit from a scope or on unwinding from a panic.\nCan not run on abort, process exit, and other catastrophic events where\ndestructors don’t run.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:2988:2258-0:68:1909","a:2:8978:6323-0:68:1909","a:2:2948:253-0:68:1909","a:2:8977:6114-0:68:1909","a:2:2931:243-0:68:1909","b:2:2422-0:68:1909","b:2:2419-0:68:1909","b:2:2722-0:68:1909","b:2:2726-0:68:1909","b:2:2737-0:68:1909","b:2:3565-0:68:1909","b:2:2732-0:68:1909","0:69","0:12"]}}},"2:12866:25808":{"id":"2:12866:25808","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12804:25710":{"id":"2:12804:25710","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12047:11547"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3565-0:21:1937":{"id":"b:2:3565-0:21:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:2254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3563:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3567:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:76:716":{"id":"0:76:716","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9902:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9883:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12831:25311":{"id":"2:12831:25311","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:11546"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2419-0:74:1914":{"id":"b:2:2419-0:74:1914","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:2254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1914","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2421:2217"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12822:4953":{"id":"2:12822:4953","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43889:3041","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12823:28892":{"id":"2:12823:28892","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12824:28904"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44177:5333","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2988:2258-0:71:1912":{"id":"a:2:2988:2258-0:71:1912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2988:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1912","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12817:30730":{"id":"2:12817:30730","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12038:1534","crate::ops::IndexMut":"2:3231:2314","str::slice_unchecked":"2:12816:30729"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12857:30733":{"id":"2:12857:30733","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12492:11546","str::split":"2:12845:25798","prim@char":"1:12032:450","str::split_terminator":"2:12854:30732"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43971:5326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:11544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12884:30737":{"id":"2:12884:30737","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:1914":{"id":"0:74:1914","crate_id":0,"name":"OnSuccess","span":{"filename":"src/lib.rs","begin":[227,0],"end":[227,21]},"visibility":"public","docs":"Run on regular scope exit, when not unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:2988:2258-0:74:1914","a:2:8978:6323-0:74:1914","a:2:2948:253-0:74:1914","a:2:8977:6114-0:74:1914","a:2:2931:243-0:74:1914","b:2:2422-0:74:1914","b:2:2419-0:74:1914","b:2:2722-0:74:1914","b:2:2726-0:74:1914","b:2:2737-0:74:1914","b:2:3565-0:74:1914","b:2:2732-0:74:1914","0:75","0:16"]}}},"2:12890:30740":{"id":"2:12890:30740","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12891:30741":{"id":"2:12891:30741","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12808:1984":{"id":"2:12808:1984","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42007:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10581:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10581:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12834:25313":{"id":"2:12834:25313","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:11546"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:11544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12913:30747":{"id":"2:12913:30747","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12453:133","`FromStr`":"2:12452:6334"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42150:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12452:6334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12452:6334","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:21:1937":{"id":"b:2:2726-0:21:1937","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2728:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12888:30739":{"id":"2:12888:30739","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12869:25809":{"id":"2:12869:25809","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:11544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:1912":{"id":"0:71:1912","crate_id":0,"name":"OnUnwind","span":{"filename":"src/lib.rs","begin":[220,0],"end":[220,20]},"visibility":"public","docs":"Run on scope exit through unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:2988:2258-0:71:1912","a:2:8978:6323-0:71:1912","a:2:2948:253-0:71:1912","a:2:8977:6114-0:71:1912","a:2:2931:243-0:71:1912","b:2:2422-0:71:1912","b:2:2419-0:71:1912","b:2:2722-0:71:1912","b:2:2726-0:71:1912","b:2:2737-0:71:1912","b:2:3565-0:71:1912","b:2:2732-0:71:1912","0:72","0:14"]}}},"b:2:2422-0:71:1912":{"id":"b:2:2422-0:71:1912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:2254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2416:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1912","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2424:22993"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:20:1926":{"id":"0:20:1926","crate_id":0,"name":"defer_on_unwind","span":{"filename":"src/lib.rs","begin":[285,0],"end":[289,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on unwinding from panic).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_unwind {\n    ($($t:tt)*) => { ... };\n}"}},"b:2:2722-0:68:1909":{"id":"b:2:2722-0:68:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2725:2442"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:10:1901":{"id":"0:10:1901","crate_id":0,"name":"Strategy","span":{"filename":"src/lib.rs","begin":[201,0],"end":[205,1]},"visibility":"public","docs":"Controls in which cases the associated code should be run","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:11:1904"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:14","0:12","0:16"]}}}},"paths":{"6:6248:16775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:3251:4846":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:14087:3652":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:11537:5517":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:12872:3409":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:4592:2264":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:11294:3236":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:16049:4189":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:40382:29041":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:1567:4846":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:44157:5331":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:3753:4929":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:13202:3469":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:7523:2830":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:12153:3348":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:40516:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:3155:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:5152:16067":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"18:96:22974":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:46536:5397":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:7782:4662":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:482:2882":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:11767:3294":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:46292:5384":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:12497:5141":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"18:636:3008":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:6545:4477":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:5033:16054":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:40783:5115":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:13298:2880":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:7708:4287":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:14786:3843":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:12180:3350":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:903:4820":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:7534:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"0:40:1927":{"crate_id":0,"path":["scopeguard","guard_on_unwind"],"kind":"function"},"1:1556:4844":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:12356:3372":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:44195:5170":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:4182:2821":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:6268:32890":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:6120:16744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:46560:5398":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:21288:29828":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:8403:5644":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:2370:6193":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:42399:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"13:226:32869":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:10296:2866":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"11:2542:29381":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:4808:16027":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:12057:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:7865:5572":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:7643:6203":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"11:1007:4566":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:13096:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:2931:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:4497:4305":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:9467:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:3177:1899":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:3670:6247":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:6249:2897":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"11:430:32818":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:4159:6278":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:43827:5318":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:15557:4065":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:22380:6469":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:4724:16019":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:11604:3271":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:7342:32889":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:928:6125":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:45959:5371":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:1286:4834":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:8545:4820":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:3021:2295":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:10379:2870":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"11:1160:4838":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:5240:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:2832:4264":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:13869:3606":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:43798:5315":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:12047:796":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:11497:3261":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:8850:4820":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:8292:5631":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:6837:17161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:4508:2854":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:15990:4176":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:14359:3703":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:3163:25238":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:40476:5235":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:15087:3925":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:4742:6269":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:48331:5478":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:7846:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:16098:4204":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:4603:16009":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:40675:5248":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:7306:2807":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:6485:4271":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:5891:16726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:1115:30435":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:14896:3883":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:16087:4203":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:42133:11825":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:8453:5298":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:15345:3990":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:44622:11868":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:3251:3063":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"9:486:17762":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:3241:5509":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:21908:6393":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:11022:5156":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:22266:6476":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:13254:3480":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:10840:25065":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:7736:4660":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:5612:4274":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:5004:16050":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:10925:18860":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:4830:16030":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"11:1676:1937":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:6318:4452":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:11714:3288":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:6332:4268":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:1527:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:42201:4839":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:3425:5627":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:8237:6245":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:4388:15986":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:44488:5349":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:10337:3174":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"18:719:3025":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12614:18849":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:7523:4651":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:3806:2453":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:149:2781":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:3915:4300":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:10520:32892":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:11998:28023":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"14:40:3455":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:40745:5256":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:12197:5164":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:6813:17159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11168:18877":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"0:0:2000":{"crate_id":0,"path":["scopeguard"],"kind":"module"},"17:11576:3269":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:4700:6310":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:10538:5510":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:4932:16043":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:8115:4717":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:580:12489":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:6530:2795":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"9:393:17764":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:10432:32895":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:7380:28021":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:1131:5917":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:4862:4316":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:8239:4618":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:7884:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:46657:5401":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:13118:29565":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:44618:11865":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:2586:2884":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"11:1603:4842":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:46438:5394":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:46390:5393":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:8326:5635":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:10102:3036":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:9147:5674":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:11991:3334":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:15101:3928":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"11:0:2120":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:504:2386":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:43735:5311":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:2169:18905":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:2953:1895":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:40533:28954":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7554:4284":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:8858:5659":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:2368:6192":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:4964:6315":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:5825:2890":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:7895:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:7657:16234":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:11516:5516":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:42243:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:5104:16060":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:6357:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:42477:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:21273:29827":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:21446:6391":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:7644:2411":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:9014:5668":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:12052:1638":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:12324:3367":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:12784:3404":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:5121:4324":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:43879:5323":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:16016:4182":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:2205:1960":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:4777:716":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:3394:2821":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:7645:16232":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:11535:5159":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:7388:17540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:7474:4639":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:42150:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:6901:4278":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:41736:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"11:811:2834":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:4488:15995":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:10097:5678":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:7580:2907":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13182:3468":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:10929:5153":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:48221:5470":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10896:3198":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:9938:2358":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:3103:2312":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:11088:3216":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:40684:5249":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:12410:3379":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:44125:5330":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:9128:5551":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:11453:2919":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:10812:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:4518:2368":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:6753:4517":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:15725:4107":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:3195:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:8308:5633":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:2938:2254":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:14843:3877":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:1734:13395":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6415:4462":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:15961:3468":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:4417:4303":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:21945:29815":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:44638:11871":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:4028:6257":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:6297:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:4092:4839":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:6107:16742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:7692:17727":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:12723:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:4719:4311":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:43889:3041":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:10941:3201":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:9164:5675":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:14399:3706":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:5648:4333":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:14878:3878":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:4563:2855":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:6818:4530":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:11158:5656":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:22334:2525":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:7371:17539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:10780:5695":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:42090:5281":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:1528:13376":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:3196:31967":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:7339:28909":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:46208:5381":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:9902:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:11617:3272":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:3090:2309":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:4989:16048":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"18:644:2984":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:22227:6475":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:12972:3420":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:2972:2513":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:8169:6202":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:9094:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:6861:2844":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:41793:6246":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:42983:2366":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:14765:3835":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:14485:3369":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:9048:25074":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:41942:5518":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:1406:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:8220:5331":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:4949:4319":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:4439:5095":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:10813:32900":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:7026:2905":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:46992:5423":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:6696:4504":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:5568:6339":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:2766:4261":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:2413:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:7689:2396":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:3160:28478":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:1558:13379":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:3607:4839":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:4584:16007":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:1477:4823":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:4610:16010":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:7436:4381":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:10738:5689":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:8072:4712":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:3461:4294":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:4566:16005":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:2942:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:640:5489":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:5661:4338":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:4311:5520":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:39662:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"18:538:2991":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:3479:2325":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:8232:5626":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:15177:3947":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:3324:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:4527:4306":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:40731:5253":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:1315:4838":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:13419:3506":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:21234:2994":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:15125:3933":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:9678:18831":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:363:2410":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:22807:6249":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:5905:4364":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:11226:3230":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:12048:792":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"11:875:4830":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"11:2469:2834":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:16123:4209":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"5:7028:2850":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:5574:4269":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:12037:1501":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:2985:2257":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:12042:690":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:5130:16064":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:2380:6198":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"11:2326:4832":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:10581:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:7828:4670":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:281:2329":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:7481:28954":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:6541:5116":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:22683:5192":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:10315:3045":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:15868:4131":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:10667:32897":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:10940:5568":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:3600:4295":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:10749:4839":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:21627:5182":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:23366:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:7906:5574":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:15747:4113":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:43715:5309":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:2933:17915":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:44477:11559":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:3581:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:15710:4106":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:5049:4322":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:22365:6203":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"16:6456:4465":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:15079:3922":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:7613:4656":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:6547:28936":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:12572:3390":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:9860:18846":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:44351:5345":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:40985:5264":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:9946:2361":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:909:4840":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:3735:5516":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:41009:5122":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:1516:4822":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:7128:5672":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:8551:5652":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:16032:4187":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:4293:5093":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:3047:2300":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:10894:5152":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:41984:5138":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:22774:28957":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:9591:30223":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:10035:3172":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:3397:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:5650:2832":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:3000:2291":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:44630:11869":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:39542:2323":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:6700:17155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:5885:16725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:10473:2912":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:2703:31883":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:44910:5366":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:13083:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"11:687:4839":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:8978:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:8195:4726":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:42747:2358":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:21505:6390":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:10757:27440":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:12366:18972":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:7651:4657":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:16134:4211":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"16:2428:4247":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:1780:2278":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"11:673:4820":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:4172:5091":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:2979:30430":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:4411:2821":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:3064:2303":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:48118:5466":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:5009:16051":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:7717:6111":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:15535:4059":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:1455:2453":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:3164:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:1878:2543":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:7267:4927":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:46582:5399":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:10852:18858":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:15680:4101":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:13648:3568":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:41822:28955":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:12234:5167":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"18:699:3019":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:5075:16058":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:5910:16728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:1495:4840":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:12014:25060":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:1873:5498":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:8984:2390":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:2548:4252":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"18:736:22984":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:40549:5241":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:9883:232":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:13083:3439":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:40:2791":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:951:4831":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:1966:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:6781:13499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:30414:6248":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:42360:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:8904:6359":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11399:3244":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:3080:2307":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:46962:5422":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:8979:1979":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:1537:13377":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:14208:3672":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:7848:5570":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:9943:18830":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:7467:4948":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:40398:5228":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:8281:6281":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:6879:4535":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:5085:16059":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:15842:3440":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:5974:16732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:32463:5214":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:7559:4956":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:914:4821":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"18:599:32901":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:12091:3343":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:40754:5109":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:1507:13373":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:48010:5464":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:2474:5918":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:1063:4834":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:507:12480":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:11001:3210":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:2881:4266":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:3074:2306":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:45937:5370":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:15013:3906":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:569:12487":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:21290:29820":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:0:877":{"crate_id":6,"path":["libc"],"kind":"module"},"16:7503:4282":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:3482:2355":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:48408:5481":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:6071:16738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:9026:5670":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:15311:3983":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:563:12486":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:13504:3534":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:23242:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"0:10:1901":{"crate_id":0,"path":["scopeguard","Strategy"],"kind":"trait"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:3460:3065":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:6159:16746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:5154:2829":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:7668:16235":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:4578:16006":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:40502:5239":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:5056:853":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:48346:5479":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:2596:4254":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:11727:3290":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:886:2803":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:2450:4248":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"11:102:32817":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:1650:13387":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:7510:4954":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:44498:5353":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:2618:4255":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:2696:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:4860:16034":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:5816:4353":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:9404:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:12046:795":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:42516:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:11345:3241":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:6741:13516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:654:12538":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:39602:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12921:3369":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:46067:5375":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:22:730":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:8001:5577":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:6228:15899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:40995:5121":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:1570:13380":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:44053:5327":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:2948:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:11045:2915":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:4616:16011":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:7582:4653":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:43254:5294":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:15645:4088":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:15480:4040":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:5446:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:13856:3603":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:11612:5560":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:11155:3222":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:13287:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:39767:5222":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:8286:6282":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"18:652:2984":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:26244:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:14156:3666":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:12244:3358":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:14296:3685":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:2321:4236":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:10155:5680":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"5:266:2795":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:5897:16727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:11313:5703":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:5987:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:47760:5461":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:7809:11766":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:6204:4415":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"11:2423:2453":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:14439:3711":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:3584:3066":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:3052:2305":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:1604:13384":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:43873:5163":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:44654:11881":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:0:1526":{"crate_id":1,"path":["std"],"kind":"module"},"16:4344:4302":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:22600:5185":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:590:2995":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11563:3268":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:0:2125":{"crate_id":17,"path":["object"],"kind":"module"},"16:3797:4297":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"11:1883:4820":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:2662:5505":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:11549:3267":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:15117:3931":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:483:12476":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:2354:6188":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:3988:6255":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:7067:4563":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:11269:3208":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:11485:3257":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"18:80:22973":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:6376:18779":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:7284:5281":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:2690:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:10725:4820":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:596:12491":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:7136:24476":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:10338:5929":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:7694:4286":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:11459:3249":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:2941:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:1576:13381":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:13162:3458":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13235:3475":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:1536:4926":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:42209:2453":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:13170:5179":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:7901:5502":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:4814:16028":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:2329:2525":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"5:7330:2453":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:13809:3597":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:8977:6114":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:8011:6235":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:1718:13394":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:5052:16056":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:9559:18826":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:867:4823":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:5500:5536":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:15546:4064":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:7931:4928":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:3837:5517":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:11690:3284":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:13347:3492":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"18:515:2981":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:4956:419":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:7621:18785":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:5746:5540":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:40703:5252":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:4647:16013":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:15337:3989":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:4835:4315":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:13097:3440":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:22632:5186":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:3672:2815":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:43001:29039":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:12746:3402":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:16170:3485":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:8097:4715":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:43772:5244":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:7599:2909":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:10881:18859":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:12009:3188":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:10657:3188":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"9:357:17778":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:5388:11534":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:12953:3417":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:4740:6267":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:7434:6124":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13383:3501":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:11178:11881":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:15224:3957":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"15:288:17868":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:12257:5168":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:10962:3206":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"0:18:1918":{"crate_id":0,"path":["scopeguard","defer"],"kind":"macro"},"2:2825:4960":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"15:0:2123":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:14969:3894":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:39684:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:14509:3727":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:8936:6360":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:634:4921":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:1387:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:23304:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:43029:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:8207:3041":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:48241:5472":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:10785:32894":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:7338:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:15367:3995":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:7862:4674":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:22143:6473":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"11:2536:32810":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"10:0:2119":{"crate_id":10,"path":["adler"],"kind":"module"},"17:15631:4086":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:42005:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"18:755:3034":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:10569:32893":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:6961:17169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:4050:6261":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:4613:4309":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:4480:15994":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:12308:5150":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:7621:2891":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:46138:5378":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:2209:6185":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"18:481:2982":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"12:0:2121":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:6425:4463":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:43953:5325":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:2256:31863":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:46089:5376":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:11126:3219":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:43275:5298":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:3217:4845":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:1501:13372":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:4870:16035":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:1810:1185":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:4847:16032":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:4444:2823":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:22414:6468":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:11743:3292":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"18:727:3028":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:44007:5155":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:2154:4930":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:786:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:4:1111":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:10968:25061":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:574:12488":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:2969:17916":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:12140:3347":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:7610:16227":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:6017:18777":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:2702:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:30873:29026":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"5:2062:4929":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"11:123:2785":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12459:3208":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:7391:11761":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:5117:16062":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:4939:1098":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:40662:5247":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:13695:3580":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:2202:5501":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:3065:3077":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:4469:6283":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:42321:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:15192:3949":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:14426:3710":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:8973:5662":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"11:837:4825":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:8146:5616":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:2359:4244":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:14385:3705":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:40606:5242":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:548:12484":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:21256:29824":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:7269:32887":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:2518:5503":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:43817:5317":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:2784:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:13584:3539":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:475:12475":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:2653:6203":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:12510:3386":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:2670:4257":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:6352:4455":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"9:426:17765":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:4625:6256":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:5829:16659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:5971:2897":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:10394:2875":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:41209:5265":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:42123:5283":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:40483:11610":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:7556:17699":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:5322:4325":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:23335:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:14346:3702":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:6136:32034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:11657:3278":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:435:3049":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:6691:17154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:13676:3575":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:5123:16063":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:11590:3270":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"13:0:2115":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:3655:3082":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:6162:2896":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:21903:6203":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:14282:3683":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:6261:4447":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:1969:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:5015:5099":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:4569:6301":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:13961:3619":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:1789:2834":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:6604:2453":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:42557:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:40563:6172":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:3031:2297":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:11215:3228":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:5798:4348":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:3049:17917":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:13145:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:8330:6311":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:6351:6479":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"9:0:2118":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:11340:5556":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:6243:4437":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:5859:16723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12115:3345":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:3188:1973":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:533:12482":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:5939:4220":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:9021:5669":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:4745:16020":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:2983:30432":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:22745:28935":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:495:12478":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:1909:703":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:6012:16735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:588:6105":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:31271:2994":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"9:52:17781":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:40774:5114":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:12310:3366":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:893:2815":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"18:671:3015":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:4231:5519":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:3230:31965":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:9934:2356":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:21244:29824":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:5961:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:12273:5169":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:15003:3905":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:2644:4256":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:11243:3233":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:3166:25254":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:47262:5428":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"11:1066:17843":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:7838:3120":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:500:1129":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"10:36:32803":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:12999:3421":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:14757:3832":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:42218:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:8959:5661":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:8535:5523":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"11:1087:32811":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:10986:5657":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:1691:13391":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"11:2554:32807":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:8802:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:12035:1148":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:9971:5276":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:5696:18775":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13395:3504":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"11:1923:4846":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:21497:6203":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:12701:3400":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:13765:3589":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:13322:3490":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:5992:16734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:44167:5332":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:14122:3663":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:4635:27742":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:15659:4095":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:43285:5302":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:13026:3427":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:6083:17887":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:2284:17888":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:41929:5279":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"11:328:32812":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:9790:18844":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:401:3046":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"18:690:3018":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4523:15999":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"11:2548:32804":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:4455:15833":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:8134:4720":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:4906:6308":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:5821:5106":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:10143:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:1486:4824":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:4050:2795":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"0:20:1926":{"crate_id":0,"path":["scopeguard","defer_on_unwind"],"kind":"macro"},"6:4556:16004":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:8920:6358":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:10774:5148":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"11:2562:32808":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:39503:2326":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:4774:4313":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:2435:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:13336:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:32474:5215":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:8385:6319":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:41906:28946":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"11:742:4822":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"11:832:4840":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:9479:2911":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:533:2391":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:4444:5096":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:7276:2453":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:10967:5154":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:23180:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:42142:2401":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:13056:3431":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"11:2403:4839":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:40653:5246":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:4710:16018":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:23273:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:9942:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:21616:6203":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:4252:4820":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:43056:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:3732:5515":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:5955:16688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:42438:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:22547:5184":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:32575:2263":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:48232:5471":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:9090:5141":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:6929:4539":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:2773:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:4986:4320":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:47228:5427":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:9099:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:14921:3885":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13684:3577":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:849:4839":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:12828:3407":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:44650:11867":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:6169:16747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"11:774:4823":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:5051:5528":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:12512:11544":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:43847:5319":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:7679:16236":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:15212:3956":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:44872:5361":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:1562:4845":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:41251:5129":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:11052:3189":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:10051:3173":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:6842:2832":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:43697:5306":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:3387:2317":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:1538:2453":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:42081:2453":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:3427:29380":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:13633:3564":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:12230:3353":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:16160:4215":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"11:1896:2834":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:9759:18843":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:501:12479":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:44025:5156":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:48369:5480":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:39618:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:6114:16743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:44646:11866":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:1541:2815":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:6128:16745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:6943:17168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:9104:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:44893:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:22188:6474":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:21499:6387":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:11449:3119":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:1514:13374":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:1639:13386":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11507:3262":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:12029:3336":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:4639:27746":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:39954:25664":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:40596:2856":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:12264:3363":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:4506:15997":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:15279:3975":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:4383:5521":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:4585:4308":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:11369:3242":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:14221:3673":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:13121:3454":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:15589:4080":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:7805:11767":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:16180:3490":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:22320:6477":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:11027:3163":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:9730:18842":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:8991:24675":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:22656:5191":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:6499:4288":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:2993:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:7015:4556":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:6047:16736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:23842:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:7422:4947":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:12202:18971":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:45983:5372":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:9196:27718":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:6968:18782":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:10247:6343":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:7275:11769":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:1596:13383":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:13989:3623":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:15432:4039":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:8814:5655":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:5571:6340":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:7768:4275":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4440:15990":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:41218:5126":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:5928:16730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"11:2443:2815":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:922:4825":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:11816:2923":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:5673:4273":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:11355:5557":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:4461:15992":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:14021:3627":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:4998:16049":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:14235:3676":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:11536:3266":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:30675:2281":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:1901:2542":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:3563:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:4744:6270":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:14778:3842":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:8213:5148":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:44922:4851":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:3687:2795":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:7561:3030":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:2939:2255":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:44837:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:1439:4839":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:4922:16042":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:46338:5391":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:7597:32886":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11978:3333":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:3184:4820":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:21625:6388":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:43478:5304":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:47152:5425":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:5745:2821":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:44634:11873":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:7923:5576":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:5044:16055":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:12033:5161":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:6944:32885":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:12053:1635":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:6583:4479":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:4381:2823":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:15612:4081":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:41202:5125":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:1054:4832":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:12536:3387":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"16:7660:4658":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:11439:3247":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:10186:6208":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:3032:4290":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:12850:3067":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:7663:2397":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:903:2834":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:10067:3035":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:9731:2377":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:10578:2396":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:12047:11547":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:11321:3188":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:1664:13388":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"11:1582:4841":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:2699:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:2524:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:9927:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:11113:3218":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:8978:6323":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:4020:2815":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:1270:4566":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:1072:4838":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:10608:3187":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:1550:4843":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:2183:31876":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:836:4820":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:12506:3021":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:47198:5426":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"11:1025:4832":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:5963:4370":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:6686:2795":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:13334:3491":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12758:3403":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:15519:4055":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:3069:2304":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:3500:6201":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:14470:3717":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:123:12159":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:7633:16230":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:14455:3713":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:11395:3243":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:4641:4310":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13896:3611":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:15184:3948":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:1591:13382":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:10355:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:5830:4354":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:4854:16033":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:15733:4110":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:2339:4238":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"15:306:17869":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:22616:28948":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"11:787:4824":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:5111:16061":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:43497:5146":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:10822:5514":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:15374:3997":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:22055:6203":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"19:0:1128":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:6644:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:3191:4844":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:12220:3067":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:13478:3529":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:41965:5136":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:21518:5182":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:40633:5244":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"11:2383:4820":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"18:766:22985":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:48316:5477":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:10988:3209":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:13787:3596":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:15267:3972":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:6960:4542":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:4806:4314":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:4375:15985":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:1773:633":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:12345:3371":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"14:31:4811":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:4783:16024":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:12486:3385":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:4496:15996":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"11:856:4828":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:6596:5925":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:6913:17165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:4889:4317":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:6552:2862":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:10716:3189":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"11:2569:4947":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:6079:16739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:6117:2821":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:47948:5463":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:7738:6158":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:6146:2880":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:2472:4249":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:14662:3749":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:859:2453":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:21302:29822":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:723:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:7568:4285":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:10831:25068":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:10151:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"11:364:2787":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:6915:4279":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:3227:2313":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:9940:2359":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:1819:2611":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:5308:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:6658:12526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:44107:5329":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:30681:2282":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:46037:5374":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:14181:3669":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:8872:5538":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"11:2352:4834":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:43971:5326":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:12031:1031":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:43861:5322":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:3343:2834":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:6346:4454":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:22494:5183":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:44202:5232":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:46838:5405":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:557:2393":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:46514:5396":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:4686:16016":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:5867:16724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:5146:16066":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:9918:18847":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:4914:16041":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:15493:4046":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"11:1917:4845":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:9586:29695":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:3027:2294":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:7492:4647":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:12045:794":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:40521:5240":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"18:624:32903":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:5992:2829":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:8137:3030":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"11:2151:4834":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:3192:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:43921:5153":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:44071:5328":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:7544:4652":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:3443:5513":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:6041:18778":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:22280:2525":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"11:434:32819":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:0:2124":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:3198:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:7843:5569":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:11932:3329":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:6226:4430":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:4666:16014":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:11144:5655":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:6983:27862":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:10915:3200":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:43246:5293":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:1632:13385":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:4428:15988":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:11008:5155":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:10422:3184":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:6279:4450":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:4800:16026":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:47074:5424":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:2788:4262":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:6898:17164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:42733:2357":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:8309:11765":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:6792:4529":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:40815:5117":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:11170:25071":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:10535:5508":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:1796:5496":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:3015:2292":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:46606:5400":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:40831:3006":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:6811:6385":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:2975:30431":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:4865:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:2744:4260":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:43785:5314":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:5128:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:12387:18973":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:4738:6250":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:7548:4955":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:3491:28057":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:6100:16741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:8200:5264":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:13832:3602":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:11755:3293":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:15321:3986":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:6804:17158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:42596:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:1760:5495":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:12548:3388":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:40626:5243":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:15301:3980":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:12036:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:12033:1655":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"8:0:2117":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:5650:2821":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:47412:5429":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:6156:4408":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:42282:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:2319:634":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:11388:24493":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:10430:5654":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:3764:4296":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:3231:2314":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:11800:3297":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:12517:11543":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:9034:5672":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:32427:6341":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"0:68:1909":{"crate_id":0,"path":["scopeguard","Always"],"kind":"enum"},"17:13273:3481":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:4367:1977":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:2236:31879":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:7375:2453":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:10242:3040":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:7462:4638":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:42740:2356":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:10792:5571":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:11234:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"1:11307:5552":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:9968:18848":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:12043:692":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:6893:4537":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:9932:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:14497:3720":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:4435:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:10803:3191":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:8050:4711":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:11981:5710":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"13:110:32868":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:46484:5395":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:1743:657":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:2331:2526":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:4773:3072":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:7041:4557":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"0:37:1924":{"crate_id":0,"path":["scopeguard","guard_on_success"],"kind":"function"},"17:13909:3612":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:14312:3689":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:588:12490":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"14:215:4816":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:11051:2916":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:4529:16000":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:7937:2327":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:40370:5225":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:8493:6333":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:6357:5110":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:9274:2611":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:7054:4560":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:12560:3389":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:13297:3485":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:10471:32899":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:1697:13392":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:12049:1639":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:4366:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:511:3050":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:44426:5173":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:40763:5257":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:23397:5210":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:6868:17162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:7540:5707":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:22729:28930":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:14887:3882":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:40442:5090":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:7318:4597":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:7855:2328":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:14413:3709":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:48156:5467":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:10953:5536":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:9399:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:7618:2834":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:4324:5094":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:6531:4475":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:15287:3978":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:13516:3537":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:30697:2366":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:16076:4198":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:10618:32896":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:4878:16036":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:40722:5105":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:8190:5247":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:3323:6232":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:4703:6283":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:7732:6112":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:14698:3780":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:14373:3704":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:44935:5367":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:39706:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:5625:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:15671:4097":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:4798:2888":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13145:3455":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:5403:3172":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:4151:6277":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"15:327:17873":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:11370:5559":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:8476:5647":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:10856:5151":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:48194:5468":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:42754:2359":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:1682:13390":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:2574:4253":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:7668:2399":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:13391:6126":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:7529:3051":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:12797:3406":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:7346:4946":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:10762:27728":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:46916:5421":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:7792:18786":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:5140:16065":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:11065:3215":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:12684:3140":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:7915:5575":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:46735:5403":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:4764:16022":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:3239:5508":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12166:3349":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"7:78:17751":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:10802:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:6569:4276":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:45913:5369":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:3199:5506":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:39781:5223":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:44334:5344":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:39728:2316":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:22708:28942":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:44880:5363":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:23149:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:10076:5496":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:43903:5148":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:2600:2870":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:5639:5537":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:12052:3337":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:1685:2795":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:46704:5402":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:22795:5206":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:7884:18787":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:3280:5511":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"18:507:2984":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"10:44:4852":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:8300:5624":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:5712:4339":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:6819:17160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:5023:16053":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:7651:16233":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:13436:3514":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"11:2140:4832":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:9651:18841":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:11645:3275":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:6361:4456":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:3402:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:23087:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:12017:11833":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:13463:3523":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:11523:3264":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:527:12481":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:6687:4503":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:3035:2301":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:12492:11546":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:4473:15993":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:48252:5473":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:13922:3614":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:8274:5518":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:4364:15984":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"18:707:3021":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:42073:4839":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"11:1142:4837":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:1496:13371":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:8205:18788":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:7513:4650":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:13663:3573":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:6086:16740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:9069:6031":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:40422:5230":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:10321:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:6540:5548":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:41759:5133":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:3442:2324":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:21271:29818":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:7391:18784":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:43238:5291":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:5866:4361":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:1687:2821":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:1040:4566":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:8154:4721":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:6543:6354":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:15200:3950":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:15507:4052":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:8226:5624":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:2907:4267":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:692:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:7722:4277":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:48072:5465":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:22278:29313":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:3510:6224":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:4557:4307":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:6401:4270":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:6742:4516":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:8167:4724":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:4595:16008":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:2991:2260":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"5:7003:2847":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:830:2801":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:44710:11882":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:555:12485":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:4535:16001":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:489:12477":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:40796:5258":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:41233:2864":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:32467:4618":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:3086:2308":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:4196:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:6189:4413":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:1892:29036":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:5344:2795":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:9936:2357":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:11194:18878":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:10559:3186":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:4824:16029":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:6711:17156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:945:4830":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"14:221:4818":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:14950:3893":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:9186:27754":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:2228:3062":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:12050:1636":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:8891:5660":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:43746:5312":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:22409:6470":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:43078:2367":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"11:800:2815":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:5082:5528":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"9:177:17831":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:8562:5653":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:10095:5679":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:30641:1897":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:5363:4326":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"11:1910:4844":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12600:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:10207:3039":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:1703:6274":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:5743:4344":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:7622:16229":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:15566:4067":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:2996:2262":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:13707:3582":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:3043:2298":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:790:2798":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:39760:2318":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:15133:3935":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:7450:2400":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:13407:3505":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:44463:5348":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:4947:16044":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:6194:5546":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:11290:2917":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:23056:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:12039:1620":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:4841:16031":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:5381:5529":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:15527:4058":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:11034:2914":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:11476:5515":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:12898:18851":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:3278:5510":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"18:0:2126":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:46107:5377":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:46245:5383":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11945:3330":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:11568:5160":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:939:4828":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:2810:4263":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:6889:17163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:8300:6127":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:44626:11870":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:12396:3376":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:5934:5108":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:44283:11558":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:8157:5514":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:6513:4467":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:31243:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:9884:2355":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:11382:24479":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:15855:3454":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:23118:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:11307:3237":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:62:12104":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:14194:3671":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"3:0:477":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:32481:2368":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:30767:29035":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"11:1107:4836":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:8796:5654":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:39589:2315":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:23211:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:3059:2302":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:44320:5341":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"0:21:1937":{"crate_id":0,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"2:7169:2461":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:12930:18852":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:15384:4002":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:3366:5266":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12103:3344":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:3936:6251":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:6798:17157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:44211:5090":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:13448:3517":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:11141:3220":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:40355:5090":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:42056:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:2352:2516":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:44305:5336":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:2088:2545":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:43725:5310":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:542:12483":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7006:4553":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:2048:4928":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:3098:2311":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"18:531:2988":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:7598:16225":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:7993:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:5753:5543":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:41224:5266":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:5088:4323":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:7497:4951":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:564:2993":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:46227:5382":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:5435:4327":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:2706:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:7284:4945":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:12596:3392":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:6896:2904":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:4776:16023":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:44642:11872":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:12659:18828":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:43013:4689":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:8842:5657":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:7634:2838":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:1151:30438":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:14633:3729":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:40450:5232":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:11036:5157":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:21933:5181":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:2526:4251":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5588:4272":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:15160:3939":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"7:31:17744":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12380:3374":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:5632:2897":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:7102:18783":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:4977:29368":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:12127:3346":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:2946:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:12335:3369":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:8828:5656":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:8347:29693":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"11:2231:3254":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"11:1903:4843":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:16004:4180":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:6666:13331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:12051:1637":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:2944:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:9109:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:4543:16002":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:12055:1694":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:11675:3280":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"18:582:2994":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:637:5487":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:10817:5150":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:5004:2821":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:119:12158":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:40434:5231":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:11593:5704":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:11701:3285":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:48278:5475":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:6426:5265":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:1534:4820":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:6467:4466":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:4184:5092":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:12077:3339":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:15037:3908":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:11779:3295":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:6263:16776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:256:3043":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:40806:5259":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:10532:5506":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:4795:11603":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:6934:17167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:8181:4289":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:2696:4258":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:47870:5462":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:0:532":{"crate_id":2,"path":["core"],"kind":"module"},"2:45893:5368":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"9:450:17763":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:6600:18780":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"0:74:1914":{"crate_id":0,"path":["scopeguard","OnSuccess"],"kind":"enum"},"1:10767:5570":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:13882:3302":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:11215:25056":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:5015:16052":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:3830:4298":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:41243:5127":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:5807:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"11:883:4831":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:4977:16047":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:4572:2369":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:10016:18825":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:41195:5124":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:5068:16057":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:1710:13393":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:5969:16731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"11:1566:17844":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:5760:18776":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7360:32888":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:10726:32898":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:7534:4283":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:43706:5307":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13365:3500":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:44186:5334":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"18:521:22986":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5921:16729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:2518:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:12301:3365":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:12038:1534":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:13976:3622":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:6764:13501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:918:4822":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:12718:18850":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:4180:6280":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:595:3051":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:16146:4214":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"18:609:3002":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:44511:5357":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:3594:4820":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:16109:4205":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:15108:3930":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:43263:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:4219:11519":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12474:3188":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:10510:3185":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:7842:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:2864:4265":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:44673:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:4628:16012":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:15253:3965":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:6871:2846":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:21444:6203":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:6070:2892":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:42065:4820":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:2305:17914":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"11:1051:4834":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:15943:3458":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:10775:3190":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:40457:11609":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:10191:5145":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:10293:3041":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:4038:6258":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:13218:3473":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:16062:4195":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:4100:2821":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:3146:2322":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:11619:5560":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:12290:3364":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:10362:2869":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:4921:4318":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:4167:6279":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:7855:5571":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:15294:3979":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:9813:18845":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:5431:5535":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:42973:28953":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:13309:3488":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:4491:6284":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:1545:2834":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:7639:16231":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"11:351:32814":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:5780:5544":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:8281:4733":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:2197:3059":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:1902:6168":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:4462:4304":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:9624:18824":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:11469:3251":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:40713:5102":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:48293:5476":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"9:507:4907":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:7878:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:7090:4565":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:15049:3911":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:5727:4342":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:14001:3624":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11426:3246":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:39642:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:645:6108":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"18:113:22975":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:22668:29043":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:4698:16017":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:5982:16733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:40855:5261":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:2622:5504":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:12056:1244":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:2416:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:13742:3586":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:14324:3691":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"4:0:2116":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:10571:6203":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:2426:2133":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:46005:5373":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"15:394:17879":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:4884:16037":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:6059:16737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:2988:2258":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:2693:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:40693:5250":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:3225:4843":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"0:71:1912":{"crate_id":0,"path":["scopeguard","OnUnwind"],"kind":"enum"},"14:160:4811":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:6386:4459":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:1913:13559":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:5384:18774":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:3408:2319":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:1505:4821":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:22781:5205":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:5017:4321":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:1758:5494":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:14099:3654":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:30709:29042":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:11412:3245":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:6610:2902":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:11256:3234":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:4434:15989":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:4637:27744":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:4449:15991":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:7365:17538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:43493:28956":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:12191:3351":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:44399:5347":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12255:3362":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:2380:4245":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:48212:5469":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:2144:2386":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:6959:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"9:330:17818":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"14:7:4811":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:11958:3332":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:2482:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:15903:4161":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"11:2369:4849":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:14170:3668":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:9891:18827":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:2504:4250":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:5995:4226":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:14145:3664":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:7754:5568":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:15062:3917":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:3966:6253":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:10950:3203":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:11050:5158":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:2031:3055":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:4351:15983":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:8866:2453":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"11:700:2453":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:14822:3872":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:3980:6254":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:2200:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"11:844:6125":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:22251:6203":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:10974:3208":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:3315:4293":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:3738:4928":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:1521:13375":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:32488:5216":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:15244:3964":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:8303:6131":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:43807:5316":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:14251:3678":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:12445:3384":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:44220:5231":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:13754:3588":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:4401:15987":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"11:2304:4566":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:8352:5522":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"11:396:2789":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:2722:4259":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:41776:5135":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:15:2232":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:6682:12359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"18:681:3016":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"0:34:1921":{"crate_id":0,"path":["scopeguard","guard"],"kind":"function"},"1:11197:5551":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:40412:5229":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:536:4224":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:2943:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:6466:2901":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:40361:5224":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:15235:3961":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:48267:5474":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:6844:4531":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"18:574:2984":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:15980:4175":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:6560:2784":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"11:299:5914":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"14:202:11560":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:2654:11619":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:46758:5404":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:40469:5234":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:11014:3212":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:9474:5569":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:11817:18947":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:6484:2815":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:6721:18781":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:11041:3188":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:3414:2321":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:3994:6256":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:4915:6309":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:4516:15998":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:43646:5305":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:357:2409":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:6013:5922":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:12432:3383":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:14904:3884":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:7616:16228":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:12030:401":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"9:237:5298":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"11:1891:2815":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:4821:6266":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:10944:4904":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:4745:4312":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:4893:16038":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:880:4824":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:42193:4820":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:3232:4235":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:44177:5333":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:12032:450":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:3010:2293":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:12273:3407":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:5634:4329":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:14989:3902":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:7296:2815":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:4902:16039":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:3818:2834":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:22691:5193":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:12452:6334":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:13285:3484":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:15027:3907":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:6430:5547":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:44531:5174":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:1546:13378":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:22057:6389":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"0:19:1923":{"crate_id":0,"path":["scopeguard","defer_on_success"],"kind":"macro"},"2:4619:2370":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:261:3044":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:15329:3987":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:4129:24481":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:1301:4832":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:5415:5534":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"18:660:3009":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:3930:6252":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"14:187:17856":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:13724:3585":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"11:1887:2453":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:4053:4301":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:621:5486":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:4549:16003":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:46368:5392":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:3201:5507":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:12003:6113":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:43293:5303":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:46190:5380":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:7604:16226":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:5877:2815":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:12044:797":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:212:2793":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:1968:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:42635:5143":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:40845:5119":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:4968:16046":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:44819:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:4755:16021":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:14041:3628":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:1094:3052":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:12418:3381":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:14934:3890":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:4042:6259":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:4908:16040":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:6222:16774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:44829:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"7:0:1684":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:6927:17166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:46168:5379":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13948:3617":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:9944:2360":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:12584:3391":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"11:710:4821":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:11605:28286":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:3888:4299":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"14:165:17849":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:1203:3054":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:15356:3994":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:2406:4246":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:15689:4103":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:3094:2310":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:12563:11552":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:4955:16045":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:47618:5460":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:12054:847":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:6718:6311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:4789:16025":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:1424:4820":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:11609:2540":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"14:0:2122":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:14266:3682":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:1821:5497":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:5941:16687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:3005:2296":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:13491:3533":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:3039:2299":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:4676:16015":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:7316:31869":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:5982:4377":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11476:3254":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:1024:2795":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:10137:3037":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"11:2124:4566":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:2487:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:8006:5578":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:11632:3274":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:7702:17728":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:4212:2821":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:14057:3633":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:13935:3615":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:10172:3038":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:5419:3173":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:2911:2887":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:11666:3279":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:1674:13389":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:44698:5358":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:43038:2366":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:7343:12436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"18:614:32902":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:4928:3074":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"5:7367:2453":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:5395:5533":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:5392:11535":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:2973:31850":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"18:491:2983":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}