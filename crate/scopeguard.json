{"root":"0:0:1865","crate_version":"1.1.0","includes_private":false,"index":{"a:2:8315:6121-0:70:1770":{"id":"a:2:8315:6121-0:70:1770","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8315:6121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9208:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12086:32350":{"id":"2:12086:32350","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:70:1770":{"id":"a:2:2700:228-0:70:1770","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2552-0:76:1775":{"id":"b:2:2552-0:76:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[448,0],"end":[462,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1801","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:2921:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:64:587"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12103:4817":{"id":"2:12103:4817","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43490:3049","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:1788":{"id":"0:42:1788","crate_id":0,"name":"guard_on_unwind","span":{"filename":"src/lib.rs","begin":[413,0],"end":[417,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.\n\n## Examples\n\nFor performance reasons, or to emulate ‚Äúonly run guard on unwind‚Äù in\nno-std environments, we can also use the default guard and simply manually\ndefuse it at the end of scope like the following example. (The performance\nreason would be if the [`OnUnwind`]'s call to [std::thread::panicking()] is\nan issue.)\n\n```\nextern crate scopeguard;\n\nuse scopeguard::ScopeGuard;\n# fn main() {\n{\n    let guard = scopeguard::guard((), |_| {});\n\n    // rest of the code here\n\n    // we reached the end of scope without unwinding - defuse it\n    ScopeGuard::into_inner(guard);\n}\n# }\n```","links":{"std::thread::panicking()":"1:498:1036","`OnUnwind`":"0:73:1773"},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnUnwind","id":"0:73:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1801","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12188:32369":{"id":"2:12188:32369","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:11351"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2247-0:70:1770":{"id":"b:2:2247-0:70:1770","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2076"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2250-0:76:1775":{"id":"b:2:2250-0:76:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:22408"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:73:1773":{"id":"0:73:1773","crate_id":0,"name":"OnUnwind","span":{"filename":"src/lib.rs","begin":[220,0],"end":[220,20]},"visibility":"public","docs":"Run on scope exit through unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:8316:6120-0:73:1773","a:2:8315:6121-0:73:1773","a:2:2700:228-0:73:1773","a:2:2740:2114-0:73:1773","a:2:2683:220-0:73:1773","b:2:2250-0:73:1773","b:2:2537-0:73:1773","b:2:2547-0:73:1773","b:2:2552-0:73:1773","b:2:3319-0:73:1773","b:2:2247-0:73:1773","b:2:2541-0:73:1773","0:16","0:74"]}}},"2:12138:32355":{"id":"2:12138:32355","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11778:11351","str::split":"2:12126:23366","prim@char":"1:11917:418","str::split_terminator":"2:12135:32354"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43572:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2550:128":{"id":"2:2550:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9208:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2547-0:23:1798":{"id":"b:2:2547-0:23:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2547-0:70:1770":{"id":"b:2:2547-0:70:1770","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12144:23374":{"id":"2:12144:23374","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11917:418","str::splitn":"2:12141:23372","self::pattern":"2:11778:11351"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43626:4892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:2114-0:76:1775":{"id":"a:2:2740:2114-0:76:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:35:1822":{"id":"0:35:1822","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[348,4],"end":[361,5]},"visibility":"public","docs":"‚ÄúDefuse‚Äù the guard and extract the value without calling the closure.\n\n```\nextern crate scopeguard;\n\nuse scopeguard::{guard, ScopeGuard};\n\nfn conditional() -> bool { true }\n\nfn main() {\n    let mut guard = guard(Vec::new(), |mut v| v.clear());\n    guard.push(1);\n     \n    if conditional() {\n        // a condition maybe makes us decide to\n        // ‚Äúdefuse‚Äù the guard and get back its inner parts\n        let value = ScopeGuard::into_inner(guard);\n    } else {\n        // guard still exists in this branch\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["guard",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:1765":{"id":"0:13:1765","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,28]},"visibility":"default","docs":"Return `true` if the guard‚Äôs associated code should run\n(in the context where this method is called).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:8316:6120-0:70:1770":{"id":"a:2:8316:6120-0:70:1770","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8316:6120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2552-0:23:1798":{"id":"b:2:2552-0:23:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2541-0:23:1798":{"id":"b:2:2541-0:23:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12182:23379":{"id":"2:12182:23379","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:11351"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12098:32352":{"id":"2:12098:32352","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11923:1402","crate::ops::IndexMut":"2:2984:2172","str::slice_unchecked":"2:12097:32351"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5445:24605":{"id":"5:5445:24605","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12199:23247"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[241,0],"end":[244,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:12:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:19:1765"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[428,0],"end":[437,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1801","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:2897:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:53:230","0:54:551"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2250-0:73:1773":{"id":"b:2:2250-0:73:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:22408"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12078:2417":{"id":"2:12078:2417","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5426":{"id":"5:5426","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5427:33023","5:5428:2132","5:5431:33024","5:5434:33025","5:5442:33026","5:5443:33027","5:5444:6033","5:5445:24605","5:5446:24606"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12165:32361":{"id":"2:12165:32361","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12179:22510":{"id":"2:12179:22510","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:11351"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5444:6033":{"id":"5:5444:6033","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:29974":{"id":"2:12105:29974","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12104:30001"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43787:5197","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12135:32354":{"id":"2:12135:32354","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11778:11351","str::split":"2:12126:23366","prim@char":"1:11917:418","`DoubleEndedIterator`":"2:7306:121","str::rsplit_terminator":"2:12138:32355"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43554:5188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3319-0:70:1770":{"id":"b:2:3319-0:70:1770","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12176:32367":{"id":"2:12176:32367","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:11351"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8315:6121-0:76:1775":{"id":"a:2:8315:6121-0:76:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8315:6121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:69:670":{"id":"0:69:670","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[469,4],"end":[473,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9183:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9172:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12077:815":{"id":"2:12077:815","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11917:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3319-0:73:1773":{"id":"b:2:3319-0:73:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12196:23243":{"id":"2:12196:23243","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,0],"end":[232,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:12:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:15:1765"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12198:23246":{"id":"2:12198:23246","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12191:32370":{"id":"2:12191:32370","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:11351"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2683:220-0:76:1775":{"id":"a:2:2683:220-0:76:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12167:32362":{"id":"2:12167:32362","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12150:32357":{"id":"2:12150:32357","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12:1762":{"id":"0:12:1762","crate_id":0,"name":"Strategy","span":{"filename":"src/lib.rs","begin":[201,0],"end":[205,1]},"visibility":"public","docs":"Controls in which cases the associated code should be run","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:13:1765"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:14","0:18","0:16"]}}},"2:12197:23244":{"id":"2:12197:23244","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39574:23256","Self::is_ascii":"2:12196:23243"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39574:23256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9208:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:72:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2541-0:76:1775":{"id":"b:2:2541-0:76:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5442:33026":{"id":"5:5442:33026","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8315:6121-0:73:1773":{"id":"a:2:8315:6121-0:73:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8315:6121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2250-0:23:1798":{"id":"b:2:2250-0:23:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2252:22408"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12097:32351":{"id":"2:12097:32351","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11923:1402","str::slice_mut_unchecked":"2:12098:32352","crate::ops::Index":"2:2980:2171"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12112:23377":{"id":"2:12112:23377","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:11351"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:1775":{"id":"0:76:1775","crate_id":0,"name":"OnSuccess","span":{"filename":"src/lib.rs","begin":[227,0],"end":[227,21]},"visibility":"public","docs":"Run on regular scope exit, when not unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:8316:6120-0:76:1775","a:2:8315:6121-0:76:1775","a:2:2700:228-0:76:1775","a:2:2740:2114-0:76:1775","a:2:2683:220-0:76:1775","b:2:2250-0:76:1775","b:2:2537-0:76:1775","b:2:2547-0:76:1775","b:2:2552-0:76:1775","b:2:3319-0:76:1775","b:2:2247-0:76:1775","b:2:2541-0:76:1775","0:18","0:77"]}}},"a:2:8316:6120-0:76:1775":{"id":"a:2:8316:6120-0:76:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8316:6120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2555:128":{"id":"2:2555:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32045:6139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:0:1865":{"id":"0:0:1865","crate_id":0,"name":"scopeguard","span":{"filename":"src/lib.rs","begin":[1,0],"end":[578,1]},"visibility":"public","docs":"A scope guard will run a given closure when it goes out of scope,\neven if the code between panics.\n(as long as panic doesn't abort)\n\n# Examples\n\n## Hello World\n\nThis example creates a scope guard with an example function:\n\n```\nextern crate scopeguard;\n\nfn f() {\n    let _guard = scopeguard::guard((), |_| {\n        println!(\"Hello Scope Exit!\");\n    });\n\n    // rest of the code here.\n\n    // Here, at the end of `_guard`'s scope, the guard's closure is called.\n    // It is also called if we exit this scope through unwinding instead.\n}\n# fn main() {\n#    f();\n# }\n```\n\n## `defer!`\n\nUse the `defer` macro to run an operation at scope exit,\neither regular scope exit or during unwinding from a panic.\n\n```\n#[macro_use(defer)] extern crate scopeguard;\n\nuse std::cell::Cell;\n\nfn main() {\n    // use a cell to observe drops during and after the scope guard is active\n    let drop_counter = Cell::new(0);\n    {\n        // Create a scope guard using `defer!` for the current scope\n        defer! {\n            drop_counter.set(1 + drop_counter.get());\n        }\n\n        // Do regular operations here in the meantime.\n\n        // Just before scope exit: it hasn't run yet.\n        assert_eq!(drop_counter.get(), 0);\n\n        // The following scope end is where the defer closure is called\n    }\n    assert_eq!(drop_counter.get(), 1);\n}\n```\n\n## Scope Guard with Value\n\nIf the scope guard closure needs to access an outer value that is also\nmutated outside of the scope guard, then you may want to use the scope guard\nwith a value. The guard works like a smart pointer, so the inner value can\nbe accessed by reference or by mutable reference.\n\n### 1. The guard owns a file\n\nIn this example, the scope guard owns a file and ensures pending writes are\nsynced at scope exit.\n\n```\nextern crate scopeguard;\n\nuse std::fs::*;\nuse std::io::{self, Write};\n# // Mock file so that we don't actually write a file\n# struct MockFile;\n# impl MockFile {\n#     fn create(_s: &str) -> io::Result<Self> { Ok(MockFile) }\n#     fn write_all(&self, _b: &[u8]) -> io::Result<()> { Ok(()) }\n#     fn sync_all(&self) -> io::Result<()> { Ok(()) }\n# }\n# use self::MockFile as File;\n\nfn try_main() -> io::Result<()> {\n    let f = File::create(\"newfile.txt\")?;\n    let mut file = scopeguard::guard(f, |f| {\n        // ensure we flush file at return or panic\n        let _ = f.sync_all();\n    });\n    // Access the file through the scope guard itself\n    file.write_all(b\"test me\\n\").map(|_| ())\n}\n\nfn main() {\n    try_main().unwrap();\n}\n\n```\n\n### 2. The guard restores an invariant on scope exit\n\n```\nextern crate scopeguard;\n\nuse std::mem::ManuallyDrop;\nuse std::ptr;\n\n// This function, just for this example, takes the first element\n// and inserts it into the assumed sorted tail of the vector.\n//\n// For optimization purposes we temporarily violate an invariant of the\n// Vec, that it owns all of its elements.\n//\n// The safe approach is to use swap, which means two writes to memory,\n// the optimization is to use a ‚Äúhole‚Äù which uses only one write of memory\n// for each position it moves.\n//\n// We *must* use a scope guard to run this code safely. We\n// are running arbitrary user code (comparison operators) that may panic.\n// The scope guard ensures we restore the invariant after successful\n// exit or during unwinding from panic.\nfn insertion_sort_first<T>(v: &mut Vec<T>)\n    where T: PartialOrd\n{\n    struct Hole<'a, T: 'a> {\n        v: &'a mut Vec<T>,\n        index: usize,\n        value: ManuallyDrop<T>,\n    }\n\n    unsafe {\n        // Create a moved-from location in the vector, a ‚Äúhole‚Äù.\n        let value = ptr::read(&v[0]);\n        let mut hole = Hole { v: v, index: 0, value: ManuallyDrop::new(value) };\n\n        // Use a scope guard with a value.\n        // At scope exit, plug the hole so that the vector is fully\n        // initialized again.\n        // The scope guard owns the hole, but we can access it through the guard.\n        let mut hole_guard = scopeguard::guard(hole, |hole| {\n            // plug the hole in the vector with the value that was // taken out\n            let index = hole.index;\n            ptr::copy_nonoverlapping(&*hole.value, &mut hole.v[index], 1);\n        });\n\n        // run algorithm that moves the hole in the vector here\n        // move the hole until it's in a sorted position\n        for i in 1..hole_guard.v.len() {\n            if *hole_guard.value >= hole_guard.v[i] {\n                // move the element back and the hole forward\n                let index = hole_guard.index;\n                ptr::copy_nonoverlapping(&hole_guard.v[index + 1], &mut hole_guard.v[index], 1);\n                hole_guard.index += 1;\n            } else {\n                break;\n            }\n        }\n\n        // When the scope exits here, the Vec becomes whole again!\n    }\n}\n\nfn main() {\n    let string = String::from;\n    let mut data = vec![string(\"c\"), string(\"a\"), string(\"b\"), string(\"d\")];\n    insertion_sort_first(&mut data);\n    assert_eq!(data, vec![\"a\", \"b\", \"c\", \"d\"]);\n}\n\n```\n\n\n# Crate Features\n\n- `use_std`\n  + Enabled by default. Enables the `OnUnwind` and `OnSuccess` strategies.\n  + Disable to use `no_std`.\n\n# Rust Version\n\nThis version of the crate requires Rust 1.20 or later.\n\nThe scopeguard 1.x release series will use a carefully considered version\nupgrade policy, where in a later 1.x version, we will raise the minimum\nrequired Rust version.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/scopeguard/1/\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:12:1762","0:70:1770","0:73:1773","0:76:1775","0:23:1798","0:36:1782","0:39:1785","0:42:1788","0:20:1779","0:21:1784","0:22:1787"],"is_stripped":false}}},"2:12108:29966":{"id":"2:12108:29966","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43796:4906","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:32353":{"id":"2:12107:32353","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43768:5195","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8316:6120-0:73:1773":{"id":"a:2:8316:6120-0:73:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8316:6120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12126:23366":{"id":"2:12126:23366","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11778:11351","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::split_whitespace":"2:12104:30001","str::rsplit":"2:12132:23370"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43504:4884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:32372":{"id":"2:12201:32372","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:32372"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43803:5097","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:1787":{"id":"0:22:1787","crate_id":0,"name":"defer_on_unwind","span":{"filename":"src/lib.rs","begin":[279,0],"end":[283,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on unwinding from panic).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_unwind {\n    ($($t:tt)*) => { ... };\n}"}},"2:12104:30001":{"id":"2:12104:30001","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12105:29974"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43778:5196","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:73:1773":{"id":"b:2:2537-0:73:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:2410"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12169:32363":{"id":"2:12169:32363","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:32364":{"id":"2:12171:32364","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5431:33024":{"id":"5:5431:33024","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2552-0:70:1770":{"id":"b:2:2552-0:70:1770","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2547-0:73:1773":{"id":"b:2:2547-0:73:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2247-0:73:1773":{"id":"b:2:2247-0:73:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2076"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2537-0:23:1798":{"id":"b:2:2537-0:23:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2540:2410"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3319-0:23:1798":{"id":"b:2:3319-0:23:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2552-0:73:1773":{"id":"b:2:2552-0:73:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12095:23334":{"id":"2:12095:23334","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2551:1483":{"id":"2:2551:1483","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41679:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2683:220-0:70:1770":{"id":"a:2:2683:220-0:70:1770","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2541-0:70:1770":{"id":"b:2:2541-0:70:1770","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2540:2410":{"id":"2:2540:2410","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2514:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8315:6121-0:23:1798":{"id":"a:2:8315:6121-0:23:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8315:6121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8315:6121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8315:6121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2740:2114-0:73:1773":{"id":"a:2:2740:2114-0:73:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2247-0:23:1798":{"id":"b:2:2247-0:23:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2249:2076"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12085:23315":{"id":"2:12085:23315","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11345:11352"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:23333":{"id":"2:12093:23333","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:5206":{"id":"2:12102:5206","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43480:5186","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:670":{"id":"0:75:670","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9183:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9172:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:1765":{"id":"0:19:1765","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[243,4],"end":[243,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8316:6120-0:23:1798":{"id":"a:2:8316:6120-0:23:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8316:6120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8316:6120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8316:6120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2537-0:70:1770":{"id":"b:2:2537-0:70:1770","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:2410"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:53:230":{"id":"0:53:230","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[432,4],"end":[432,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[464,0],"end":[474,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9208:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1801","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9208:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:69:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12129:23368":{"id":"2:12129:23368","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:11351"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11601:4886","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12173:32366":{"id":"2:12173:32366","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:11351"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11803:11348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:1770":{"id":"0:70:1770","crate_id":0,"name":"Always","span":{"filename":"src/lib.rs","begin":[213,0],"end":[213,18]},"visibility":"public","docs":"Always run on scope exit.\n\n‚ÄúAlways‚Äù run: on regular exit from a scope or on unwinding from a panic.\nCan not run on abort, process exit, and other catastrophic events where\ndestructors don‚Äôt run.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:8316:6120-0:70:1770","a:2:8315:6121-0:70:1770","a:2:2700:228-0:70:1770","a:2:2740:2114-0:70:1770","a:2:2683:220-0:70:1770","b:2:2250-0:70:1770","b:2:2537-0:70:1770","b:2:2547-0:70:1770","b:2:2552-0:70:1770","b:2:3319-0:70:1770","b:2:2247-0:70:1770","b:2:2541-0:70:1770","0:14","0:71"]}}},"2:12185:32368":{"id":"2:12185:32368","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:11351"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076":{"id":"2:12076","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12077:815","2:12078:2417","2:12079:32347","2:12080:32348","2:12082:32349","2:12085:23315","2:12086:32350","2:12087:314","2:12088:23335","2:12089:1849","2:12091:23332","2:12093:23333","2:12095:23334","2:12097:32351","2:12098:32352","2:12099:23358","2:12100:23359","2:12101:4907","2:12102:5206","2:12103:4817","2:12104:30001","2:12105:29974","2:12106:25519","2:12107:32353","2:12108:29966","2:12109:23376","2:12112:23377","2:12115:23378","2:12118:2457","2:12122:2416","2:12126:23366","2:12129:23368","2:12132:23370","2:12135:32354","2:12138:32355","2:12141:23372","2:12144:23374","2:12147:32356","2:12150:32357","2:12153:2088","2:12156:32358","2:12159:32359","2:12162:32360","2:12165:32361","2:12167:32362","2:12169:32363","2:12171:32364","2:12172:32365","2:12173:32366","2:12176:32367","2:12179:22510","2:12182:23379","2:12185:32368","2:12188:32369","2:12191:32370","2:12194:32371","2:12196:23243","2:12197:23244","2:12198:23246","2:12199:23247","2:12200:23248","2:12201:32372","2:12203:5913","2:12204:32373"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12141:23372":{"id":"2:12141:23372","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:11351","str::rsplitn":"2:12144:23374"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43608:4891","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12115:23378":{"id":"2:12115:23378","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:11351"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:1779":{"id":"0:20:1779","crate_id":0,"name":"defer","span":{"filename":"src/lib.rs","begin":[251,0],"end":[255,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (always run).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer {\n    ($($t:tt)*) => { ... };\n}"}},"2:12099:23358":{"id":"2:12099:23358","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12100:23359"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:76:1775":{"id":"b:2:2537-0:76:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:2410"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2247-0:76:1775":{"id":"b:2:2247-0:76:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2076"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:78:670":{"id":"0:78:670","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9183:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9172:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2250-0:70:1770":{"id":"b:2:2250-0:70:1770","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:22408"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:30":{"id":"0:30","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[308,0],"end":[362,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1801","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:34:1808","0:35:1822"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:54:551":{"id":"0:54:551","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[434,4],"end":[436,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:587":{"id":"0:64:587","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[452,4],"end":[461,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:314":{"id":"2:12087:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12088:23335","`u8`":"1:11934:1505"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12172:32365":{"id":"2:12172:32365","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12079:32347":{"id":"2:12079:32347","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12122:2416":{"id":"2:12122:2416","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41537:179","prim@char":"1:11917:418","self::pattern":"2:11778:11351"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12153:2088":{"id":"2:12153:2088","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11778:11351","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::matches":"2:12153:2088"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43708:5192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12200:23248":{"id":"2:12200:23248","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2252:22408":{"id":"2:2252:22408","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12199:23247":{"id":"2:12199:23247","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:73:1773":{"id":"a:2:2700:228-0:73:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12118:2457":{"id":"2:12118:2457","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41537:179","prim@char":"1:11917:418","self::pattern":"2:11778:11351"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:33027":{"id":"5:5443:33027","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:2188","`String`":"5:7282:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2188","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7015:4791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23:1798":{"id":"0:23:1798","crate_id":0,"name":"ScopeGuard","span":{"filename":"src/lib.rs","begin":[298,0],"end":[306,1]},"visibility":"public","docs":"`ScopeGuard` is a scope guard that may own a protected value.\n\nIf you place a guard in a local variable, the closure can\nrun regardless how you leave the scope ‚Äî through regular return or panic\n(except if panic or other code aborts; so as long as destructors run).\nIt is run only once.\n\nThe `S` parameter for [`Strategy`](trait.Strategy.html) determines if\nthe closure actually runs.\n\nThe guard's closure will be called with the held value in the destructor.\n\nThe `ScopeGuard` implements `Deref` so that you can access the inner value.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Always","id":"0:70:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1801","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:30","a:2:8316:6120-0:23:1798","a:2:8315:6121-0:23:1798","a:2:2740:2114-0:23:1798","a:2:2683:220-0:23:1798","b:2:2250-0:23:1798","b:2:2537-0:23:1798","b:2:2547-0:23:1798","b:2:2552-0:23:1798","b:2:3319-0:23:1798","b:2:2247-0:23:1798","b:2:2541-0:23:1798","0:60","0:49","0:55","0:65","0:45"]}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[235,0],"end":[238,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:12:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:17:1765"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5427:33023":{"id":"5:5427:33023","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2188","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7015:4791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:2188","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7015:4791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3321:1496":{"id":"2:3321:1496","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39366:4959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:2114-0:23:1798":{"id":"a:2:2740:2114-0:23:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2740:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2740:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12147:32356":{"id":"2:12147:32356","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:76:1775":{"id":"a:2:2700:228-0:76:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12088:23335":{"id":"2:12088:23335","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11934:1505"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2683:220-0:23:1798":{"id":"a:2:2683:220-0:23:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12162:32360":{"id":"2:12162:32360","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11778:11351","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::match_indices":"2:12159:32359"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43672:5191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:23359":{"id":"2:12100:23359","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12099:23358"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12203:5913":{"id":"2:12203:5913","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:5913"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43812:4829","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2543:696":{"id":"2:2543:696","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2683:220-0:73:1773":{"id":"a:2:2683:220-0:73:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:36:1782":{"id":"0:36:1782","crate_id":0,"name":"guard","span":{"filename":"src/lib.rs","begin":[367,0],"end":[371,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"Always","id":"0:70:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1801","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:2114-0:70:1770":{"id":"a:2:2740:2114-0:70:1770","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12109:23376":{"id":"2:12109:23376","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:11351"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[422,0],"end":[426,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1801","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12082:32349":{"id":"2:12082:32349","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12080:32348"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17:1765":{"id":"0:17:1765","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[237,4],"end":[237,56]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:23332":{"id":"2:12091:23332","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41537:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3319-0:76:1775":{"id":"b:2:3319-0:76:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5434:33025":{"id":"5:5434:33025","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15:1765":{"id":"0:15:1765","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[231,4],"end":[231,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:1784":{"id":"0:21:1784","crate_id":0,"name":"defer_on_success","span":{"filename":"src/lib.rs","begin":[265,0],"end":[269,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on successful scope exit).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_success {\n    ($($t:tt)*) => { ... };\n}"}},"2:2249:2076":{"id":"2:2249:2076","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12159:32359":{"id":"2:12159:32359","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11778:11351","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::rmatch_indices":"2:12162:32360"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43654:5190","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:23370":{"id":"2:12132:23370","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11778:11351","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::split":"2:12126:23366"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43522:4889","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:670":{"id":"0:72:670","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9183:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9172:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:553":{"id":"0:59:553","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[443,4],"end":[445,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2556:1482":{"id":"2:2556:1482","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41679:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:1785":{"id":"0:39:1785","crate_id":0,"name":"guard_on_success","span":{"filename":"src/lib.rs","begin":[378,0],"end":[382,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnSuccess","id":"0:76:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1801","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55":{"id":"0:55","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[439,0],"end":[446,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:1801","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:2910:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:59:553"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2541-0:73:1773":{"id":"b:2:2541-0:73:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12089:1849":{"id":"2:12089:1849","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41537:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:25519":{"id":"2:12106:25519","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43758:5194","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12080:32348":{"id":"2:12080:32348","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5446:24606":{"id":"5:5446:24606","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12200:23248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12156:32358":{"id":"2:12156:32358","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11778:11351","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::matches":"2:12153:2088"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43726:5193","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:11349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5428:2132":{"id":"5:5428:2132","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:4877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:4907":{"id":"2:12101:4907","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43474:4899","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12194:32371":{"id":"2:12194:32371","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11739:127","`FromStr`":"2:11738:6132"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41679:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11738:6132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11738:6132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12204:32373":{"id":"2:12204:32373","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:32373"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43821:5096","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:1808":{"id":"0:34:1808","crate_id":0,"name":"with_strategy","span":{"filename":"src/lib.rs","begin":[317,4],"end":[323,5]},"visibility":"public","docs":"Create a `ScopeGuard` that owns `v` (accessible through deref) and calls\n`dropfn` when its destructor runs.\n\nThe `Strategy` decides whether the scope guard's closure should run.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1798","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:76:1775":{"id":"b:2:2547-0:76:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"1:1071:4702":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:3162:2178":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"10:36:34612":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:8899:6158":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"14:165:17452":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:6833:16770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:41486:5387":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:3721:4792":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:5677:18368":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:1287:4700":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:10440:3318":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:2961:33316":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:45828:5245":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:6840:16771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:6904:4409":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:7504:15850":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:6007:16346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:13194:3883":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"11:97:34621":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:44068:5211":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:40079:11420":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:40378:5121":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:7015:4791":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:1695:13078":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:80:22280":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13169:3874":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:46258:5264":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:8777:5526":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:5343:5398":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:10527:18548":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:7268:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:6132:4276":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:7215:4812":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:877:2797":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:7529:4154":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:4763:15656":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:10000:3253":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:21632:6005":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:46799:5289":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:13865:4076":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4367:15615":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:7498:4521":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:2160:2492":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:45739:5241":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:4605:15641":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:40098:5100":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:8439:5518":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:41535:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"18:0:1984":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:11410:3443":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:3569:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:4549:15637":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:8109:4590":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:1602:13070":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:44511:5229":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:11315:11519":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:3329:2828":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:5655:4143":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:6793:4400":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:5709:5409":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:6021:16348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:10555:3326":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:3872:4170":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:1544:13064":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:2215:1823":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:43282:5169":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:3231:5376":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:21935:4930":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:35:2785":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"0:22:1787":{"crate_id":0,"path":["scopeguard","defer_on_unwind"],"kind":"macro"},"5:3595:4707":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:2879:4136":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:10451:5378":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:20841:31009":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:6327:4324":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:43448:5182":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:39186:2173":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:585:5912":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:42639:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:1732:2508":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:21791:4921":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:23110:4821":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:44243:11558":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:43480:5186":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:9188:34696":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:4010:4831":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:11936:1503":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:11832:3542":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"18:755:3042":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:44235:11556":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"11:1831:2828":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:9215:2216":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:6597:16758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"9:174:17434":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:7411:4251":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:8214:4488":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:2965:33313":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:11391:3442":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:1373:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:3141:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:12646:3689":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:6651:2430":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"0:39:1785":{"crate_id":0,"path":["scopeguard","guard_on_success"],"kind":"function"},"16:7077:18376":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:22300:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:10649:3342":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:9057:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:2757:2152":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:32081:4952":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"18:481:2990":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:39241:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:4436:2228":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:9946:3249":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:40155:29526":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:43490:3049":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:5716:5412":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:2048:4793":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:6164:4281":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:9265:3185":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:7032:4809":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:8867:6157":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:1080:4706":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:22531:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:10402:3312":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:11888:5918":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:11928:644":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:11891:3550":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:11064:11568":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:8420:18433":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:44473:5224":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:10731:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:4258:4834":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:9011:25229":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:41586:2421":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:1481:4708":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"9:325:17421":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:12318:3631":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:9721:3224":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:3801:2828":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:2742:4130":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:21187:6200":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:32172:2119":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:1672:13075":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:8180:18381":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:7891:4792":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:4853:15668":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:6606:16759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:2140:4794":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:4135:6076":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:1775:2828":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:13033:3845":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:6893:25510":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:7757:4532":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:9068:34697":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:7726:4952":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:13385:3931":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12980:3839":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:4757:4184":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:5630:4204":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:8170:3049":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:10269:4890":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:40328:4838":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:7170:4811":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:2694:4128":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"0:0:1865":{"crate_id":0,"path":["scopeguard"],"kind":"module"},"1:11920:1053":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:7462:17303":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:12033:3573":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:47471:5325":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:44481:5226":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:4412:15620":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:22018:30010":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4455:15625":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"18:624:34705":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:9312:3186":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:4144:4833":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:39100:2185":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:3373:11383":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"6:4677:6047":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11573:3476":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:6506:4345":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"11:798:4693":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:5993:16345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:1561:4688":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:9826:3232":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:11372:3437":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:4468:15627":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:45584:5235":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:42172:4879":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:12894:3794":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:5797:4223":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7509:4153":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:47833:5334":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:11527:4903":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:7543:4155":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:39201:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:46829:5290":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"11:986:4700":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:7103:5543":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:42807:5156":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:6919:34689":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:39359:2177":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:46336:5266":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:45690:5239":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:12138:3586":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:5616:4200":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:42544:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:40614:4856":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:45991:5256":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:11915:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:30861:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:6834:11458":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:13488:3960":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:6170:16381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:47822:5333":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:7065:4435":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:47894:5339":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"18:652:2992":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:2691:2111":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:21189:4919":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:11056:26143":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:13324:3915":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"11:2201:4811":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:6704:16761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13181:3877":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:21927:4929":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:45969:5255":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:43803:5097":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11641:3496":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:2683:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:1519:13061":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:6725:16764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:40056:5096":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:10870:4896":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:5954:16341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:6391:2422":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4799:15661":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:6307:4138":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:1572:2828":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:5724:4215":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:43608:4891":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"9:481:17366":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:1535:13063":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:3216:33400":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:4531:6098":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:47917:5340":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:7258:4818":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:43383:5178":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:40143:5105":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:11921:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:11319:3430":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:10670:3346":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:11544:3467":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"12:0:1979":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"18:564:3001":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:2905:4137":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:9879:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:11600:3485":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:7556:2903":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:6254:4318":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:13763:4052":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:10051:4707":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:21504:4917":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:8416:5161":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:6780:6190":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:894:4688":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:46183:5262":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:40430:4852":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:5013:5397":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"11:2194:34614":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11502:3462":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:2378:4115":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:4510:4177":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:8909:3049":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:41473:5143":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:6617:16760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:11484:3454":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:8989:5541":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:40020:5093":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:12496:3665":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:9683:3222":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:21900:4928":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:3083:5371":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:42052:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:7488:4520":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:1062:4700":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:273:2188":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:41521:4874":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:355:2377":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:21077:4919":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:21011:6192":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:55:4572":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"16:8156:4159":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:1538:4710":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:11844:3544":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:867:2422":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:8025:4581":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:2786:4132":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"18:590:3003":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:2130:2355":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:10977:2910":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:6520:4347":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:8111:5381":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"11:1822:2422":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:7688:5917":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:4480:4176":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:13159:3873":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:43654:5190":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:4542:15636":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:3348:5130":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:41595:4688":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:3266:3073":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:7277:2187":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:6156:5415":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:7711:4530":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:3141:2176":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:2928:2170":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:12622:3344":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12461:3653":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:21063:6196":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:6710:16762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:13777:4054":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:13024:3844":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"11:332:2781":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:4649:15645":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:9340:3187":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:3640:3085":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:11401:5385":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:11923:1402":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:12799:3711":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:8195:5497":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:41401:6043":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:6943:18375":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:4127:6075":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:10270:3303":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:875:4691":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:10029:5808":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:2773:2151":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:47795:5331":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:42854:5166":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:7859:18380":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:12282:3626":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:1425:4707":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:8456:6131":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:7115:2422":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:46207:5263":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:13240:3896":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:7661:11462":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:40600:5128":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:4279:5389":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:41972:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:7478:4152":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:7264:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:20637:30701":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:12374:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"13:0:1973":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:2616:4125":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:3472:28834":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:7961:5448":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:11224:5427":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:9906:5140":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:5998:18370":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:21876:4923":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:2376:6000":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:6014:16347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:13659:4024":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"11:1517:4709":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:1594:13069":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:4517:15633":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:844:4688":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:4394:15462":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:45893:5247":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:46137:5260":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:13461:3953":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:21410:6207":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"11:793:4708":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:11933:742":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"19:0:1035":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:41384:4871":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:4809:15662":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:8765:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:8310:18430":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:13443:3949":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:2350:5990":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:11266:26599":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:959:4699":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:44536:5230":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:40859:4863":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:3233:5377":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:7123:2422":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:2933:3070":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:8977:5539":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:8514:5523":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:43708:5192":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:2544:2877":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:3233:2184":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:8316:6120":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"11:285:5791":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:361:2378":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:44231:11557":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:7827:5443":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:11532:3466":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"15:198:17466":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:6035:16350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:506:12167":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:1636:2134":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:5686:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:8315:5391":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:8283:18429":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:22630:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:1556:13065":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:7698:32089":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:554:2362":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:10491:3322":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:11601:4886":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:5073:15691":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:4165:2815":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:11937:1504":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:1746:30016":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:4113:4832":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:4894:15672":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"18:491:2991":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:7042:4433":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:474:12162":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:20609:3002":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:5471:2815":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:12059:3576":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:123:11847":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:40867:4865":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:2855:2168":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:3158:23136":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:12616:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:10626:3340":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:11550:4904":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:947:4696":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:42574:4559":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:13426:3945":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:8813:4688":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:7537:2901":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:6544:4146":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:5032:4193":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:258:2789":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:12902:3797":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:4018:6058":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:11628:3495":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:2448:4118":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:10052:3263":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:41852:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:4962:15680":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:9436:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:10751:26139":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:3996:6054":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:1910:13244":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"11:805:5928":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:39139:2182":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:42294:2217":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:8805:5528":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:3181:30897":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:39305:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:119:11846":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:5531:4842":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:5071:4194":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:2862:4135":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:3030:4160":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:4601:26306":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:42012:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:8791:5527":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:6139:6284":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:11924:3558":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:40308:5114":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:12178:3590":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:43522:4889":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:9596:3212":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:6108:2872":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:13803:4063":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:10448:5376":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:2748:2118":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"5:1513:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:43357:5108":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:2892:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:2890:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:8931:3053":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:4427:15622":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:1565:2422":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:41450:29447":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:9443:3196":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:20952:2492":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:46517:5284":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:1978:3069":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:8651:3171":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:3155:23135":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:5860:2823":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:10721:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:20942:6199":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:13121:3868":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:4872:4188":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:12770:3691":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:2558:2862":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:44004:5210":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:10897:3366":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:43039:5167":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:3182:33398":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:11653:3499":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:4379:15617":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:6390:4332":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:9410:5441":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:40346:5117":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:4568:4179":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:11478:5572":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:7086:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12224:3614":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:5949:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:6774:16766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:8366:5515":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:3406:5498":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:21057:6194":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:4437:6080":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:9028:3180":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:7510:15851":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:2779:2150":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:3151:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:547:12171":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:10338:4893":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:7624:2368":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4728:15652":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"18:599:34708":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:6460:4141":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:4303:15611":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:10465:3320":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"11:119:2779":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:9488:3202":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:44255:11554":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:9853:3234":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:9690:2867":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:39366:4959":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:5944:4240":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:6621:2838":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:10076:4884":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:1680:13076":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:40360:5120":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:8348:6116":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:8598:18439":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:11193:3393":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:5933:2883":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:21:683":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:4704:6066":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:6400:4333":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:7645:2365":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:13309:3913":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:3203:4713":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:12388:3640":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:9217:2217":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:10516:3324":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:4400:4174":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:11032:5526":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:47673:5328":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:2821:2160":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:1671:2789":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:684:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:40171:5106":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"14:187:17459":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:45638:5237":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:21738:4920":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:40072:5097":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:1583:4712":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:2034:4792":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:9869:6005":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:4325:2848":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:41747:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:9275:34699":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:3191:5374":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:1410:4688":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:10798:18441":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:4878:1005":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"18:614:34706":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:5462:5406":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:2468:6005":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:4419:15621":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:43462:5185":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:41430:29994":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:9110:5545":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:4119:6074":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:10691:18549":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:40268:5110":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:11497:26265":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:46563:5285":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:42815:5157":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:7722:5440":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:6624:6108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:47947:5342":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:11738:6132":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12236:3616":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:5408:5405":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:7329:2186":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:6355:5416":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:10104:3268":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4823:15664":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4928:15675":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:7362:2828":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:9986:3252":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:9617:3214":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:7519:4522":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:9227:2221":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:42617:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:12085:3579":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:21973:29444":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:13499:3961":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11234:3402":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:3962:6053":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:7296:4819":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"18:719:3033":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:3385:4828":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:10354:3309":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:8736:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:39380:4488":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:2799:2156":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:1701:6071":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:4459:6081":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"11:1611:1798":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:11930:744":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:43054:30014":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:1589:4713":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:10660:3344":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:7837:5444":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:2337:4108":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:45791:5243":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4388:15618":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:6376:4140":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:44420:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:20815:6202":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"11:2174:30781":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6336:4325":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"14:31:4679":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:1272:4702":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:2502:4120":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:46359:5267":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:12536:3668":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:9148:34701":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"11:630:4688":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"11:1501:17447":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:8293:6108":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"14:160:4679":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:11922:1372":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:3956:6052":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:5044:5397":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:6743:16765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:5881:16337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:11090:3379":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:11785:3530":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"11:817:4696":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4488:15630":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:8315:6121":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:40840:5130":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:45606:5236":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:44259:11568":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:2594:4124":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:39574:23256":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:7522:15853":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:8718:3044":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:44223:11552":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:7697:4147":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:6488:4337":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:44136:4910":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:10743:3356":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:6318:2789":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:9350:34703":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:42846:5165":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:1783:5360":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:40470:5125":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"18:681:3024":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:2705:1757":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"9:421:17369":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:47842:5335":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:10712:18550":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:562:3059":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:5050:15688":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:7971:6032":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:7335:34693":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:3300:4164":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:22039:4943":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:4148:6077":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:4625:15643":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:9223:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:7599:6005":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:6687:13185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:12361:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:3899:4171":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:39977:4829":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:6981:4423":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"11:2060:4702":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:44103:5216":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:4235:4688":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:41611:2422":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:10324:4892":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12293:3628":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:9322:34702":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:5024:15686":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"11:1858:4714":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:8953:3173":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:3736:4793":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:10491:2365":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:3152:28833":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:41772:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:6795:16767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:10681:3347":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:6135:15527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:44093:5212":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:6022:18371":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:5377:5403":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:21989:29523":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:888:4692":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:6876:4148":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:4605:11414":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"15:0:1981":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:1466:1758":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:10386:2906":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:8683:3043":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:4445:4175":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:44299:5221":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:1846:5363":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:1924:5972":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:10589:3336":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:6728:4387":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:7064:33396":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:13516:3968":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:6442:4336":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:4663:15646":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:43504:4884":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:42092:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"11:403:34623":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"11:1845:4712":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:1568:13066":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:3582:4688":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"18:707:3029":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:20995:6005":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"18:660:3017":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:4349:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:0:1982":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:10960:2908":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:8072:4585":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:41671:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:9138:3182":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:9696:3204":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:7227:11464":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:39394:2226":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:532:12169":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"18:531:2996":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:9907:3244":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:8200:6042":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"18:507:2992":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:2921:1837":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:43392:5179":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:8443:18434":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:11422:5386":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:21055:6005":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:6717:4386":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:20667:30913":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:46115:5259":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:1010:2789":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:9219:2218":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:5817:16333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5067:15690":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:675:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:40277:5111":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:4540:4178":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:44116:5220":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:2925:2169":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:13219:3891":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:12403:3644":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:41509:4872":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:6631:2840":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:487:3058":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:40248:5108":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:7016:4427":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:13211:3888":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13667:4025":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:8189:5495":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:9098:3181":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:22051:6046":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:45846:5246":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:10855:4768":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:4523:15634":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"0:76:1775":{"crate_id":0,"path":["scopeguard","OnSuccess"],"kind":"enum"},"5:6763:2841":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:7867:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:10657:5558":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:8909:30671":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:42301:2216":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:4394:2815":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:7572:34690":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:10079:5549":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:9557:3184":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:4427:2817":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:41662:11512":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:40064:4829":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:5367:17483":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:21405:6197":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"11:1012:4702":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4954:15679":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:7259:5145":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:7743:4145":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:20652:30912":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:4702:6064":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:9876:3122":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:8954:22500":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:43888:11363":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:11932:746":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:10026:3258":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:7596:18378":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:8498:5392":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:41344:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:7673:5916":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:11717:2917":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:11101:23238":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:482:12163":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:4505:15632":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:47549:5326":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:13419:3944":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:21912:29553":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:39261:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:5529:2826":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:2212:5367":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:4665:6080":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:3934:6050":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:6361:4329":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:13564:4005":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:11422:3446":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:6392:5129":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"0:21:1784":{"crate_id":0,"path":["scopeguard","defer_on_success"],"kind":"macro"},"5:2959:33312":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:8271:5504":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:43726:5193":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:4877:6106":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:7626:4527":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"9:388:17368":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:5079:15692":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:11615:3491":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:11556:3468":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:5835:16335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:10478:3321":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:30257:1759":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:12959:3834":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:595:12178":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:2469:11427":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:4785:30033":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:1915:2511":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:7271:17142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:5978:16343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:5393:5404":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:10015:3257":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:6990:4426":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:12563:3672":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:7585:15861":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:41367:4869":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:7810:3123":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:3815:4169":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:10705:3349":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:10857:18442":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:3463:2215":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:9839:3233":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:10452:3319":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:11163:3389":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:7803:4540":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:4786:15659":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:39992:5090":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:5708:4213":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:2969:33314":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:1034:3061":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:7850:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:11037:18443":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:568:12174":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:6609:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:8984:5540":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:3703:5385":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:10851:5440":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:46593:5286":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:14:2091":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:10598:3370":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:20802:6201":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:5579:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:42599:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:8936:5533":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:9173:2215":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:7244:34692":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:8858:3048":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:4615:15642":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:1666:1091":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:9577:3211":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:11821:3539":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:7282:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"16:6767:4399":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:6431:4335":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:5966:16342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:6043:34209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:40628:4857":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:9675:2862":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:8153:5111":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:5848:16294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4722:15651":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:3481:6003":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:7024:2422":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:13135:3871":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:2830:4134":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:3948:6051":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:4780:15658":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:6572:13017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:8195:18418":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:45769:5242":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:6027:16349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:48009:5344":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:11566:4905":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:6155:16380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:7557:4523":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:530:2360":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:9796:3230":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:1577:4711":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:10334:3184":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:46085:5258":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:40034:5094":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:21952:29555":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:11360:5384":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:1101:33713":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:4380:2849":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:13332:3916":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:3170:4688":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:11918:1521":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:46753:5288":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:2695:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:41722:4688":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:10238:5405":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:11800:3535":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:10167:6141":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:10010:5362":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:11044:5527":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:5279:11339":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:10039:3261":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:5064:2823":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:11942:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:11083:5422":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:42315:2219":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:7600:2379":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:8263:5495":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:30291:2137":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:242:3051":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"9:352:17382":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:3670:2789":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:7229:29526":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:40818:4860":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:9628:3215":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:6644:5416":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:11849:11357":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:526:12168":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:10445:5374":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:11197:5571":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:3424:5382":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:9658:2861":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:8753:3045":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:3063:3081":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:7767:18379":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:5804:16332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4684:15647":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:1844:2652":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:1522:4790":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:9822:3231":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:4037:4172":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:5235:2789":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:4006:6055":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:9670:3221":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:7307:4820":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:4596:4180":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"18:113:22282":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"0:73:1773":{"crate_id":0,"path":["scopeguard","OnUnwind"],"kind":"enum"},"1:8076:5487":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:3488:6024":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:911:2828":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:4937:15676":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:21161:6193":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:7277:17143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:7317:34694":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:4263:4835":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"18:766:22292":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:7883:5447":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:5986:16344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:41892:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:10840:3363":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:6854:4405":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:6032:2887":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:13639:4018":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:4495:15631":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13399:3938":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:6505:5418":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"10:0:1977":{"crate_id":10,"path":["adler"],"kind":"module"},"5:1491:4689":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:1594:4714":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:47853:5336":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"11:749:2809":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"11:1121:4706":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:40460:4854":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:9453:18452":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:2791:2155":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:5950:2815":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:6129:16379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:6564:12213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:7875:5446":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:8256:18416":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:9032:5852":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:22597:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:11446:3450":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:247:3052":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:43626:4892":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:10283:3305":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:420:3057":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:8183:5194":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"11:2168:34616":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:9038:34698":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:9917:3245":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:2931:17511":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:9973:3251":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:494:12165":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:13821:4069":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:6243:34691":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:500:12166":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:44278:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:6788:2844":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:3998:4830":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:3078:2175":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"11:1826:2809":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:8854:5531":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:154:2775":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:12433:3647":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:8090:4587":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:4760:670":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:9933:3247":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:1947:3066":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:13477:3956":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:11136:3383":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:5383:2815":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:47970:5343":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:13066:3856":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:2804:2161":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:13744:4047":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:4364:2817":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"7:79:17355":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:8047:4582":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:4474:15628":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:4943:15677":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:6319:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:6351:18372":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:2743:2116":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"5:2222:33426":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:10971:2909":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11770:3526":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"14:7:4679":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:1512:13060":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:1637:13072":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"18:609:3010":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:7366:18377":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:47611:5327":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"18:636:3016":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:3700:5384":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:6867:16773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:3047:17513":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:20982:6206":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:7539:15855":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:4764:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:6983:3038":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:8237:5387":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:9866:3235":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"11:760:2828":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:10196:4888":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:13453:3952":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:5693:4210":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:44311:11569":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:7669:4156":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:22564:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:11941:1131":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:4534:15635":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:7029:4430":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:9213:2652":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:40389:4850":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:4199:5388":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:1117:5794":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:7598:17331":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:40044:5095":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:4003:2809":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:13721:4046":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:11011:3372":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:47013:5292":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:2745:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:43331:5175":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:2524:4121":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:6868:4407":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:5090:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:5899:16339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:1137:33711":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:10303:3306":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:4847:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:6787:30869":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4637:15644":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:204:2787":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:22498:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:11866:5578":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:6272:2809":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:5766:16328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:7635:4528":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:5742:5413":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:4587:6053":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:40091:5099":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:4817:15663":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:13842:4072":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:2602:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:42132:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:2967:17512":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:11272:26529":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:10569:3331":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:43910:5199":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:41603:4707":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:480:2874":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:40825:5129":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:7528:15854":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:7837:4544":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:11174:2911":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:12671:5929":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:1543:2815":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:6474:4158":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:45494:5231":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:8997:5543":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:46305:5265":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:2795:2154":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:1662:13074":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:7271:2824":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:10761:18440":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10967:3370":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:501:2355":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:13249:3897":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:10741:5383":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:1494:13057":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:2169:33429":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:922:4689":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:2404:4116":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:4340:15614":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:12634:3682":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:3446:4165":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:10735:3354":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:3378:2815":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:3156:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:4728:4183":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:4868:6105":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:2298:17485":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:13041:3846":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:5589:4844":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:3177:4712":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:41812:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:5889:16338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"0:70:1770":{"crate_id":0,"path":["scopeguard","Always"],"kind":"enum"},"2:2842:2165":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:30297:2138":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"11:399:34628":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"8:0:1975":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:1256:4436":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:11459:3452":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:2357:4114":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:39283:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:2811:2158":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:2764:4131":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:9895:3240":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:1768:609":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:554:12172":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"11:2186:34618":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:8104:3038":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:857:4707":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:43925:5204":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:10936:3369":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:7043:28409":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:2219:5987":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:20843:2492":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"14:221:4686":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:11931:745":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:12004:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:4567:15639":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:5779:4219":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:7054:2801":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:13292:3905":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"11:1027:17446":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:4706:6067":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:8132:6004":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:9534:3208":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:618:5351":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:8360:18431":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:2694:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:12923:3805":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:5104:4195":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"18:574:2992":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:7285:28920":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:7293:4467":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"18:96:22281":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:11940:1559":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:10257:3302":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:11585:3479":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:10125:3270":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:2580:5369":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4400:15619":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:11355:3435":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:12358:3635":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:5283:11340":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:5007:15684":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:11529:5431":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:2767:2148":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:6662:4373":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"11:1838:4711":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:9361:4881":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:44438:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:1895:5364":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:13625:4012":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:5840:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:6804:16768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"11:644:4707":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:10894:5528":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:4969:4191":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:1787:3062":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:9380:18450":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:1919:18481":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:6575:2896":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:8129:4591":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:42799:5154":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:4435:15623":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:12607:3679":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:6535:2778":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:10615:3339":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:4097:28414":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:12006:3568":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:11803:11348":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:4747:15654":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:12098:3581":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:8170:4596":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:9566:3185":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:8835:5407":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:41730:4707":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:9428:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:44082:11364":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:2838:2164":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"11:1103:4705":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:5792:16330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:8759:5525":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:4290:15610":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:8904:32088":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"0:12:1762":{"crate_id":0,"path":["scopeguard","Strategy"],"kind":"trait"},"2:21634:6195":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:12423:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:4694:15648":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"11:2033:4436":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:20914:6205":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:46039:5257":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"7:32:17348":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:20650:30910":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:13082:3859":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:10231:4889":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13612:4006":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:13101:3860":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"18:644:2992":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:562:12173":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:2690:2110":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:41679:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:5990:4846":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:9108:34695":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:11331:4897":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:42836:5161":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:2783:2153":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:47719:5329":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:541:12170":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:5920:4091":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:40004:29442":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"18:699:3027":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:671:3023":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:2391:1991":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:11721:3501":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"14:215:4684":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:21844:4922":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:7657:5933":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:9127:5546":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:9228:34704":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:643:5915":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:10255:5809":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:13857:4073":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:46863:5291":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:41653:5147":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:1499:13058":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:43956:5208":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:11879:3548":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:32085:4953":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:49815:6210":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:1716:13080":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:4033:2789":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:45809:5244":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11520:3463":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:821:2795":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:32045:6139":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"18:690:3026":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:7231:11463":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:13469:3955":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:3647:2422":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:4195:2815":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:7683:4157":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4972:15681":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:20833:6198":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"6:4861:15669":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:5357:5402":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:22366:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:12345:3634":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"0:36:1782":{"crate_id":0,"path":["scopeguard","guard"],"kind":"function"},"16:4904:4189":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:4:1018":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:4760:2881":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:43796:4906":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:12194:3595":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:12126:3585":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:488:12164":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:21180:6005":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:781:2792":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:10352:4894":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:8244:6078":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:5305:4196":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:9091:5422":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:10068:3265":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:11934:1505":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:9545:3166":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:7499:5575":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4445:15624":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:9208:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:40446:3014":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:2816:2159":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:43758:5194":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:11258:3416":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"15:219:17470":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:11792:3029":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:2642:4126":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"11:1818:4688":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:9062:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:5522:6137":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:8741:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:40318:5116":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:43572:5189":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:40421:5123":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:7815:5441":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:20669:30908":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13689:4031":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:10721:3351":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:10316:3307":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:535:4095":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:47361:5324":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:1463:4691":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:44251:11553":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:7378:2832":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:10885:3365":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:4624:4181":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:30327:29556":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:11434:3447":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:6647:13202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:10989:3074":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:11299:3420":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13367:3927":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:44247:11559":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:6076:16352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:2958:2480":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:9213:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:12307:3630":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"13:226:34629":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:22663:4947":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:5571:4142":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:12419:3645":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:6719:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:7619:2366":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:47879:5338":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:5828:16334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:22333:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:40849:2856":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:43412:5181":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:10580:3335":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:4662:6107":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:1574:13067":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:8163:5128":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:30066:6045":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:8120:5383":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:2319:4106":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:1689:13077":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:11069:18444":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:5525:6138":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:6588:12047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:9225:2220":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:7706:5961":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:9403:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:5000:4192":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:11969:3564":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:2808:4133":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:12158:3589":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:4783:6063":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:9653:3218":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:5586:2883":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:9149:26262":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:7437:4508":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:10876:25225":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"11:1048:34622":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"0:20:1779":{"crate_id":0,"path":["scopeguard","defer"],"kind":"macro"},"17:9772:3229":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:21860:29996":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:2832:2163":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:9218:3184":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:5963:4247":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:47219:5323":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:11902:3551":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:2855:2880":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:5594:4144":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:8823:3047":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:12522:3667":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:836:4698":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:30889:3002":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:30385:29522":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"11:844:4699":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:2850:2167":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:42590:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:2737:2113":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:10310:4891":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:10923:3367":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:7608:17332":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"11:1068:4704":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:0:820":{"crate_id":6,"path":["libc"],"kind":"module"},"2:40105:11421":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:10080:3266":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:11120:5421":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:10681:26602":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:6819:16769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:1785:5361":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:44430:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:3168:2180":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:6719:16763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6236:4315":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:4907:15673":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:43474:4899":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:5402:3172":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:13879:4079":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:12915:3804":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:2984:2172":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:4599:26304":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:4847:15667":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:13433:3946":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:13506:3963":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:11929:747":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:1502:4690":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:9592:2858":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:9471:11432":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:4943:2815":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:8667:3172":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:10837:4895":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:8176:4884":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:3272:5379":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:7574:15860":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:40228:5107":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:2962:2181":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"5:4075:4707":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:4991:15683":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"11:723:4691":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:2931:1801":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:8249:6079":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:4327:4173":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:5876:5799":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:7551:15857":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:21156:6005":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:587:12177":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"11:365:2783":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:11993:3565":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:12550:3671":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:5593:2884":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:3749:4167":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:43310:5173":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:9523:3206":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"11:667:4689":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13411:3941":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:9498:3204":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:2787:2157":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:11861:3547":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:2689:33339":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:39217:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:4753:15655":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11060:3344":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13316:3914":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:4335:2226":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:4832:15665":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:635:5352":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:22432:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:5643:4209":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:39387:4960":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:43370:5177":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11339:3431":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:40811:4859":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:43821:5096":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:8389:18432":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:13344:3922":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:2897:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:11899:25227":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:2364:5994":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:638:5354":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:11220:3401":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:43812:4829":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:8829:2422":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:9512:3205":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:43554:5188":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:3782:4168":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:7384:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:45560:5234":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:3585:4166":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:4462:15626":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:11490:26480":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:1505:13059":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:7563:15859":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:4841:15666":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:10545:3074":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:3315:6029":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:12592:3675":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:22025:4942":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:1589:13068":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13678:4030":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:40218:2850":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:7306:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:11239:5428":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:2242:33408":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:2366:5995":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"11:968:4436":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:11938:1501":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:40834:4861":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:10686:5442":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:9172:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:43768:5195":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:44239:11560":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:7294:17144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:0:1983":{"crate_id":17,"path":["object"],"kind":"module"},"17:12510:3666":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:13145:3872":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:5057:15689":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:6602:2826":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:8548:18437":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:7198:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:6179:4283":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:47868:5337":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:1048:4436":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:4482:15629":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:2910:1760":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:2693:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:4409:2120":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:1732:13081":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"0:42:1788":{"crate_id":0,"path":["scopeguard","guard_on_unwind"],"kind":"function"},"5:1441:2422":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:62:11792":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4769:15657":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:5976:4097":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"9:234:5161":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:3513:2809":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:10092:3267":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"11:695:4690":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:2470:4119":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:2546:4122":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:13257:3899":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:9959:3250":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:45668:5238":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:9072:5421":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:4818:4186":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:22399:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:7588:4526":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"13:110:34675":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"14:202:11365":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:25920:4822":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:20622:30701":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"18:515:2989":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12259:3625":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"18:582:3002":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:11490:4900":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:8289:5506":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:6890:4149":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:10699:5564":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:13265:3901":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:6201:4298":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:4702:4182":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:43787:5197":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"11:657:2422":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:676:5802":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:42824:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:5811:4224":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:9221:2219":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:12568:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:953:4698":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:8521:18436":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:4983:15682":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:6935:2899":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:5736:16266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:4186:1841":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:40290:5112":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:2980:2171":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"9:502:4771":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:7449:4509":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:41620:5145":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:43231:5168":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:6508:6152":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:2720:4129":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"18:736:22291":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:42534:29990":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"11:1852:4713":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"11:2049:4700":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:4314:15612":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4715:15650":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:8525:5524":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11946:3559":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:628:4785":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:12019:3275":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:44494:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:46161:5261":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:5847:4231":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4948:15678":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:2460:5795":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:975:3060":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:11254:5430":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:5346:4197":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"11:736:4692":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"5:5756:2809":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:13791:4061":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:10142:18523":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:6124:2891":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:3805:5386":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:579:12176":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:8922:5532":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:12579:2872":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:10119:4886":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:6396:5417":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:42308:2218":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:8788:3046":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:4871:15670":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"0:23:1798":{"crate_id":0,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"17:8979:34700":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:2762:2149":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:4932:4190":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:926:4690":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:7545:15856":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:5798:16331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:2752:2147":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:4916:15674":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"4:0:1974":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:9734:3225":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:4555:15638":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:6849:16772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:2700:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:4845:4187":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:43058:4883":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:5014:15685":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:10158:4887":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:4793:15660":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"14:40:3417":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:9478:3199":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:8883:6156":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:1526:13062":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:46439:5268":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:3193:5375":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:4389:2227":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:13356:3923":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:13233:3894":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12835:3742":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:5862:16295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:8490:18435":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:40185:5974":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"17:13376:3930":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:7182:5927":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:22465:2369":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:10416:3316":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:44031:4909":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:46675:5287":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:1708:13079":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:9415:2905":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:13651:4021":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:3237:4714":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:5386:3171":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:47813:5332":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:8632:18417":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:12576:3673":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:3638:6044":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:10676:26289":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:1568:2809":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:5876:16336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:13053:3851":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:8256:4603":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:7820:5442":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:11783:4877":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"9:0:1976":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:8508:4688":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:12448:4915":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:45514:5232":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:8317:1843":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:6670:13187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:7966:5449":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:12113:3584":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:7488:3059":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:44227:11555":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:11522:5431":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:41738:2422":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:7245:4815":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:7044:2809":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:2162:2493":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:7043:2886":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"11:0:1978":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:6696:18374":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:10823:3143":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:4351:5390":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"7:0:1549":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:11924:1486":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:11345:11352":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:8941:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:47757:5330":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:20877:6204":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:47932:5341":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:40299:5113":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:10027:4688":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:43320:5174":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:10635:3341":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:12046:3574":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:43291:5170":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:936:5928":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:5557:4139":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:30491:29521":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:6293:4321":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"9:445:17367":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:43672:5191":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:4811:798":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:3142:3072":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:8255:5502":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:1755:2507":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:43402:5180":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:7078:2422":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:43778:5196":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:7249:12123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:6671:4374":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"10:44:4717":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:21516:30705":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:10505:3323":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:7694:5359":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:5774:16329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:2348:2483":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:39327:2174":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:7516:15852":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:7094:4810":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"14:0:1980":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:11337:2913":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:11935:1502":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:6321:4323":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:13698:4033":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:3225:4163":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:13015:3840":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:777:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:8142:4594":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:8573:18438":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:0:1394":{"crate_id":1,"path":["std"],"kind":"module"},"11:2180:34613":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:11939:792":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:12396:31147":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:2620:5370":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"11:311:34619":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:4789:4185":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:9748:3184":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:44523:4716":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:43939:5207":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:7467:4517":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:3270:5378":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"18:521:22293":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:9178:3183":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:5202:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:1931:655":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:10343:5525":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:5043:15687":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:1472:4692":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"15:180:17465":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:11883:28918":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:6575:18373":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:10377:3310":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:6218:4305":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:9424:3194":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:40411:5122":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:7699:5437":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:42562:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:6561:5804":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:930:4693":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:10711:5443":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:1301:4706":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:5787:2885":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:2826:2162":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:1630:13071":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:4739:15653":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:4010:6056":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:2572:4123":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:11191:5423":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:4597:26302":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:3196:2183":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"18:727:3036":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:40337:4841":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:5418:4198":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:40398:4851":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:11813:3537":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:12372:3638":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:6432:2895":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:6558:4349":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:40138:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:6066:16351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:10864:5406":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:40369:4845":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:8821:5530":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:9476:4882":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:6935:4412":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:6211:2883":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:4373:15616":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:3211:4711":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:6061:17484":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:4327:15613":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:11917:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:2668:4127":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:3934:2815":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:901:2809":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:13812:4067":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:9067:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:30313:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:11109:3382":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:39401:4961":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:9469:3197":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:40124:5104":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12072:3577":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:5270:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:3898:6049":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:9886:3237":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:3904:6048":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:1821:5362":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:6259:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:11778:11351":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:39983:5089":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:12449:3651":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:4586:15640":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:1820:2510":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:12331:3633":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:9641:3216":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:653:12225":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:573:12175":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:1648:13073":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:5741:18369":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:4886:15671":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:43300:5172":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"18:538:2999":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:5886:4234":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:2481:5368":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:2426:4117":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:9409:18451":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:6865:2898":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:7654:5930":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11471:3453":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:498:1036":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"2:8422:4877":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:45538:5233":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:6819:4401":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:4926:6112":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:917:4708":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:45708:5240":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:5919:16340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:11916:940":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:8947:2359":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:6740:11466":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"9:52:17385":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:7557:15858":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:2740:2114":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:386:3054":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:45939:5254":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:4045:11324":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12483:3664":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:6470:2789":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:11798:11349":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:11927:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:41932:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:10428:3317":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:2846:2166":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:4703:15649":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:9183:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:11282:3417":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}