{"root":"0:0:1575","crate_version":"0.3.1","includes_private":false,"index":{"2:3698:9011":{"id":"2:3698:9011","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3629:9010","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2850:8605":{"id":"2:2850:8605","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2852:53790"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2847:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3156:135":{"id":"2:3156:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3158:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5790:8017":{"id":"1:5790:8017","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5791:56713"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:129":{"id":"0:129","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[27,31],"end":[27,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::chacha::ChaCha20Core","name":"ChaCha20Core","id":"0:187:1566","glob":false}},"2:23425:22007":{"id":"2:23425:22007","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23426:58608","2:23427:58609","2:23428:58610"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23420:8622","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13442:55653":{"id":"2:13442:55653","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:15882:2099","self::pattern":"2:13011:8543","prim@char":"1:15876:2094"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49519:8911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:8542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:295:2245":{"id":"21:295:2245","crate_id":21,"name":"VZip","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:297:53791"],"generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3473:116":{"id":"2:3473:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3474:221","2:3475:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6091:60801":{"id":"5:6091:60801","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7800:8257":{"id":"1:7800:8257","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7801:57961"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5837:9130":{"id":"5:5837:9130","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:33840"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3":{"id":"0:3","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[21,0],"end":[21,18]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"rand_core","name":"rand_core","id":"20:0:1561","glob":false}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1332","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:60799","5:6085:8063","5:6088:60800","5:6091:60801","5:6103:60802","5:6104:60803","5:6105:8084","5:6106:53813","5:6107:53814"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3260:106":{"id":"2:3260:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13407:55655":{"id":"2:13407:55655","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13011:8543","prim@char":"1:15876:2094"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:337:1568":{"id":"0:337:1568","crate_id":0,"name":"ChaCha8Core","span":{"filename":"src/chacha.rs","begin":[345,0],"end":[345,75]},"visibility":"public","docs":"ChaCha with 8 rounds","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:2847:97":{"id":"2:2847:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2849:2164"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8377:136":{"id":"2:8377:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8379:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13413:55192":{"id":"2:13413:55192","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13011:8543","prim@char":"1:15876:2094"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:8542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13402:14043":{"id":"2:13402:14043","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15882:2099"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49671:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3357:8525":{"id":"2:3357:8525","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3359:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13497:53817":{"id":"2:13497:53817","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:327:1983":{"id":"21:327:1983","crate_id":21,"name":"StoreBytes","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:328:7751","21:329:7752","21:330:2045","21:331:7753"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10219:7699":{"id":"2:10219:7699","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10220:1523","2:10221:54928","2:10223:2297"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3370:8582":{"id":"2:3370:8582","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3371:181","2:3372:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5833:9128":{"id":"5:5833:9128","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8579:157":{"id":"2:8579:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8580:1698","2:8581:922","2:8582:7639","2:8585:7640","2:8586:495","2:8588:7641","2:8591:7642","2:8592:7643","2:8593:7644","2:8594:7645","2:8596:2044","2:8598:7646","2:8599:7647","2:8601:841","2:8604:7648","2:8611:7649","2:8613:7650","2:8616:7651","2:8617:7652","2:8618:7653","2:8620:7654","2:8622:7655","2:8625:1300","2:8626:7656","2:8627:7657","2:8631:7658","2:8634:7659","2:8635:7660","2:8636:7661","2:8638:7662","2:8639:2211","2:8641:7663","2:8644:7664","2:8646:7665","2:8656:7666","2:8671:7667","2:8673:7668","2:8677:7669","2:8686:7670","2:8689:7671","2:8691:7672","2:8694:276","2:8701:294","2:8708:7673","2:8715:7674","2:8724:7675","2:8734:1014","2:8741:7676","2:8748:7621","2:8749:7618","2:8750:7623","2:8762:7622","2:8769:7620","2:8781:7619","2:8788:7677","2:8789:7678","2:8794:7679","2:8797:7680","2:8800:7681","2:8801:7682","2:8803:7683","2:8805:415","2:8808:7684","2:8811:997","2:8814:7685","2:8817:604","2:8820:7686","2:8823:907","2:8825:826","2:8827:792","2:8829:713","2:8831:696","2:8833:7687","2:8834:7688","2:8842:7689"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:248:1981":{"id":"21:248:1981","crate_id":21,"name":"LaneWords4","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:249:2004","21:250:2003","21:251:2002"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3793:8657":{"id":"2:3793:8657","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13384:60154":{"id":"2:13384:60154","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:6084:60799":{"id":"5:6084:60799","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2206","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8097:9134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2206","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8097:9134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12950:8206":{"id":"2:12950:8206","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12951:126","2:12952:1816"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3353:8176":{"id":"2:3353:8176","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3355:1348"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6864:7997":{"id":"1:6864:7997","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6865:54083"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13439:55651":{"id":"2:13439:55651","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15876:2094","self::pattern":"2:13011:8543","str::rsplitn":"1:15882:2099"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49501:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6088:60800":{"id":"5:6088:60800","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13396:60155":{"id":"2:13396:60155","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15882:2099","crate::ops::IndexMut":"2:3562:8636","str::slice_unchecked":"1:15882:2099"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13494:9116":{"id":"2:13494:9116","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13448:60160":{"id":"2:13448:60160","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47433:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:8542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4713:8056":{"id":"1:4713:8056","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4714:54230","1:4715:54231","1:4716:54232","1:4718:8055","1:4719:54233","1:4721:54234","1:4722:9467"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4631:8027","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:302:1977":{"id":"21:302:1977","crate_id":21,"name":"Machine","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:303:2012","21:304:2237","21:305:2238","21:306:2239","21:307:2240","21:308:2241","21:309:2242","21:310:2035","21:311:2243","21:312:2244","21:313:2013","21:316:1492","21:319:2053","21:321:7750","21:323:2365"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13424:54234":{"id":"2:13424:54234","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13011:8543","str::split_whitespace":"1:15882:2099","`DoubleEndedIterator`":"2:8425:120","str::rsplit":"1:15882:2099","prim@char":"1:15876:2094"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49397:8061","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13474:60170":{"id":"2:13474:60170","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13011:8543","prim@char":"1:15876:2094"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10286:189":{"id":"2:10286:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10287:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6104:60803":{"id":"5:6104:60803","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8359:216","`Box<str>`":"5:432:2206"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2206","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8097:9134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3163:227":{"id":"2:3163:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3165:127","2:3166:1407"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3558:8299":{"id":"2:3558:8299","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3560:181","2:3561:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5794:8018":{"id":"1:5794:8018","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5795:54814"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:8003","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13377:13833":{"id":"2:13377:13833","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3404:8593":{"id":"2:3404:8593","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3406:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3147:75":{"id":"2:3147:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3149:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5802:8020":{"id":"1:5802:8020","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5803:10516"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10269:109":{"id":"2:10269:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10270:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3323:8175":{"id":"2:3323:8175","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3325:181","2:3326:1347"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1389"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14123:141":{"id":"2:14123:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14124:277","2:14125:518","2:14126:280","2:14127:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13496:53816":{"id":"2:13496:53816","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10290:7701":{"id":"2:10290:7701","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10291:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13391:55618":{"id":"2:13391:55618","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1575":{"id":"0:0:1575","crate_id":0,"name":"rand_chacha","span":{"filename":"src/lib.rs","begin":[9,0],"end":[33,35]},"visibility":"public","docs":"The ChaCha random number generator.","links":{},"attrs":["#![doc(html_logo_url =\n\"https://www.rust-lang.org/logos/rust-logo-128x128-blk.png\", html_favicon_url\n= \"https://www.rust-lang.org/favicon.ico\", html_root_url =\n\"https://rust-random.github.io/rand/\")]","#![deny(missing_docs)]","#![deny(missing_debug_implementations)]","#![doc(test(attr(allow(unused_variables), deny(warnings))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:141:1571","0:142:1573","0:3","0:123","0:126","0:129","0:132","0:135","0:138"],"is_stripped":false}},"2:2948:184":{"id":"2:2948:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2950:997","2:2951:826","2:2952:792","2:2953:713","2:2954:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2902:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13399:8968":{"id":"2:13399:8968","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15876:2094"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49367:8932","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6964:7996":{"id":"1:6964:7996","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6965:54732"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6103:60802":{"id":"5:6103:60802","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[27,45],"end":[27,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::chacha::ChaCha20Rng","name":"ChaCha20Rng","id":"0:198:1567","glob":false}},"2:13393:55619":{"id":"2:13393:55619","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:123":{"id":"0:123","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[27,4],"end":[27,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::chacha::ChaCha12Core","name":"ChaCha12Core","id":"0:262:1564","glob":false}},"1:5658:8030":{"id":"1:5658:8030","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5659:9937","1:5660:54361"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:8003","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3710:224":{"id":"2:3710:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3711:181","2:3712:8532","2:3713:686","2:3714:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3715:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3710:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5652:8028":{"id":"1:5652:8028","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5653:54401","1:5654:9231"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:8003","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22759:8627":{"id":"2:22759:8627","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22760:8619","2:22761:58916","2:22762:1220","2:22763:1221","2:22764:43328","2:22765:58961","2:22766:14001","2:22767:58962","2:22768:58963","2:22769:58964","2:22770:58917","2:22771:58918","2:22772:58919","2:22773:58920","2:22774:58921","2:22775:58922","2:22776:58923"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22808:8003","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10278:7695":{"id":"2:10278:7695","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10279:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13486:60172":{"id":"2:13486:60172","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13011:8543","prim@char":"1:15876:2094"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3150:74":{"id":"2:3150:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3152:1688"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:6106:53813":{"id":"5:6106:53813","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15882:2099"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3540:8661":{"id":"2:3540:8661","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3542:237","2:3543:206","2:3544:58851"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5732:8012":{"id":"1:5732:8012","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5733:10516","1:5734:54560","1:5735:54561"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13501:60175":{"id":"2:13501:60175","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15876:2094"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49714:8951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13380:60153":{"id":"2:13380:60153","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15882:2099"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10517:146":{"id":"2:10517:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10518:652","2:10519:1690","2:10520:54433","2:10521:54434","2:10522:54435","2:10523:54436","2:10524:54437","2:10525:54438","2:10526:54439","2:10527:54440","2:10528:54441","2:10529:54442","2:10530:54443","2:10531:54444","2:10532:54445","2:10533:1523"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5746:8015":{"id":"1:5746:8015","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5747:11947","1:5748:56713","1:5749:10516","1:5750:56714","1:5751:8440","1:5752:8441","1:5753:56715","1:5754:1296","1:5755:56716","1:5756:56717","1:5757:56718","1:5758:56719","1:5759:56720","1:5760:56721","1:5761:56722","1:5762:56723"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9237:8273":{"id":"2:9237:8273","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3392:8587":{"id":"2:3392:8587","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3394:181","2:3395:1225"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13383:54361":{"id":"2:13383:54361","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12482:9074"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3159:228":{"id":"2:3159:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3161:127","2:3162:1408"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:40:1674":{"id":"20:40:1674","crate_id":20,"name":"BlockRngCore","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:41:1698","20:42:1699","20:43:1700"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3486:7796":{"id":"2:3486:7796","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3487:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3473:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/guts.rs","begin":[14,0],"end":[14,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"ppv_lite86::Machine","name":"Machine","id":"21:302:1977","glob":false}},"2:13489:60173":{"id":"2:13489:60173","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13011:8543","prim@char":"1:15876:2094"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:8542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2872:104":{"id":"2:2872:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2873:408","2:2874:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3339:8518":{"id":"2:3339:8518","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:181","2:3342:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13724:138":{"id":"2:13724:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13725:181","2:13726:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10284:7703":{"id":"2:10284:7703","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10285:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23044:21988":{"id":"2:23044:21988","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23045:11453","2:23046:58776","2:23047:58777"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23037:8003","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:202:1980":{"id":"21:202:1980","crate_id":21,"name":"BitOps32","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"BitOps0","id":"21:201:2225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RotateEachWord32","id":"21:205:2228","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3377:8195":{"id":"2:3377:8195","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3379:181","2:3380:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13406:13782":{"id":"2:13406:13782","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49689:8949","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9236:8274":{"id":"2:9236:8274","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2902:183":{"id":"2:2902:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2904:604","2:2905:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:23420:8622":{"id":"2:23420:8622","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23421:1262","2:23422:1261","2:23423:1259","2:23424:1258"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22832:8621","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13374":{"id":"2:13374","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12471:1332","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13375:793","2:13376:7634","2:13377:13833","2:13378:60152","2:13380:60153","2:13383:54361","2:13384:60154","2:13385:304","2:13386:55620","2:13387:55616","2:13389:55617","2:13391:55618","2:13393:55619","2:13395:8158","2:13396:60155","2:13397:55639","2:13398:55640","2:13399:8968","2:13400:8572","2:13401:1741","2:13402:14043","2:13403:14041","2:13404:9467","2:13405:60156","2:13406:13782","2:13407:55655","2:13410:55190","2:13413:55192","2:13416:7673","2:13420:7633","2:13424:54234","2:13427:14042","2:13430:55649","2:13433:60157","2:13436:60158","2:13439:55651","2:13442:55653","2:13445:60159","2:13448:60160","2:13451:2178","2:13454:60161","2:13457:60162","2:13460:60163","2:13463:60164","2:13465:60165","2:13467:60166","2:13469:60167","2:13470:60168","2:13471:60169","2:13474:60170","2:13477:13431","2:13480:55656","2:13483:60171","2:13486:60172","2:13489:60173","2:13492:8825","2:13494:9116","2:13495:53815","2:13496:53816","2:13497:53817","2:13498:60174","2:13500:8110","2:13501:60175"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3382:8196":{"id":"2:3382:8196","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3384:181","2:3385:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10911:214":{"id":"2:10911:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10913:181","2:10914:55616","2:10915:55617","2:10916:55618","2:10917:55619","2:10918:753","2:10919:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10902:8003","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10280:7694":{"id":"2:10280:7694","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10281:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8340:8610":{"id":"2:8340:8610","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8342:7682"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3291:2202":{"id":"2:3291:2202","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3981:68":{"id":"2:3981:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3982:1420"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"5:6107:53814":{"id":"5:6107:53814","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15882:2099"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6866:7999":{"id":"1:6866:7999","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6867:54610"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6792:7993":{"id":"1:6792:7993","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6793:54009","1:6794:54404"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:8003","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13403:14041":{"id":"2:13403:14041","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15882:2099"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49680:8948","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13030:8546":{"id":"2:13030:8546","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13032:8565","2:13033:922","2:13034:59581","2:13035:59582"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6442:7995":{"id":"1:6442:7995","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6443:8440","1:6444:8441","1:6445:12866","1:6446:58192","1:6448:58196","1:6450:58193","1:6451:58194","1:6453:58195"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:8003","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8344:8612":{"id":"2:8344:8612","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8346:7683"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3255:2201":{"id":"2:3255:2201","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3416:8599":{"id":"2:3416:8599","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3418:1226"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8381:151":{"id":"2:8381:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8382:1698","2:8383:7638","2:8384:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3503:131":{"id":"2:3503:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3506:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13389:55617":{"id":"2:13389:55617","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47433:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47433:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3361:8527":{"id":"2:3361:8527","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3363:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13405:60156":{"id":"2:13405:60156","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49661:8946","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13492:8825":{"id":"2:13492:8825","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12950:8206","`FromStr`":"2:12950:8206"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47560:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12950:8206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12950:8206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2938:177":{"id":"2:2938:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2939:415","2:2940:7621","2:2941:7618","2:2942:7627"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2907:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2948:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:234:1984":{"id":"21:234:1984","crate_id":21,"name":"Vec4","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:236:2014","21:237:2032"],"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13467:60166":{"id":"2:13467:60166","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6868:8000":{"id":"1:6868:8000","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6869:58130"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13397:55639":{"id":"2:13397:55639","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15882:2099"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3629:9010":{"id":"2:3629:9010","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3631:58663","2:3632:58664","2:3633:55655"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"20:145:1675":{"id":"20:145:1675","crate_id":20,"name":"CryptoRng","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3408:8595":{"id":"2:3408:8595","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3410:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13378:60152":{"id":"2:13378:60152","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3262:220":{"id":"2:3262:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4688:7699":{"id":"1:4688:7699","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4689:1690","1:4690:54110","1:4692:54111","1:4693:9390","1:4694:54112","1:4695:13476","1:4696:2297","1:4705:7662"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13416:7673":{"id":"2:13416:7673","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:13011:8543","prim@char":"1:15876:2094","`None`":"2:47433:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47433:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:58:1563":{"id":"0:58:1563","crate_id":0,"name":"guts","span":{"filename":"src/guts.rs","begin":[10,0],"end":[273,3]},"visibility":"crate","docs":"The ChaCha random number generator.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:66"],"is_stripped":true}},"2:23092:8691":{"id":"2:23092:8691","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23729:8620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23083:8003","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3153:149":{"id":"2:3153:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3155:1752"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13495:53815":{"id":"2:13495:53815","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10276:119":{"id":"2:10276:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10277:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3497:2203":{"id":"2:3497:2203","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3498:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:7905:8652":{"id":"2:7905:8652","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7906:59668","2:7907:59669","2:7908:59673","2:7909:59671","2:7910:59670","2:7911:59674","2:7912:59672"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2948:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8450:2204":{"id":"2:8450:2204","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8451:793","2:8452:7634"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13739:150":{"id":"2:13739:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13740:181","2:13741:150","2:13742:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13477:13431":{"id":"2:13477:13431","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13011:8543","prim@char":"1:15876:2094"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47433:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3562:8636":{"id":"2:3562:8636","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3564:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3558:8299","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22895:8117":{"id":"2:22895:8117","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22885:8003","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3318:8173":{"id":"2:3318:8173","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3320:181","2:3321:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13471:60169":{"id":"2:13471:60169","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13011:8543","prim@char":"1:15876:2094"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13041:8547","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4631:8027":{"id":"1:4631:8027","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4632:8374","1:4633:57982","1:4635:57983","1:4636:57984","1:4637:8050","1:4638:13390","1:4639:13389","1:4641:57985","1:4642:7662","1:4643:1741","1:4644:7645","1:4646:7656"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22795:8659":{"id":"2:22795:8659","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22796:58916","2:22797:1220","2:22798:1221","2:22799:58917","2:22800:58918","2:22801:58919","2:22802:58920","2:22803:58921","2:22804:58922","2:22805:58923"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22808:8003","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:324:2246":{"id":"21:324:2246","crate_id":21,"name":"Store","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:326:2013"],"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:146:1677":{"id":"20:146:1677","crate_id":20,"name":"SeedableRng","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:147:1706","20:148:1707","20:149:7626","20:154:1826"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13454:60161":{"id":"2:13454:60161","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13011:8543","`DoubleEndedIterator`":"2:8425:120","prim@char":"1:15876:2094","str::matches":"1:15882:2099"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49619:8945","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:8542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13460:60163":{"id":"2:13460:60163","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15876:2094","`DoubleEndedIterator`":"2:8425:120","str::match_indices":"1:15882:2099","self::pattern":"2:13011:8543"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49565:8942","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:8542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8857:7793":{"id":"2:8857:7793","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3259:217":{"id":"2:3259:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13436:60158":{"id":"2:13436:60158","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13011:8543","str::split":"1:15882:2099","str::split_terminator":"1:15882:2099","prim@char":"1:15876:2094"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49465:8938","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:8542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:200:1979":{"id":"21:200:1979","crate_id":21,"name":"ArithOps","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Add","id":"2:3318:8173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Self"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AddAssign","id":"2:3349:8174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"BSwap","id":"21:198:2224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8390:2205":{"id":"2:8390:2205","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8392:7635","2:8394:7636","2:8395:7637"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13433:60157":{"id":"2:13433:60157","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"2:8425:120","str::rsplit_terminator":"1:15882:2099","str::split":"1:15882:2099","prim@char":"1:15876:2094","self::pattern":"2:13011:8543"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49447:8937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3085:8649":{"id":"2:3085:8649","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3084:8003","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:187:1566":{"id":"0:187:1566","crate_id":0,"name":"ChaCha20Core","span":{"filename":"src/chacha.rs","begin":[343,0],"end":[343,80]},"visibility":"public","docs":"ChaCha with 20 rounds","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:141:1571":{"id":"0:141:1571","crate_id":0,"name":"ChaChaRng","span":{"filename":"src/lib.rs","begin":[31,0],"end":[31,33]},"visibility":"public","docs":"ChaCha with 20 rounds","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"ChaCha20Rng","id":"0:198:1567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"2:13451:2178":{"id":"2:13451:2178","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15876:2094","`DoubleEndedIterator`":"2:8425:120","self::pattern":"2:13011:8543","str::matches":"1:15882:2099"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49601:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13500:8110":{"id":"2:13500:8110","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15876:2094"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49705:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2907:124":{"id":"2:2907:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2902:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13398:55640":{"id":"2:13398:55640","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15882:2099"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3387:8197":{"id":"2:3387:8197","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3389:181","2:3390:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3333:8515":{"id":"2:3333:8515","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3335:181","2:3336:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13376:7634":{"id":"2:13376:7634","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13385:304":{"id":"2:13385:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15893:2108","str::as_mut_ptr":"1:15882:2099"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6795:7995":{"id":"1:6795:7995","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6796:12867"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:8003","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13483:60171":{"id":"2:13483:60171","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15876:2094","self::pattern":"2:13011:8543"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:8542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5724:8013":{"id":"1:5724:8013","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5725:53936","1:5726:53938","1:5727:53937","1:5728:53939"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:6:1562":{"id":"0:6:1562","crate_id":0,"name":"chacha","span":{"filename":"src/chacha.rs","begin":[9,0],"end":[632,1]},"visibility":"crate","docs":"The ChaCha random number generator.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:38:1686","0:187:1566","0:198:1567","0:262:1564","0:273:1565","0:337:1568","0:348:1569"],"is_stripped":true}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[27,58],"end":[27,69]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::chacha::ChaCha8Core","name":"ChaCha8Core","id":"0:337:1568","glob":false}},"0:142:1573":{"id":"0:142:1573","crate_id":0,"name":"ChaChaCore","span":{"filename":"src/lib.rs","begin":[33,0],"end":[33,35]},"visibility":"public","docs":"ChaCha with 20 rounds, low-level interface","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"ChaCha20Core","id":"0:187:1566","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"2:3506:132":{"id":"2:3506:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3508:181","2:3509:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13375:793":{"id":"2:13375:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15876:2094"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6105:8084":{"id":"5:6105:8084","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6085:8063":{"id":"5:6085:8063","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22832:8621":{"id":"2:22832:8621","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22833:8619","2:22834:1239","2:22835:1264"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13470:60168":{"id":"2:13470:60168","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5780:8016":{"id":"1:5780:8016","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5781:54415","1:5782:54416","1:5783:54417","1:5784:54418"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:140:1676":{"id":"20:140:1676","crate_id":20,"name":"RngCore","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:141:1738","20:142:1739","20:143:1740","20:144:1742"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3398:8590":{"id":"2:3398:8590","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3400:181","2:3401:1228"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5740:8014":{"id":"1:5740:8014","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5741:10516","1:5742:12680"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:7691","5:785:7692","5:786:7693"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:273:1565":{"id":"0:273:1565","crate_id":0,"name":"ChaCha12Rng","span":{"filename":"src/chacha.rs","begin":[344,0],"end":[344,79]},"visibility":"public","docs":"A cryptographically secure random number generator that uses the ChaCha algorithm.\n\nChaCha is a stream cipher designed by Daniel J. Bernstein[^1], that we use as an RNG. It is\nan improved variant of the Salsa20 cipher family, which was selected as one of the \"stream\nciphers suitable for widespread adoption\" by eSTREAM[^2].\n\nChaCha uses add-rotate-xor (ARX) operations as its basis. These are safe against timing\nattacks, although that is mostly a concern for ciphers and not for RNGs. We provide a SIMD\nimplementation to support high throughput on a variety of common hardware platforms.\n\nWith the ChaCha algorithm it is possible to choose the number of rounds the core algorithm\nshould run. The number of rounds is a tradeoff between performance and security, where 8\nrounds is the minimum potentially secure configuration, and 20 rounds is widely used as a\nconservative choice.\n\nWe use a 64-bit counter and 64-bit stream identifier as in Bernstein's implementation[^1]\nexcept that we use a stream identifier in place of a nonce. A 64-bit counter over 64-byte\n(16 word) blocks allows 1 ZiB of output before cycling, and the stream identifier allows\n2<sup>64</sup> unique streams of output per seed. Both counter and stream are initialized\nto zero but may be set via the `set_word_pos` and `set_stream` methods.\n\nThe word layout is:\n\n```text\nconstant  constant  constant  constant\nseed      seed      seed      seed\nseed      seed      seed      seed\ncounter   counter   stream_id stream_id\n```\n\nThis implementation uses an output buffer of sixteen `u32` words, and uses\n[`BlockRng`] to implement the [`RngCore`] methods.\n\n[^1]: D. J. Bernstein, [*ChaCha, a variant of Salsa20*](\n      https://cr.yp.to/chacha.html)\n\n[^2]: [eSTREAM: the ECRYPT Stream Cipher Project](\n      http://www.ecrypt.eu.org/stream/)","links":{"`RngCore`":"20:140:1676","`BlockRng`":"20:166:1673"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13427:14042":{"id":"2:13427:14042","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15876:2094","self::pattern":"2:13011:8543"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12803:8904","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13410:55190":{"id":"2:13410:55190","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15876:2094","self::pattern":"2:13011:8543"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6690:8015":{"id":"1:6690:8015","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6691:54876","1:6692:12293","1:6693:12294","1:6694:12296","1:6695:12295","1:6696:12297","1:6697:12298","1:6698:12300","1:6699:10552","1:6700:12303","1:6701:12304","1:6702:12305","1:6703:12306","1:6704:12307","1:6705:12308","1:6706:12301","1:6707:12302"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13463:60164":{"id":"2:13463:60164","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13404:9467":{"id":"2:13404:9467","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49651:8062","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10507:142":{"id":"2:10507:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10508:715","2:10510:13812"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:126":{"id":"0:126","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[27,18],"end":[27,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::chacha::ChaCha12Rng","name":"ChaCha12Rng","id":"0:273:1565","glob":false}},"2:3349:8174":{"id":"2:3349:8174","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3351:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13445:60159":{"id":"2:13445:60159","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47433:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12458:9109":{"id":"2:12458:9109","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12459:1698","2:12460:59663"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13420:7633":{"id":"2:13420:7633","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47433:176","prim@char":"1:15876:2094","self::pattern":"2:13011:8543"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47433:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:8542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10552:8194":{"id":"2:10552:8194","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10553:146","2:10554:13528","2:10555:58310"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13400:8572":{"id":"2:13400:8572","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15876:2094"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49373:8933","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4706:8053":{"id":"1:4706:8053","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4707:53847","1:4708:40355","1:4709:53848","1:4710:53849"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13021:8544":{"id":"2:13021:8544","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13023:8546","2:13024:59165","2:13025:59166","2:13026:59167","2:13027:59169","2:13028:59168","2:13029:59170"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9342:8114":{"id":"1:9342:8114","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9343:56690","1:9344:56691","1:9345:56692","1:9346:56693","1:9347:1996","1:9348:39961","1:9349:56689"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:8003","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13401:1741":{"id":"2:13401:1741","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49383:8059","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3721:8532":{"id":"2:3721:8532","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3723:57415"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:1079:8108":{"id":"1:1079:8108","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:7691","1:1081:9116","1:1082:53813","1:1083:53814","1:1084:53815","1:1085:53816","1:1086:53817"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3228:115":{"id":"2:3228:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3229:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4032:8126":{"id":"2:4032:8126","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4033:54546"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4764:8637":{"id":"2:4764:8637","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4765:1698","2:4766:59270","2:4767:7640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:262:1564":{"id":"0:262:1564","crate_id":0,"name":"ChaCha12Core","span":{"filename":"src/chacha.rs","begin":[344,0],"end":[344,79]},"visibility":"public","docs":"ChaCha with 12 rounds","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13041:8547":{"id":"2:13041:8547","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:8542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8864:8651":{"id":"2:8864:8651","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7905:8652","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10288:7700":{"id":"2:10288:7700","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10289:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3365:8529":{"id":"2:3365:8529","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3367:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:348:1569":{"id":"0:348:1569","crate_id":0,"name":"ChaCha8Rng","span":{"filename":"src/chacha.rs","begin":[345,0],"end":[345,75]},"visibility":"public","docs":"A cryptographically secure random number generator that uses the ChaCha algorithm.\n\nChaCha is a stream cipher designed by Daniel J. Bernstein[^1], that we use as an RNG. It is\nan improved variant of the Salsa20 cipher family, which was selected as one of the \"stream\nciphers suitable for widespread adoption\" by eSTREAM[^2].\n\nChaCha uses add-rotate-xor (ARX) operations as its basis. These are safe against timing\nattacks, although that is mostly a concern for ciphers and not for RNGs. We provide a SIMD\nimplementation to support high throughput on a variety of common hardware platforms.\n\nWith the ChaCha algorithm it is possible to choose the number of rounds the core algorithm\nshould run. The number of rounds is a tradeoff between performance and security, where 8\nrounds is the minimum potentially secure configuration, and 20 rounds is widely used as a\nconservative choice.\n\nWe use a 64-bit counter and 64-bit stream identifier as in Bernstein's implementation[^1]\nexcept that we use a stream identifier in place of a nonce. A 64-bit counter over 64-byte\n(16 word) blocks allows 1 ZiB of output before cycling, and the stream identifier allows\n2<sup>64</sup> unique streams of output per seed. Both counter and stream are initialized\nto zero but may be set via the `set_word_pos` and `set_stream` methods.\n\nThe word layout is:\n\n```text\nconstant  constant  constant  constant\nseed      seed      seed      seed\nseed      seed      seed      seed\ncounter   counter   stream_id stream_id\n```\n\nThis implementation uses an output buffer of sixteen `u32` words, and uses\n[`BlockRng`] to implement the [`RngCore`] methods.\n\n[^1]: D. J. Bernstein, [*ChaCha, a variant of Salsa20*](\n      https://cr.yp.to/chacha.html)\n\n[^2]: [eSTREAM: the ECRYPT Stream Cipher Project](\n      http://www.ecrypt.eu.org/stream/)","links":{"`BlockRng`":"20:166:1673","`RngCore`":"20:140:1676"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:3500:130":{"id":"2:3500:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3502:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3503:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4991:8134":{"id":"1:4991:8134","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4992:7791","1:4993:58148"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3258:218":{"id":"2:3258:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13386:55620":{"id":"2:13386:55620","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15893:2108"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:54823","1:2579:2076","1:2580:54822","1:2581:54824","1:2582:54546"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10269:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10276:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13395:8158":{"id":"2:13395:8158","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3558:8299","str::slice_mut_unchecked":"1:15882:2099","`str`":"1:15882:2099"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10282:7702":{"id":"2:10282:7702","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10283:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13036:8542":{"id":"2:13036:8542","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13038:7628","2:13039:58827","2:13040:58828"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13030:8546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22706:8616":{"id":"2:22706:8616","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22707:8619","2:22708:58916","2:22709:59098","2:22710:59099","2:22711:59100","2:22712:43328","2:22713:59101","2:22714:59102","2:22715:59103","2:22716:59104","2:22717:59105","2:22718:59106","2:22719:59107","2:22720:59108","2:22721:13835","2:22722:59109","2:22723:58964","2:22724:13162","2:22725:58609","2:22726:58608","2:22727:58610","2:22728:58917","2:22729:58918","2:22730:58919","2:22731:58920"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22808:8003","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13430:55649":{"id":"2:13430:55649","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13011:8543","str::split":"1:15882:2099","prim@char":"1:15876:2094","`DoubleEndedIterator`":"2:8425:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49415:8907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:8542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8860:7794":{"id":"2:8860:7794","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3421:8602":{"id":"2:3421:8602","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3423:1229"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13465:60165":{"id":"2:13465:60165","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:291:1982":{"id":"21:291:1982","crate_id":21,"name":"MultiLane","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:293:2038","21:294:2036"],"generics":{"params":[{"name":"Lanes","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3412:8597":{"id":"2:3412:8597","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3414:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6464:8032":{"id":"1:6464:8032","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6465:54660","1:6466:12370","1:6467:54661","1:6468:54662","1:6469:54663","1:6470:54664"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:8003","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14197:8182":{"id":"2:14197:8182","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14198:54748","2:14199:54749","2:14200:54750","2:14201:54751","2:14202:54752","2:14203:54753","2:14204:7662"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3345:8521":{"id":"2:3345:8521","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3346:181","2:3347:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3328:8513":{"id":"2:3328:8513","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3330:181","2:3331:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13480:55656":{"id":"2:13480:55656","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13011:8543","prim@char":"1:15876:2094"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47433:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13036:8542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:38:1686":{"id":"0:38:1686","crate_id":0,"name":"Array64","span":{"filename":"src/chacha.rs","begin":[27,0],"end":[27,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[repr(transparent)]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:198:1567":{"id":"0:198:1567","crate_id":0,"name":"ChaCha20Rng","span":{"filename":"src/chacha.rs","begin":[343,0],"end":[343,80]},"visibility":"public","docs":"A cryptographically secure random number generator that uses the ChaCha algorithm.\n\nChaCha is a stream cipher designed by Daniel J. Bernstein[^1], that we use as an RNG. It is\nan improved variant of the Salsa20 cipher family, which was selected as one of the \"stream\nciphers suitable for widespread adoption\" by eSTREAM[^2].\n\nChaCha uses add-rotate-xor (ARX) operations as its basis. These are safe against timing\nattacks, although that is mostly a concern for ciphers and not for RNGs. We provide a SIMD\nimplementation to support high throughput on a variety of common hardware platforms.\n\nWith the ChaCha algorithm it is possible to choose the number of rounds the core algorithm\nshould run. The number of rounds is a tradeoff between performance and security, where 8\nrounds is the minimum potentially secure configuration, and 20 rounds is widely used as a\nconservative choice.\n\nWe use a 64-bit counter and 64-bit stream identifier as in Bernstein's implementation[^1]\nexcept that we use a stream identifier in place of a nonce. A 64-bit counter over 64-byte\n(16 word) blocks allows 1 ZiB of output before cycling, and the stream identifier allows\n2<sup>64</sup> unique streams of output per seed. Both counter and stream are initialized\nto zero but may be set via the `set_word_pos` and `set_stream` methods.\n\nThe word layout is:\n\n```text\nconstant  constant  constant  constant\nseed      seed      seed      seed\nseed      seed      seed      seed\ncounter   counter   stream_id stream_id\n```\n\nThis implementation uses an output buffer of sixteen `u32` words, and uses\n[`BlockRng`] to implement the [`RngCore`] methods.\n\n[^1]: D. J. Bernstein, [*ChaCha, a variant of Salsa20*](\n      https://cr.yp.to/chacha.html)\n\n[^2]: [eSTREAM: the ECRYPT Stream Cipher Project](\n      http://www.ecrypt.eu.org/stream/)","links":{"`RngCore`":"20:140:1676","`BlockRng`":"20:166:1673"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:23729:8620":{"id":"2:23729:8620","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23730:8619"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23725:8003","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6562:8103":{"id":"1:6562:8103","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6563:54741","1:6564:54742"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3756:8658":{"id":"2:3756:8658","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3250:211":{"id":"2:3250:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13498:60174":{"id":"2:13498:60174","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15876:2094"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49696:8950","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3715:137":{"id":"2:3715:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3717:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3710:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[27,71],"end":[27,81]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::chacha::ChaCha8Rng","name":"ChaCha8Rng","id":"0:348:1569","glob":false}},"2:8425:120":{"id":"2:8425:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8426:7628","2:8427:7629","2:8428:7630","2:8429:7631","2:8433:7632","2:8436:7633"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13387:55616":{"id":"2:13387:55616","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47433:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47433:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13469:60167":{"id":"2:13469:60167","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13457:60162":{"id":"2:13457:60162","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"1:15882:2099","self::pattern":"2:13011:8543","prim@char":"1:15876:2094","`DoubleEndedIterator`":"2:8425:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49547:8941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13021:8544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"18:720:10366":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:46569:8751":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:12507:10734":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"12:469:61079":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"12:949:8287":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:48980:9114":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:8849:9913":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:3159:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:46250:8812":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:23083:8003":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"12:112:61078":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:22895:8117":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:5753:9577":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4419:11998":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:9896:61096":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:7856:9621":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"0:142:1573":{"crate_id":0,"path":["rand_chacha","ChaChaCore"],"kind":"typedef"},"1:11967:8253":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:9528:8059":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:13772:11118":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:22557:59264":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:22538:59259":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:5420:12203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:11714:10576":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"21:0:1574":{"crate_id":21,"path":["ppv_lite86"],"kind":"module"},"2:49383:8059":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:4764:8637":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:4397:8079":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:46489:10089":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:53438:7597":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:3503:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:11544:8219":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:11665:10565":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:6239:12400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:2850:8605":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:4013:11847":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:47990:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:5969:12276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:13098:10933":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:12671:8372":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:9466:54398":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"11:54:9407":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"5:432:2206":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:13700:8259":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:9593:10113":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:4040:11859":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:10028:12758":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:6672:9138":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:4395:11988":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:11331:8136":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:5957:8489":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:1723:11737":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"12:1651:9430":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:15898:2113":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:10692:12862":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:12287:10681":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:4431:12003":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:6807:9604":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:3250:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"12:429:9422":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:12010:10639":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:3562:8636":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:7905:8652":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:15901:2116":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:7119:9511":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:12334:12853":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:47534:7780":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:13920:59010":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:47948:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:12182:10668":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:5414:12200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"18:801:9965":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:9551:9914":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"21:1524:10358":{"crate_id":21,"path":["ppv_lite86","x86_64","sse2","G1"],"kind":"struct"},"1:10376:12869":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:2401:12851":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"18:0:2073":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7378:9524":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:1584:11645":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:12073:10652":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:13501:54365":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:7174:9609":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:3262:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:6964:7996":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:11696:10575":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:13724:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:47654:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:11199:10193":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:1215:9236":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:923:9255":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10095:9947":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:50333:8970":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:12053:8316":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:13030:8546":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:994:9256":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:2777:9241":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:13685:11102":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:5011:7727":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:3392:8587":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:8137:59739":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:13598:11053":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:48217:7703":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:6021:9774":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"15:230:9439":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:3336:8189":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:23826:8982":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"9:692:9286":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"16:6366:9437":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:2166:8186":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11794:10598":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:22795:8659":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:13620:11058":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"21:198:2224":{"crate_id":21,"path":["ppv_lite86","types","BSwap"],"kind":"trait"},"1:11051:8086":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:10061:12761":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:5137:8858":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:3997:8270":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"14:244:11445":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:1655:8293":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:15893:2108":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:49501:8910":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"18:739:12743":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:46528:8057":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:32355:58949":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"16:4852:11213":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:3416:8599":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:157:40315":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:7761:9619":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:9440:10186":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:4325:11955":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:10218:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:3793:8657":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:13236:12834":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"6:6893:12420":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:12712:10771":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:1091:10067":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"20:140:1676":{"crate_id":20,"path":["rand_core","RngCore"],"kind":"trait"},"16:3118:9791":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:6166:9587":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:23094:8619":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:10253:9873":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:46620:8759":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:12176:8458":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:4902:8850":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:8857:7793":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:5146:7728":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:4671:11207":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:5505:9568":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:9210:47177":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:51427:8724":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:53491:7600":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"15:0:2070":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:46911:12541":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"21:272:2240":{"crate_id":21,"path":["ppv_lite86","types","u64x2x2"],"kind":"trait"},"2:57613:12596":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:15112:8161":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:48741:10245":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:6101:9515":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:5407:12199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:4641:11206":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:49983:8560":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:7771:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"7:38:45149":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:4991:8134":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"17:12552:10743":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:49705:8111":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:3488:8187":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:51756:12566":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:11847:10612":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"21:244:2235":{"crate_id":21,"path":["ppv_lite86","types","Words4"],"kind":"trait"},"17:9245:9848":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:48780:10246":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:3862:11755":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"12:1235:9420":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:11555:10198":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:10814:9846":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:13573:8207":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"20:174:2215":{"crate_id":20,"path":["rand_core","block","BlockRng64"],"kind":"struct"},"16:5384:9561":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:3163:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:6870:12414":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:14999:10252":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:49800:8548":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:7733:8734":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:1623:8290":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:7668:8248":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:12051:10643":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"12:1688:9432":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:1635:8280":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:8097:9134":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:10448:9880":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:2159:7791":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:8335:9230":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"9:776:9333":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:10160:10457":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:3256:7739":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:2437:12852":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:11382:7994":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:6954:9122":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:22519:59248":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"12:2331:8163":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:8860:7794":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:4193:11917":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13760:11115":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:15062:8152":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:6221:12397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:4133:11905":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:5379:8418":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:52338:8712":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:1708:11728":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:1663:8283":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:3939:11195":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:3370:8188":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"20:40:1674":{"crate_id":20,"path":["rand_core","block","BlockRngCore"],"kind":"trait"},"1:10696:9245":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:8844:12857":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:50129:8963":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:52373:8694":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:3392:9792":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:12156:8452":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:6852:12411":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:11100:9919":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:6964:7779":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:2794:9507":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:3945:11816":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:6887:12419":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:11527:8218":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:7932:8360":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"12:812:8284":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:8479:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"12:160:9421":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:14468:8025":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:4350:11198":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:12116:8322":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:49340:9022":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:5740:8014":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:9638:54371":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"20:131:7896":{"crate_id":20,"path":["rand_core","impls","next_u64_via_fill"],"kind":"function"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:7392:9525":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:10279:9884":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:4477:11202":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:8651:8446":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:6605:9534":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:12181:8236":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:46649:8761":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:3084:8003":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:11388:8911":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:15896:2111":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:2948:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:7185:9610":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:9765:10115":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"14:189:12818":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:46740:8736":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:13318:10978":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:3362:8190":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:5255:12121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:3333:8515":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:3039:61043":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:10117:9949":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:45798:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13788:11122":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:11260:8906":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:7823:9531":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:4293:11941":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:10517:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"18:704:10365":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:6491:9596":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:11653:10564":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:7260:12856":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:511:11537":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:6764:8042":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:3382:8196":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:3506:9787":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:10988:12788":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:7420:9540":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"6:569:11573":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:1497:8283":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:53530:7601":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:3228:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:6106:12324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:50986:12562":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:7477:9541":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:11101:8057":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"18:857:9970":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"21:205:2228":{"crate_id":21,"path":["ppv_lite86","types","RotateEachWord32"],"kind":"trait"},"1:7797:8255":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:3318:8173":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:12100:8321":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:46312:9094":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:56260:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11363:8439":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"12:930:8285":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:24828:8987":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:11183:8904":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:0:2063":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:46945:12544":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:3429:9508":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:1419:7791":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:8289:9228":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:2253:8679":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:53354:7591":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:11333:8908":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:15842:10259":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"12:1144:8292":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:46689:8765":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:7620:8245":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:51530:8716":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:13963:11168":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:12067:8319":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:2733:9491":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:45969:8127":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"20:120:7893":{"crate_id":20,"path":["rand_core","impls","fill_bytes_via_next"],"kind":"function"},"6:4083:11882":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:7264:9535":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:6072:9489":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4364:11977":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:8159:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:3365:9767":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:12343:10693":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:22559:59262":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:10938:12784":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:57634:12597":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:14123:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:12756:10778":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:51220:8715":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:51034:8722":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"7:0:1471":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:24170:12453":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:10468:9897":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"12:2303:11452":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:15346:10258":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:46629:8757":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:9179:12857":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:12247:10676":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:1476:8186":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"18:811:9966":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:2847:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13377:10996":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:9943:61092":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:9729:61089":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:5875:10076":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"0:0:1575":{"crate_id":0,"path":["rand_chacha"],"kind":"module"},"2:12692:8936":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:3041:9780":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:13842:11142":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:1236:12749":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:8106:7638":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"14:231:9120":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:3882:8072":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"18:866:9971":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:9280:10180":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:5386:12186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:3412:8597":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"12:0:2068":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:47906:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:24624:8364":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:23044:21988":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:4511:12036":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:23092:8691":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:5632:9572":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:9689:61095":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:46372:9098":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:10288:7700":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:4347:11966":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:6126:9586":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:5522:12226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:2866:9776":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:15894:2109":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:56338:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11726:10579":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:11750:10581":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:6208:9589":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:1607:7792":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:23420:8622":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:15877:2095":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"12:2045:8191":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:4023:11853":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:10353:9928":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:6768:9816":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:32114:9044":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:4709:8606":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:9769:61094":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:12521:10737":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13119:10938":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:4362:8403":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:605:11593":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:46709:8767":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:374:9203":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:49373:8933":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9332:9891":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:10795:8372":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:1450:8280":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:13011:8543":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:11091:7791":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:5347:12172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:46918:8275":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:10675:17735":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:11616:10558":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"20:98:127":{"crate_id":20,"path":["rand_core","error","Error"],"kind":"struct"},"17:14000:11175":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:10477:9896":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:12659:10765":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:12982:10842":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"9:157:9303":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:7647:2044":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:10071:9953":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:5522:9569":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:4227:11920":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:10912:12779":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:3772:7792":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:1501:8284":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:12132:8323":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:7737:8251":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:9839:9899":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:6032:9510":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:53343:7590":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:8304:9017":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:5935:8487":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:10790:8133":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:6691:9602":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:10269:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:13172:10944":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:49397:8061":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:3629:9010":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:8930:8466":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"14:0:2069":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:2938:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:47629:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:1522:8287":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:13241:39926":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:49993:8561":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:3328:8513":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:6464:8032":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"18:169:53466":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:9933:12756":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:2330:9238":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:9600:61093":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:45990:8781":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"16:6219:9590":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:525:11545":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:46579:8752":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:5766:9578":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:6152:9519":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:5717:9575":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:52020:8725":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:51836:12568":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:5488:9567":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:3486:7796":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:6870:8758":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:4045:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:6644:12409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13402:11001":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:23968:10294":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"21:1701:2222":{"crate_id":21,"path":["ppv_lite86","x86_64","vec512_storage"],"kind":"union"},"16:5407:9562":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:10365:10512":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:3197:8374":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:4300:11942":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:22491:7617":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:51608:8708":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:11124:8061":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"5:1441:8290":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:48487:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:51481:2237":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:46424:9017":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:2912:9777":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4145:11914":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:9770:10116":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"6:5292:12135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:24205:9000":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:1432:7792":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:10286:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:632:11608":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:5020:8852":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:531:11548":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:624:11603":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:7024:9823":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:1540:11620":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:5231:11219":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:11982:8254":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:10276:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:10926:12783":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:46611:8754":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:46291:9100":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:13948:8250":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:8321:9229":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"11:0:2067":{"crate_id":11,"path":["adler"],"kind":"module"},"9:809:1994":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:3966:11824":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:23990:8832":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:6100:12323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:13258:10967":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:4046:11861":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:15897:2112":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:10229:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:2200:10069":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:22885:8003":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:4203:11918":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:670:40647":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:6636:12407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:2751:8120":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:10290:7701":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:5241:12110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:10902:8003":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11779:10592":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:12752:8940":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:49846:8555":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:13370:10994":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:5987:12283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:1676:11710":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"21:1608:7755":{"crate_id":21,"path":["ppv_lite86","x86_64","NoS3"],"kind":"struct"},"2:52098:2241":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:5953:12264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:48469:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"6:6051:12311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:10489:9900":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:11118:47179":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"12:853:8281":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"16:3320:9839":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:9005:47172":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:5837:9130":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:2991:9789":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"12:1180:9418":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:50965:12561":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:10584:9859":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:12408:10723":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:4494:12028":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:46927:12542":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:12012:10257":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:8084:8086":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:3145:9790":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:46049:8802":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:24794:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:3319:8378":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:4365:8404":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"21:1623:7758":{"crate_id":21,"path":["ppv_lite86","x86_64","YesA1"],"kind":"struct"},"2:49619:8945":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:3085:8649":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:13733:11103":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:23631:59252":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:1161:16747":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:10458:10417":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:6864:7997":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:56299:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11015:12790":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:23037:8003":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:537:11550":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:3522:10381":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:45722:7795":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"9:749:9288":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:24192:9001":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:11933:8250":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:38809:7742":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:8978:8272":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:9956:8891":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"21:266:2238":{"crate_id":21,"path":["ppv_lite86","types","u128x1"],"kind":"trait"},"6:610:11595":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:9799:12754":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:8377:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:8929:47171":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"12:1159:9417":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"21:1613:7756":{"crate_id":21,"path":["ppv_lite86","x86_64","YesS4"],"kind":"struct"},"16:3287:9786":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:23897:8984":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:49714:8951":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"21:1519:10357":{"crate_id":21,"path":["ppv_lite86","x86_64","sse2","G0"],"kind":"struct"},"6:4095:11888":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:50113:8961":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:12729:8939":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:11932:10620":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"21:1313:10174":{"crate_id":21,"path":["ppv_lite86","x86_64","sse2","u64x2_sse2"],"kind":"struct"},"6:6858:12412":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:14443:8004":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:12664:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:53468:7599":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:6780:9603":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:5790:9579":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:10106:9948":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:49815:8551":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:13465:11019":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:10975:12787":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:3892:11773":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:10211:12764":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:7073:9606":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:5282:12128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:2462:12854":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:3339:8518":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:9745:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:5658:8030":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:13850:12835":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:49306:8924":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"12:925:8282":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"14:216:45524":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:10224:12765":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:11082:9856":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:6999:9605":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:4265:8089":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"2:49216:8917":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:46597:12537":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"21:1000:10164":{"crate_id":21,"path":["ppv_lite86","soft","x2"],"kind":"struct"},"9:234:9311":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"13:232:10207":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:10807:8026":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:11408:7998":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:7250:9616":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"21:1407:10175":{"crate_id":21,"path":["ppv_lite86","x86_64","sse2","u128x1_sse2"],"kind":"struct"},"5:7111:10081":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:11918:8927":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:10911:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:52985:8726":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"18:829:9968":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11519:10548":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:46281:9099":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:49519:8911":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:7212:8186":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4517:12038":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:3981:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"21:260:2012":{"crate_id":21,"path":["ppv_lite86","types","u32x4"],"kind":"trait"},"6:6124:12335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:4604:8042":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:7444:10067":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:7514:9539":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:10001:47224":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:5580:9757":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:45860:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:6324:8437":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:10571:12771":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:5889:10079":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:45839:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:7158:9608":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:3333:8382":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:46730:8768":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:50297:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4033:11856":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:14528:54538":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:51188:12563":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:51804:12567":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:5359:12177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:2907:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:8370:9117":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:6014:9585":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"18:677:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13554:11043":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:15875:2093":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:3241:9784":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:22832:8621":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:10516:9901":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:161:40316":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:11161:8137":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"1:5802:8020":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"12:747:7791":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:8121:8186":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"20:0:1561":{"crate_id":20,"path":["rand_core"],"kind":"module"},"17:13865:11143":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:14917:8253":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:46499:12839":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:7205:9612":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:4417:11200":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:3255:2201":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:6155:12361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:11458:10532":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:50137:8958":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:53374:7593":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:5376:8417":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:1156:12845":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:15355:54813":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:51458:2012":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:11197:8203":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"1:7682:8249":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:510:12747":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:3048:60148":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:7226:9614":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:10962:12786":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12234:10674":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:7303:9617":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:52067:2247":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:1505:8285":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:45962:8536":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:11374:8910":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"21:201:2225":{"crate_id":21,"path":["ppv_lite86","types","BitOps0"],"kind":"trait"},"6:6881:12418":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:3623:10097":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:24522:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:13912:11157":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:9358:8544":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:3195:9782":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:9342:8114":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:12480:10731":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:15381:9448":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"15:269:9444":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:3345:8388":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:6949:9820":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:13180:10945":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"21:295:2245":{"crate_id":21,"path":["ppv_lite86","types","VZip"],"kind":"trait"},"1:7937:54370":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"5:8359:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:5346:9518":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:1311:9954":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:12671:10766":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:3488:9788":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:3647:8064":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:3396:8191":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13942:11165":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:729:61105":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:13564:11046":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"21:291:1982":{"crate_id":21,"path":["ppv_lite86","types","MultiLane"],"kind":"trait"},"17:11962:10629":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:10426:10118":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:4995:11217":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:47475:7791":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:7835:8784":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"12:774:7638":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12431:10724":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:5563:12252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:50105:8956":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:7291:12856":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8486:8317":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"21:1553:10359":{"crate_id":21,"path":["ppv_lite86","x86_64","sse2","avx2","u32x4x2_avx2"],"kind":"struct"},"17:13240:10959":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"3:300:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:10701:8057":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"2:3361:8527":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:49138:8909":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:1622:11669":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:11147:10190":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:13582:11050":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:6569:9809":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"18:610:9975":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:56325:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:24177:9049":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:10140:9899":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:6087:9517":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:10280:7694":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:51251:8703":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:699:8329":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"12:2013:8186":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:15887:2102":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:1153:12843":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:1547:11622":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:28009:8615":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:13331:10984":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:10950:12785":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:3349:8174":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:8385:8361":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:11115:7792":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:6690:8015":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:519:11542":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12568:10744":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"21:1668:7765":{"crate_id":21,"path":["ppv_lite86","x86_64","Avx2Machine"],"kind":"struct"},"1:8393:1994":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"17:11159:10508":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:6688:9139":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:5228:12101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:11357:8419":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:10855:8070":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:4706:8053":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:49829:8554":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:4005:11844":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:22889:8115":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:11349:8430":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:10673:47362":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:46640:8760":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:3147:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:5561:16750":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:13087:8550":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:3091:9838":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:4306:11945":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:9088:47175":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:12155:10664":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"12:2309:11453":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:14157:8081":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:3153:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:11678:10566":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"12:2009:7638":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:1617:11667":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:11140:8061":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:9849:61098":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:15007:8261":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:6357:9593":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:51860:12569":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"9:0:2065":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:6085:12318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:10420:9923":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:24007:10232":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:49465:8938":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:584:11582":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:24102:39693":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:6792:7993":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:4697:54954":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"18:712:7617":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:49297:8923":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:50133:8957":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:6704:12307":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:7446:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:10282:7702":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:4341:11963":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:9296:10183":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:3540:8661":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"21:248:1981":{"crate_id":21,"path":["ppv_lite86","types","LaneWords4"],"kind":"trait"},"2:47822:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:15626:10127":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4120:11901":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:22536:59261":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:49316:8925":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:50117:8960":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:4866:8849":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:11294:8421":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:4164:11915":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:10839:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:5295:45595":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:13192:10950":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"21:324:2246":{"crate_id":21,"path":["ppv_lite86","types","Store"],"kind":"trait"},"2:47543:2563":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"21:1638:7761":{"crate_id":21,"path":["ppv_lite86","x86_64","NoA2"],"kind":"struct"},"1:14154:8079":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"18:744:61103":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:7216:9613":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:51941:8731":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:3018:9779":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:49355:8626":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:8340:8610":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:7453:9520":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:12582:10746":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:32289:8167":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:15233:8417":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:13739:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:14021:10123":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:8415:9223":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"17:13446:11012":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:5927:9582":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:23619:8116":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:10565:8330":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:11131:8062":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"9:996:9352":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:3156:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:51656:8693":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:0:1323":{"crate_id":1,"path":["std"],"kind":"module"},"2:47560:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:11186:10191":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"18:650:9974":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:4699:10072":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:2187:8190":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:1472:8291":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"21:1618:7757":{"crate_id":21,"path":["ppv_lite86","x86_64","NoS4"],"kind":"struct"},"17:13609:11057":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:3398:8590":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:2793:8121":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:47620:7638":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:1235:9237":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:51146:8723":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:9065:47174":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:15883:2100":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:51274:8707":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:1939:8187":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:4101:11891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:3370:8582":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:45750:8662":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:49601:8944":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:10933:8267":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:50356:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:8579:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:45883:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:4523:12041":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:5029:11218":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:4713:8056":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"2:10219:7699":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:12482:9074":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:11993:10636":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:3721:8532":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:4651:8042":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"5:7815:10081":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:2902:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:3497:2203":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:46351:8950":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:5428:12205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:3473:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:13520:11035":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:1045:8106":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"13:0:2062":{"crate_id":13,"path":["std_detect"],"kind":"module"},"12:354:11449":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"18:790:9964":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:15292:8425":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"14:47:12818":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:50141:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:11283:8419":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:46358:9096":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:12211:8170":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:1194:16748":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:11885:8926":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:10451:10120":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"18:774:10365":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:6700:12303":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:11809:10604":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:50279:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"5:3839:10067":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:48032:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:4734:11209":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:11994:54541":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"21:1628:7759":{"crate_id":21,"path":["ppv_lite86","x86_64","NoA1"],"kind":"struct"},"2:48733:8298":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:9068:8241":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:1457:8292":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:3549:11191":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:5159:12069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:8167:9127":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"20:166:1673":{"crate_id":20,"path":["rand_core","block","BlockRng"],"kind":"struct"},"16:6110:9557":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:10863:8072":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:11822:10608":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:10529:10461":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11406:10514":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5191:12087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:3972:11826":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"12:1100:8290":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:8454:9178":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:7738:9618":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:9860:10117":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:7571:9516":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:69:9177":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:13021:8544":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:10864:10494":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:9236:8274":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:10543:10498":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:0:2072":{"crate_id":17,"path":["object"],"kind":"module"},"17:12783:10782":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:14821:10124":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:6812:12410":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:50176:9031":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"6:5548:12241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:14930:8170":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:8353:12434":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"6:3951:11817":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:46658:8762":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:4790:11211":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:6591:9600":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13054:10901":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:8382:9118":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:10081:9884":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:3353:8176":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:3894:9224":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:11222:8905":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"21:1633:7760":{"crate_id":21,"path":["ppv_lite86","x86_64","YesA2"],"kind":"struct"},"2:5389:9091":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:11277:10509":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:48436:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:10272:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"5:7373:7638":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:4649:8051":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:3698:9011":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"12:1200:9419":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10827:9847":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:24084:12441":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:11378:9850":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10502:10460":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12741:10774":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:9886:12755":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:47552:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"12:866:8186":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:4823:11212":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:23425:22007":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:4317:11951":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:4127:11903":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:14036:8972":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:6731:9813":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:3978:11829":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:8129:9258":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"18:667:9979":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:12028:10640":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:51082:8702":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:50163:8177":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"16:6682:9533":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:47696:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:591:11585":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:7195:9611":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:7406:9523":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:48074:9021":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:11952:8252":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:13348:10989":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:53400:7595":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:47433:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:13429:11005":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:15876:2094":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:2203:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:15886:2101":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:13163:10943":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:13774:59363":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:6864:12413":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:9626:54367":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"17:13924:11159":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:10557:8540":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:5400:12197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:11118:8059":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:11504:1994":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:3759:7791":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"9:722:9287":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:9404:10185":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:4331:11957":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:3200:8050":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:11453:8208":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:7122:20133":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:1637:8291":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:14235:8340":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"21:1653:7764":{"crate_id":21,"path":["ppv_lite86","x86_64","SseMachine"],"kind":"struct"},"2:46329:8111":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:49207:8916":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:52181:8717":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:1644:8281":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:14689:12862":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:4242:10067":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:2310:9265":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:13810:11127":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:13933:11163":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:2872:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:15890:2105":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:12771:10779":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:3881:11765":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:8954:9857":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:3772:11193":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:12946:10811":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:13540:11041":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:46228:12526":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:6562:8103":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"12:1762:10065":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:3714:11192":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:47491:7638":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:9717:8411":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"2:4047:8125":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:10658:8199":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:1658:11698":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:37565:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11482:10533":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:51293:12564":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"21:234:1984":{"crate_id":21,"path":["ppv_lite86","types","Vec4"],"kind":"trait"},"16:5561:9570":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:2314:9927":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:47483:7792":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:2753:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:10507:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:1136:8128":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:2262:9239":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:903:8334":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:48203:7695":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4459:12015":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:9034:47173":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:294:12745":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:8032:8361":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:12494:10733":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:5780:8016":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:12045:7791":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:5973:8492":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:8425:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8743:8456":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:48521:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"12:968:8288":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11539:10194":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:3701:8071":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:4073:11875":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:4478:12023":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:6252:9591":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"0:141:1571":{"crate_id":0,"path":["rand_chacha","ChaChaRng"],"kind":"typedef"},"2:3259:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:5197:12088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:10149:12755":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:11058:8088":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:11246:53811":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:5274:12123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:543:11553":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:46304:8951":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:46391:8816":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:11295:8907":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:4399:8080":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:5863:8484":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"1:1528:8288":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"21:1648:7763":{"crate_id":21,"path":["ppv_lite86","x86_64","NoNI"],"kind":"struct"},"17:2512:9925":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:7800:8257":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:24590:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:3743:9843":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:5975:9583":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:3918:11793":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:6554:9598":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:4506:11203":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:32295:9034":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"17:10317:9890":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"18:820:9967":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:23725:8003":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"21:278:2242":{"crate_id":21,"path":["ppv_lite86","types","u128x2"],"kind":"trait"},"6:4401:11989":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:9633:10114":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:3260:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:22504:59248":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:12191:8169":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:4922:11215":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:6620:9807":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:22706:8616":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:49777:8545":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:10424:12833":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:47500:7779":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:8157:8276":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:4215:11919":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:45997:8782":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:13898:11150":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:786:10117":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:15370:9448":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:47466:1698":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"7:85:45156":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:10844:9899":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:3357:8525":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:11970:10631":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:4032:8126":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"16:3172:9781":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:3408:8595":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:8493:8318":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:3951:8187":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"5:4515:9212":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"2:49696:8950":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:46406:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"9:686:9284":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:9368:10184":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:12950:8206":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:5833:9128":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:7549:9528":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:6868:8000":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:5273:9769":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:12186:8237":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:3990:11838":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"9:1056:9346":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:6795:7995":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:3957:11819":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10179:10459":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"21:202:1980":{"crate_id":21,"path":["ppv_lite86","types","BitOps32"],"kind":"trait"},"2:46222:8111":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:49671:8947":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:7786:9530":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:9238:8343":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:7804:9529":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:12307:10687":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:11416:8913":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:1694:9234":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"12:1855:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:9065:8453":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:11435:20134":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:6935:12428":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:9759:12753":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:13780:11121":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:1736:11740":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:8437:8187":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:13062:10903":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:49958:8558":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:13205:10955":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:12917:10791":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:10435:12766":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:5472:9566":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:11499:10538":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:24760:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:24048:8827":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:13453:11013":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:5415:8042":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:5998:12288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:5986:8493":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:1674:8284":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:6413:9436":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:53276:2249":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:1563:11630":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:2543:9895":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:8644:8444":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:8381:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:3194:8373":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:9971:61091":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:3970:10067":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"12:2315:61077":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:12673:10122":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:46266:8814":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:14481:12681":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:2175:8188":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13978:11169":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:48210:7702":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:24726:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:4535:11204":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:12458:9109":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:3218:9783":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:47864:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"18:136:53464":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:1534:8289":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:46519:8747":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:50006:12840":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"17:10558:12769":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:4386:11199":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:14949:12683":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:599:11590":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:46411:9016":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:10377:9926":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:3613:8069":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:15211:8145":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:8188:7638":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:52524:8718":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:14:1690":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:4448:11201":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:3323:8175":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:10576:54812":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"16:6391:9594":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"21:263:2237":{"crate_id":21,"path":["ppv_lite86","types","u64x2"],"kind":"trait"},"1:13837:8249":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:11835:10609":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:4304:11197":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:49565:8942":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:1717:11734":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:2460:12853":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:15882:2099":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:14511:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:2843:9775":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11026:12791":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:88:40249":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:10623:12775":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:5189:7729":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:1486:8187":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:13746:11109":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:7512:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:6005:12292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:52731:8732":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:2178:12436":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:8271:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:2171:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:4066:11872":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:7980:10099":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"17:9264:10179":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:13394:10999":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:24454:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:3341:9195":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"20:145:1675":{"crate_id":20,"path":["rand_core","CryptoRng"],"kind":"trait"},"6:6910:12425":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"8:0:2064":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:14706:8254":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:9659:61097":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:53064:8710":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:4704:11208":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"12:892:9409":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:9961:12757":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:4475:8077":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:1597:7791":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:6214:12394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"11:46:11458":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:6204:8436":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"19:117:10360":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"15:248:9440":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:1744:11744":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:14197:8182":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:1665:11702":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:10668:8294":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:15892:2107":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:12467:10729":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:53415:7596":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:10278:7695":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:13036:8542":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:11001:12789":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:46677:8764":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:4477:8078":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"21:1219:10167":{"crate_id":21,"path":["ppv_lite86","x86_64","sse2","u32x4_sse2"],"kind":"struct"},"16:5421:9563":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:4733:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:5092:7726":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:3317:8377":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:3268:7732":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:2163:7638":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:1690:11721":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"18:896:9973":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:6028:12310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:46004:7726":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:53190:8695":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:8695:8447":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:6923:12426":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12208:10671":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:4272:11929":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:3558:8299":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:11587:8220":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:48454:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:13272:10972":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:10801:12778":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:8194:7638":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:11289:8420":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:897:8333":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:13799:11126":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10331:9899":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:3727:8534":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:3044:60147":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:3278:7741":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:46541:8748":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:50386:8123":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:49689:8949":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:3377:8195":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:11434:10518":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:2181:8189":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"20:146:1677":{"crate_id":20,"path":["rand_core","SeedableRng"],"kind":"trait"},"2:3421:8602":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:10656:10462":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"18:636:10365":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"21:252:2236":{"crate_id":21,"path":["ppv_lite86","types","Swap64"],"kind":"trait"},"1:15858:54540":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:11338:8488":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:11137:8136":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"1:15847:16749":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:9649:12751":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:49651:8062":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:5855:9581":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:51704:8697":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:607:12748":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:11269:12657":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"16:6269:9592":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:7843:9620":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:3500:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:12795:10789":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"21:1075:10166":{"crate_id":21,"path":["ppv_lite86","soft","x4"],"kind":"struct"},"5:8151:7638":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:1618:7638":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:15889:2104":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:5595:9571":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:51631:8711":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:10407:9924":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:2062:8042":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:52260:8705":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:10938:8268":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:12699:10770":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:52307:8709":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:2484:47262":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"12:396:9423":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:7840:10087":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:11915:10614":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"9:1075:9354":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:53363:7592":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"9:900:11509":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:2366:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:50374:8124":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:15899:2114":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:4377:11982":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:12040:10642":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:1843:10067":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:10403:9898":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:13154:10939":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:24124:39685":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"18:849:9969":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:5379:12185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:2754:9768":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:46559:8750":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:46441:9018":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:9574:9893":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:11604:10555":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:9144:8235":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:5166:7730":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:1527:11614":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:5221:12097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11738:10580":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:49367:8932":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:10887:10495":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:6176:12375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:11767:10589":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:8808:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:5459:12213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:13221:10958":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:4631:8027":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:7870:9526":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:12262:10679":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"14:194:45518":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:11939:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:4052:11864":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:1630:11674":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:6744:9814":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:2218:9198":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"5:4215:8186":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:49447:8937":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:5707:9574":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"6:6185:12378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:4438:8082":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:46335:9095":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:6702:12305":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:3524:8068":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"13:120:7773":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:5582:8537":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:4306:7792":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:2170:8187":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:25198:8840":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:48573:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:13637:11065":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:12221:10672":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4501:12031":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"21:985:1976":{"crate_id":21,"path":["ppv_lite86","dispatch_light128"],"kind":"macro"},"2:32303:58952":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"16:3604:10385":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"12:784:8283":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:7884:9527":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:10284:7703":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:15881:2098":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:12005:53812":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"12:2032:8189":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:4112:11896":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:7611:9182":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:1442:7638":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:46699:8766":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:6475:8186":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:5790:8017":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:563:11570":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"21:984:1975":{"crate_id":21,"path":["ppv_lite86","dispatch"],"kind":"macro"},"2:24061:8828":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:12768:8943":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:12803:8904":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:6200:12385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:2945:9800":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:4358:11974":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:12327:10688":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:3264:9785":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:13482:12852":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:14518:8052":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:49226:8918":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"21:269:2239":{"crate_id":21,"path":["ppv_lite86","types","u32x4x2"],"kind":"trait"},"2:12018:10095":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"6:4255:8438":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:11191:8143":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"21:327:1983":{"crate_id":21,"path":["ppv_lite86","types","StoreBytes"],"kind":"trait"},"1:15888:2103":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:10821:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:6611:59364":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"12:181:9425":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13627:11060":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"18:694:9980":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:2816:9794":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"12:2323:11455":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:1596:11653":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:10591:8359":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:5945:12259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:49415:8907":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:13819:11129":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:5312:12151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:5436:12207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:3345:8521":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:12537:10739":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:7894:9555":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:49921:8557":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:8344:8612":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:6087:8427":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:10564:8003":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:10052:12760":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:13574:11049":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:46668:8763":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:8112:9257":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:15874:2092":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:7146:9607":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:11572:10549":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:11990:12670":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"17:12168:10467":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:7236:9615":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:4241:11921":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:1486:8293":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:8390:2205":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:45814:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:12725:10772":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"12:2025:8188":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:6718:9812":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:6488:8756":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:4614:11205":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:49547:8941":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:48758:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:12142:10661":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:11402:8912":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:1195:60989":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:6644:9601":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:46237:8811":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:53315:8698":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:5185:12084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:24023:10239":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:13356:10992":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:12061:7638":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:4183:11916":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:8198:10099":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"16:7928:8781":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:12195:10669":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:53389:7594":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:4262:11922":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:32254:9008":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:51059:8714":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:9162:9916":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:4599:10070":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"16:5314:10179":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:10304:9887":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:13282:10973":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"21:1688:2221":{"crate_id":21,"path":["ppv_lite86","x86_64","vec256_storage"],"kind":"union"},"5:2553:9242":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:6176:9588":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:681:10512":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:1492:8282":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"21:302:1977":{"crate_id":21,"path":["ppv_lite86","types","Machine"],"kind":"trait"},"1:11164:8138":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"12:1118:8291":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4439:12008":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:4443:7791":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:11343:8491":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:24076:12440":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:4436:8081":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:5724:8013":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:1760:11749":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:1011:7791":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:49262:8920":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:9809:61090":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:5960:9764":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:13986:11172":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13488:11024":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:13532:11038":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:823:10117":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"17:12685:10767":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:5815:9580":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"12:2039:8190":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:3291:2202":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:45906:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:5469:12215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:4688:7699":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:4946:7725":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:4721:8607":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:3038:7691":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:11111:8058":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:14693:8031":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:49288:8922":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:47612:7792":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:5965:8490":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"21:281:2035":{"crate_id":21,"path":["ppv_lite86","types","u32x4x4"],"kind":"trait"},"14:250:11447":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:3040:12430":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"12:937:8286":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"21:285:2243":{"crate_id":21,"path":["ppv_lite86","types","u64x2x4"],"kind":"trait"},"2:3150:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:10800:8025":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:6577:9599":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:5371:12184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:14494:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:8864:8651":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:52874:8706":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:8241:8163":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11045:47178":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10599:12773":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:6415:8755":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:10552:8194":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:14160:8077":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:7257:10067":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:24556:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"21:230:2232":{"crate_id":21,"path":["ppv_lite86","types","Vec2"],"kind":"trait"},"2:24658:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"18:644:9977":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:3258:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:14087:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:11358:9851":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:4449:12014":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:1602:11655":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:12645:10764":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"12:1253:8293":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11947:10624":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:51577:8704":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:6899:12421":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:6464:9532":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:11588:10554":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:24692:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:15891:2106":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:10128:9950":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"14:11:12818":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:38746:8122":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"20:118:7892":{"crate_id":20,"path":["rand_core","impls","next_u64_via_u32"],"kind":"function"},"1:5794:8018":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:6636:9536":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:23729:8620":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:5330:10180":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:13875:8251":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:46550:8749":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:3800:11194":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:11231:9917":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:5746:8015":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:3756:8658":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"21:1603:7754":{"crate_id":21,"path":["ppv_lite86","x86_64","YesS3"],"kind":"struct"},"16:4955:11216":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:51679:8696":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:9186:9855":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:46720:8058":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:12171:8306":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:5130:12045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:15895:2110":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:10635:10188":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:48770:1994":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:4008:12750":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:6942:8001":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:11079:8054":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:32455:58950":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"5:7633:9183":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"9:1020:9353":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:11167:8142":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"6:4281:11934":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:5360:9560":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:49680:8948":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:9133:47176":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:3715:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:5456:9565":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:6238:9522":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:11614:8223":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:13853:54368":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:14458:12673":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:49236:8919":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:46365:9097":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:1653:8282":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:5503:8425":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:9951:8890":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:5528:12227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:8294:8361":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"6:3997:11842":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:3710:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"9:603:10223":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"9:27:9335":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:48196:7694":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:4359:7638":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:6257:9182":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"18:766:10375":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:11981:10634":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:14463:12675":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:2968:9778":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:1079:8108":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:14026:8638":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:51380:8730":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"20:128:7895":{"crate_id":20,"path":["rand_core","impls","next_u32_via_fill"],"kind":"function"},"1:15078:8153":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:11337:9892":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:22808:8003":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:50342:8971":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"12:556:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:47780:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:6136:9558":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:2267:8683":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"12:463:61082":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:13386:10997":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:4762:11210":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:56312:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:37589:7617":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:53127:2248":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:3064:9837":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"12:761:7792":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:4425:12000":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:11597:7791":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:13306:10975":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:9237:8273":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:5082:8857":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:1700:11727":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"14:56:10533":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:6614:12406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:3365:8529":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"12:1667:9431":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:7295:9537":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:12095:10653":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:22759:8627":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:6424:9595":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:11194:8144":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"17:11328:10779":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:2598:12855":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"2:3404:8593":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:49189:8914":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:5167:12071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:2492:8656":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:7634:8246":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:547:9759":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:22948:8619":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13477:11020":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:8254:8297":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:4060:11869":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:48557:7716":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:6442:7995":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:2192:8191":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:9719:12752":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:48460:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:13884:11148":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:616:11598":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:50289:12560":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"12:840:8280":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:8141:58733":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:4572:8087":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:10266:9876":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:14837:10125":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:49198:8915":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:10652:16746":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:49972:8559":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:7654:8247":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:5536:9138":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:8902:47170":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:3387:8197":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:5433:9564":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:5015:8851":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:13336:8432":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:8913:8275":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:5093:660":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:542:9495":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:9732:8412":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:47738:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:4410:11992":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:50109:8959":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12610:10752":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:4387:11985":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:13815:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:4890:11214":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:6068:12313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:10200:12763":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:51115:8729":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:3338:9766":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"9:927:45253":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:11067:8052":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:49661:8946":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:12385:10714":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:13041:8547":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:13547:11042":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:3329:7791":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:3905:11783":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"18:754:61102":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:6091:12320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:2889:9795":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:5978:12282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:2381:8238":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:11603:8222":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:8137:8361":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"18:620:10364":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:51332:12565":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:4230:11196":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:10943:8073":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"12:976:8289":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:6866:7999":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:3375:9196":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:12632:10763":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"18:660:9978":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:1463:8281":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"12:377:9424":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:8450:2204":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:10586:8338":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:4643:10072":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:3868:11756":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:49275:8921":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:10788:12776":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:13497:11027":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:4470:12021":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:5732:8012":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:10637:16744":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:11304:47180":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"10:0:2066":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:50125:8962":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:2773:9801":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:24488:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:50121:8964":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"21:1677:1978":{"crate_id":21,"path":["ppv_lite86","x86_64","vec128_storage"],"kind":"union"},"2:24140:39694":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:15093:8154":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:46956:12546":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:885:9972":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:837:8546":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"18:782:10365":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"9:469:10208":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:11640:10562":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"12:2018:8187":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"18:152:53465":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:13296:10974":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:7342:9552":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:13506:11028":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:1729:8431":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:1646:8292":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:6518:9597":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:1554:11625":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:3739:8535":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"9:963:9351":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:4157:9860":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:10611:12774":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11254:9915":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:15271:8418":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"21:200:1979":{"crate_id":21,"path":["ppv_lite86","types","ArithOps"],"kind":"trait"},"16:5672:9573":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:11628:10559":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:3335:8383":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"12:877:8187":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:5608:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:1021:8361":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:51011:8728":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:299:12746":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:7333:9538":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:4043:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:49894:8556":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:51169:8727":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"12:2005:7791":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:9476:10187":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:10041:12759":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:48749:8541":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:13590:11052":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:10609:8340":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:7279:9825":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"21:275:2241":{"crate_id":21,"path":["ppv_lite86","types","u64x4"],"kind":"trait"},"17:13041:10894":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:12118:10659":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:10236:9878":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:578:11579":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:15900:2115":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:14969:8169":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:15880:2097":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:1511:8286":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:46936:8087":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:47604:7791":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:5736:9576":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"21:288:2244":{"crate_id":21,"path":["ppv_lite86","types","u128x4"],"kind":"trait"},"1:7337:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:45929:9009":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:14843:10126":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:48499:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:56273:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:10847:8395":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:15106:8160":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:4371:11979":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:53334:7589":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:3506:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:5652:8028":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"9:41:9336":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:55902:8643":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:12231:8171":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:56286:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:15879:2096":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:5996:9584":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:51313:8692":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:48788:10247":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:14904:8252":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:12598:10750":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:48984:9113":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:2399:12850":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:2276:8684":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:11226:10256":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"6:5210:12089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:11386:12292":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:1572:11636":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:9740:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:7042:9824":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:1522:11612":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:0:2071":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:46588:8753":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"21:1643:7762":{"crate_id":21,"path":["ppv_lite86","x86_64","YesNI"],"kind":"struct"},"17:12275:10680":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:12442:10726":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:53237:8713":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:12456:10728":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:5788:10067":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:7467:9521":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:5269:12122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:1533:11617":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:53453:7598":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:12087:8320":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:12373:10712":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:1908:41618":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:4359:8402":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"}},"external_crates":{"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"rand_core","html_root_url":"https://rust-random.github.io/rand/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"ppv_lite86","html_root_url":null}},"format_version":16}