{"root":"0:0:2430","crate_version":"3.10.1","includes_private":false,"index":{"2:13404:31959":{"id":"2:13404:31959","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:41952"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:120":{"id":"0:120","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[134,0],"end":[138,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","description","source","cause","type_id"],"trait":{"name":"Error","id":"2:3047:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:121:2866"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32473:3562-0:144:2432":{"id":"a:2:32473:3562-0:144:2432","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32473:3562","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32473:3562","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[494,0],"end":[498,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:150:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2999-0:144:2432":{"id":"b:2:2999-0:144:2432","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3002:138","2:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:115:839":{"id":"0:115:839","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[116,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Error","id":"1:3069:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:427":{"id":"0:427","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,9],"end":[194,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:430:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13281:336":{"id":"2:13281:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13282:30756","`u8`":"1:12374:1865"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[984,0],"end":[1010,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_exact","read_buf_exact","by_ref","chain","bytes","is_read_vectored","read_vectored","read_to_end","take","read_to_string","read_buf"],"trait":{"name":"Read","id":"1:3594:2867","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2318:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"items":["0:213:3088","0:215:3090","0:217:3093","0:219:3094","0:221:3095"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:281:3090":{"id":"0:281:3090","crate_id":0,"name":"read_vectored","span":{"filename":"src/spooled.rs","begin":[126,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"io::IoSliceMut","id":"1:3612:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:328:1188":{"id":"0:328:1188","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[294,4],"end":[296,5]},"visibility":"public","docs":"Create a new `Builder`.\n\n# Examples\n\nCreate a named temporary file and write some data into it:\n\n```\n# use std::io;\n# use std::ffi::OsStr;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nuse tempfile::Builder;\n\nlet named_tempfile = Builder::new()\n    .prefix(\"my-temporary-note\")\n    .suffix(\".txt\")\n    .rand_bytes(5)\n    .tempfile()?;\n\nlet name = named_tempfile\n    .path()\n    .file_name().and_then(OsStr::to_str);\n\nif let Some(name) = name {\n    assert!(name.starts_with(\"my-temporary-note\"));\n    assert!(name.ends_with(\".txt\"));\n    assert_eq!(name.len(), \"my-temporary-note.txt\".len() + 5);\n}\n# Ok(())\n# }\n```\n\nCreate a temporary directory and add a file to it:\n\n```\n# use std::io::{self, Write};\n# use std::fs::File;\n# use std::ffi::OsStr;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nuse tempfile::Builder;\n\nlet dir = Builder::new()\n    .prefix(\"my-temporary-dir\")\n    .rand_bytes(5)\n    .tempdir()?;\n\nlet file_path = dir.path().join(\"my-temporary-note.txt\");\nlet mut file = File::create(file_path)?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\n// By closing the `TempDir` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the directory will still be deleted when `dir` goes out\n// of scope, but we won't know whether deleting the directory\n// succeeded.\ndrop(file);\ndir.close()?;\n# Ok(())\n# }\n```\n\nCreate a temporary directory with a chosen prefix under a chosen folder:\n\n```ignore\nlet dir = Builder::new()\n    .prefix(\"my-temporary-dir\")\n    .tempdir_in(\"folder-with-tempdirs\")?;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13342:30791":{"id":"2:13342:30791","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12355:476","self::pattern":"2:12960:3735","str::rsplitn":"2:13345:30793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44147:7352","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42276:10312-0:144:2432":{"id":"a:2:42276:10312-0:144:2432","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42276:10312","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42276:10312","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:313-0:112:2431":{"id":"0:313-0:112:2431","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,14],"end":[189,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::tempfile_in","name":"tempfile_in","id":"0:112:2431","glob":false}}},"0:334:2445":{"id":"0:334:2445","crate_id":0,"name":"append","span":{"filename":"src/lib.rs","begin":[399,4],"end":[402,5]},"visibility":"public","docs":"Set the file to be opened in append mode.\n\nDefault: `false`.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .append(true)\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["append",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:174:1188":{"id":"0:174:1188","crate_id":0,"name":"new","span":{"filename":"src/file/mod.rs","begin":[605,4],"end":[607,5]},"visibility":"public","docs":"Create a new named temporary file.\n\nSee [`Builder`] for more configuration.\n\n# Security\n\nThis will create a temporary file in the default temporary file\ndirectory (platform dependent). This has security implications on many\nplatforms so please read the security section of this type's\ndocumentation.\n\nReasons to use this method:\n\n  1. The file has a short lifetime and your temporary file cleaner is\n     sane (doesn't delete recently accessed files).\n\n  2. You trust every user on your system (i.e. you are the only user).\n\n  3. You have disabled your system's temporary file cleaner or verified\n     that your system doesn't have a temporary file cleaner.\n\nReasons not to use this method:\n\n  1. You'll fix it later. No you won't.\n\n  2. You don't care about the security of the temporary file. If none of\n     the \"reasons to use this method\" apply, referring to a temporary\n     file by name may allow an attacker to create/overwrite your\n     non-temporary files. There are exceptions but if you don't already\n     know them, don't use this method.\n\n# Errors\n\nIf the file can not be created, `Err` is returned.\n\n# Examples\n\nCreate a named temporary file and write some data to it:\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), ::std::io::Error> {\nlet mut file = NamedTempFile::new()?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`Builder`]: struct.Builder.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:3087":{"id":"0:198:3087","crate_id":0,"name":"reopen","span":{"filename":"src/file/mod.rs","begin":[948,4],"end":[951,5]},"visibility":"public","docs":"Securely reopen the temporary file.\n\nThis function is useful when you need multiple independent handles to\nthe same file. It's perfectly fine to drop the original `NamedTempFile`\nwhile holding on to `File`s returned by this function; the `File`s will\nremain usable. However, they may not be nameable.\n\n# Errors\n\nIf the file cannot be reopened, `Err` is returned.\n\n# Security\n\nUnlike `File::open(my_temp_file.path())`, `NamedTempFile::reopen()`\nguarantees that the re-opened file is the _same_ file, even in the\npresence of pathological temporary file cleaners.\n\n# Examples\n\n```no_run\n# use std::io;\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\nlet another_handle = file.reopen()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"File","id":"1:2318:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13372:37444":{"id":"2:13372:37444","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43:337":{"id":"0:43:337","crate_id":0,"name":"as_ref","span":{"filename":"src/dir/mod.rs","begin":[452,4],"end":[454,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:839":{"id":"0:117:839","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[123,4],"end":[125,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[374,0],"end":[378,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:134:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:27:2429":{"id":"0:27:2429","crate_id":0,"name":"TempDir","span":{"filename":"src/dir/mod.rs","begin":[196,0],"end":[198,1]},"visibility":"public","docs":"A directory in the filesystem that is automatically deleted when\nit goes out of scope.\n\nThe [`TempDir`] type creates a directory on the file system that\nis deleted once it goes out of scope. At construction, the\n`TempDir` creates a new directory with a randomly generated name.\n\nThe default constructor, [`TempDir::new()`], creates directories in\nthe location returned by [`std::env::temp_dir()`], but `TempDir`\ncan be configured to manage a temporary directory in any location\nby constructing with a [`Builder`].\n\nAfter creating a `TempDir`, work with the file system by doing\nstandard [`std::fs`] file system operations on its [`Path`],\nwhich can be retrieved with [`TempDir::path()`]. Once the `TempDir`\nvalue is dropped, the directory at the path will be deleted, along\nwith any files and directories it contains. It is your responsibility\nto ensure that no further file system operations are attempted\ninside the temporary directory once it has been deleted.\n\n# Resource Leaking\n\nVarious platform-specific conditions may cause `TempDir` to fail\nto delete the underlying directory. It's important to ensure that\nhandles (like [`File`] and [`ReadDir`]) to files inside the\ndirectory are dropped before the `TempDir` goes out of scope. The\n`TempDir` destructor will silently ignore any errors in deleting\nthe directory; to instead handle errors call [`TempDir::close()`].\n\nNote that if the program exits before the `TempDir` destructor is\nrun, such as via [`std::process::exit()`], by segfaulting, or by\nreceiving a signal like `SIGINT`, then the temporary directory\nwill not be deleted.\n\n# Examples\n\nCreate a temporary directory with a generated name:\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`\nlet tmp_dir = TempDir::new()?;\n# Ok(())\n# }\n```\n\nCreate a temporary directory with a prefix in its name:\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::Builder;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`,\n// whose name will begin with 'example'.\nlet tmp_dir = Builder::new().prefix(\"example\").tempdir()?;\n# Ok(())\n# }\n```\n\n[`File`]: http://doc.rust-lang.org/std/fs/struct.File.html\n[`Path`]: http://doc.rust-lang.org/std/path/struct.Path.html\n[`ReadDir`]: http://doc.rust-lang.org/std/fs/struct.ReadDir.html\n[`Builder`]: struct.Builder.html\n[`TempDir::close()`]: struct.TempDir.html#method.close\n[`TempDir::new()`]: struct.TempDir.html#method.new\n[`TempDir::path()`]: struct.TempDir.html#method.path\n[`TempDir`]: struct.TempDir.html\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html\n[`std::fs`]: http://doc.rust-lang.org/std/fs/index.html\n[`std::process::exit()`]: http://doc.rust-lang.org/std/process/fn.exit.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:29","a:2:3207:247-0:27:2429","a:2:32473:3562-0:27:2429","a:2:42276:10312-0:27:2429","a:2:3242:4487-0:27:2429","a:2:32414:237-0:27:2429","a:2:42277:10411-0:27:2429","b:2:2711-0:27:2429","b:2:3823-0:27:2429","b:2:2988-0:27:2429","b:2:2999-0:27:2429","b:2:2984-0:27:2429","b:2:2994-0:27:2429","b:2:2714-0:27:2429","0:42","0:46","0:44"]}}},"0:403:809":{"id":"0:403:809","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[106,9],"end":[106,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:219:3094":{"id":"0:219:3094","crate_id":0,"name":"read_to_string","span":{"filename":"src/file/mod.rs","begin":[1001,4],"end":[1005,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278:3148":{"id":"0:278:3148","crate_id":0,"name":"into_inner","span":{"filename":"src/spooled.rs","begin":[113,4],"end":[115,5]},"visibility":"public","docs":"Consumes and returns the inner `SpooledData` type.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"SpooledData","id":"0:404:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5950:1795":{"id":"5:5950:1795","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:312-0:111:2430":{"id":"0:312-0:111:2430","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,4],"end":[189,12]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::tempfile","name":"tempfile","id":"0:111:2430","glob":false}}},"0:119:809":{"id":"0:119:809","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[129,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[215,0],"end":[797,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:328:1188","0:329:2443","0:331:2444","0:333:2485","0:334:2445","0:335:2446","0:336:2430","0:337:2431","0:340:2427","0:341:2428","0:343:2601","0:346:2604"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2984-0:419:2439":{"id":"b:2:2984-0:419:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2987:2839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:439":{"id":"0:439","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,27],"end":[194,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32416:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13279:30567":{"id":"2:13279:30567","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12507:15584"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[515,0],"end":[519,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:160:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13373:37445":{"id":"2:13373:37445","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[128,0],"end":[132,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10392:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:119:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13330:30787":{"id":"2:13330:30787","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12355:476","self::pattern":"2:12960:3735"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12775:7347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114":{"id":"0:114","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[114,0],"end":[119,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"io::Error","id":"1:3069:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:115:839"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13316:30799":{"id":"2:13316:30799","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12355:476","self::pattern":"2:12960:3735"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:191:3060":{"id":"0:191:3060","crate_id":0,"name":"as_file","span":{"filename":"src/file/mod.rs","begin":[871,4],"end":[873,5]},"visibility":"public","docs":"Get a reference to the underlying file.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"F"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2716:29789":{"id":"2:2716:29789","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2988-0:413:2437":{"id":"b:2:2988-0:413:2437","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:42":{"id":"0:42","crate_id":0,"name":null,"span":{"filename":"src/dir/mod.rs","begin":[451,0],"end":[455,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:43:337"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32473:3562-0:154:2434":{"id":"a:2:32473:3562-0:154:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32473:3562","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32473:3562","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:204:3090":{"id":"0:204:3090","crate_id":0,"name":"read_vectored","span":{"filename":"src/file/mod.rs","begin":[959,4],"end":[963,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"io::IoSliceMut","id":"1:3612:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13294:30780":{"id":"2:13294:30780","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13293:30779","str::split_at_mut_checked":"2:13296:30784"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274:1188":{"id":"0:274:1188","crate_id":0,"name":"new","span":{"filename":"src/spooled.rs","begin":[68,4],"end":[73,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:419:2439":{"id":"0:419:2439","crate_id":0,"name":"Builder","span":{"filename":"src/lib.rs","begin":[195,0],"end":[201,1]},"visibility":"public","docs":"Create a new temporary file or directory with custom parameters.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:325","a:2:3207:247-0:419:2439","a:2:32473:3562-0:419:2439","a:2:42276:10312-0:419:2439","a:2:3242:4487-0:419:2439","a:2:32414:237-0:419:2439","a:2:42277:10411-0:419:2439","b:2:2711-0:419:2439","b:2:3823-0:419:2439","b:2:2988-0:419:2439","b:2:2999-0:419:2439","b:2:2984-0:419:2439","b:2:2994-0:419:2439","b:2:2714-0:419:2439","b:5:793-0:419:2439","0:439","0:435","0:321","0:431","0:427","0:442"]}}},"2:13313:30798":{"id":"2:13313:30798","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12355:476","self::pattern":"2:12960:3735"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13351:30796":{"id":"2:13351:30796","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13398:31954":{"id":"2:13398:31954","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40083:15650","Self::is_ascii":"2:13397:29856"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40083:15650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2994-0:122:2435":{"id":"b:2:2994-0:122:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2997:138","2:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13370:37443":{"id":"2:13370:37443","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3242:4487-0:154:2434":{"id":"a:2:3242:4487-0:154:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3242:4487","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3242:4487","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:236:2864":{"id":"0:236:2864","crate_id":0,"name":"write","span":{"filename":"src/file/mod.rs","begin":[1041,4],"end":[1043,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13309:35756":{"id":"2:13309:35756","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44335:7367","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:235":{"id":"0:235","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1040,0],"end":[1062,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["by_ref","is_write_vectored","write_fmt","write_vectored","write_all_vectored","write_all"],"trait":{"name":"Write","id":"1:3651:2870","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2318:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"items":["0:236:2864","0:238:3096","0:240:3097","0:242:3099","0:244:3100"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:190:2943":{"id":"0:190:2943","crate_id":0,"name":"keep","span":{"filename":"src/file/mod.rs","begin":[859,4],"end":[868,5]},"visibility":"public","docs":"Keep the temporary file from being deleted. This function will turn the\ntemporary file into a non-temporary file without moving it.\n\n\n# Errors\n\nOn some platforms (e.g., Windows), we need to mark the file as\nnon-temporary. This operation could fail.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet (file, path) = file.keep()?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42315:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"F"},{"resolved_path":{"name":"PathBuf","id":"1:5335:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}},{"type":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2999-0:419:2439":{"id":"b:2:2999-0:419:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:3002:138","2:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:134:809":{"id":"0:134:809","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[375,4],"end":[377,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:635":{"id":"0:139:635","crate_id":0,"name":"deref","span":{"filename":"src/file/mod.rs","begin":[389,4],"end":[391,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13380:30081":{"id":"2:13380:30081","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12355:476","self::pattern":"2:12960:3735"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138:249":{"id":"0:138:249","crate_id":0,"name":"Target","span":{"filename":"src/file/mod.rs","begin":[387,4],"end":[387,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2988-0:27:2429":{"id":"b:2:2988-0:27:2429","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2711-0:399:2433":{"id":"b:2:2711-0:399:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2713:3268"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2714-0:154:2434":{"id":"b:2:2714-0:154:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2716:29789"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32473:3562-0:419:2439":{"id":"a:2:32473:3562-0:419:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32473:3562","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2711-0:144:2432":{"id":"b:2:2711-0:144:2432","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2713:3268"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13339:37437":{"id":"2:13339:37437","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12960:3735","str::split":"2:13327:30785","prim@char":"1:12355:476","str::split_terminator":"2:13336:37436"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44111:7513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13392:37450":{"id":"2:13392:37450","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12355:476","self::pattern":"2:12960:3735"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282:3093":{"id":"0:282:3093","crate_id":0,"name":"read_to_end","span":{"filename":"src/spooled.rs","begin":[133,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"5:7168:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[386,0],"end":[392,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3415:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:138:249","0:139:635"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2988-0:144:2432":{"id":"b:2:2988-0:144:2432","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:35:2814":{"id":"0:35:2814","crate_id":0,"name":"with_prefix_in","span":{"filename":"src/dir/mod.rs","begin":[320,4],"end":[325,5]},"visibility":"public","docs":"Attempts to make a temporary directory with the specified prefix inside\nthe specified directory. The directory and everything inside it will be\nautomatically deleted once the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory\nlet tmp_dir = TempDir::with_prefix_in(\"foo-\", \".\")?;\nlet tmp_name = tmp_dir.path().file_name().unwrap().to_str().unwrap();\nassert!(tmp_name.starts_with(\"foo-\"));\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2081:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169:809":{"id":"0:169:809","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[536,4],"end":[538,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238:3096":{"id":"0:238:3096","crate_id":0,"name":"flush","span":{"filename":"src/file/mod.rs","begin":[1045,4],"end":[1047,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3207:247-0:413:2437":{"id":"a:2:3207:247-0:413:2437","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:47:676":{"id":"0:47:676","crate_id":0,"name":"drop","span":{"filename":"src/dir/mod.rs","begin":[466,4],"end":[468,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42277:10411-0:27:2429":{"id":"a:2:42277:10411-0:27:2429","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42277:10411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:287:3097":{"id":"0:287:3097","crate_id":0,"name":"write_vectored","span":{"filename":"src/spooled.rs","begin":[172,4],"end":[187,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"io::IoSlice","id":"1:8480:3098","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:321":{"id":"0:321","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[203,0],"end":[213,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3036:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:324:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13283:30753":{"id":"2:13283:30753","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42184:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:223":{"id":"0:223","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1012,0],"end":[1038,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"1:3651:2870","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","is_write_vectored","write_fmt","write_vectored","write_all_vectored","write_all"],"trait":{"name":"Write","id":"1:3651:2870","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:225:2864","0:227:3096","0:229:3097","0:231:3099","0:233:3100"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2988-0:399:2433":{"id":"b:2:2988-0:399:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:435":{"id":"0:435","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,23],"end":[194,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2766:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13301:35757":{"id":"2:13301:35757","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13303:35760"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44317:7519","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13306:32623":{"id":"2:13306:32623","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44297:3414","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13397:29856":{"id":"2:13397:29856","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42277:10411-0:154:2434":{"id":"a:2:42277:10411-0:154:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"File","id":"1:2318:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42277:10411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:127:2926":{"id":"0:127:2926","crate_id":0,"name":"persist","span":{"filename":"src/file/mod.rs","begin":[234,4],"end":[249,5]},"visibility":"public","docs":"Persist the temporary file at the target path.\n\nIf a file exists at the target path, persist will atomically replace it.\nIf this method fails, it will return `self` in the resulting\n[`PathPersistError`].\n\nNote: Temporary files cannot be persisted across filesystems. Also\nneither the file contents nor the containing directory are\nsynchronized, so the update may not yet have reached the disk when\n`persist` returns.\n\n# Security\n\nOnly use this method if you're positive that a temporary file cleaner\nwon't have deleted your file. Otherwise, you might end up persisting an\nattacker controlled file.\n\n# Errors\n\nIf the file cannot be moved to the new location, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet path = file.into_temp_path();\npath.persist(\"./saved_file.txt\")?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:42315:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:186:2926":{"id":"0:186:2926","crate_id":0,"name":"persist","span":{"filename":"src/file/mod.rs","begin":[762,4],"end":[774,5]},"visibility":"public","docs":"Persist the temporary file at the target path.\n\nIf a file exists at the target path, persist will atomically replace it.\nIf this method fails, it will return `self` in the resulting\n[`PersistError`].\n\nNote: Temporary files cannot be persisted across filesystems. Also\nneither the file contents nor the containing directory are\nsynchronized, so the update may not yet have reached the disk when\n`persist` returns.\n\n# Security\n\nThis method persists the temporary file using its path and may not be\nsecure in all cases. Please read the security section on the top\nlevel documentation of this type for details.\n\n# Errors\n\nIf the file cannot be moved to the new location, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\nlet mut persisted_file = file.persist(\"./saved_file.txt\")?;\nwriteln!(persisted_file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`PersistError`]: struct.PersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246":{"id":"0:246","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1064,0],"end":[1068,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Seek","id":"1:3669:2868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["stream_len","seek_relative","rewind","stream_position"],"trait":{"name":"Seek","id":"1:3669:2868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:248:3102"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2994-0:413:2437":{"id":"b:2:2994-0:413:2437","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2997:138","2:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5696:38147":{"id":"5:5696:38147","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2797","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:2797","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[521,0],"end":[526,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"io::Error","id":"1:3069:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:163:839"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:407:1989":{"id":"0:407:1989","crate_id":0,"name":"0","span":{"filename":"src/spooled.rs","begin":[8,13],"end":[8,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"std::io::Cursor","id":"1:8257:3109","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7168:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:248:3102":{"id":"0:248:3102","crate_id":0,"name":"seek","span":{"filename":"src/file/mod.rs","begin":[1065,4],"end":[1067,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"1:8489:2869","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:400:2424":{"id":"0:400:2424","crate_id":0,"name":"error","span":{"filename":"src/file/mod.rs","begin":[109,4],"end":[109,24]},"visibility":"public","docs":"The underlying IO error.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"io::Error","id":"1:3069:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:129:2937":{"id":"0:129:2937","crate_id":0,"name":"persist_noclobber","span":{"filename":"src/file/mod.rs","begin":[293,4],"end":[311,5]},"visibility":"public","docs":"Persist the temporary file at the target path if and only if no file exists there.\n\nIf a file exists at the target path, fail. If this method fails, it will\nreturn `self` in the resulting [`PathPersistError`].\n\nNote: Temporary files cannot be persisted across filesystems. Also Note:\nThis method is not atomic. It can leave the original link to the\ntemporary file behind.\n\n# Security\n\nOnly use this method if you're positive that a temporary file cleaner\nwon't have deleted your file. Otherwise, you might end up persisting an\nattacker controlled file.\n\n# Errors\n\nIf the file cannot be moved to the new location or a file already exists\nthere, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet path = file.into_temp_path();\npath.persist_noclobber(\"./saved_file.txt\")?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:42315:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:337":{"id":"0:143:337","crate_id":0,"name":"as_ref","span":{"filename":"src/file/mod.rs","begin":[401,4],"end":[403,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OsStr","id":"1:2081:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:2937":{"id":"0:188:2937","crate_id":0,"name":"persist_noclobber","span":{"filename":"src/file/mod.rs","begin":[815,4],"end":[827,5]},"visibility":"public","docs":"Persist the temporary file at the target path if and only if no file exists there.\n\nIf a file exists at the target path, fail. If this method fails, it will\nreturn `self` in the resulting PersistError.\n\nNote: Temporary files cannot be persisted across filesystems. Also Note:\nThis method is not atomic. It can leave the original link to the\ntemporary file behind.\n\n# Security\n\nThis method persists the temporary file using its path and may not be\nsecure in all cases. Please read the security section on the top\nlevel documentation of this type for details.\n\n# Errors\n\nIf the file cannot be moved to the new location or a file already exists there,\n`Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\nlet mut persisted_file = file.persist_noclobber(\"./saved_file.txt\")?;\nwriteln!(persisted_file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:3069":{"id":"0:194:3069","crate_id":0,"name":"into_temp_path","span":{"filename":"src/file/mod.rs","begin":[891,4],"end":[893,5]},"visibility":"public","docs":"Closes the file, leaving only the temporary file path.\n\nThis is useful when another process must be able to open the temporary\nfile.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2713:3268":{"id":"2:2713:3268","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:3094":{"id":"0:208:3094","crate_id":0,"name":"read_to_string","span":{"filename":"src/file/mod.rs","begin":[971,4],"end":[975,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13292:37434":{"id":"2:13292:37434","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12361:1735","crate::ops::IndexMut":"2:3485:3485","str::slice_unchecked":"2:13291:37433"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[118,0],"end":[153,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_exact","read_buf_exact","by_ref","chain","bytes","is_read_vectored","read_vectored","read_to_end","take","read_to_string","read_buf"],"trait":{"name":"Read","id":"1:3594:2867","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:280:3088","0:281:3090","0:282:3093","0:283:3094","0:284:3095"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13401:29862":{"id":"2:13401:29862","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:38149":{"id":"5:5703:38149","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2997:138":{"id":"2:2997:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"5:5695":{"id":"5:5695","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5696:38147","5:5697:2837","5:5700:38148","5:5703:38149","5:5711:38150","5:5712:38151","5:5713:3442","5:5714:29858","5:5715:29859"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[150,0],"end":[372,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:125:2851","0:127:2926","0:129:2937","0:131:2943","0:132:2611"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:160:809":{"id":"0:160:809","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[516,4],"end":[518,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:434:480":{"id":"0:434:480","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[194,16],"end":[194,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:244:3100":{"id":"0:244:3100","crate_id":0,"name":"write_fmt","span":{"filename":"src/file/mod.rs","begin":[1059,4],"end":[1061,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["fmt",{"resolved_path":{"name":"fmt::Arguments","id":"2:43228:3101","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2984-0:413:2437":{"id":"b:2:2984-0:413:2437","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2987:2839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13363:37440":{"id":"2:13363:37440","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12960:3735","`DoubleEndedIterator`":"2:8329:130","prim@char":"1:12355:476","str::match_indices":"2:13360:37439"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44211:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2999-0:122:2435":{"id":"b:2:2999-0:122:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3002:138","2:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2714-0:27:2429":{"id":"b:2:2714-0:27:2429","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2716:29789"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:277:3144":{"id":"0:277:3144","crate_id":0,"name":"set_len","span":{"filename":"src/spooled.rs","begin":[98,4],"end":[109,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["size",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Result","id":"2:42315:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"io::Error","id":"1:3069:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13402:31957":{"id":"2:13402:31957","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:41952"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:3442":{"id":"5:5713:3442","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42277:10411-0:413:2437":{"id":"a:2:42277:10411-0:413:2437","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42277:10411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:333:2485":{"id":"0:333:2485","crate_id":0,"name":"rand_bytes","span":{"filename":"src/lib.rs","begin":[373,4],"end":[376,5]},"visibility":"public","docs":"Set the number of random bytes.\n\nDefault: `6`.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .rand_bytes(5)\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rand",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:30783":{"id":"2:13295:30783","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13296:30784"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290:3102":{"id":"0:290:3102","crate_id":0,"name":"seek","span":{"filename":"src/spooled.rs","begin":[199,4],"end":[204,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"1:8489:2869","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3207:247-0:122:2435":{"id":"a:2:3207:247-0:122:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5948-0:154:2434":{"id":"b:5:5948-0:154:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10392:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["5:5950:1795"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:417:809":{"id":"0:417:809","crate_id":0,"name":"fmt","span":{"filename":"src/spooled.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:280:3088":{"id":"0:280:3088","crate_id":0,"name":"read","span":{"filename":"src/spooled.rs","begin":[119,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:431":{"id":"0:431","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,16],"end":[194,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:434:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2987:2839":{"id":"2:2987:2839","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2961:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:3062":{"id":"0:192:3062","crate_id":0,"name":"as_file_mut","span":{"filename":"src/file/mod.rs","begin":[876,4],"end":[878,5]},"visibility":"public","docs":"Get a mutable reference to the underlying file.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"F"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44":{"id":"0:44","crate_id":0,"name":null,"span":{"filename":"src/dir/mod.rs","begin":[457,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:45:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:215:3090":{"id":"0:215:3090","crate_id":0,"name":"read_vectored","span":{"filename":"src/file/mod.rs","begin":[989,4],"end":[993,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"io::IoSliceMut","id":"1:3612:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170":{"id":"0:170","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[541,0],"end":[545,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["provide","description","source","cause","type_id"],"trait":{"name":"Error","id":"2:3047:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:172:2866"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13395:37451":{"id":"2:13395:37451","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12921:137","`FromStr`":"2:12920:3374"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12920:3374","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12920:3374","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42276:10312-0:27:2429":{"id":"a:2:42276:10312-0:27:2429","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42276:10312","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13285:3145":{"id":"2:13285:3145","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42184:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:676":{"id":"0:136:676","crate_id":0,"name":"drop","span":{"filename":"src/file/mod.rs","begin":[381,4],"end":[383,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:336:2430":{"id":"0:336:2430","crate_id":0,"name":"tempfile","span":{"filename":"src/lib.rs","begin":[519,4],"end":[521,5]},"visibility":"public","docs":"Create the named temporary file.\n\n# Security\n\nSee [the security][security] docs on `NamedTempFile`.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `NamedTempFile`.\n\n# Errors\n\nIf the file cannot be created, `Err` is returned.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet tempfile = Builder::new().tempfile()?;\n# Ok(())\n# }\n```\n\n[security]: struct.NamedTempFile.html#security\n[resource-leaking]: struct.NamedTempFile.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13336:37436":{"id":"2:13336:37436","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12960:3735","str::split":"2:13327:30785","prim@char":"1:12355:476","`DoubleEndedIterator`":"2:8329:130","str::rsplit_terminator":"2:13339:37437"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44093:7512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3002:138":{"id":"2:3002:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32338:4102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:32473:3562-0:399:2433":{"id":"a:2:32473:3562-0:399:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32473:3562","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13409:37453":{"id":"2:13409:37453","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5011:37453"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44360:7441","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122:2435":{"id":"0:122:2435","crate_id":0,"name":"TempPath","span":{"filename":"src/file/mod.rs","begin":[146,0],"end":[148,1]},"visibility":"public","docs":"A path to a named temporary file without an open file handle.\n\nThis is useful when the temporary file needs to be used by a child process,\nfor example.\n\nWhen dropped, the temporary file is deleted.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:124","a:2:3207:247-0:122:2435","a:2:32473:3562-0:122:2435","a:2:42276:10312-0:122:2435","a:2:3242:4487-0:122:2435","a:2:32414:237-0:122:2435","a:2:42277:10411-0:122:2435","b:2:2711-0:122:2435","b:2:3823-0:122:2435","b:2:2988-0:122:2435","b:2:2999-0:122:2435","b:2:2984-0:122:2435","b:2:2994-0:122:2435","b:2:2714-0:122:2435","0:142","0:135","0:133","0:116","0:137","0:140"]}}},"2:13308:37435":{"id":"2:13308:37435","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44307:7518","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:2430":{"id":"0:111:2430","crate_id":0,"name":"tempfile","span":{"filename":"src/file/mod.rs","begin":[60,0],"end":[62,1]},"visibility":"public","docs":"Create a new temporary file.\n\nThe file will be created in the location returned by [`std::env::temp_dir()`].\n\n# Security\n\nThis variant is secure/reliable in the presence of a pathological temporary file cleaner.\n\n# Resource Leaking\n\nThe temporary file will be automatically removed by the OS when the last handle to it is closed.\nThis doesn't rely on Rust destructors being run, so will (almost) never fail to clean up the temporary file.\n\n# Errors\n\nIf the file can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempfile;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a file inside of `std::env::temp_dir()`.\nlet mut file = tempfile()?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2318:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:356:1889":{"id":"0:356:1889","crate_id":0,"name":"unix","span":{"filename":"src/file/imp/unix.rs","begin":[1,0],"end":[157,1]},"visibility":{"restricted":{"parent":"0:110:2855","path":"::file::imp"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":true}}},"0:125:2851":{"id":"0:125:2851","crate_id":0,"name":"close","span":{"filename":"src/file/mod.rs","begin":[184,4],"end":[189,5]},"visibility":"public","docs":"Close and remove the temporary file.\n\nUse this if you want to detect errors in deleting the file.\n\n# Errors\n\nIf the file cannot be deleted, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io;\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\n// Close the file, but keep the path to it around.\nlet path = file.into_temp_path();\n\n// By closing the `TempPath` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly, the\n// file will still be deleted when `file` goes out of scope, but we\n// won't know whether deleting the file succeeded.\npath.close()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179:2814":{"id":"0:179:2814","crate_id":0,"name":"with_prefix_in","span":{"filename":"src/file/mod.rs","begin":[644,4],"end":[649,5]},"visibility":"public","docs":"Create a new named temporary file with the specified filename prefix,\nin the specified directory.\n\nThis is equivalent to:\n\n```ignore\nBuilder::new().prefix(&prefix).tempfile_in(directory)\n```\n\nSee [`NamedTempFile::new()`] for details.\n\n[`NamedTempFile::new()`]: #method.new","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2081:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:1310":{"id":"0:184:1310","crate_id":0,"name":"path","span":{"filename":"src/file/mod.rs","begin":[680,4],"end":[682,5]},"visibility":"public","docs":"Get the temporary file's path.\n\n# Security\n\nReferring to a temporary file's path may not be secure in all cases.\nPlease read the security section on the top level documentation of this\ntype for details.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), ::std::io::Error> {\nlet file = NamedTempFile::new()?;\n\nprintln!(\"{:?}\", file.path());\n# Ok(())\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:335:2446":{"id":"0:335:2446","crate_id":0,"name":"permissions","span":{"filename":"src/lib.rs","begin":[482,4],"end":[485,5]},"visibility":"public","docs":"The permissions to create the tempfile or [tempdir](Self::tempdir) with.\nThis allows to them differ from the default mode of `0o600` on Unix.\n\n# Security\n\nBy default, the permissions of tempfiles on unix are set for it to be\nreadable and writable by the owner only, yielding the greatest amount\nof security.\nAs this method allows to widen the permissions, security would be\nreduced in such cases.\n\n# Platform Notes\n## Unix\n\nThe actual permission bits set on the tempfile or tempdir will be affected by the\n`umask` applied by the underlying syscall.\n\n\n## Windows and others\n\nThis setting is unsupported and trying to set a file or directory read-only\nwill cause an error to be returned..\n\n# Examples\n\nCreate a named temporary file that is world-readable.\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n#[cfg(unix)]\n{\n    use std::os::unix::fs::PermissionsExt;\n    let all_read_write = std::fs::Permissions::from_mode(0o666);\n    let tempfile = Builder::new().permissions(all_read_write).tempfile()?;\n    let actual_permissions = tempfile.path().metadata()?.permissions();\n    assert_ne!(\n        actual_permissions.mode() & !0o170000,\n        0o600,\n        \"we get broader permissions than the default despite umask\"\n    );\n}\n# Ok(())\n# }\n```\n\nCreate a named temporary directory that is restricted to the owner.\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n#[cfg(unix)]\n{\n    use std::os::unix::fs::PermissionsExt;\n    let owner_rwx = std::fs::Permissions::from_mode(0o700);\n    let tempdir = Builder::new().permissions(owner_rwx).tempdir()?;\n    let actual_permissions = tempdir.path().metadata()?.permissions();\n    assert_eq!(\n        actual_permissions.mode() & !0o170000,\n        0o700,\n        \"we get the narrow permissions we asked for\"\n    );\n}\n# Ok(())\n# }\n```","links":{"Self::tempdir":"0:340:2427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["permissions",{"resolved_path":{"name":"std::fs::Permissions","id":"1:8196:2447","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:221:3095":{"id":"0:221:3095","crate_id":0,"name":"read_exact","span":{"filename":"src/file/mod.rs","begin":[1007,4],"end":[1009,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:289":{"id":"0:289","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[198,0],"end":[205,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["stream_len","seek_relative","rewind","stream_position"],"trait":{"name":"Seek","id":"1:3669:2868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:290:3102"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:445:704":{"id":"0:445:704","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[194,27],"end":[194,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3823-0:399:2433":{"id":"b:2:3823-0:399:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:141:337":{"id":"0:141:337","crate_id":0,"name":"as_ref","span":{"filename":"src/file/mod.rs","begin":[395,4],"end":[397,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[912,0],"end":[952,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2318:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:198:3087"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32414:237-0:27:2429":{"id":"a:2:32414:237-0:27:2429","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3207:247-0:144:2432":{"id":"a:2:3207:247-0:144:2432","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13273:37429":{"id":"2:13273:37429","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5697:2837":{"id":"5:5697:2837","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3207:247-0:154:2434":{"id":"a:2:3207:247-0:154:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32414:237-0:154:2434":{"id":"a:2:32414:237-0:154:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:25:2428":{"id":"0:25:2428","crate_id":0,"name":"tempdir_in","span":{"filename":"src/dir/mod.rs","begin":[114,0],"end":[116,1]},"visibility":"public","docs":"Create a new temporary directory in a specific directory.\n\nThe `tempdir_in` function creates a directory in the specified directory\nand returns a [`TempDir`].\nThe directory will be automatically deleted when the `TempDir`s\ndestructor is run.\n\n# Resource Leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempdir_in;\nuse std::fs::File;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory.\nlet tmp_dir = tempdir_in(\".\")?;\n\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// `tmp_dir` goes out of scope, the directory as well as\n// `tmp_file` will be deleted here.\ndrop(tmp_file);\ntmp_dir.close()?;\n# Ok(())\n# }\n```\n\n[`TempDir`]: struct.TempDir.html\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::path::Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:2851":{"id":"0:40:2851","crate_id":0,"name":"close","span":{"filename":"src/dir/mod.rs","begin":[437,4],"end":[448,5]},"visibility":"public","docs":"Closes and removes the temporary directory, returning a `Result`.\n\nAlthough `TempDir` removes the directory on drop, in the destructor\nany errors are ignored. To detect errors cleaning up the temporary\ndirectory, call `close` instead.\n\n# Errors\n\nThis function may return a variety of [`std::io::Error`]s that result from deleting\nthe files and directories contained with the temporary directory,\nas well as from deleting the temporary directory itself. These errors\nmay be platform specific.\n\n[`std::io::Error`]: http://doc.rust-lang.org/std/io/struct.Error.html\n\n# Examples\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`.\nlet tmp_dir = TempDir::new()?;\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// By closing the `TempDir` explicitly we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the directory will still be deleted when `tmp_dir` goes out\n// of scope, but we won't know whether deleting the directory\n// succeeded.\ndrop(tmp_file);\ntmp_dir.close()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32414:237-0:399:2433":{"id":"a:2:32414:237-0:399:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3242:4487-0:27:2429":{"id":"a:2:3242:4487-0:27:2429","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3242:4487","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2711-0:419:2439":{"id":"b:2:2711-0:419:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2713:3268"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:251:3102":{"id":"0:251:3102","crate_id":0,"name":"seek","span":{"filename":"src/file/mod.rs","begin":[1071,4],"end":[1073,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"1:8489:2869","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:793-0:419:2439":{"id":"b:5:793-0:419:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["5:795:4046","5:796:4047","5:797:4048"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:173":{"id":"0:173","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[547,0],"end":[650,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2318:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:174:1188","0:175:2754","0:177:2809","0:179:2814"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42276:10312-0:419:2439":{"id":"a:2:42276:10312-0:419:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42276:10312","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13287:30754":{"id":"2:13287:30754","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:309-0:25:2428":{"id":"0:309-0:25:2428","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,30],"end":[187,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::dir::tempdir_in","name":"tempdir_in","id":"0:25:2428","glob":false}}},"b:2:2994-0:27:2429":{"id":"b:2:2994-0:27:2429","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2997:138","2:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2714-0:399:2433":{"id":"b:2:2714-0:399:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2716:29789"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:116":{"id":"0:116","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[121,0],"end":[126,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:117:839"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2988-0:122:2435":{"id":"b:2:2988-0:122:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:320-0:413:2437":{"id":"0:320-0:413:2437","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[191,43],"end":[191,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::spooled::SpooledTempFile","name":"SpooledTempFile","id":"0:413:2437","glob":false}}},"2:13274:37430":{"id":"2:13274:37430","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:2427":{"id":"0:24:2427","crate_id":0,"name":"tempdir","span":{"filename":"src/dir/mod.rs","begin":[65,0],"end":[67,1]},"visibility":"public","docs":"Create a new temporary directory.\n\nThe `tempdir` function creates a directory in the file system\nand returns a [`TempDir`].\nThe directory will be automatically deleted when the `TempDir`s\ndestructor is run.\n\n# Resource Leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempdir;\nuse std::fs::File;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`\nlet tmp_dir = tempdir()?;\n\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// `tmp_dir` goes out of scope, the directory as well as\n// `tmp_file` will be deleted here.\ndrop(tmp_file);\ntmp_dir.close()?;\n# Ok(())\n# }\n```\n\n[`TempDir`]: struct.TempDir.html\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:310-0:27:2429":{"id":"0:310-0:27:2429","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,42],"end":[187,49]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::dir::TempDir","name":"TempDir","id":"0:27:2429","glob":false}}},"a:2:3242:4487-0:413:2437":{"id":"a:2:3242:4487-0:413:2437","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3242:4487","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2984-0:399:2433":{"id":"b:2:2984-0:399:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2987:2839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:316-0:154:2434":{"id":"0:316-0:154:2434","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,60],"end":[189,72]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::PersistError","name":"PersistError","id":"0:154:2434","glob":false}}},"a:2:42276:10312-0:154:2434":{"id":"a:2:42276:10312-0:154:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"File","id":"1:2318:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42276:10312","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:416":{"id":"0:416","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:417:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:175:2754":{"id":"0:175:2754","crate_id":0,"name":"new_in","span":{"filename":"src/file/mod.rs","begin":[620,4],"end":[622,5]},"visibility":"public","docs":"Create a new named temporary file in the specified directory.\n\nThis is equivalent to:\n\n```ignore\nBuilder::new().tempfile_in(dir)\n```\n\nSee [`NamedTempFile::new()`] for details.\n\n[`NamedTempFile::new()`]: #method.new","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2430":{"id":"0:0:2430","crate_id":0,"name":"tempfile","span":{"filename":"src/lib.rs","begin":[1,0],"end":[797,1]},"visibility":"public","docs":"Temporary files and directories.\n\n- Use the [`tempfile()`] function for temporary files\n- Use the [`tempdir()`] function for temporary directories.\n\n# Design\n\nThis crate provides several approaches to creating temporary files and directories.\n[`tempfile()`] relies on the OS to remove the temporary file once the last handle is closed.\n[`TempDir`] and [`NamedTempFile`] both rely on Rust destructors for cleanup.\n\nWhen choosing between the temporary file variants, prefer `tempfile`\nunless you either need to know the file's path or to be able to persist it.\n\n## Resource Leaking\n\n`tempfile` will (almost) never fail to cleanup temporary resources. However `TempDir` and `NamedTempFile` will\nfail if their destructors don't run. This is because `tempfile` relies on the OS to cleanup the\nunderlying file, while `TempDir` and `NamedTempFile` rely on rust destructors to do so.\nDestructors may fail to run if the process exits through an unhandled signal interrupt (like `SIGINT`),\nor if the instance is declared statically (like with [`lazy_static`]), among other possible\nreasons.\n\n## Security\n\nIn the presence of pathological temporary file cleaner, relying on file paths is unsafe because\na temporary file cleaner could delete the temporary file which an attacker could then replace.\n\n`tempfile` doesn't rely on file paths so this isn't an issue. However, `NamedTempFile` does\nrely on file paths for _some_ operations. See the security documentation on\nthe `NamedTempFile` type for more information.\n\n## Early drop pitfall\n\nBecause `TempDir` and `NamedTempFile` rely on their destructors for cleanup, this can lead\nto an unexpected early removal of the directory/file, usually when working with APIs which are\ngeneric over `AsRef<Path>`. Consider the following example:\n\n```no_run\n# use tempfile::tempdir;\n# use std::io;\n# use std::process::Command;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`.\nlet temp_dir = tempdir()?;\n\n// Spawn the `touch` command inside the temporary directory and collect the exit status\n// Note that `temp_dir` is **not** moved into `current_dir`, but passed as a reference\nlet exit_status = Command::new(\"touch\").arg(\"tmp\").current_dir(&temp_dir).status()?;\nassert!(exit_status.success());\n\n# Ok(())\n# }\n```\n\nThis works because a reference to `temp_dir` is passed to `current_dir`, resulting in the\ndestructor of `temp_dir` being run after the `Command` has finished execution. Moving the\n`TempDir` into the `current_dir` call would result in the `TempDir` being converted into\nan internal representation, with the original value being dropped and the directory thus\nbeing deleted, before the command can be executed.\n\nThe `touch` command would fail with an `No such file or directory` error.\n\n## Examples\n\nCreate a temporary file and write some data into it:\n\n```\nuse tempfile::tempfile;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a file inside of `std::env::temp_dir()`.\nlet mut file = tempfile()?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\nCreate a named temporary file and open an independent file handle:\n\n```\nuse tempfile::NamedTempFile;\nuse std::io::{self, Write, Read};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet text = \"Brian was here. Briefly.\";\n\n// Create a file inside of `std::env::temp_dir()`.\nlet mut file1 = NamedTempFile::new()?;\n\n// Re-open it.\nlet mut file2 = file1.reopen()?;\n\n// Write some test data to the first handle.\nfile1.write_all(text.as_bytes())?;\n\n// Read the test data using the second handle.\nlet mut buf = String::new();\nfile2.read_to_string(&mut buf)?;\nassert_eq!(buf, text);\n# Ok(())\n# }\n```\n\nCreate a temporary directory and add a file to it:\n\n```\nuse tempfile::tempdir;\nuse std::fs::File;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`.\nlet dir = tempdir()?;\n\nlet file_path = dir.path().join(\"my-temporary-note.txt\");\nlet mut file = File::create(file_path)?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\n// By closing the `TempDir` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the directory will still be deleted when `dir` goes out\n// of scope, but we won't know whether deleting the directory\n// succeeded.\ndrop(file);\ndir.close()?;\n# Ok(())\n# }\n```\n\n[`tempfile()`]: fn.tempfile.html\n[`tempdir()`]: fn.tempdir.html\n[`TempDir`]: struct.TempDir.html\n[`NamedTempFile`]: struct.NamedTempFile.html\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html\n[`lazy_static`]: https://github.com/rust-lang-nursery/lazy-static.rs/issues/62","links":{},"attrs":["#![doc(html_logo_url =\n\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\nhtml_favicon_url = \"https://www.rust-lang.org/favicon.ico\", html_root_url =\n\"https://docs.rs/tempfile/3.1.0\")]","#![deny(rust_2018_idioms)]","#![allow(clippy::redundant_field_names)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:308-0:24:2427","0:309-0:25:2428","0:310-0:27:2429","0:312-0:111:2430","0:313-0:112:2431","0:314-0:144:2432","0:315-0:399:2433","0:316-0:154:2434","0:317-0:122:2435","0:319-0:272:2436","0:320-0:413:2437","0:419:2439"],"is_stripped":false}}},"a:2:42277:10411-0:144:2432":{"id":"a:2:42277:10411-0:144:2432","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42277:10411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42277:10411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13345:30793":{"id":"2:13345:30793","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12355:476","str::splitn":"2:13342:30791","self::pattern":"2:12960:3735"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44165:7353","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3242:4487-0:122:2435":{"id":"a:2:3242:4487-0:122:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3242:4487","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13383:30800":{"id":"2:13383:30800","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12355:476","self::pattern":"2:12960:3735"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2984-0:122:2435":{"id":"b:2:2984-0:122:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2987:2839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3823-0:413:2437":{"id":"b:2:3823-0:413:2437","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:142":{"id":"0:142","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[400,0],"end":[404,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2081:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:143:337"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32414:237-0:144:2432":{"id":"a:2:32414:237-0:144:2432","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2984-0:144:2432":{"id":"b:2:2984-0:144:2432","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2987:2839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13296:30784":{"id":"2:13296:30784","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13295:30783"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324:60":{"id":"0:324:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[204,4],"end":[212,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3242:4487-0:144:2432":{"id":"a:2:3242:4487-0:144:2432","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3242:4487","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3242:4487","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:341:2428":{"id":"0:341:2428","crate_id":0,"name":"tempdir_in","span":{"filename":"src/lib.rs","begin":[627,4],"end":[644,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `dir`.\nThe directory and everything inside it will be automatically\ndeleted once the returned `TempDir` is destroyed.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::Builder;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_dir = Builder::new().tempdir_in(\"./\")?;\n# Ok(())\n# }\n```\n\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32414:237-0:419:2439":{"id":"a:2:32414:237-0:419:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5711:38150":{"id":"5:5711:38150","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5715:29859":{"id":"5:5715:29859","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13401:29862"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3003:1820":{"id":"2:3003:1820","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[380,0],"end":[384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3444:2854","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:258:3105":{"id":"0:258:3105","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/file/mod.rs","begin":[1086,4],"end":[1088,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RawFd","id":"1:4922:2875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314-0:144:2432":{"id":"0:314-0:144:2432","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,27],"end":[189,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::NamedTempFile","name":"NamedTempFile","id":"0:144:2432","glob":false}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/dir/mod.rs","begin":[465,0],"end":[469,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3444:2854","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2711-0:413:2437":{"id":"b:2:2711-0:413:2437","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2713:3268"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:319-0:272:2436":{"id":"0:319-0:272:2436","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[191,25],"end":[191,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::spooled::spooled_tempfile","name":"spooled_tempfile","id":"0:272:2436","glob":false}}},"2:3825:1835":{"id":"2:3825:1835","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39897:7431","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:276:3139":{"id":"0:276:3139","crate_id":0,"name":"roll","span":{"filename":"src/spooled.rs","begin":[86,4],"end":[96,5]},"visibility":"public","docs":"Rolls over to a file on disk, regardless of current size. Does nothing\nif already rolled over.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:809":{"id":"0:150:809","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[495,4],"end":[497,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2714-0:413:2437":{"id":"b:2:2714-0:413:2437","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2716:29789"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[394,0],"end":[398,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:141:337"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:121:2866":{"id":"0:121:2866","crate_id":0,"name":"source","span":{"filename":"src/file/mod.rs","begin":[135,4],"end":[137,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:3047:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:809":{"id":"0:45:809","crate_id":0,"name":"fmt","span":{"filename":"src/dir/mod.rs","begin":[458,4],"end":[462,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32473:3562-0:413:2437":{"id":"a:2:32473:3562-0:413:2437","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32473:3562","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42276:10312-0:399:2433":{"id":"a:2:42276:10312-0:399:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42276:10312","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:42276:10312-0:122:2435":{"id":"a:2:42276:10312-0:122:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42276:10312","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:242:3099":{"id":"0:242:3099","crate_id":0,"name":"write_all","span":{"filename":"src/file/mod.rs","begin":[1055,4],"end":[1057,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:272:2436":{"id":"0:272:2436","crate_id":0,"name":"spooled_tempfile","span":{"filename":"src/spooled.rs","begin":[62,0],"end":[64,1]},"visibility":"public","docs":"Create a new spooled temporary file.\n\n# Security\n\nThis variant is secure/reliable in the presence of a pathological temporary\nfile cleaner.\n\n# Resource Leaking\n\nThe temporary file will be automatically removed by the OS when the last\nhandle to it is closed. This doesn't rely on Rust destructors being run, so\nwill (almost) never fail to clean up the temporary file.\n\n# Examples\n\n```\nuse tempfile::spooled_tempfile;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = spooled_tempfile(15);\n\nwriteln!(file, \"short line\")?;\nassert!(!file.is_rolled());\n\n// as a result of this write call, the size of the data will exceed\n// `max_size` (15), so it will be written to a temporary file on disk,\n// and the in-memory buffer will be dropped\nwriteln!(file, \"marvin gardens\")?;\nassert!(file.is_rolled());\n\n# Ok(())\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:7368":{"id":"2:13298:7368","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12355:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44013:7360","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:206:3093":{"id":"0:206:3093","crate_id":0,"name":"read_to_end","span":{"filename":"src/file/mod.rs","begin":[965,4],"end":[969,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"5:7168:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13348:30795":{"id":"2:13348:30795","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2990:839":{"id":"2:2990:839","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:2611":{"id":"0:132:2611","crate_id":0,"name":"from_path","span":{"filename":"src/file/mod.rs","begin":[367,4],"end":[371,5]},"visibility":"public","docs":"Create a new TempPath from an existing path. This can be done even if no\nfile exists at the given path.\n\nThis is mostly useful for interacting with libraries and external\ncomponents that provide files to be consumed or expect a path with no\nexisting file to be given.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"impl_trait":[{"trait_bound":{"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5335:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<PathBuf>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5335:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2998:1822":{"id":"2:2998:1822","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5714:29858":{"id":"5:5714:29858","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13400:29861"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:255:3104":{"id":"0:255:3104","crate_id":0,"name":"as_fd","span":{"filename":"src/file/mod.rs","begin":[1078,4],"end":[1080,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"BorrowedFd","id":"1:8667:2874","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:337:2431":{"id":"0:337:2431","crate_id":0,"name":"tempfile_in","span":{"filename":"src/lib.rs","begin":[555,4],"end":[566,5]},"visibility":"public","docs":"Create the named temporary file in the specified directory.\n\n# Security\n\nSee [the security][security] docs on `NamedTempFile`.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `NamedTempFile`.\n\n# Errors\n\nIf the file cannot be created, `Err` is returned.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet tempfile = Builder::new().tempfile_in(\"./\")?;\n# Ok(())\n# }\n```\n\n[security]: struct.NamedTempFile.html#security\n[resource-leaking]: struct.NamedTempFile.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2994-0:144:2432":{"id":"b:2:2994-0:144:2432","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2997:138","2:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2994-0:419:2439":{"id":"b:2:2994-0:419:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2997:138","2:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:273":{"id":"0:273","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[66,0],"end":[116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:274:1188","0:275:3136","0:276:3139","0:277:3144","0:278:3148"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:286:2864":{"id":"0:286:2864","crate_id":0,"name":"write","span":{"filename":"src/spooled.rs","begin":[156,4],"end":[170,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13300:4424":{"id":"2:13300:4424","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44029:3417","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:229:3097":{"id":"0:229:3097","crate_id":0,"name":"write_vectored","span":{"filename":"src/file/mod.rs","begin":[1021,4],"end":[1025,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"io::IoSlice","id":"1:8480:3098","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13386:37448":{"id":"2:13386:37448","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12355:476","self::pattern":"2:12960:3735"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2999-0:27:2429":{"id":"b:2:2999-0:27:2429","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3002:138","2:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:185:2851":{"id":"0:185:2851","crate_id":0,"name":"close","span":{"filename":"src/file/mod.rs","begin":[715,4],"end":[718,5]},"visibility":"public","docs":"Close and remove the temporary file.\n\nUse this if you want to detect errors in deleting the file.\n\n# Errors\n\nIf the file cannot be deleted, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io;\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\n// By closing the `NamedTempFile` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the file will still be deleted when `file` goes out\n// of scope, but we won't know whether deleting the file\n// succeeded.\nfile.close()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3242:4487-0:419:2439":{"id":"a:2:3242:4487-0:419:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3242:4487","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:331:2444":{"id":"0:331:2444","crate_id":0,"name":"suffix","span":{"filename":"src/lib.rs","begin":[347,4],"end":[350,5]},"visibility":"public","docs":"Set a custom filename suffix.\n\nPath separators are legal but not advisable.\nDefault: empty.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .suffix(\".txt\")\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["suffix",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"S"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2081:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13276:37431":{"id":"2:13276:37431","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13274:37430"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:37433":{"id":"2:13291:37433","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12361:1735","str::slice_mut_unchecked":"2:13292:37434","crate::ops::Index":"2:39728:3484"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13299:7529":{"id":"2:13299:7529","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12355:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44019:7510","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:250":{"id":"0:250","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1070,0],"end":[1074,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["stream_len","seek_relative","rewind","stream_position"],"trait":{"name":"Seek","id":"1:3669:2868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2318:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"items":["0:251:3102"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2994-0:154:2434":{"id":"b:2:2994-0:154:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2997:138","2:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:442":{"id":"0:442","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,27],"end":[194,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2761:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:445:704"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:33:2809":{"id":"0:33:2809","crate_id":0,"name":"with_prefix","span":{"filename":"src/dir/mod.rs","begin":[292,4],"end":[294,5]},"visibility":"public","docs":"Attempts to make a temporary directory with the specified prefix inside of\n`env::temp_dir()`. The directory and everything inside it will be automatically\ndeleted once the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory\nlet tmp_dir = TempDir::with_prefix(\"foo-\")?;\nlet tmp_name = tmp_dir.path().file_name().unwrap().to_str().unwrap();\nassert!(tmp_name.starts_with(\"foo-\"));\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2081:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:402":{"id":"0:402","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[106,9],"end":[106,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:403:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13282:30756":{"id":"2:13282:30756","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12374:1865"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:430:809":{"id":"0:430:809","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[194,9],"end":[194,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410:1989":{"id":"0:410:1989","crate_id":0,"name":"0","span":{"filename":"src/spooled.rs","begin":[9,11],"end":[9,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"std::fs::File","id":"1:2318:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[500,0],"end":[505,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:153:337"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13270":{"id":"2:13270","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13271:1006","2:13272:3990","2:13273:37429","2:13274:37430","2:13276:37431","2:13279:30567","2:13280:37432","2:13281:336","2:13282:30756","2:13283:30753","2:13285:3145","2:13287:30754","2:13289:30755","2:13291:37433","2:13292:37434","2:13293:30779","2:13294:30780","2:13295:30783","2:13296:30784","2:13298:7368","2:13299:7529","2:13300:4424","2:13301:35757","2:13303:35760","2:13306:32623","2:13308:37435","2:13309:35756","2:13310:30797","2:13313:30798","2:13316:30799","2:13319:4027","2:13323:3989","2:13327:30785","2:13330:30787","2:13333:30789","2:13336:37436","2:13339:37437","2:13342:30791","2:13345:30793","2:13348:30795","2:13351:30796","2:13354:3149","2:13357:37438","2:13360:37439","2:13363:37440","2:13366:37441","2:13368:37442","2:13370:37443","2:13372:37444","2:13373:37445","2:13374:37446","2:13377:37447","2:13380:30081","2:13383:30800","2:13386:37448","2:13389:37449","2:13392:37450","2:13395:37451","2:13397:29856","2:13398:31954","2:13399:29860","2:13400:29861","2:13401:29862","2:13402:31957","2:13403:31958","2:13404:31959","2:13405:37452","2:13408:10304","2:13409:37453"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:283:3094":{"id":"0:283:3094","crate_id":0,"name":"read_to_string","span":{"filename":"src/spooled.rs","begin":[140,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:2866":{"id":"0:172:2866","crate_id":0,"name":"source","span":{"filename":"src/file/mod.rs","begin":[542,4],"end":[544,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:3047:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42277:10411-0:399:2433":{"id":"a:2:42277:10411-0:399:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42277:10411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2988-0:419:2439":{"id":"b:2:2988-0:419:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:50:1889":{"id":"0:50:1889","crate_id":0,"name":"unix","span":{"filename":"src/dir/imp/unix.rs","begin":[1,0],"end":[21,1]},"visibility":{"restricted":{"parent":"0:49:2855","path":"::dir::imp"}},"docs":null,"links":{},"attrs":["#[cfg(unix)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":true}}},"0:340:2427":{"id":"0:340:2427","crate_id":0,"name":"tempdir","span":{"filename":"src/lib.rs","begin":[596,4],"end":[598,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix, `prefix`. The directory and\neverything inside it will be automatically deleted once the\nreturned `TempDir` is destroyed.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::Builder;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_dir = Builder::new().tempdir()?;\n# Ok(())\n# }\n```\n\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213:3088":{"id":"0:213:3088","crate_id":0,"name":"read","span":{"filename":"src/file/mod.rs","begin":[985,4],"end":[987,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13333:30789":{"id":"2:13333:30789","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12960:3735","`DoubleEndedIterator`":"2:8329:130","prim@char":"1:12355:476","str::split":"2:13327:30785"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44061:7350","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5948-0:399:2433":{"id":"b:5:5948-0:399:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10392:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5950:1795"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:413:2437":{"id":"0:413:2437","crate_id":0,"name":"SpooledTempFile","span":{"filename":"src/spooled.rs","begin":[17,0],"end":[20,1]},"visibility":"public","docs":"An object that behaves like a regular temporary file, but keeps data in\nmemory until it reaches a configured size, at which point the data is\nwritten to a temporary file on disk, and further operations use the file\non disk.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:273","a:2:3207:247-0:413:2437","a:2:32473:3562-0:413:2437","a:2:42276:10312-0:413:2437","a:2:3242:4487-0:413:2437","a:2:32414:237-0:413:2437","a:2:42277:10411-0:413:2437","b:2:2711-0:413:2437","b:2:3823-0:413:2437","b:2:2988-0:413:2437","b:2:2999-0:413:2437","b:2:2984-0:413:2437","b:2:2994-0:413:2437","b:2:2714-0:413:2437","0:285","0:289","0:416","0:279"]}}},"0:397-0:356:1889":{"id":"0:397-0:356:1889","crate_id":0,"name":null,"span":{"filename":"src/file/imp/mod.rs","begin":[4,8],"end":[4,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::unix","name":"unix","id":"0:356:1889","glob":true}}},"0:399:2433":{"id":"0:399:2433","crate_id":0,"name":"PathPersistError","span":{"filename":"src/file/mod.rs","begin":[107,0],"end":[112,1]},"visibility":"public","docs":"Error returned when persisting a temporary file path fails.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:400:2424","0:401:1310"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:3207:247-0:399:2433","a:2:32473:3562-0:399:2433","a:2:42276:10312-0:399:2433","a:2:3242:4487-0:399:2433","a:2:32414:237-0:399:2433","a:2:42277:10411-0:399:2433","b:2:2711-0:399:2433","b:2:3823-0:399:2433","b:2:2988-0:399:2433","b:2:2999-0:399:2433","b:2:2984-0:399:2433","b:2:2994-0:399:2433","b:2:2714-0:399:2433","b:5:5948-0:399:2433","0:116","0:118","0:402","0:120","0:114"]}}},"0:156:2424":{"id":"0:156:2424","crate_id":0,"name":"error","span":{"filename":"src/file/mod.rs","begin":[510,4],"end":[510,24]},"visibility":"public","docs":"The underlying IO error.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"io::Error","id":"1:3069:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:343:2601":{"id":"0:343:2601","crate_id":0,"name":"make","span":{"filename":"src/lib.rs","begin":[749,4],"end":[754,5]},"visibility":"public","docs":"Attempts to create a temporary file (or file-like object) using the\nprovided closure. The closure is passed a temporary file path and\nreturns an [`std::io::Result`]. The path provided to the closure will be\ninside of [`std::env::temp_dir()`]. Use [`Builder::make_in`] to provide\na custom temporary directory. If the closure returns one of the\nfollowing errors, then another randomized file path is tried:\n - [`std::io::ErrorKind::AlreadyExists`]\n - [`std::io::ErrorKind::AddrInUse`]\n\nThis can be helpful for taking full control over the file creation, but\nleaving the temporary file path construction up to the library. This\nalso enables creating a temporary UNIX domain socket, since it is not\npossible to bind to a socket that already exists.\n\nNote that [`Builder::append`] is ignored when using [`Builder::make`].\n\n# Security\n\nThis has the same [security implications][security] as\n[`NamedTempFile`], but with additional caveats. Specifically, it is up\nto the closure to ensure that the file does not exist and that such a\ncheck is *atomic*. Otherwise, a [time-of-check to time-of-use\nbug][TOCTOU] could be introduced.\n\nFor example, the following is **not** secure:\n\n```\n# use std::io;\n# use std::fs::File;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n// This is NOT secure!\nlet tempfile = Builder::new().make(|path| {\n    if path.is_file() {\n        return Err(io::ErrorKind::AlreadyExists.into());\n    }\n\n    // Between the check above and the usage below, an attacker could\n    // have replaced `path` with another file, which would get truncated\n    // by `File::create`.\n\n    File::create(path)\n})?;\n# Ok(())\n# }\n```\nNote that simply using [`std::fs::File::create`] alone is not correct\nbecause it does not fail if the file already exists:\n```\n# use std::io;\n# use std::fs::File;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n// This could overwrite an existing file!\nlet tempfile = Builder::new().make(|path| File::create(path))?;\n# Ok(())\n# }\n```\nFor creating regular temporary files, use [`Builder::tempfile`] instead\nto avoid these problems. This function is meant to enable more exotic\nuse-cases.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `NamedTempFile`.\n\n# Errors\n\nIf the closure returns any error besides\n[`std::io::ErrorKind::AlreadyExists`] or\n[`std::io::ErrorKind::AddrInUse`], then `Err` is returned.\n\n# Examples\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n# #[cfg(unix)]\nuse std::os::unix::net::UnixListener;\n# #[cfg(unix)]\nlet tempsock = Builder::new().make(|path| UnixListener::bind(path))?;\n# Ok(())\n# }\n```\n\n[TOCTOU]: https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use\n[security]: struct.NamedTempFile.html#security\n[resource-leaking]: struct.NamedTempFile.html#resource-leaking","links":{"`NamedTempFile`":"0:144:2432","`std::io::ErrorKind::AlreadyExists`":"1:8366:3165","`Builder::make_in`":"0:346:2604","`Builder::tempfile`":"0:336:2430","`Builder::append`":"0:334:2445","`std::fs::File::create`":"1:2338:2557","`std::io::ErrorKind::AddrInUse`":"1:8358:3166","`std::io::Result`":"1:3067:226","`Builder::make`":"0:343:2601","`std::env::temp_dir()`":"1:1923:2532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3453:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:240:3097":{"id":"0:240:3097","crate_id":0,"name":"write_vectored","span":{"filename":"src/file/mod.rs","begin":[1049,4],"end":[1053,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"io::IoSlice","id":"1:8480:3098","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[535,0],"end":[539,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10392:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:169:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:163:839":{"id":"0:163:839","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[523,4],"end":[525,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Error","id":"1:3069:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:227:3096":{"id":"0:227:3096","crate_id":0,"name":"flush","span":{"filename":"src/file/mod.rs","begin":[1017,4],"end":[1019,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:408:3113":{"id":"0:408:3113","crate_id":0,"name":"OnDisk","span":{"filename":"src/spooled.rs","begin":[9,4],"end":[9,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:410:1989"]},"discriminant":null}}},"a:2:32473:3562-0:122:2435":{"id":"a:2:32473:3562-0:122:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32473:3562","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13399:29860":{"id":"2:13399:29860","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32414:237-0:413:2437":{"id":"a:2:32414:237-0:413:2437","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2994-0:399:2433":{"id":"b:2:2994-0:399:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2997:138","2:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:308-0:24:2427":{"id":"0:308-0:24:2427","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,21],"end":[187,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::dir::tempdir","name":"tempdir","id":"0:24:2427","glob":false}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/dir/mod.rs","begin":[200,0],"end":[449,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:1188","0:31:2754","0:33:2809","0:35:2814","0:38:1310","0:39:2834","0:40:2851"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13400:29861":{"id":"2:13400:29861","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:405:3112":{"id":"0:405:3112","crate_id":0,"name":"InMemory","span":{"filename":"src/spooled.rs","begin":[8,4],"end":[8,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:407:1989"]},"discriminant":null}}},"2:13357:37438":{"id":"2:13357:37438","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12960:3735","`DoubleEndedIterator`":"2:8329:130","prim@char":"1:12355:476","str::matches":"2:13354:3149"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44265:7517","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3207:247-0:399:2433":{"id":"a:2:3207:247-0:399:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2984-0:27:2429":{"id":"b:2:2984-0:27:2429","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2987:2839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:166:839":{"id":"0:166:839","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[530,4],"end":[532,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2714-0:419:2439":{"id":"b:2:2714-0:419:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2716:29789"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:404:3111":{"id":"0:404:3111","crate_id":0,"name":"SpooledData","span":{"filename":"src/spooled.rs","begin":[7,0],"end":[10,1]},"visibility":"public","docs":"A wrapper for the two states of a `SpooledTempFile`.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:405:3112","0:408:3113"],"impls":[]}}},"0:288:3096":{"id":"0:288:3096","crate_id":0,"name":"flush","span":{"filename":"src/spooled.rs","begin":[190,4],"end":[195,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:401:1310":{"id":"0:401:1310","crate_id":0,"name":"path","span":{"filename":"src/file/mod.rs","begin":[111,4],"end":[111,22]},"visibility":"public","docs":"The temporary file path that couldn't be persisted.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:30:1188":{"id":"0:30:1188","crate_id":0,"name":"new","span":{"filename":"src/dir/mod.rs","begin":[235,4],"end":[237,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `env::temp_dir()`.\n\nSee [`Builder`] for more configuration.\n\nThe directory and everything inside it will be automatically deleted\nonce the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`\nlet tmp_dir = TempDir::new()?;\n\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// `tmp_dir` goes out of scope, the directory as well as\n// `tmp_file` will be deleted here.\n# Ok(())\n# }\n```\n\n[`Builder`]: struct.Builder.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3242:4487-0:399:2433":{"id":"a:2:3242:4487-0:399:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3242:4487","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:315-0:399:2433":{"id":"0:315-0:399:2433","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,42],"end":[189,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::PathPersistError","name":"PathPersistError","id":"0:399:2433","glob":false}}},"0:153:337":{"id":"0:153:337","crate_id":0,"name":"as_ref","span":{"filename":"src/file/mod.rs","begin":[502,4],"end":[504,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:195:3073":{"id":"0:195:3073","crate_id":0,"name":"into_parts","span":{"filename":"src/file/mod.rs","begin":[899,4],"end":[901,5]},"visibility":"public","docs":"Converts the named temporary file into its constituent parts.\n\nNote: When the path is dropped, the file is deleted but the file handle\nis still usable.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"generic":"F"},{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2714-0:122:2435":{"id":"b:2:2714-0:122:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2716:29789"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13289:30755":{"id":"2:13289:30755","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13368:37442":{"id":"2:13368:37442","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13405:37452":{"id":"2:13405:37452","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5013:37452"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44342:7442","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61-0:50:1889":{"id":"0:61-0:50:1889","crate_id":0,"name":null,"span":{"filename":"src/dir/imp/mod.rs","begin":[4,0],"end":[4,16]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(unix)]"],"deprecation":null,"inner":{"import":{"source":"unix","name":"unix","id":"0:50:1889","glob":true}}},"b:2:2714-0:144:2432":{"id":"b:2:2714-0:144:2432","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2716:29789"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:231:3099":{"id":"0:231:3099","crate_id":0,"name":"write_all","span":{"filename":"src/file/mod.rs","begin":[1027,4],"end":[1031,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:3095":{"id":"0:210:3095","crate_id":0,"name":"read_exact","span":{"filename":"src/file/mod.rs","begin":[977,4],"end":[981,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3207:247-0:419:2439":{"id":"a:2:3207:247-0:419:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3823-0:419:2439":{"id":"b:2:3823-0:419:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13280:37432":{"id":"2:13280:37432","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13310:30797":{"id":"2:13310:30797","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12355:476","self::pattern":"2:12960:3735"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2988-0:154:2434":{"id":"b:2:2988-0:154:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:182":{"id":"0:182","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[652,0],"end":[910,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:184:1310","0:185:2851","0:186:2926","0:188:2937","0:190:2943","0:191:3060","0:192:3062","0:193:3065","0:194:3069","0:195:3073","0:196:2610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:39:2834":{"id":"0:39:2834","crate_id":0,"name":"into_path","span":{"filename":"src/dir/mod.rs","begin":[388,4],"end":[395,5]},"visibility":"public","docs":"Persist the temporary directory to disk, returning the [`PathBuf`] where it is located.\n\nThis consumes the [`TempDir`] without deleting directory on the filesystem, meaning that\nthe directory will no longer be automatically deleted.\n\n[`TempDir`]: struct.TempDir.html\n[`PathBuf`]: http://doc.rust-lang.org/std/path/struct.PathBuf.html\n\n# Examples\n\n```\nuse std::fs;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_dir = TempDir::new()?;\n\n// Persist the temporary directory to disk,\n// getting the path where it is.\nlet tmp_path = tmp_dir.into_path();\n\n// Delete the temporary directory ourselves.\nfs::remove_dir_all(tmp_path)?;\n# Ok(())\n# }\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"PathBuf","id":"1:5335:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:285":{"id":"0:285","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[155,0],"end":[196,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["by_ref","is_write_vectored","write_fmt","write_vectored","write_all_vectored","write_all"],"trait":{"name":"Write","id":"1:3651:2870","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:286:2864","0:287:3097","0:288:3096"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:284:3095":{"id":"0:284:3095","crate_id":0,"name":"read_exact","span":{"filename":"src/spooled.rs","begin":[147,4],"end":[152,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:317-0:122:2435":{"id":"0:317-0:122:2435","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,74],"end":[189,82]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::TempPath","name":"TempPath","id":"0:122:2435","glob":false}}},"0:329:2443":{"id":"0:329:2443","crate_id":0,"name":"prefix","span":{"filename":"src/lib.rs","begin":[320,4],"end":[323,5]},"visibility":"public","docs":"Set a custom filename prefix.\n\nPath separators are legal but not advisable.\nDefault: `.tmp`.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .prefix(\"my-temporary-note\")\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["prefix",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"S"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2081:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:346:2604":{"id":"0:346:2604","crate_id":0,"name":"make_in","span":{"filename":"src/lib.rs","begin":[778,4],"end":[796,5]},"visibility":"public","docs":"This is the same as [`Builder::make`], except `dir` is used as the base\ndirectory for the temporary file path.\n\nSee [`Builder::make`] for more details and security implications.\n\n# Examples\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n# #[cfg(unix)]\nuse std::os::unix::net::UnixListener;\n# #[cfg(unix)]\nlet tempsock = Builder::new().make_in(\"./\", |path| UnixListener::bind(path))?;\n# Ok(())\n# }\n```","links":{"`Builder::make`":"0:343:2601"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3453:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:30779":{"id":"2:13293:30779","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13295:30783","str::split_at_mut":"2:13294:30780"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13303:35760":{"id":"2:13303:35760","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13301:35757"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44326:7520","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:2809":{"id":"0:177:2809","crate_id":0,"name":"with_prefix","span":{"filename":"src/file/mod.rs","begin":[629,4],"end":[631,5]},"visibility":"public","docs":"Create a new named temporary file with the specified filename prefix.\n\nSee [`NamedTempFile::new()`] for details.\n\n[`NamedTempFile::new()`]: #method.new","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2081:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:217:3093":{"id":"0:217:3093","crate_id":0,"name":"read_to_end","span":{"filename":"src/file/mod.rs","begin":[995,4],"end":[999,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"5:7168:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[528,0],"end":[533,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:166:839"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2984-0:154:2434":{"id":"b:2:2984-0:154:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2987:2839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13271:1006":{"id":"2:13271:1006","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12355:476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13389:37449":{"id":"2:13389:37449","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12355:476","self::pattern":"2:12960:3735"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3823-0:27:2429":{"id":"b:2:3823-0:27:2429","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13366:37441":{"id":"2:13366:37441","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3823-0:154:2434":{"id":"b:2:3823-0:154:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:256":{"id":"0:256","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1084,0],"end":[1089,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(any(unix, target_os = \"wasi\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRawFd","id":"1:4923:2873","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:4923:2873","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:258:3105"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5712:38151":{"id":"5:5712:38151","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:2797","`String`":"5:7754:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2797","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:797:4048":{"id":"5:797:4048","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:2943":{"id":"0:131:2943","crate_id":0,"name":"keep","span":{"filename":"src/file/mod.rs","begin":[344,4],"end":[359,5]},"visibility":"public","docs":"Keep the temporary file from being deleted. This function will turn the\ntemporary file into a non-temporary file without moving it.\n\n\n# Errors\n\nOn some platforms (e.g., Windows), we need to mark the file as\nnon-temporary. This operation could fail.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet path = file.into_temp_path();\nlet path = path.keep()?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42315:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5335:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:144:2432":{"id":"0:144:2432","crate_id":0,"name":"NamedTempFile","span":{"filename":"src/file/mod.rs","begin":[489,0],"end":[492,1]},"visibility":"public","docs":"A named temporary file.\n\nThe default constructor, [`NamedTempFile::new()`], creates files in\nthe location returned by [`std::env::temp_dir()`], but `NamedTempFile`\ncan be configured to manage a temporary file in any location\nby constructing with [`NamedTempFile::new_in()`].\n\n# Security\n\nMost operating systems employ temporary file cleaners to delete old\ntemporary files. Unfortunately these temporary file cleaners don't always\nreliably _detect_ whether the temporary file is still being used.\n\nSpecifically, the following sequence of events can happen:\n\n1. A user creates a temporary file with `NamedTempFile::new()`.\n2. Time passes.\n3. The temporary file cleaner deletes (unlinks) the temporary file from the\n   filesystem.\n4. Some other program creates a new file to replace this deleted temporary\n   file.\n5. The user tries to re-open the temporary file (in the same program or in a\n   different program) by path. Unfortunately, they'll end up opening the\n   file created by the other program, not the original file.\n\n## Operating System Specific Concerns\n\nThe behavior of temporary files and temporary file cleaners differ by\noperating system.\n\n### Windows\n\nOn Windows, open files _can't_ be deleted. This removes most of the concerns\naround temporary file cleaners.\n\nFurthermore, temporary files are, by default, created in per-user temporary\nfile directories so only an application running as the same user would be\nable to interfere (which they could do anyways). However, an application\nrunning as the same user can still _accidentally_ re-create deleted\ntemporary files if the number of random bytes in the temporary file name is\ntoo small.\n\nSo, the only real concern on Windows is:\n\n1. Opening a named temporary file in a world-writable directory.\n2. Using the `into_temp_path()` and/or `into_parts()` APIs to close the file\n   handle without deleting the underlying file.\n3. Continuing to use the file by path.\n\n### UNIX\n\nUnlike on Windows, UNIX (and UNIX like) systems allow open files to be\n\"unlinked\" (deleted).\n\n#### MacOS\n\nLike on Windows, temporary files are created in per-user temporary file\ndirectories by default so calling `NamedTempFile::new()` should be\nrelatively safe.\n\n#### Linux\n\nUnfortunately, most _Linux_ distributions don't create per-user temporary\nfile directories. Worse, systemd's tmpfiles daemon (a common temporary file\ncleaner) will happily remove open temporary files if they haven't been\nmodified within the last 10 days.\n\n# Resource Leaking\n\nIf the program exits before the `NamedTempFile` destructor is\nrun, the temporary file will not be deleted. This can happen\nif the process exits using [`std::process::exit()`], a segfault occurs,\nreceiving an interrupt signal like `SIGINT` that is not handled, or by using\na statically declared `NamedTempFile` instance (like with [`lazy_static`]).\n\nUse the [`tempfile()`] function unless you need a named file path.\n\n[`tempfile()`]: fn.tempfile.html\n[`NamedTempFile::new()`]: #method.new\n[`NamedTempFile::new_in()`]: #method.new_in\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html\n[`std::process::exit()`]: http://doc.rust-lang.org/std/process/fn.exit.html\n[`lazy_static`]: https://github.com/rust-lang-nursery/lazy-static.rs/issues/62","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"std::fs::File","id":"1:2318:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:173","0:182","0:197","a:2:3207:247-0:144:2432","a:2:32473:3562-0:144:2432","a:2:42276:10312-0:144:2432","a:2:3242:4487-0:144:2432","a:2:32414:237-0:144:2432","a:2:42277:10411-0:144:2432","b:2:2711-0:144:2432","b:2:3823-0:144:2432","b:2:2988-0:144:2432","b:2:2999-0:144:2432","b:2:2984-0:144:2432","b:2:2994-0:144:2432","b:2:2714-0:144:2432","0:246","0:164","0:223","0:148","0:151","0:253","0:235","0:250","0:212","0:256","0:200"]}}},"2:13354:3149":{"id":"2:13354:3149","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12960:3735","`DoubleEndedIterator`":"2:8329:130","prim@char":"1:12355:476","str::rmatches":"2:13357:37438"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44247:7516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42277:10411-0:122:2435":{"id":"a:2:42277:10411-0:122:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42277:10411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:233:3100":{"id":"0:233:3100","crate_id":0,"name":"write_fmt","span":{"filename":"src/file/mod.rs","begin":[1033,4],"end":[1037,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["fmt",{"resolved_path":{"name":"fmt::Arguments","id":"2:43228:3101","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154:2434":{"id":"0:154:2434","crate_id":0,"name":"PersistError","span":{"filename":"src/file/mod.rs","begin":[508,0],"end":[513,1]},"visibility":"public","docs":"Error returned when persisting a temporary file fails.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:156:2424","0:157:798"],"fields_stripped":false}},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"std::fs::File","id":"1:2318:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:3207:247-0:154:2434","a:2:32473:3562-0:154:2434","a:2:42276:10312-0:154:2434","a:2:3242:4487-0:154:2434","a:2:32414:237-0:154:2434","a:2:42277:10411-0:154:2434","b:2:2711-0:154:2434","b:2:3823-0:154:2434","b:2:2988-0:154:2434","b:2:2999-0:154:2434","b:2:2984-0:154:2434","b:2:2994-0:154:2434","b:2:2714-0:154:2434","b:5:5948-0:154:2434","0:167","0:170","0:164","0:161","0:158"]}}},"2:13374:37446":{"id":"2:13374:37446","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12355:476","self::pattern":"2:12960:3735"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12986:15581","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32473:3562-0:27:2429":{"id":"a:2:32473:3562-0:27:2429","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32473:3562","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2999-0:154:2434":{"id":"b:2:2999-0:154:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3002:138","2:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:196:2610":{"id":"0:196:2610","crate_id":0,"name":"from_parts","span":{"filename":"src/file/mod.rs","begin":[907,4],"end":[909,5]},"visibility":"public","docs":"Creates a `NamedTempFile` from its constituent parts.\n\nThis can be used with [`NamedTempFile::into_parts`] to reconstruct the\n`NamedTempFile`.","links":{"`NamedTempFile::into_parts`":"0:195:3073"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["file",{"generic":"F"}],["path",{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253":{"id":"0:253","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1077,0],"end":[1081,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(any(unix, target_os = \"wasi\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsFd","id":"1:5004:2872","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsFd","id":"1:5004:2872","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:255:3104"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3823-0:144:2432":{"id":"b:2:3823-0:144:2432","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13408:10304":{"id":"2:13408:10304","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5014:10304"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44351:7309","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13327:30785":{"id":"2:13327:30785","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12960:3735","`DoubleEndedIterator`":"2:8329:130","prim@char":"1:12355:476","str::split_whitespace":"2:13301:35757","str::rsplit":"2:13333:30789"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44043:3418","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42277:10411-0:419:2439":{"id":"a:2:42277:10411-0:419:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42277:10411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2711-0:122:2435":{"id":"b:2:2711-0:122:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2713:3268"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:202:3088":{"id":"0:202:3088","crate_id":0,"name":"read","span":{"filename":"src/file/mod.rs","begin":[955,4],"end":[957,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2711-0:154:2434":{"id":"b:2:2711-0:154:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2434","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2713:3268"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13319:4027":{"id":"2:13319:4027","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42184:191","prim@char":"1:12355:476","self::pattern":"2:12960:3735"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:225:2864":{"id":"0:225:2864","crate_id":0,"name":"write","span":{"filename":"src/file/mod.rs","begin":[1013,4],"end":[1015,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13360:37439":{"id":"2:13360:37439","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12960:3735","`DoubleEndedIterator`":"2:8329:130","prim@char":"1:12355:476","str::rmatch_indices":"2:13363:37440"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44193:7514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32414:237-0:122:2435":{"id":"a:2:32414:237-0:122:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2999-0:413:2437":{"id":"b:2:2999-0:413:2437","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3002:138","2:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13377:37447":{"id":"2:13377:37447","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12355:476","self::pattern":"2:12960:3735"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13323:3989":{"id":"2:13323:3989","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42184:191","prim@char":"1:12355:476","self::pattern":"2:12960:3735"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5700:38148":{"id":"5:5700:38148","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3207:247-0:27:2429":{"id":"a:2:3207:247-0:27:2429","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42276:10312-0:413:2437":{"id":"a:2:42276:10312-0:413:2437","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42276:10312","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13272:3990":{"id":"2:13272:3990","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:1310":{"id":"0:38:1310","crate_id":0,"name":"path","span":{"filename":"src/dir/mod.rs","begin":[356,4],"end":[358,5]},"visibility":"public","docs":"Accesses the [`Path`] to the temporary directory.\n\n[`Path`]: http://doc.rust-lang.org/std/path/struct.Path.html\n\n# Examples\n\n```\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_path;\n\n{\n   let tmp_dir = TempDir::new()?;\n   tmp_path = tmp_dir.path().to_owned();\n\n   // Check that the temp directory actually exists.\n   assert!(tmp_path.exists());\n\n   // End of `tmp_dir` scope, directory will be deleted\n}\n\n// Temp directory should be deleted by now\nassert_eq!(tmp_path.exists(), false);\n# Ok(())\n# }\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"path::Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:2431":{"id":"0:112:2431","crate_id":0,"name":"tempfile_in","span":{"filename":"src/file/mod.rs","begin":[101,0],"end":[103,1]},"visibility":"public","docs":"Create a new temporary file in the specified directory.\n\n# Security\n\nThis variant is secure/reliable in the presence of a pathological temporary file cleaner.\nIf the temporary file isn't created in [`std::env::temp_dir()`] then temporary file cleaners aren't an issue.\n\n# Resource Leaking\n\nThe temporary file will be automatically removed by the OS when the last handle to it is closed.\nThis doesn't rely on Rust destructors being run, so will (almost) never fail to clean up the temporary file.\n\n# Errors\n\nIf the file can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempfile_in;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a file inside of the current working directory\nlet mut file = tempfile_in(\"./\")?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2318:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::path::Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:796:4047":{"id":"5:796:4047","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3823-0:122:2435":{"id":"b:2:3823-0:122:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:31:2754":{"id":"0:31:2754","crate_id":0,"name":"new_in","span":{"filename":"src/dir/mod.rs","begin":[264,4],"end":[266,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `dir`.\nThe directory and everything inside it will be automatically\ndeleted once the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory\nlet tmp_dir = TempDir::new_in(\".\")?;\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3067:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2952:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2711-0:27:2429":{"id":"b:2:2711-0:27:2429","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2713:3268"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:193:3065":{"id":"0:193:3065","crate_id":0,"name":"into_file","span":{"filename":"src/file/mod.rs","begin":[883,4],"end":[885,5]},"visibility":"public","docs":"Convert the temporary file into a `std::fs::File`.\n\nThe inner file will be deleted.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"F"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:275:3136":{"id":"0:275:3136","crate_id":0,"name":"is_rolled","span":{"filename":"src/spooled.rs","begin":[77,4],"end":[82,5]},"visibility":"public","docs":"Returns true if the file has been rolled over to disk.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13403:31958":{"id":"2:13403:31958","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:41952"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157:798":{"id":"0:157:798","crate_id":0,"name":"file","span":{"filename":"src/file/mod.rs","begin":[512,4],"end":[512,30]},"visibility":"public","docs":"The temporary file that couldn't be persisted.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}},"b:2:2999-0:399:2433":{"id":"b:2:2999-0:399:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3002:138","2:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:200":{"id":"0:200","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[954,0],"end":[982,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:3594:2867","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["read_exact","read_buf_exact","by_ref","chain","bytes","is_read_vectored","read_vectored","read_to_end","take","read_to_string","read_buf"],"trait":{"name":"Read","id":"1:3594:2867","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2432","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:202:3088","0:204:3090","0:206:3093","0:208:3094","0:210:3095"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:795:4046":{"id":"5:795:4046","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}}},"paths":{"17:13871:5718":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:2323:3088":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:40715:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:7216:4733":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:15439:6079":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"12:0:3174":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:10938:3343":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"5:1794:4678":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:10696:5268":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:13970:5733":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:40935:3541":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:8291:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"22:4117:4946":{"crate_id":22,"path":["linux_raw_sys","general","inotify_event"],"kind":"struct"},"17:16341:6336":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:40953:3551":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:44846:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:7999:3444":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:3940:4716":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:39840:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:12749:5592":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:11258:3802":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"22:4789:5153":{"crate_id":22,"path":["linux_raw_sys","general","kernel_sigaction"],"kind":"struct"},"21:2750:5190":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"22:4101:4941":{"crate_id":22,"path":["linux_raw_sys","general","robust_list"],"kind":"struct"},"17:14533:5547":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:1521:8168":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:7337:6770":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:7605:3525":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:8014:6518":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:4956:6543":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:40921:7450":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:46267:7595":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:12981:15582":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:14872:5913":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"21:6634:2869":{"crate_id":21,"path":["rustix","fs","seek_from","SeekFrom"],"kind":"enum"},"1:1642:7073":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:16084:6272":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:7924:4784":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"11:2366:7077":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:8329:130":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:44061:7350":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:23229:7415":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"22:4722:5142":{"crate_id":22,"path":["linux_raw_sys","general","statfs64"],"kind":"struct"},"1:949:7068":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:30801:4123":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:5658:8650":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:6144:23015":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:7354:9768":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:6199:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:7518:8931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:10387:120":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:1862:2732":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:6572:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"11:671:3370":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:8597:9096":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:43849:7494":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:11092:4789":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"22:4597:5097":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_range"],"kind":"struct"},"1:5289:7732":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"22:4363:5027":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"22:4475:5073":{"crate_id":22,"path":["linux_raw_sys","general","termios2"],"kind":"struct"},"2:42110:7467":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:46103:7579":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:12920:5611":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:6902:8862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:42277:10411":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:44211:7515":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:2143:15817":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:2546:2422":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:2746:3420":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:12359:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:41036:3548":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:46153:7589":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:7743:4712":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"22:4837:28269":{"crate_id":22,"path":["linux_raw_sys","general","membarrier_cmd"],"kind":"enum"},"5:7704:15853":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:5172:6549":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:677:7712":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:8353:9000":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:1675:8271":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"22:4172:4964":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_old_itimerval"],"kind":"struct"},"17:12176:5514":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"22:4402:8048":{"crate_id":22,"path":["linux_raw_sys","general","sigevent"],"kind":"struct"},"2:23251:7417":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"6:5586:8616":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:8208:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:5006:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:9424:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"18:680:5246":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:3288:3483":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:11851:5478":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4937:8380":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:2990:6500":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"11:2228:5496":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:22379:3345":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:2081:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"22:4125:4950":{"crate_id":22,"path":["linux_raw_sys","general","pollfd"],"kind":"struct"},"1:4819:5124":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:11706:5462":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:43941:7502":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:15641:6138":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:1339:5281":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:2320:3326":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:6188:6578":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:8645:3804":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:15286:5965":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:21769:3345":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:44838:9095":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"5:2357:37190":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:11367:7349":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:15714:6152":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11163:5426":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"11:1064:22084":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:16026:6230":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:8105:6890":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"11:1085:38853":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13082:5427":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"14:187:22098":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:3987:5317":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:10889:7820":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:2840:6493":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"22:3887:3848":{"crate_id":22,"path":["linux_raw_sys","general","flock"],"kind":"struct"},"17:11465:5443":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"11:835:7053":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:7350:8880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"21:4814:3797":{"crate_id":21,"path":["rustix","backend","fs","types","StatVfsMountFlags"],"kind":"struct"},"10:0:3172":{"crate_id":10,"path":["adler"],"kind":"module"},"1:6037:3930":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:22473:10506":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"16:8565:6951":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:14821:5908":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:5057:8437":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:1643:8253":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:6111:6572":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:11757:23125":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:4:1266":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:14055:5748":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:14773:5903":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:23058:35669":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:10595:4098":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:4169:3384":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:14405:5828":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:6731:8808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:12736:5591":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:43970:7505":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:40816:3344":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:16832:5732":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:2500:3338":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:11949:7750":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:5709:23014":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:378:7708":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:3088:4289":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:6696:6669":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:6917:8873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:4896:8361":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11592:5389":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:4904:4280":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:9384:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:10847:4752":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:4917:809":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:11026:38888":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:15573:6121":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:3666:3492":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:2605:15806":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"18:507:5216":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:7879:7751":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4890:8360":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:12762:5593":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"21:5641:3881":{"crate_id":21,"path":["rustix","backend","mount","types","MountFlags"],"kind":"struct"},"16:6440:23017":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:6205:23016":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:8179:6892":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:4172:4678":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"11:785:7052":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"21:3328:3683":{"crate_id":21,"path":["rustix","backend","fs","types","OFlags"],"kind":"struct"},"2:13641:3541":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:12359:5539":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:12361:1735":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:685:10306":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"22:4614:5099":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_copy"],"kind":"struct"},"22:4066:4928":{"crate_id":22,"path":["linux_raw_sys","general","inodes_stat_t"],"kind":"struct"},"6:6770:8820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"5:5150:3398":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"14:31:7041":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:1667:8270":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:47209:7678":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:9146:4101":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:5348:6555":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:6984:6521":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:41006:3546":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:8031:8978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:12374:1865":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:13451:5652":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:10503:30522":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:3253:3458":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:9120:4099":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"20:0:2612":{"crate_id":20,"path":["cfg_if"],"kind":"module"},"21:6685:5190":{"crate_id":21,"path":["rustix","fs","xattr","_","InternalBitFlags"],"kind":"struct"},"2:44326:7520":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:2710:3429":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:6521:8709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:8437:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:6723:8807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"16:7424:23023":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:12886:5608":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:12379:975":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:9170:3994":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:6731:6680":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:21950:7382":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:8085:4075":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"22:4336:8039":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5"],"kind":"struct"},"2:40702:7447":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"21:3743:3708":{"crate_id":21,"path":["rustix","backend","fs","types","RenameFlags"],"kind":"struct"},"1:3344:3438":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:4785:4740":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:384:7709":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:16750:6437":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:2474:3329":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:10394:4261":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:13635:5667":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:44860:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:47040:7667":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"22:4491:5076":{"crate_id":22,"path":["linux_raw_sys","general","ktermios"],"kind":"struct"},"21:3937:140":{"crate_id":21,"path":["rustix","backend","fs","types","FileType"],"kind":"enum"},"1:12367:761":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:11003:4095":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:42182:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12082:5506":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:7542:6800":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"21:4644:5190":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"17:11566:5453":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"11:396:4671":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:4947:8386":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:42235:7469":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"22:4935:8072":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1"],"kind":"union"},"2:39820:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:30795:4122":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:3729:7067":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"11:2545:8106":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:5088:8447":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:9715:3775":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"21:1755:5182":{"crate_id":21,"path":["rustix","ioctl","patterns","NoArg"],"kind":"struct"},"1:1864:4054":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:7544:37238":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:44425:15595":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:11402:7350":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"21:5014:3792":{"crate_id":21,"path":["rustix","backend","fs","types","FlockOperation"],"kind":"enum"},"1:6678:3508":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:5965:3918":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:15496:6113":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:680:7714":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:7524:4689":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:3450:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:2803:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:9287:30083":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:8330:8996":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:583:5277":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:13515:23094":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:6173:6576":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:11777:5470":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:41429:3513":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:13921:5726":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:2435:22154":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:896:6463":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:8590:7726":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:8489:2869":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13592:5663":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:22701:10502":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:14750:5894":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"18:96:27275":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"22:4018:4907":{"crate_id":22,"path":["linux_raw_sys","general","file_clone_range"],"kind":"struct"},"2:22935:9014":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:7471:6791":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:47137:7672":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:10648:10341":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:1486:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:11495:7353":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:7765:6832":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:46252:7594":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:42371:3994":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"22:4077:4932":{"crate_id":22,"path":["linux_raw_sys","general","fsxattr"],"kind":"struct"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:5089:10397":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:14099:5765":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:40607:7442":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:5520:8596":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:4642:4277":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:39782:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:4902:8364":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:15931:6208":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"0:419:2439":{"crate_id":0,"path":["tempfile","Builder"],"kind":"struct"},"2:45961:7570":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:33157:3459":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:8803:3368":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"18:589:5226":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"22:4531:5083":{"crate_id":22,"path":["linux_raw_sys","general","iovec"],"kind":"struct"},"2:13969:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:7462:6788":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:7463:8894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:22517:10507":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"5:2182:7152":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:13095:5628":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:3342:3437":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:46605:7625":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:6680:6666":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"1:10412:4104":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"16:5085:6546":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:46060:7576":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:12605:5426":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:7308:5004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:5179:8454":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13014:5624":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:14416:5829":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"11:2349:7062":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:5622:4093":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:2958:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:2008:4285":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:8058:6888":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:13471:5294":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:8059:3507":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:11708:7749":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:5727:5405":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:11956:7750":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"11:1023:7060":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:1711:8287":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:7159:6738":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"21:3373:5190":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"6:6748:8811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:11481:7352":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"23:25:29755":{"crate_id":23,"path":["bitflags","iter","IterNames"],"kind":"struct"},"1:4341:10375":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:2318:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:42266:7471":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:1621:4698":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:819:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:8209:6508":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4970:8394":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:4594:7313":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"22:4762:5144":{"crate_id":22,"path":["linux_raw_sys","general","user_desc"],"kind":"struct"},"6:497:4972":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:4333:10374":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:4111:10365":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:5551:8603":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:6904:6698":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:4927:3500":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:6368:6451":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"7:79:21998":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:11306:9102":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:11930:7829":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:2708:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:40580:7440":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:559:8061":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:6526:8710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:5851:7733":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:6480:5066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:2467:6471":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:10325:4065":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"22:4685:5129":{"crate_id":22,"path":["linux_raw_sys","general","__old_kernel_stat"],"kind":"struct"},"1:5958:3917":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:11864:5479":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:42895:4269":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:2704:6487":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:8070:4074":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:6534:8715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"18:754:5263":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:14312:5814":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"2:47194:7677":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:6631:8772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:15655:6141":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"11:1907:7072":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:12322:9331":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:7919:6872":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:7316:3810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:12378:1841":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:6749:6461":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:9710:3342":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"5:1898:4716":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:7016:6710":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:8608:7774":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:898:4681":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"22:4968:8088":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"union"},"6:0:1011":{"crate_id":6,"path":["libc"],"kind":"module"},"6:5107:8448":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:10929:4534":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:4810:6538":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"23:171:4856":{"crate_id":23,"path":["bitflags","parser","ParseError"],"kind":"struct"},"16:8267:6902":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:5084:15639":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:5976:3398":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:11805:5475":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:23747:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:8556:10347":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:12365:742":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"5:1645:7150":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:6876:8847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:14031:5746":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:322:5272":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:16798:6447":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"0:0:2430":{"crate_id":0,"path":["tempfile"],"kind":"module"},"1:4141:3382":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:6882:8848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:14358:5822":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6866:23020":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:0:3170":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:8341:3164":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:10843:5412":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:14299:5812":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"22:4924:8064":{"crate_id":22,"path":["linux_raw_sys","general","__sifields"],"kind":"union"},"21:3158:5190":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"2:41195:3550":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:6473:8695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:15785:6169":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:1614:7049":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:2961:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:958:7050":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:491:4989":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:12044:5499":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:8008:8976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:1625:8241":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"21:2724:3788":{"crate_id":21,"path":["rustix","backend","fs","types","Access"],"kind":"struct"},"18:706:5251":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:16362:6339":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:12008:5347":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"18:670:5245":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"11:1900:7071":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:6625:6645":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:14140:5776":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:8471:3446":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:4842:8331":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"22:4164:4963":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_old_timespec"],"kind":"struct"},"2:39745:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:9732:128":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:39728:3484":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:11041:3345":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:16241:6313":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:2594:9007":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:1569:8197":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"22:4394:8043":{"crate_id":22,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"22:4057:4924":{"crate_id":22,"path":["linux_raw_sys","general","files_stat_struct"],"kind":"struct"},"22:4325:5016":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_4"],"kind":"struct"},"6:6443:8685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:651:5216":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:659:5239":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:40903:3538":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:43169:35737":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"22:4258:4992":{"crate_id":22,"path":["linux_raw_sys","general","rlimit64"],"kind":"struct"},"6:1632:8245":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:8223:6894":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:6942:6701":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:40893:134":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"21:1095:3330":{"crate_id":21,"path":["rustix","fs","abs","rename"],"kind":"function"},"6:1514:8165":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:12775:7347":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:39732:3486":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:517:8130":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"18:735:27284":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"11:2323:7060":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:34054:3469":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:34573:3473":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"22:4140:4955":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_timespec"],"kind":"struct"},"2:42702:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:15844:6182":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:12360:1701":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"22:4799:28268":{"crate_id":22,"path":["linux_raw_sys","general","fsconfig_command"],"kind":"enum"},"2:8280:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:9154:3370":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:44147:7352":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:1625:4716":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:3444:2854":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:13157:5631":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"16:7044:6509":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:13909:5723":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"22:4180:4965":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_sock_timeval"],"kind":"struct"},"2:44933:7552":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:9308:7802":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:15090:5950":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:1604:7068":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:14072:5756":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:5301:8509":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:6358:4761":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:2472:3328":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:14902:5918":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:12008:7356":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"22:4250:4989":{"crate_id":22,"path":["linux_raw_sys","general","rlimit"],"kind":"struct"},"1:9411:3928":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"16:3308:6468":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:38380:3476":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:11668:7743":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:10392:129":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:7469:8895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:8641:7777":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:14269:5803":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:7030:6712":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:2825:9010":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"11:1158:7066":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:44718:7544":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:46383:7601":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"22:3807:4866":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_fd_set"],"kind":"struct"},"2:12737:7366":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:10663:5267":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:8545:7768":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:7554:23024":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"11:430:38858":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:1614:3370":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:12028:5493":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:7414:5142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:5186:8455":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:39890:3489":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:3338:3472":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:34400:3471":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:16399:6346":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"11:2466:4716":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:2040:676":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:43207:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:13610:5666":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:21683:3969":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:7558:3994":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:9193:7794":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:5946:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:8228:7721":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:11503:4791":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:44567:7370":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:12362:1825":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:42739:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:13945:5730":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:16701:6422":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:6411:5041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"3:0:510":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:15701:6147":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:21822:3345":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:33708:3468":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:10394:23086":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:7325:4782":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:44297:3414":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:42478:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:11413:7130":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:42122:7726":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:44019:7510":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"23:11:3370":{"crate_id":23,"path":["bitflags","iter","Iter"],"kind":"struct"},"2:22729:10503":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:46132:7588":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:3651:2870":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:2141:15816":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:5319:8516":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:1220:5279":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:5541:8602":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:11290:7347":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:42088:35664":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:6599:8759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"18:521:27286":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"24:30:4663":{"crate_id":24,"path":["fastrand","global_rng","RestoreOnDrop"],"kind":"struct"},"17:15953:6213":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:46892:7663":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:1103:7062":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"11:0:3173":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:40997:3545":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:44492:7531":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"22:4548:8055":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"16:5113:6547":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:6914:6699":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:6967:9013":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:5635:8643":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:523:8133":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:6822:23019":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:991:7059":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:6509:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:12380:1927":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"22:3966:8021":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg"],"kind":"struct"},"23:122:29737":{"crate_id":23,"path":["bitflags","traits","Bits"],"kind":"trait"},"2:40495:7309":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:44351:7309":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:2498:2731":{"crate_id":1,"path":["std","fs","remove_dir_all"],"kind":"function"},"2:3200:4486":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:32415:2480":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:40083:15650":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:10400:4269":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:2406:5286":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:954:7049":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:15315:5985":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:46584:7624":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:3908:7724":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"21:465:3775":{"crate_id":21,"path":["rustix","backend","fs","dir","Dir"],"kind":"struct"},"17:10418:23087":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:14612:5859":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:47168:7675":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:3318:37285":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:3258:3463":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:5670:8657":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:6535:10515":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:12163:5513":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:42441:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:667:5278":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:3105:37159":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:14832:5909":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:7358:6511":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:6493:8697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6823:8836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:11523:7355":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:30827:35652":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:15963:6216":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:12625:5580":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:5629:8640":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:6381:3771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12570:5578":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:23023:35644":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"21:5679:5190":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"5:7168:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:8186:3343":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:8302:8990":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:44342:7442":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"22:4634:5102":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_writeprotect"],"kind":"struct"},"6:5255:8484":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:14019:5743":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"11:2137:7060":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"22:4651:5105":{"crate_id":22,"path":["linux_raw_sys","general","linux_dirent64"],"kind":"struct"},"9:445:22005":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12035:5496":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:2660:6485":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"14:7:7041":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"21:5043:3684":{"crate_id":21,"path":["rustix","backend","io","errno","Errno"],"kind":"struct"},"6:5381:8535":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:6890:6503":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:8788:3367":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:5417:6557":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:6419:8669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"11:2400:7067":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:12798:23221":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:23085:9017":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:44093:7512":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:31201:3969":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:23262:7418":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"6:7563:8955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:3277:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:39684:3494":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:43124:4258":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:2727:113":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:10396:4260":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:6953:6702":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:22579:3345":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"11:2121:6801":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:8298:6906":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:2684:6486":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:7869:5278":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"22:4372:5031":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_6"],"kind":"struct"},"6:1489:8155":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:155:4666":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:6623:8771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:1548:7067":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:9416:7341":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:14947:5925":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:11527:5450":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:4155:2859":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:14393:5826":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:36449:3474":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:10613:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:43425:3366":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:4377:3370":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:4325:10373":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:22605:36512":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"11:102:8098":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:1849:701":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:8308:8991":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:5357:8523":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:16494:5683":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"22:4108:4942":{"crate_id":22,"path":["linux_raw_sys","general","robust_list_head"],"kind":"struct"},"16:2450:6469":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:40746:3307":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:7431:8884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:12366:745":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:1563:8196":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:5545:15569":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:13733:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:14220:5781":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11606:5426":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"21:6915:3793":{"crate_id":21,"path":["rustix","ugid","Gid"],"kind":"struct"},"17:14796:5904":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:11098:4790":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:43141:9093":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:15136:5613":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:43858:7496":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:14573:5854":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:3202:118":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:8165:6510":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:43789:7492":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:7710:3535":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:12373:893":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:23043:35654":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:4694:10379":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:3503:5290":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:11222:5427":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"18:623:38896":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:3669:2868":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:4217:7067":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12392:5542":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"9:176:9320":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:46007:7573":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:8121:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:3094:4046":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:11016:5423":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"21:6465:5190":{"crate_id":21,"path":["rustix","fs","ioctl","_","InternalBitFlags"],"kind":"struct"},"6:1703:8283":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:23295:7421":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:47148:7673":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"21:5081:5190":{"crate_id":21,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"17:14547:5851":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:44446:7522":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"21:4237:5190":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"17:11515:5447":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:22226:10426":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:12327:10311":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:10097:23076":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:2591:677":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:11942:30355":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:16218:6300":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:40:4675":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:2761:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:41381:7328":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:15064:5948":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:4203:3385":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"22:4562:5088":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"6:1696:8280":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:4921:8377":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:43636:7344":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:11440:7351":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:47285:7688":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:40974:3531":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:46688:7628":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:8539:3414":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"11:698:3994":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:5230:8478":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:16822:5727":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"5:1496:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:44013:7360":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:12372:912":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"18:538:5223":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:40591:7441":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:10778:5407":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"17:15036:5944":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:11788:5472":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:12723:5590":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"21:6267:5190":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"2:22999:7392":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:15864:6189":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:6972:4747":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:12347:5538":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:7691:3308":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:43404:7482":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:44002:7509":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:8585:6952":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"18:573:5216":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:8261:8981":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:7502:7167":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:42404:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:14043:5747":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:16739:6436":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:899:3994":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:1630:7071":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:10179:4259":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:10597:5265":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:12358:1324":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:1923:2532":{"crate_id":1,"path":["std","env","temp_dir"],"kind":"function"},"2:44111:7513":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:4929:8378":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:16385:6343":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:3126:22157":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:12376:1853":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:23137:3345":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:22555:10508":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:44922:36627":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"18:643:5216":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:7827:3504":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:9389:3921":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:479:4966":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:9133:4100":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:6100:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11386:23103":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:13912:4761":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:4869:4967":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:33775:3466":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"22:4918:8061":{"crate_id":22,"path":["linux_raw_sys","general","sigval"],"kind":"union"},"2:21705:35790":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:894:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:5007:8415":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"22:4008:4902":{"crate_id":22,"path":["linux_raw_sys","general","mount_attr"],"kind":"struct"},"9:53:9310":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:1395:7062":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:8096:6889":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:5217:8474":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:6924:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:40694:7446":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:10976:30254":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:30537:10350":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"5:2377:9006":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:2607:15807":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2:39760:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:12906:5610":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:10274:23082":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:7731:7469":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:41419:3512":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:11813:7723":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:6337:6596":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:2506:6478":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:10793:5410":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"22:3755:8016":{"crate_id":22,"path":["linux_raw_sys","elf","Elf_Dyn_Union"],"kind":"union"},"17:12673:5583":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:41395:3508":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:9315:7803":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:3305:10046":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:3313:7072":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:10353:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:41922:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:5405:8543":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:6998:6703":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:46815:7662":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:11191:4099":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:2705:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"22:4134:4952":{"crate_id":22,"path":["linux_raw_sys","general","rand_pool_info"],"kind":"struct"},"2:42355:3370":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:13618:7377":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:1112:7066":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:3415:125":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:46937:7664":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:44982:7554":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:538:4950":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"21:2509:5191":{"crate_id":21,"path":["rustix","backend","fs","inotify","WatchFlags"],"kind":"struct"},"21:1874:27307":{"crate_id":21,"path":["rustix","ioctl","patterns","NoneOpcode"],"kind":"struct"},"2:22221:3345":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"16:6837:6690":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:1964:3398":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"6:6680:8791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:5562:8609":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:42144:7336":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"21:1792:5187":{"crate_id":21,"path":["rustix","ioctl","patterns","Setter"],"kind":"struct"},"16:2920:6497":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"9:480:22004":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:42004:9084":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"11:2440:4698":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:42776:3916":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:7717:30379":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:13119:5629":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:40852:3415":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:5549:15570":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11075:38887":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:6781:6683":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:40653:7444":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"11:1674:4673":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:4569:3398":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:22920:7385":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:2590:6482":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:5676:8659":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:1011:3370":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"21:6873:15872":{"crate_id":21,"path":["rustix","ioctl","Direction"],"kind":"enum"},"16:6502:22127":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"22:4028:4912":{"crate_id":22,"path":["linux_raw_sys","general","fstrim_range"],"kind":"struct"},"1:2482:3331":{"crate_id":1,"path":["std","fs","hard_link"],"kind":"function"},"2:47157:7674":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:8022:4787":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:1507:8163":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:613:38895":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"15:288:22110":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:32474:4491":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:8267:8982":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:16595:5701":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:2900:6496":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:735:7146":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:15602:6129":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:13889:116":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:5165:8453":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:7305:6766":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:798:119":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:8255:8980":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"21:4407:3798":{"crate_id":21,"path":["rustix","backend","fs","types","StatxFlags"],"kind":"struct"},"6:5682:8662":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12260:23196":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"1:968:10323":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:12507:15584":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"22:4427:3771":{"crate_id":22,"path":["linux_raw_sys","general","statx"],"kind":"struct"},"17:12648:5581":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:12952:5615":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:5837:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:1925:4070":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:10638:4786":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:21720:35784":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:12355:476":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:5471:8584":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:39069:3479":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:42874:4260":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:11204:4100":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:5335:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:5036:8428":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:15739:6160":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:1223:38436":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"22:4302:5013":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_1"],"kind":"struct"},"1:3034:4770":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:4964:8392":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:10955:3778":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"13:0:3169":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:40865:3528":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"22:4048:4919":{"crate_id":22,"path":["linux_raw_sys","general","file_dedupe_range"],"kind":"struct"},"2:13034:15589":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:11503:5446":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"17:14483:5842":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:12335:5537":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:15010:5942":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:4355:3398":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:4506:4705":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7521:6798":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:597:7711":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:5602:4092":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:6282:4771":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:39897:7431":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:9220:10414":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:5515:129":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:1595:7052":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:6302:6594":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:1424:7066":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:22951:7386":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:6016:4698":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:11971:5487":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:15731:6157":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:7508:6795":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:5450:8569":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"21:1835:27303":{"crate_id":21,"path":["rustix","ioctl","patterns","BadOpcode"],"kind":"struct"},"5:7731:3310":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:6658:6661":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"22:4266:4993":{"crate_id":22,"path":["linux_raw_sys","general","clone_args"],"kind":"struct"},"5:7602:3994":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:4061:3994":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:15549:6119":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:44729:15926":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:5428:8553":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:2150:7176":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:8749:3518":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:10486:114":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"16:2772:6490":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:15997:6223":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:1727:8048":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:15939:6211":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:5809:4714":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"22:3985:8026":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_remove_key_arg"],"kind":"struct"},"16:6042:6505":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:2550:6480":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:16332:6334":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:7767:7173":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:8004:7753":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:11733:23124":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:3440:3436":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"18:608:5233":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:14807:5906":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"22:3825:4869":{"crate_id":22,"path":["linux_raw_sys","general","__user_cap_header_struct"],"kind":"struct"},"1:11694:7747":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"22:0:3744":{"crate_id":22,"path":["linux_raw_sys"],"kind":"module"},"11:123:4667":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:6738:38877":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:5019:8421":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:22381:10422":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:9103:4098":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:8669:6853":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:3347:7071":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:4225:2858":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:3268:3461":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"22:3950:4898":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_policy_v2"],"kind":"struct"},"1:6183:4776":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:3694:3495":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:12041:7357":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:3649:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:3679:3409":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:40542:35656":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:3438:3435":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:16632:6408":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:10605:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:14933:5923":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:22974:7391":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:23218:7414":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:11998:5489":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:3395:3439":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:291:4678":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:4807:3384":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:15621:6130":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:11222:7067":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:41388:3506":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:8870:3372":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:6668:4698":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"21:0:2614":{"crate_id":21,"path":["rustix"],"kind":"module"},"1:6799:3926":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:44247:7516":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:15351:6016":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:5844:4776":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:26147:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:40912:3539":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:14127:5775":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:7836:4716":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:5501:4678":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:5779:4097":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:13193:5634":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"22:4742:5143":{"crate_id":22,"path":["linux_raw_sys","general","compat_statfs64"],"kind":"struct"},"13:229:8097":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"21:5875:5190":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"17:11065:5424":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:13196:120":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:6258:3398":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:44307:7518":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"22:4353:5024":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"17:10938:38885":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:13547:5659":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:21948:10421":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"21:4615:3791":{"crate_id":21,"path":["rustix","backend","fs","types","FallocateFlags"],"kind":"struct"},"1:2015:792":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:8667:2874":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"22:4148:4958":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_itimerspec"],"kind":"struct"},"1:3531:3445":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"21:6073:5190":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"5:3716:3370":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:3280:3481":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:16642:6409":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"18:635:5238":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:2078:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:7341:4888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:12897:5609":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:15981:6220":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:9162:7793":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:10862:4756":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"21:2554:5190":{"crate_id":21,"path":["rustix","backend","fs","inotify","_","InternalBitFlags"],"kind":"struct"},"2:46235:7593":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5249:8482":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"22:4342:5020":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"16:2796:6491":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:3720:5292":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:32503:4490":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:1684:8277":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:3875:7151":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"21:4040:5190":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"11:2551:38854":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:532:4695":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:3612:3092":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:16198:6297":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:5295:8506":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:7168:6739":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13890:5722":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:485:3755":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"7:32:21991":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:11579:5455":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"11:1914:7073":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:3047:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:9320:7804":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:0:568":{"crate_id":2,"path":["core"],"kind":"module"},"2:43182:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:3928:4698":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"14:202:4856":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"22:4642:5103":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_continue"],"kind":"struct"},"17:11720:5464":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:39860:3487":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:7494:3994":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:6408:6609":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:6853:3932":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:5305:5301":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:13398:5649":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:3428:3419":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"14:40:5698":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:16187:6292":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:1888:4698":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:3014:22155":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:6638:8773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:4163:3383":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:2724:6488":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:553:8139":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:12204:5517":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:22260:35795":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"21:1460:3777":{"crate_id":21,"path":["rustix","fs","raw_dir","RawDirEntry"],"kind":"struct"},"2:12986:15581":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:12381:1430":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:3889:5309":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:41181:3549":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:12860:5607":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"22:4293:5009":{"crate_id":22,"path":["linux_raw_sys","general","sigaltstack"],"kind":"struct"},"2:34227:3470":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:13145:5630":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:3339:7073":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:1533:3370":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"22:4204:4967":{"crate_id":22,"path":["linux_raw_sys","general","itimerspec"],"kind":"struct"},"11:2420:3994":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:8300:3521":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:3397:3440":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:13601:7374":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"6:5127:8450":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:16008:6227":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:11291:38890":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:7777:7174":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:4842:4741":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:12354:1184":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:15689:6144":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:5482:4992":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:7711:3536":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:10398:4268":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:7043:4714":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"21:3121:3778":{"crate_id":21,"path":["rustix","backend","fs","types","Mode"],"kind":"struct"},"6:4881:8355":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:5044:8433":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:30816:4258":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:41437:3515":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:0:3178":{"crate_id":17,"path":["object"],"kind":"module"},"16:8483:6942":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:7990:6885":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:12369:918":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"11:1920:7074":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:5112:10399":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:21830:10423":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:15148:5959":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:7574:7169":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:3352:37284":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:3095:37428":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:11678:5460":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:3453:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:30763:2836":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13361:5646":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:6123:6506":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:5420:8548":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"11:772:7051":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:5311:8512":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:32398:4278":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"5:2304:9002":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"21:1614:3773":{"crate_id":21,"path":["rustix","fs","StatExt"],"kind":"trait"},"1:10948:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"22:4625:5100":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_zeropage"],"kind":"struct"},"17:15829:6180":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:11818:5476":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"11:2148:7062":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:586:8151":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:11952:5485":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"14:165:22091":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:4795:4278":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:6406:7739":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:7883:6613":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:13854:5716":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:10167:23079":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:6153:16122":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:7368:3804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"21:3768:5190":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"11:1601:7070":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"9:328:8111":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:6652:8784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6740:8810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"16:6970:6504":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:4816:8311":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:2338:4524":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:10115:23077":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:16297:6321":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:40768:3311":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:4883:10400":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:11674:4105":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:5288:8504":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"11:364:4669":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"21:1863:27306":{"crate_id":21,"path":["rustix","ioctl","patterns","ReadWriteOpcode"],"kind":"struct"},"2:12960:3735":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:5004:2872":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"21:1813:27301":{"crate_id":21,"path":["rustix","ioctl","patterns","Updater"],"kind":"struct"},"17:16132:6273":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:7907:6871":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:44694:131":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:44540:7532":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:42201:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:12687:5587":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:12319:5535":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:16714:6428":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:32945:3460":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:4983:6544":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:8243:3523":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:4672:10378":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:12721:7365":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:22593:10511":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:43443:7490":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:12066:5504":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:15777:6167":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:4487:7728":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:11247:3418":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:10653:7343":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"22:4389:8042":{"crate_id":22,"path":["linux_raw_sys","general","siginfo"],"kind":"struct"},"2:44850:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:6507:8708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:12371:5540":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:12249:5525":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"21:3543:3795":{"crate_id":21,"path":["rustix","backend","fs","types","ResolveFlags"],"kind":"struct"},"6:5603:8623":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:6149:3540":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:10218:23080":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:9361:9097":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:46510:7622":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:1080:6801":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:7350:6772":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"21:6045:3882":{"crate_id":21,"path":["rustix","backend","mount","types","MountPropagationFlags"],"kind":"struct"},"5:3101:37158":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:8284:8987":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:8319:8995":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"21:4210:3796":{"crate_id":21,"path":["rustix","backend","fs","types","SealFlags"],"kind":"struct"},"23:67:29763":{"crate_id":23,"path":["bitflags","parser","ParseHex"],"kind":"trait"},"16:4766:6537":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"11:2533:8104":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:42888:4268":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"23:185:4861":{"crate_id":23,"path":["bitflags","traits","Flag"],"kind":"struct"},"2:3397:3493":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:14886:5916":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:5117:8449":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:4716:7314":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"11:854:7056":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:6714:4678":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:47324:7703":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:5462:8578":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:39800:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"18:765:27285":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:4184:6532":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:1833:15759":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:40614:15645":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:43114:9085":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:8290:8988":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:2785:3431":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:8169:3341":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:45876:7559":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:2530:6479":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:16283:6319":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"22:4571:5090":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_4"],"kind":"struct"},"17:11124:38889":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:11350:7828":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:47262:7687":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:505:4764":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:8174:3342":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:2157:3109":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:15989:6222":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:4875:8353":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:11401:5436":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:6718:3931":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:5258:7732":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:32505:115":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"22:4579:5091":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_5"],"kind":"struct"},"22:4507:5077":{"crate_id":22,"path":["linux_raw_sys","general","winsize"],"kind":"struct"},"2:38490:3478":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:7152:10418":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:9527:7342":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:12353:420":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:5441:8563":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:44335:7367":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:12079:15577":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"11:1884:3994":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"21:3573:5190":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"1:9176:7734":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:12216:5519":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:3069:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:4105:10366":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:9269:7795":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:6794:6684":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"2:4431:7310":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:3654:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:8503:6943":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:47232:7685":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:5341:8521":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:11691:5461":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:21737:35793":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:39910:7433":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"21:6442:3879":{"crate_id":21,"path":["rustix","fs","ioctl","IFlags"],"kind":"struct"},"17:12826:5597":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:16209:6298":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:14738:5892":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:40731:15853":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12869:5652":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:6813:8834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:13209:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:46493:7621":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:13958:5732":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:7604:8970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"22:4884:28270":{"crate_id":22,"path":["linux_raw_sys","general","membarrier_cmd_flag"],"kind":"enum"},"2:9848:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:14627:5862":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:628:10303":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:221:4677":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"22:4908:8058":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_key_specifier__bindgen_ty_1"],"kind":"union"},"2:3576:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:4536:3398":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"11:708:7049":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:15919:6205":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:7361:8882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:14460:5837":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:465:8122":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:506:5276":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:4844:6539":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:979:7056":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:15160:5963":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:943:4716":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:3834:6529":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:46472:7620":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:545:5077":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:16812:6448":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:14708:5873":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:44909:7549":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:4267:6534":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"21:6854:5184":{"crate_id":21,"path":["rustix","ioctl","Opcode"],"kind":"struct"},"1:8241:7761":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:12537:5575":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:40687:7445":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:3594:2867":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:16171:6288":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:7838:23025":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:4307:3398":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:12776:5594":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:11358:23102":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:564:4968":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:8462:3444":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:44265:7517":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:7058:6714":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"22:4517:5082":{"crate_id":22,"path":["linux_raw_sys","general","termio"],"kind":"struct"},"17:13933:5727":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:41171:3416":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:8249:8979":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:10487:23089":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"2:41976:10348":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:13306:5643":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:3212:4282":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:1494:8157":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:33369:3462":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:4354:10376":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:22248:4514":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:12370:900":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:5277:36778":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:9328:7806":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:0:1727":{"crate_id":1,"path":["std"],"kind":"module"},"17:11309:5429":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:2275:7153":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"18:113:27276":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:8551:7770":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:33909:3467":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"22:4901:8057":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg__bindgen_ty_1"],"kind":"union"},"17:13537:5613":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:14845:5911":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:8199:5073":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:13733:5683":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"21:3971:3789":{"crate_id":21,"path":["rustix","backend","fs","types","Advice"],"kind":"enum"},"2:11329:7348":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:4120:6530":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:11051:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"21:5278:5190":{"crate_id":21,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"21:6899:3800":{"crate_id":21,"path":["rustix","ugid","Uid"],"kind":"struct"},"16:7959:6883":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:4241:6533":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"9:236:3366":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:7660:10322":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:7472:34159":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:11114:5425":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:45993:7572":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:7586:8967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:42626:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:7448:8889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:40501:7434":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"9:422:22007":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:44970:7079":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:1584:8209":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:4772:10396":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:10039:9329":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:317:5271":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:2570:6481":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"22:3852:4877":{"crate_id":22,"path":["linux_raw_sys","general","vfs_cap_data__bindgen_ty_1"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"22:4780:5151":{"crate_id":22,"path":["linux_raw_sys","general","kernel_sigset_t"],"kind":"struct"},"1:11080:4788":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:40720:3306":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:3561:3398":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"14:160:7041":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:47247:7686":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:32473:3562":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:1927:4071":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:13838:5712":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:46345:7599":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:434:38859":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:15946:6212":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:2931:3345":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10823:5273":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"21:378:9885":{"crate_id":21,"path":["rustix","backend","reg","ArgReg"],"kind":"struct"},"17:15024:5943":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"7:0:1917":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:12108:5509":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12992:5619":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:13662:5670":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:42298:15866":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:2880:6495":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"22:3766:4864":{"crate_id":22,"path":["linux_raw_sys","general","__BindgenBitfieldUnit"],"kind":"struct"},"1:5708:4095":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:4821:5126":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"6:6437:8682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:5051:8435":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:13932:4763":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:15531:6114":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:10784:5408":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"2:22734:10501":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:1647:7074":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:15769:6165":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:6796:3925":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:15050:5945":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:306:2797":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:43413:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"23:0:3745":{"crate_id":23,"path":["bitflags"],"kind":"module"},"2:43840:7493":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:10803:3417":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:2797:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:5255:6552":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:8636:23029":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:14692:5868":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:4929:6542":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:14859:5912":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:31174:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:40883:3537":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:44901:7547":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:44868:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:3465:4716":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:7983:3345":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:6682:3922":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12018:5491":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:4404:6535":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:40874:3529":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:10534:5405":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:14586:5855":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:2968:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:10034:35891":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:12409:23197":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"18:481:5214":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:40599:7309":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:10630:5266":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:9416:3929":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:44165:7353":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:5570:8611":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:23092:7405":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:40786:3325":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:4902:6541":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:4721:7315":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"22:4283:5004":{"crate_id":22,"path":["linux_raw_sys","general","sigaction"],"kind":"struct"},"16:3441:6526":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:3299:10022":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:3485:3485":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:2217:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:45861:7558":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:9853:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:13070:5426":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:1690:4891":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:7566:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:44959:7553":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:5256:438":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:10218:5196":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"16:7789:38878":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:46185:7591":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:39648:3497":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:12338:30103":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:12983:23223":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:6263:3530":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:7067:4727":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:45893:7562":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:44360:7441":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:32405:7425":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:22607:15806":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:13427:5650":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"11:809:4716":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:10334:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:23116:10364":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:21842:7382":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13757:5697":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:15121:5956":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:40758:3417":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:4997:8408":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:5349:8522":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:13554:5660":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"1:2327:3094":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:4217:3387":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"14:0:3175":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:8616:7768":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:5742:5406":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:1625:7050":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:13181:5633":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"11:1140:7065":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:32380:7423":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:12550:5577":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:43950:7503":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"22:4410:5038":{"crate_id":22,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"6:5151:8452":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:22658:15806":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:22:824":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:10335:2870":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:11958:5486":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"22:4588:5093":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_api"],"kind":"struct"},"1:4303:34158":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:16728:6431":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:43388:7479":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:7259:6764":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:5593:8618":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:32416:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:8043:38874":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:2860:6494":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:11539:5451":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:4792:8294":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:33842:3465":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"21:6661:3801":{"crate_id":21,"path":["rustix","fs","xattr","XattrFlags"],"kind":"struct"},"2:22985:35651":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:4406:7727":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:5776:4096":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:1586:7051":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:3905:7723":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:40965:3543":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"22:4951:8080":{"crate_id":22,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1"],"kind":"union"},"6:5488:8589":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:2237:129":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"22:4212:4968":{"crate_id":22,"path":["linux_raw_sys","general","itimerval"],"kind":"struct"},"2:10830:4751":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:11173:38892":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11630:5457":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:4582:4705":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:6700:8800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"16:7495:6792":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:14024:10324":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:5318:6554":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:6867:3933":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"18:698:5249":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:8755:3519":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:16323:6330":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:3048:22156":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:12056:5503":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:8612:6522":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:12371:906":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:13983:5734":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:46089:7578":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:42881:4261":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:1410:7060":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:4563:7312":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:46622:7626":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:3821:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:985:7058":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:15753:6163":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:7938:6880":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:9235:10416":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:907:7051":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:15431:6078":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:2437:5289":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:2766:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:7807:38882":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:46717:7629":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"2:10402:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:5641:8646":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:532:5083":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:6843:6691":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:7391:8883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:15586:6126":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"22:4037:4914":{"crate_id":22,"path":["linux_raw_sys","general","file_dedupe_range_info"],"kind":"struct"},"1:11790:4793":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"11:2301:6801":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:5025:8424":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:2620:6483":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:5507:8595":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:9109:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:46982:7665":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:11553:5452":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:8793:35895":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:7077:4728":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:13041:5627":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:2950:6498":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:15973:6219":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"23:64:29762":{"crate_id":23,"path":["bitflags","parser","WriteHex"],"kind":"trait"},"2:42663:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:25:701":{"crate_id":2,"path":["core","env"],"kind":"macro"},"24:0:2613":{"crate_id":24,"path":["fastrand"],"kind":"module"},"6:473:8127":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"21:1380:38942":{"crate_id":21,"path":["rustix","fs","ioctl","Ficlone"],"kind":"struct"},"16:7716:38879":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"22:4196:4966":{"crate_id":22,"path":["linux_raw_sys","general","timeval"],"kind":"struct"},"17:14963:5928":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:46316:7598":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:4981:3501":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:1589:8211":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"22:3939:4897":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_key"],"kind":"struct"},"17:14560:5852":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:12976:5617":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:10344:7812":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"16:4152:6531":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:40944:3542":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:8028:6886":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:10296:23083":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:32391:7424":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:21739:35797":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"11:842:10323":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:5282:6553":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:9401:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:8622:7776":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"16:6256:6586":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:40570:7439":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:3843:10349":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:12920:3374":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:9274:116":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:6772:3552":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:7594:3994":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:11853:7724":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:16507:5697":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"16:2966:6499":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:13266:23092":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:7372:6512":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"11:351:38855":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"22:4605:5098":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_register"],"kind":"struct"},"1:8700:10407":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"22:4220:4969":{"crate_id":22,"path":["linux_raw_sys","general","timezone"],"kind":"struct"},"5:6516:10514":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:3207:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:4712:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"21:6243:5210":{"crate_id":21,"path":["rustix","backend","mount","types","InternalMountFlags"],"kind":"struct"},"17:14997:5941":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"21:4845:5190":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"1:763:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:6672:8789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:6389:6602":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:12840:5602":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:23174:7410":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"18:581:3969":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:43228:3101":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:13758:7378":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:1539:8179":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:11018:30086":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:12851:5606":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:10977:38886":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:15475:6108":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"22:3972:8024":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_key_specifier"],"kind":"struct"},"1:10967:3098":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:46366:7600":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:42363:7067":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:8859:3371":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:6808:6501":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:7241:4736":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"11:1005:6801":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:8746:150":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:15812:6173":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:1618:3994":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:8853:3370":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:7577:8964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:12225:5520":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:6588:6642":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"17:14520:5846":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:8273:8983":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:10715:3435":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:14114:5771":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:7980:6516":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:10442:23088":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:8528:6946":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:5139:8451":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"9:355:22020":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"8:0:2612":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:3141:5304":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:16036:6235":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:3110:6523":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:8050:10309":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"21:5251:3890":{"crate_id":21,"path":["rustix","backend","io","types","ReadWriteFlags"],"kind":"struct"},"6:5241:4946":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:23196:7412":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:10332:23084":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"21:2308:3326":{"crate_id":21,"path":["rustix","backend","fs","dir","DirEntry"],"kind":"struct"},"2:21722:35788":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:6269:6587":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:13222:23091":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:5387:4907":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:44043:3418":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:4561:7729":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:16684:6420":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:14284:5807":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:22644:10512":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:16775:6442":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"10:44:7080":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:3679:35887":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:13028:5626":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:5315:3447":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:14652:5864":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:11276:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:3695:6528":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"10:36:8110":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:13290:5366":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:12382:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:46443:7619":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:11198:3370":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:12475:15874":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"11:685:7067":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:16159:6285":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:42162:7338":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:0:3179":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:47111:7670":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:15896:6197":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:5654:114":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:14001:5742":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"22:4944:8078":{"crate_id":22,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1"],"kind":"union"},"24:153:4475":{"crate_id":24,"path":["fastrand","Rng"],"kind":"struct"},"2:4851:4279":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:8765:3366":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:41944:7333":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:7984:7710":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:10913:9100":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"5:2171:7151":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:32384:6853":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:10861:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:11719:9109":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:46738:7630":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:7401:38875":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:12135:5511":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:16786:6444":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"16:903:5271":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"16:8233:23027":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:3067:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:12491:7358":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:5334:8520":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:42315:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"5:2265:4695":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:21693:35790":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:7986:3811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:6573:6639":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:5309:3915":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:44618:15596":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"22:3798:4863":{"crate_id":22,"path":["linux_raw_sys","general","__IncompleteArrayField"],"kind":"struct"},"22:4310:8033":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_2"],"kind":"struct"},"2:42210:3370":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:42276:10312":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:46643:7627":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:14438:5836":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:46299:7597":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"21:1100:3676":{"crate_id":21,"path":["rustix","fs","abs","unlink"],"kind":"function"},"17:11432:23104":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:38325:3475":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"22:3926:4893":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_policy_v1"],"kind":"struct"},"2:43628:7491":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:12698:7364":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:41404:3510":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:41046:3534":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:8336:7763":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:7578:7806":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:12941:5614":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:8723:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:14375:5825":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"21:1964:27310":{"crate_id":21,"path":["rustix","path","arg","Arg"],"kind":"trait"},"22:3879:4881":{"crate_id":22,"path":["linux_raw_sys","general","f_owner_ex"],"kind":"struct"},"2:44629:7534":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:437:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:15418:6071":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10516:23090":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:3660:30218":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:44639:7538":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:4873:3956":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:546:6454":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:3036:124":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:8249:3430":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:3639:3488":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:5449:6558":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"21:5448:3889":{"crate_id":21,"path":["rustix","backend","io","types","DupFlags"],"kind":"struct"},"2:42515:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:38435:3477":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:33641:3464":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:12293:5530":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"9:0:3171":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"22:3994:8029":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_get_key_status_arg"],"kind":"struct"},"5:1259:38431":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:3249:4489":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:10918:2421":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"9:390:22006":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:11281:5428":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"22:3761:8018":{"crate_id":22,"path":["linux_raw_sys","elf","Elf_auxv_t"],"kind":"struct"},"2:3660:3490":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:7212:6751":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:4455:110":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:43878:7498":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:44843:151":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:920:7052":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:1132:4678":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:1530:8173":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:8343:4889":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:2077:1368":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:8532:3418":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:8480:3098":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:6659:8785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:8519:3416":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:5198:6550":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:5069:8446":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:1500:8160":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:2047:4118":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:12375:1847":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:5060:6545":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:23105:7406":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:21751:35787":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:40987:3544":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:15077:5949":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:10404:4266":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:14599:5857":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:43960:7504":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:40843:3527":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:5412:1253":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:6098:6567":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:15887:6194":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:6611:8764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"15:394:22120":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:12816:5294":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:5375:8533":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:6790:8828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:7649:3373":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:6716:8806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:3731:3496":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:11475:23105":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"2:10764:4749":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:4957:8389":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:7949:6515":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:12234:5521":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:1902:4065":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:5357:986":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:2820:6492":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:16656:6413":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:23185:7411":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:7487:8905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:6852:6692":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:11926:5484":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:5282:8501":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:7776:35671":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:9545:4070":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:16264:6314":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"11:2380:3370":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:32338:4102":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:13491:5654":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:23240:7416":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:43190:4258":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"11:1564:22085":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:15665:6142":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:16145:6279":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:6758:8818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:42218:7067":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:23207:7413":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"5:7514:4698":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:9205:10415":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:44029:3417":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:6666:8786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:14335:5818":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12931:5613":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:4443:7311":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:8843:3369":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:4010:7725":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:7534:7168":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:4497:15622":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:3283:3482":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"22:4318:8038":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_3"],"kind":"struct"},"17:2378:23152":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"22:4555:5086":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"11:1893:4716":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:5196:8462":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:16377:6340":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:6239:6581":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:43989:7506":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:5366:8527":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:6461:4776":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:12787:5595":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:13322:23093":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:21824:10420":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:13169:5632":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"6:5533:8597":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"18:531:5220":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:3456:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"21:2339:5190":{"crate_id":21,"path":["rustix","backend","fs","inotify","_","InternalBitFlags"],"kind":"struct"},"17:14975:5930":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:2294:2420":{"crate_id":1,"path":["std","fs"],"kind":"module"},"6:4914:8373":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:2415:22128":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:6084:6563":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:962:7053":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:15836:6181":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:5992:3919":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:9406:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:15410:6068":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:16761:6438":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:42380:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"18:726:5258":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"11:299:8099":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:8546:6948":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:573:4765":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:7397:4783":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"18:563:5225":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:908:5272":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"6:6449:8686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:16555:6394":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:6421:6456":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:16613:5711":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:11653:5458":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:2488:3333":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:9256:3920":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:11874:7725":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:4829:8321":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:13385:5647":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:6072:3398":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:5648:8649":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:10549:5406":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:44652:7542":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:6132:3915":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:4817:5122":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:16019:6228":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11421:5439":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"15:327:9307":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:3587:6527":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"22:3909:4889":{"crate_id":22,"path":["linux_raw_sys","general","open_how"],"kind":"struct"},"1:1979:4284":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:15679:6143":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:11617:5427":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:21771:10424":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"15:0:3176":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:1564:3994":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"21:5058:3883":{"crate_id":21,"path":["rustix","backend","io","types","FdFlags"],"kind":"struct"},"17:14917:5922":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:16520:6364":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:8320:23028":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:7223:6752":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:4213:3386":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:11878:5426":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:8233:7760":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:4990:8405":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:14507:5843":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:8711:6964":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:2952:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:22867:7384":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:45978:7571":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:10995:4075":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"11:2566:3373":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:3242:4487":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:8717:3365":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:7754:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:10406:4267":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:5689:6560":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:11831:5451":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"11:830:7068":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:46028:7574":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:10984:30249":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:11448:5440":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:46074:7577":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:6028:6502":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:2964:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:5447:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"22:3898:4888":{"crate_id":22,"path":["linux_raw_sys","general","flock64"],"kind":"struct"},"22:3833:4871":{"crate_id":22,"path":["linux_raw_sys","general","__user_cap_data_struct"],"kind":"struct"},"17:13692:5674":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:16311:6328":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:14672:5867":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:5098:10398":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:9397:3398":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"11:1105:7064":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:46284:7596":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"21:1771:5185":{"crate_id":21,"path":["rustix","ioctl","patterns","Getter"],"kind":"struct"},"2:3433:3480":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"21:6436:3799":{"crate_id":21,"path":["rustix","fs","fd","Timestamps"],"kind":"struct"},"2:47011:7666":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:6876:6695":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:4873:6540":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"22:3816:4868":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_fsid_t"],"kind":"struct"},"2:44317:7519":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:12975:5251":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"21:5849:3880":{"crate_id":21,"path":["rustix","backend","mount","types","UnmountFlags"],"kind":"struct"},"22:3918:4891":{"crate_id":22,"path":["linux_raw_sys","general","epoll_event"],"kind":"struct"},"6:6777:8821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:5494:8591":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:47090:7669":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:10246:23081":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:12377:1859":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"23:176:29764":{"crate_id":23,"path":["bitflags","parser","ParseErrorKind"],"kind":"enum"},"17:15852:6183":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:44943:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:43435:7489":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:8179:2421":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:11680:7746":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:45925:7564":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:45908:7563":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:8000:6517":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"11:2539:8105":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:876:3370":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:5757:6561":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:3860:3109":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:4923:2873":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"18:598:38897":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:23284:7420":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"5:7852:4720":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:816:10351":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:13798:5701":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:7548:8948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:5205:8467":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:10031:23075":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:5168:10403":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"23:97:29738":{"crate_id":23,"path":["bitflags","traits","Flags"],"kind":"trait"},"1:1636:7072":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:43153:4861":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:43868:7497":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:570:8142":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:4984:8402":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"18:515:5213":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:10564:5264":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:14152:5779":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:6795:3994":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:2955:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:10928:5422":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:12661:7361":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:42552:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:5638:4094":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"11:740:7050":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:7539:8945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"22:4959:8083":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1"],"kind":"union"},"17:12191:5516":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"18:80:27274":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:43396:7481":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:5622:8637":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:4886:10378":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:6064:6507":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:4922:2875":{"crate_id":1,"path":["std","os","fd","raw","RawFd"],"kind":"type_alias"},"1:2490:3334":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"11:2495:22080":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"6:6691:8794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:12711:5589":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"22:4380:5034":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_7"],"kind":"struct"},"5:4142:4698":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:14346:5821":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:7416:6777":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:47069:7668":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:9341:30082":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"18:491:5215":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:47128:7671":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:9442:3351":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:40557:7438":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"15:306:22111":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"22:4659:3804":{"crate_id":22,"path":["linux_raw_sys","general","stat"],"kind":"struct"},"2:45846:7555":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:9280:7798":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:40531:7435":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:6608:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12583:5579":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:14327:5816":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:11215:30252":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:44475:7530":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:46045:7575":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:12962:23222":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:2932:15649":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:41960:7335":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:15905:6198":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"22:4702:3810":{"crate_id":22,"path":["linux_raw_sys","general","statfs"],"kind":"struct"},"1:11223:9094":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:41022:3547":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:11725:9110":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"22:3749:8014":{"crate_id":22,"path":["linux_raw_sys","elf","Elf_Dyn"],"kind":"struct"},"17:2227:5282":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:22814:7383":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:3854:5293":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"22:3871:4880":{"crate_id":22,"path":["linux_raw_sys","general","vfs_ns_cap_data__bindgen_ty_1"],"kind":"struct"},"19:0:1301":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:7332:3848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:994:4686":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"14:220:7047":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:661:4286":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"22:4228:4972":{"crate_id":22,"path":["linux_raw_sys","general","rusage"],"kind":"struct"},"2:43915:3526":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"11:2559:8108":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:44461:7527":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:10346:7811":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"22:3842:4875":{"crate_id":22,"path":["linux_raw_sys","general","vfs_cap_data"],"kind":"struct"},"2:41410:3445":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11232:23105":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:8196:2447":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:22687:3345":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:11973:4797":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"1:5179:1310":{"crate_id":1,"path":["std","path"],"kind":"module"},"2:44670:7371":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:8222:128":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"11:1580:7069":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:40823:3526":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:13781:5698":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:10141:23078":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:8137:6519":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:6708:8803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"21:1915:21013":{"crate_id":21,"path":["rustix","ioctl","Ioctl"],"kind":"trait"},"2:8172:3152":{"crate_id":2,"path":["core","iter","sources","repeat_with","repeat_with"],"kind":"function"},"18:718:5255":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"22:3860:4878":{"crate_id":22,"path":["linux_raw_sys","general","vfs_ns_cap_data"],"kind":"struct"},"17:12524:5574":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:5224:6551":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:3302:10045":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:44604:7533":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:23007:7393":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:5265:8490":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:10368:23085":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:42226:3994":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:4337:3398":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:7192:23022":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:0:3177":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:3306:3370":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"11:881:7059":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:13349:5645":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:46170:7590":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"11:1049:7062":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:16668:6415":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"6:1657:8264":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:8257:3109":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:6462:23018":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:15876:6190":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:8151:6520":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:6713:6670":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4805:8303":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:9703:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"5:3809:4678":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"21:2315:5189":{"crate_id":21,"path":["rustix","backend","fs","inotify","CreateFlags"],"kind":"struct"},"16:4694:6536":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"21:4445:5190":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"1:8602:10377":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:12141:4799":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:15540:6118":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13205:5635":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:4925:3499":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:11985:5488":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:5588:4091":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:5477:8587":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:2724:4752":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:6462:8687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:43928:7501":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:10712:3439":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:1969:2424":{"crate_id":1,"path":["std","error"],"kind":"module"},"11:873:7058":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11319:38891":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:8296:8989":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:12095:5508":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:933:4698":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"21:5471:5190":{"crate_id":21,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"6:5325:8517":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:1239:37291":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:11241:3351":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"5:3373:7074":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:1866:4055":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:1597:8216":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"14:214:7045":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:8526:3417":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:12368:740":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:13006:5622":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:6544:8722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:10755:4787":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"16:6159:6573":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:8014:4993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:2486:6477":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"21:2951:5190":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"18:689:5248":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:16179:6291":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:6961:3532":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:10908:9098":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"22:3979:4901":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_provisioning_key_payload"],"kind":"struct"},"13:110:38863":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:8247:3522":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:12699:5588":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"22:4461:5066":{"crate_id":22,"path":["linux_raw_sys","general","termios"],"kind":"struct"},"11:1880:3370":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:10709:3437":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"22:4188:3755":{"crate_id":22,"path":["linux_raw_sys","general","timespec"],"kind":"struct"},"16:2640:6484":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:11657:3366":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"22:4156:4961":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_old_timeval"],"kind":"struct"},"21:1833:27302":{"crate_id":21,"path":["rustix","ioctl","patterns","CompileTimeOpcode"],"kind":"trait"},"22:4418:5041":{"crate_id":22,"path":["linux_raw_sys","general","statx_timestamp"],"kind":"struct"},"17:10729:5269":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:8066:23026":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:43889:7499":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:7485:4527":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"22:4539:8053":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg"],"kind":"struct"},"17:12122:5510":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:13055:5451":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:8509:3415":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:1551:8188":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13818:5711":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:7282:6765":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:7999:2439":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:2748:6489":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:12966:7342":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:7454:8891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:889:7067":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:1379:6801":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:5144:6548":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"21:1841:27304":{"crate_id":21,"path":["rustix","ioctl","patterns","ReadOpcode"],"kind":"struct"},"2:45940:7565":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11902:5483":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:15106:5952":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:7969:6884":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:44193:7514":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:7386:6774":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:4976:8397":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:46214:7592":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:5649:6559":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:11035:4101":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"16:6640:6647":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:1094:7060":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:9460:7808":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:5271:8493":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"11:798:4698":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:15760:6164":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:32414:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:6374:4775":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:42307:4521":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:15557:6120":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:8598:6955":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:21938:3345":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:2640:3428":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:6564:8738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"9:500:7133":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:3488:3423":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:5224:8475":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11457:5442":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"22:4091:4939":{"crate_id":22,"path":["linux_raw_sys","general","futex_waitv"],"kind":"struct"},"5:3097:9003":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:5379:6556":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:8382:3520":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:11509:7354":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:23273:7419":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:13706:35447":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:15:2864":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:472:5274":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:12356:1887":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"21:2920:3790":{"crate_id":21,"path":["rustix","backend","fs","types","AtFlags"],"kind":"struct"},"5:7719:3309":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:14640:5863":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:47183:7676":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:44676:9094":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"11:328:8102":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:7675:3305":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:7075:23021":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:4478:15553":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:938:4684":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:5131:5299":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"21:4001:3794":{"crate_id":21,"path":["rustix","backend","fs","types","MemfdFlags"],"kind":"struct"},"2:46555:7623":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:12306:7832":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:8331:7762":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:578:8147":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:14084:5759":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:40796:3324":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:13719:5682":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"21:1852:27305":{"crate_id":21,"path":["rustix","ioctl","patterns","WriteOpcode"],"kind":"struct"},"16:8626:6957":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:12149:5512":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:12306:5532":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"6:6765:8819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:46398:7602":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:5395:8538":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:6884:4678":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:12280:5528":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:8064:10310":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:42589:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:13570:23095":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"}},"external_crates":{"23":{"name":"bitflags","html_root_url":null},"20":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"linux_raw_sys","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"fastrand","html_root_url":null},"21":{"name":"rustix","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}