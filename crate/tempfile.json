{"root":"0:0:1850","crate_version":"3.8.0","includes_private":false,"index":{"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[547,0],"end":[650,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2214:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:164:996","0:165:2138","0:167:2193","0:169:2198"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2265:28005":{"id":"2:2265:28005","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:381-0:345:1623":{"id":"0:381-0:345:1623","crate_id":0,"name":null,"span":{"filename":"src/file/imp/mod.rs","begin":[4,8],"end":[4,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::unix","name":"unix","id":"0:345:1623","glob":true}}},"0:109:715":{"id":"0:109:715","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[129,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2260-0:134:1852":{"id":"b:2:2260-0:134:1852","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2262:2647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:156:741":{"id":"0:156:741","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[530,4],"end":[532,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[128,0],"end":[132,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9551:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:109:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[515,0],"end":[519,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:150:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2792:250-0:405:1859":{"id":"a:2:2792:250-0:405:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:427":{"id":"0:427","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,27],"end":[194,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2785:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12421:3343":{"id":"2:12421:3343","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2576-0:144:1854":{"id":"b:2:2576-0:144:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2579:132","2:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2792:250-0:112:1855":{"id":"a:2:2792:250-0:112:1855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:393:1717":{"id":"0:393:1717","crate_id":0,"name":"0","span":{"filename":"src/spooled.rs","begin":[8,13],"end":[8,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"std::io::Cursor","id":"1:7961:2491","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:6912:266","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}}}}},"b:2:2576-0:134:1852":{"id":"b:2:2576-0:134:1852","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2579:132","2:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:300-0:28:1849":{"id":"0:300-0:28:1849","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,42],"end":[187,49]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::dir::TempDir","name":"TempDir","id":"0:28:1849","glob":false}}},"0:391:2494":{"id":"0:391:2494","crate_id":0,"name":"InMemory","span":{"filename":"src/spooled.rs","begin":[8,4],"end":[8,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:393:1717"]},"discriminant":null}}},"0:309-0:262:1856":{"id":"0:309-0:262:1856","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[191,25],"end":[191,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::spooled::spooled_tempfile","name":"spooled_tempfile","id":"0:262:1856","glob":false}}},"2:12438:29491":{"id":"2:12438:29491","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12446:3786":{"id":"2:12446:3786","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43540:2777","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12444:6572":{"id":"2:12444:6572","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12076:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43524:6564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12452:29534":{"id":"2:12452:29534","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12076:447","self::pattern":"2:12121:3087"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12429:35808":{"id":"2:12429:35808","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12478:35812":{"id":"2:12478:35812","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12121:3087","str::split":"2:12469:29522","prim@char":"1:12076:447","`DoubleEndedIterator`":"2:7517:125","str::rsplit_terminator":"2:12481:35813"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43604:6700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12493:29533":{"id":"2:12493:29533","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41592:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12141:14589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12522:28139":{"id":"2:12522:28139","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12076:447","self::pattern":"2:12121:3087"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41592:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12543:30675":{"id":"2:12543:30675","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:36485":{"id":"5:5521:36485","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:280:2483":{"id":"0:280:2483","crate_id":0,"name":"seek","span":{"filename":"src/spooled.rs","begin":[197,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"1:8206:2250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:345:1623":{"id":"0:345:1623","crate_id":0,"name":"unix","span":{"filename":"src/file/imp/unix.rs","begin":[1,0],"end":[149,1]},"visibility":{"restricted":{"parent":"0:100:2261","path":"::file::imp"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":true}}},"0:112:1855":{"id":"0:112:1855","crate_id":0,"name":"TempPath","span":{"filename":"src/file/mod.rs","begin":[146,0],"end":[148,1]},"visibility":"public","docs":"A path to a named temporary file without an open file handle.\n\nThis is useful when the temporary file needs to be used by a child process,\nfor example.\n\nWhen dropped, the temporary file is deleted.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:114","a:2:2775:240-0:112:1855","a:2:8621:9334-0:112:1855","a:2:8622:9422-0:112:1855","a:2:2792:250-0:112:1855","a:2:2832:2918-0:112:1855","b:2:2260-0:112:1855","b:2:2576-0:112:1855","b:2:2570-0:112:1855","b:2:2566-0:112:1855","b:2:2263-0:112:1855","b:2:3411-0:112:1855","b:2:2581-0:112:1855","0:106","0:123","0:125","0:130","0:132","0:127"]}}},"0:121:2325":{"id":"0:121:2325","crate_id":0,"name":"keep","span":{"filename":"src/file/mod.rs","begin":[344,4],"end":[359,5]},"visibility":"public","docs":"Keep the temporary file from being deleted. This function will turn the\ntemporary file into a non-temporary file without moving it.\n\n\n# Errors\n\nOn some platforms (e.g., Windows), we need to mark the file as\nnon-temporary. This operation could fail.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet path = file.into_temp_path();\nlet path = path.keep()?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41737:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5156:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:180:2325":{"id":"0:180:2325","crate_id":0,"name":"keep","span":{"filename":"src/file/mod.rs","begin":[859,4],"end":[868,5]},"visibility":"public","docs":"Keep the temporary file from being deleted. This function will turn the\ntemporary file into a non-temporary file without moving it.\n\n\n# Errors\n\nOn some platforms (e.g., Windows), we need to mark the file as\nnon-temporary. This operation could fail.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet (file, path) = file.keep()?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41737:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"F"},{"resolved_path":{"name":"PathBuf","id":"1:5156:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}},{"type":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:36486":{"id":"5:5524:36486","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114":{"id":"0:114","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[150,0],"end":[372,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:115:2236","0:117:2308","0:119:2319","0:121:2325","0:122:1997"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:40:2219":{"id":"0:40:2219","crate_id":0,"name":"into_path","span":{"filename":"src/dir.rs","begin":[388,4],"end":[395,5]},"visibility":"public","docs":"Persist the temporary directory to disk, returning the [`PathBuf`] where it is located.\n\nThis consumes the [`TempDir`] without deleting directory on the filesystem, meaning that\nthe directory will no longer be automatically deleted.\n\n[`TempDir`]: struct.TempDir.html\n[`PathBuf`]: http://doc.rust-lang.org/std/path/struct.PathBuf.html\n\n# Examples\n\n```\nuse std::fs;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_dir = TempDir::new()?;\n\n// Persist the temporary directory to disk,\n// getting the path where it is.\nlet tmp_path = tmp_dir.into_path();\n\n// Delete the temporary directory ourselves.\nfs::remove_dir_all(tmp_path)?;\n# Ok(())\n# }\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"PathBuf","id":"1:5156:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2263-0:144:1854":{"id":"b:2:2263-0:144:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2265:28005"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2775:240-0:399:1857":{"id":"a:2:2775:240-0:399:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:265:2518":{"id":"0:265:2518","crate_id":0,"name":"is_rolled","span":{"filename":"src/spooled.rs","begin":[77,4],"end":[82,5]},"visibility":"public","docs":"Returns true if the file has been rolled over to disk.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516":{"id":"5:5516","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5517:36484","5:5518:2222","5:5521:36485","5:5524:36486","5:5532:36487","5:5533:36488","5:5534:2801","5:5535:30752","5:5536:30753"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:272:2475":{"id":"0:272:2475","crate_id":0,"name":"read_to_end","span":{"filename":"src/spooled.rs","begin":[133,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"5:6912:266","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2581-0:385:1853":{"id":"b:2:2581-0:385:1853","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2584:132","2:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:107:741":{"id":"0:107:741","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[123,4],"end":[125,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:415:715":{"id":"0:415:715","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[194,9],"end":[194,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8622:9422-0:405:1859":{"id":"a:2:8622:9422-0:405:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8622:9422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:125":{"id":"0:125","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[380,0],"end":[384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3033:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:126:630"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[500,0],"end":[505,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:143:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:278:2478":{"id":"0:278:2478","crate_id":0,"name":"flush","span":{"filename":"src/spooled.rs","begin":[188,4],"end":[193,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2570-0:112:1855":{"id":"b:2:2570-0:112:1855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:174:1099":{"id":"0:174:1099","crate_id":0,"name":"path","span":{"filename":"src/file/mod.rs","begin":[680,4],"end":[682,5]},"visibility":"public","docs":"Get the temporary file's path.\n\n# Security\n\nReferring to a temporary file's path may not be secure in all cases.\nPlease read the security section on the top level documentation of this\ntype for details.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), ::std::io::Error> {\nlet file = NamedTempFile::new()?;\n\nprintln!(\"{:?}\", file.path());\n# Ok(())\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12465:3342":{"id":"2:12465:3342","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41594:194","prim@char":"1:12076:447","self::pattern":"2:12121:3087"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41592:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12141:14589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:2193":{"id":"0:34:2193","crate_id":0,"name":"with_prefix","span":{"filename":"src/dir.rs","begin":[292,4],"end":[294,5]},"visibility":"public","docs":"Attempts to make a temporary directory with the specified prefix inside of\n`env::temp_dir()`. The directory and everything inside it will be automatically\ndeleted once the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory\nlet tmp_dir = TempDir::with_prefix(\"foo-\")?;\nlet tmp_name = tmp_dir.path().file_name().unwrap().to_str().unwrap();\nassert!(tmp_name.starts_with(\"foo-\"));\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:1986:199","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12502:35815":{"id":"2:12502:35815","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12121:3087","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12076:447","str::rmatch_indices":"2:12505:35816"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43704:6702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:423":{"id":"0:423","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,23],"end":[194,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2329:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:389:715":{"id":"0:389:715","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[106,9],"end":[106,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12487:29530":{"id":"2:12487:29530","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12076:447","str::splitn":"2:12484:29528","self::pattern":"2:12121:3087"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43676:6557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12141:14589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:226:2243":{"id":"0:226:2243","crate_id":0,"name":"write","span":{"filename":"src/file/mod.rs","begin":[1041,4],"end":[1043,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12428:28957":{"id":"2:12428:28957","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11681:14591"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12528:35824":{"id":"2:12528:35824","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12076:447","self::pattern":"2:12121:3087"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12141:14589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:2198":{"id":"0:36:2198","crate_id":0,"name":"with_prefix_in","span":{"filename":"src/dir.rs","begin":[320,4],"end":[325,5]},"visibility":"public","docs":"Attempts to make a temporary directory with the specified prefix inside\nthe specified directory. The directory and everything inside it will be\nautomatically deleted once the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory\nlet tmp_dir = TempDir::with_prefix_in(\"foo-\", \".\")?;\nlet tmp_name = tmp_dir.path().file_name().unwrap().to_str().unwrap();\nassert!(tmp_name.starts_with(\"foo-\"));\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:1986:199","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127":{"id":"0:127","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[386,0],"end":[392,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3009:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:128:252","0:129:592"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:175:2236":{"id":"0:175:2236","crate_id":0,"name":"close","span":{"filename":"src/file/mod.rs","begin":[715,4],"end":[718,5]},"visibility":"public","docs":"Close and remove the temporary file.\n\nUse this if you want to detect errors in deleting the file.\n\n# Errors\n\nIf the file cannot be deleted, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io;\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\n// By closing the `NamedTempFile` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the file will still be deleted when `file` goes out\n// of scope, but we won't know whether deleting the file\n// succeeded.\nfile.close()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:2245":{"id":"0:162:2245","crate_id":0,"name":"source","span":{"filename":"src/file/mod.rs","begin":[542,4],"end":[544,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41592:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:2628:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8621:9334-0:112:1855":{"id":"a:2:8621:9334-0:112:1855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8621:9334","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/dir.rs","begin":[465,0],"end":[469,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3033:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:48:630"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2260-0:28:1849":{"id":"b:2:2260-0:28:1849","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2262:2647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[535,0],"end":[539,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9551:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:159:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:270:2470":{"id":"0:270:2470","crate_id":0,"name":"read","span":{"filename":"src/spooled.rs","begin":[119,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:329:1847":{"id":"0:329:1847","crate_id":0,"name":"tempdir","span":{"filename":"src/lib.rs","begin":[508,4],"end":[510,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix, `prefix`. The directory and\neverything inside it will be automatically deleted once the\nreturned `TempDir` is destroyed.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::Builder;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_dir = Builder::new().tempdir()?;\n# Ok(())\n# }\n```\n\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12547:35829":{"id":"2:12547:35829","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4570:35829"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43871:6627","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1012,0],"end":[1038,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"1:3514:2251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_fmt","write_vectored","write_all_vectored","write_all","is_write_vectored","by_ref"],"trait":{"name":"Write","id":"1:3514:2251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:215:2243","0:217:2478","0:219:2479","0:221:2481","0:223:2482"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8622:9422-0:28:1849":{"id":"a:2:8622:9422-0:28:1849","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8622:9422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:185:2455":{"id":"0:185:2455","crate_id":0,"name":"into_parts","span":{"filename":"src/file/mod.rs","begin":[899,4],"end":[901,5]},"visibility":"public","docs":"Converts the named temporary file into its constituent parts.\n\nNote: When the path is dropped, the file is deleted but the file handle\nis still usable.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"generic":"F"},{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:2918-0:134:1852":{"id":"a:2:2832:2918-0:134:1852","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2832:2918","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2832:2918","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:228:2478":{"id":"0:228:2478","crate_id":0,"name":"flush","span":{"filename":"src/file/mod.rs","begin":[1045,4],"end":[1047,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:592":{"id":"0:129:592","crate_id":0,"name":"deref","span":{"filename":"src/file/mod.rs","begin":[389,4],"end":[391,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:219:2479":{"id":"0:219:2479","crate_id":0,"name":"write_vectored","span":{"filename":"src/file/mod.rs","begin":[1021,4],"end":[1025,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"io::IoSlice","id":"1:8194:2480","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[494,0],"end":[498,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:140:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:267:2525":{"id":"0:267:2525","crate_id":0,"name":"set_len","span":{"filename":"src/spooled.rs","begin":[98,4],"end":[109,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["size",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Result","id":"2:41737:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"io::Error","id":"1:2929:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[66,0],"end":[116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:264:996","0:265:2518","0:266:2521","0:267:2525","0:268:2529"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:318:996":{"id":"0:318:996","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[292,4],"end":[294,5]},"visibility":"public","docs":"Create a new `Builder`.\n\n# Examples\n\nCreate a named temporary file and write some data into it:\n\n```\n# use std::io;\n# use std::ffi::OsStr;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nuse tempfile::Builder;\n\nlet named_tempfile = Builder::new()\n    .prefix(\"my-temporary-note\")\n    .suffix(\".txt\")\n    .rand_bytes(5)\n    .tempfile()?;\n\nlet name = named_tempfile\n    .path()\n    .file_name().and_then(OsStr::to_str);\n\nif let Some(name) = name {\n    assert!(name.starts_with(\"my-temporary-note\"));\n    assert!(name.ends_with(\".txt\"));\n    assert_eq!(name.len(), \"my-temporary-note.txt\".len() + 5);\n}\n# Ok(())\n# }\n```\n\nCreate a temporary directory and add a file to it:\n\n```\n# use std::io::{self, Write};\n# use std::fs::File;\n# use std::ffi::OsStr;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nuse tempfile::Builder;\n\nlet dir = Builder::new()\n    .prefix(\"my-temporary-dir\")\n    .rand_bytes(5)\n    .tempdir()?;\n\nlet file_path = dir.path().join(\"my-temporary-note.txt\");\nlet mut file = File::create(file_path)?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\n// By closing the `TempDir` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the directory will still be deleted when `dir` goes out\n// of scope, but we won't know whether deleting the directory\n// succeeded.\ndrop(file);\ndir.close()?;\n# Ok(())\n# }\n```\n\nCreate a temporary directory with a chosen prefix under a chosen folder:\n\n```ignore\nlet dir = Builder::new()\n    .prefix(\"my-temporary-dir\")\n    .tempdir_in(\"folder-with-tempdirs\")?;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41:2236":{"id":"0:41:2236","crate_id":0,"name":"close","span":{"filename":"src/dir.rs","begin":[437,4],"end":[448,5]},"visibility":"public","docs":"Closes and removes the temporary directory, returning a `Result`.\n\nAlthough `TempDir` removes the directory on drop, in the destructor\nany errors are ignored. To detect errors cleaning up the temporary\ndirectory, call `close` instead.\n\n# Errors\n\nThis function may return a variety of [`std::io::Error`]s that result from deleting\nthe files and directories contained with the temporary directory,\nas well as from deleting the temporary directory itself. These errors\nmay be platform specific.\n\n[`std::io::Error`]: http://doc.rust-lang.org/std/io/struct.Error.html\n\n# Examples\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`.\nlet tmp_dir = TempDir::new()?;\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// By closing the `TempDir` explicitly we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the directory will still be deleted when `tmp_dir` goes out\n// of scope, but we won't know whether deleting the directory\n// succeeded.\ndrop(tmp_file);\ntmp_dir.close()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325:1850":{"id":"0:325:1850","crate_id":0,"name":"tempfile","span":{"filename":"src/lib.rs","begin":[434,4],"end":[436,5]},"visibility":"public","docs":"Create the named temporary file.\n\n# Security\n\nSee [the security][security] docs on `NamedTempFile`.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `NamedTempFile`.\n\n# Errors\n\nIf the file cannot be created, `Err` is returned.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet tempfile = Builder::new().tempfile()?;\n# Ok(())\n# }\n```\n\n[security]: struct.NamedTempFile.html#security\n[resource-leaking]: struct.NamedTempFile.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314:60":{"id":"0:314:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[203,4],"end":[210,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12448:33567":{"id":"2:12448:33567","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12447:33539"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43837:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2775:240-0:28:1849":{"id":"a:2:2775:240-0:28:1849","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2572:741":{"id":"2:2572:741","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2566-0:399:1857":{"id":"b:2:2566-0:399:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2569:2224"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2576-0:405:1859":{"id":"b:2:2576-0:405:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2579:132","2:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12525:29537":{"id":"2:12525:29537","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12076:447","self::pattern":"2:12121:3087"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41592:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12141:14589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246":{"id":"0:246","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1084,0],"end":[1089,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(any(unix, target_os = \"wasi\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRawFd","id":"1:4768:2254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:4768:2254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:248:2486"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:323:1903":{"id":"0:323:1903","crate_id":0,"name":"rand_bytes","span":{"filename":"src/lib.rs","begin":[371,4],"end":[374,5]},"visibility":"public","docs":"Set the number of random bytes.\n\nDefault: `6`.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .rand_bytes(5)\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rand",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3413:1596":{"id":"2:3413:1596","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39375:6617","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:405:1859":{"id":"b:5:680-0:405:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["5:682:3401","5:683:3402","5:684:3403"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2566-0:134:1852":{"id":"b:2:2566-0:134:1852","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2569:2224"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3411-0:405:1859":{"id":"b:2:3411-0:405:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2775:240-0:112:1855":{"id":"a:2:2775:240-0:112:1855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:276:2243":{"id":"0:276:2243","crate_id":0,"name":"write","span":{"filename":"src/spooled.rs","begin":[156,4],"end":[170,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:706":{"id":"0:147:706","crate_id":0,"name":"file","span":{"filename":"src/file/mod.rs","begin":[512,4],"end":[512,30]},"visibility":"public","docs":"The temporary file that couldn't be persisted.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}},"2:2262:2647":{"id":"2:2262:2647","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:1848":{"id":"0:26:1848","crate_id":0,"name":"tempdir_in","span":{"filename":"src/dir.rs","begin":[114,0],"end":[116,1]},"visibility":"public","docs":"Create a new temporary directory in a specific directory.\n\nThe `tempdir_in` function creates a directory in the specified directory\nand returns a [`TempDir`].\nThe directory will be automatically deleted when the `TempDir`s\ndestructor is run.\n\n# Resource Leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempdir_in;\nuse std::fs::File;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory.\nlet tmp_dir = tempdir_in(\".\")?;\n\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// `tmp_dir` goes out of scope, the directory as well as\n// `tmp_file` will be deleted here.\ndrop(tmp_file);\ntmp_dir.close()?;\n# Ok(())\n# }\n```\n\n[`TempDir`]: struct.TempDir.html\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::path::Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12499:35814":{"id":"2:12499:35814","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12121:3087","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12076:447","str::matches":"2:12496:2530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43776:6705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12141:14589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12516:35822":{"id":"2:12516:35822","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12076:447","self::pattern":"2:12121:3087"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12146:14588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[196,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["stream_len","stream_position","rewind"],"trait":{"name":"Seek","id":"1:3532:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:280:2483"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12537:35827":{"id":"2:12537:35827","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12082:131","`FromStr`":"2:12081:2749"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41737:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12081:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12081:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8622:9422-0:399:1857":{"id":"a:2:8622:9422-0:399:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8622:9422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:277:2479":{"id":"0:277:2479","crate_id":0,"name":"write_vectored","span":{"filename":"src/spooled.rs","begin":[172,4],"end":[185,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"io::IoSlice","id":"1:8194:2480","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165:2138":{"id":"0:165:2138","crate_id":0,"name":"new_in","span":{"filename":"src/file/mod.rs","begin":[620,4],"end":[622,5]},"visibility":"public","docs":"Create a new named temporary file in the specified directory.\n\nThis is equivalent to:\n\n```ignore\nBuilder::new().prefix(&prefix).tempfile()\n```\n\nSee [`NamedTempFile::new()`] for details.\n\n[`NamedTempFile::new()`]: #method.new","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:275":{"id":"0:275","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[155,0],"end":[194,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_fmt","write_vectored","write_all_vectored","write_all","is_write_vectored","by_ref"],"trait":{"name":"Write","id":"1:3514:2251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:276:2243","0:277:2479","0:278:2478"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12434:2526":{"id":"2:12434:2526","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41594:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41592:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172":{"id":"0:172","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[652,0],"end":[910,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:174:1099","0:175:2236","0:176:2308","0:178:2319","0:180:2325","0:181:2442","0:182:2444","0:183:2447","0:184:2451","0:185:2455","0:186:1996"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:159:715":{"id":"0:159:715","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[536,4],"end":[538,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330:1848":{"id":"0:330:1848","crate_id":0,"name":"tempdir_in","span":{"filename":"src/lib.rs","begin":[539,4],"end":[549,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `dir`.\nThe directory and everything inside it will be automatically\ndeleted once the returned `TempDir` is destroyed.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::Builder;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_dir = Builder::new().tempdir_in(\"./\")?;\n# Ok(())\n# }\n```\n\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12450:35811":{"id":"2:12450:35811","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43818:6706","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2579:132":{"id":"2:2579:132","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:2:2263-0:134:1852":{"id":"b:2:2263-0:134:1852","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2265:28005"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2566-0:28:1849":{"id":"b:2:2566-0:28:1849","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2569:2224"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2566-0:112:1855":{"id":"b:2:2566-0:112:1855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2569:2224"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5535:30752":{"id":"5:5535:30752","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12542:30674"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176:2308":{"id":"0:176:2308","crate_id":0,"name":"persist","span":{"filename":"src/file/mod.rs","begin":[762,4],"end":[774,5]},"visibility":"public","docs":"Persist the temporary file at the target path.\n\nIf a file exists at the target path, persist will atomically replace it.\nIf this method fails, it will return `self` in the resulting\n[`PersistError`].\n\nNote: Temporary files cannot be persisted across filesystems. Also\nneither the file contents nor the containing directory are\nsynchronized, so the update may not yet have reached the disk when\n`persist` returns.\n\n# Security\n\nThis method persists the temporary file using its path and may not be\nsecure in the in all cases. Please read the security section on the top\nlevel documentation of this type for details.\n\n# Errors\n\nIf the file cannot be moved to the new location, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\nlet mut persisted_file = file.persist(\"./saved_file.txt\")?;\nwriteln!(persisted_file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`PersistError`]: struct.PersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:41737:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12469:29522":{"id":"2:12469:29522","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12121:3087","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12076:447","str::split_whitespace":"2:12447:33539","str::rsplit":"2:12475:29526"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43554:2778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2570-0:385:1853":{"id":"b:2:2570-0:385:1853","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2263-0:112:1855":{"id":"b:2:2263-0:112:1855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2265:28005"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2260-0:385:1853":{"id":"b:2:2260-0:385:1853","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2262:2647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12505:35816":{"id":"2:12505:35816","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12121:3087","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12076:447","str::match_indices":"2:12502:35815"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43722:6703","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12141:14589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:433:657":{"id":"0:433:657","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[194,27],"end":[194,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12451:33560":{"id":"2:12451:33560","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43846:6571","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:394:2495":{"id":"0:394:2495","crate_id":0,"name":"OnDisk","span":{"filename":"src/spooled.rs","begin":[9,4],"end":[9,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:396:1717"]},"discriminant":null}}},"0:164:996":{"id":"0:164:996","crate_id":0,"name":"new","span":{"filename":"src/file/mod.rs","begin":[605,4],"end":[607,5]},"visibility":"public","docs":"Create a new named temporary file.\n\nSee [`Builder`] for more configuration.\n\n# Security\n\nThis will create a temporary file in the default temporary file\ndirectory (platform dependent). This has security implications on many\nplatforms so please read the security section of this type's\ndocumentation.\n\nReasons to use this method:\n\n  1. The file has a short lifetime and your temporary file cleaner is\n     sane (doesn't delete recently accessed files).\n\n  2. You trust every user on your system (i.e. you are the only user).\n\n  3. You have disabled your system's temporary file cleaner or verified\n     that your system doesn't have a temporary file cleaner.\n\nReasons not to use this method:\n\n  1. You'll fix it later. No you won't.\n\n  2. You don't care about the security of the temporary file. If none of\n     the \"reasons to use this method\" apply, referring to a temporary\n     file by name may allow an attacker to create/overwrite your\n     non-temporary files. There are exceptions but if you don't already\n     know them, don't use this method.\n\n# Errors\n\nIf the file can not be created, `Err` is returned.\n\n# Examples\n\nCreate a named temporary file and write some data to it:\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), ::std::io::Error> {\nlet mut file = NamedTempFile::new()?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`Builder`]: struct.Builder.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2569:2224":{"id":"2:2569:2224","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2543:137"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:128:252":{"id":"0:128:252","crate_id":0,"name":"Target","span":{"filename":"src/file/mod.rs","begin":[387,4],"end":[387,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2576-0:112:1855":{"id":"b:2:2576-0:112:1855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2579:132","2:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2570-0:399:1857":{"id":"b:2:2570-0:399:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:271:2472":{"id":"0:271:2472","crate_id":0,"name":"read_vectored","span":{"filename":"src/spooled.rs","begin":[126,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"io::IoSliceMut","id":"1:3475:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2581-0:28:1849":{"id":"b:2:2581-0:28:1849","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2584:132","2:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2832:2918-0:385:1853":{"id":"a:2:2832:2918-0:385:1853","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2832:2918","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:273:2476":{"id":"0:273:2476","crate_id":0,"name":"read_to_string","span":{"filename":"src/spooled.rs","begin":[140,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:2447":{"id":"0:183:2447","crate_id":0,"name":"into_file","span":{"filename":"src/file/mod.rs","begin":[883,4],"end":[885,5]},"visibility":"public","docs":"Convert the temporary file into a `std::fs::File`.\n\nThe inner file will be deleted.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"F"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2775:240-0:385:1853":{"id":"a:2:2775:240-0:385:1853","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[121,0],"end":[126,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:211:2477":{"id":"0:211:2477","crate_id":0,"name":"read_exact","span":{"filename":"src/file/mod.rs","begin":[1007,4],"end":[1009,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2260-0:399:1857":{"id":"b:2:2260-0:399:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2262:2647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:230:2479":{"id":"0:230:2479","crate_id":0,"name":"write_vectored","span":{"filename":"src/file/mod.rs","begin":[1049,4],"end":[1053,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"io::IoSlice","id":"1:8194:2480","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5792:1558":{"id":"5:5792:1558","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274:2477":{"id":"0:274:2477","crate_id":0,"name":"read_exact","span":{"filename":"src/spooled.rs","begin":[147,4],"end":[152,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2775:240-0:144:1854":{"id":"a:2:2775:240-0:144:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:28:1849":{"id":"0:28:1849","crate_id":0,"name":"TempDir","span":{"filename":"src/dir.rs","begin":[196,0],"end":[198,1]},"visibility":"public","docs":"A directory in the filesystem that is automatically deleted when\nit goes out of scope.\n\nThe [`TempDir`] type creates a directory on the file system that\nis deleted once it goes out of scope. At construction, the\n`TempDir` creates a new directory with a randomly generated name.\n\nThe default constructor, [`TempDir::new()`], creates directories in\nthe location returned by [`std::env::temp_dir()`], but `TempDir`\ncan be configured to manage a temporary directory in any location\nby constructing with a [`Builder`].\n\nAfter creating a `TempDir`, work with the file system by doing\nstandard [`std::fs`] file system operations on its [`Path`],\nwhich can be retrieved with [`TempDir::path()`]. Once the `TempDir`\nvalue is dropped, the directory at the path will be deleted, along\nwith any files and directories it contains. It is your responsibility\nto ensure that no further file system operations are attempted\ninside the temporary directory once it has been deleted.\n\n# Resource Leaking\n\nVarious platform-specific conditions may cause `TempDir` to fail\nto delete the underlying directory. It's important to ensure that\nhandles (like [`File`] and [`ReadDir`]) to files inside the\ndirectory are dropped before the `TempDir` goes out of scope. The\n`TempDir` destructor will silently ignore any errors in deleting\nthe directory; to instead handle errors call [`TempDir::close()`].\n\nNote that if the program exits before the `TempDir` destructor is\nrun, such as via [`std::process::exit()`], by segfaulting, or by\nreceiving a signal like `SIGINT`, then the temporary directory\nwill not be deleted.\n\n# Examples\n\nCreate a temporary directory with a generated name:\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`\nlet tmp_dir = TempDir::new()?;\n# Ok(())\n# }\n```\n\nCreate a temporary directory with a prefix in its name:\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::Builder;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`,\n// whose name will begin with 'example'.\nlet tmp_dir = Builder::new().prefix(\"example\").tempdir()?;\n# Ok(())\n# }\n```\n\n[`File`]: http://doc.rust-lang.org/std/fs/struct.File.html\n[`Path`]: http://doc.rust-lang.org/std/path/struct.Path.html\n[`ReadDir`]: http://doc.rust-lang.org/std/fs/struct.ReadDir.html\n[`Builder`]: struct.Builder.html\n[`TempDir::close()`]: struct.TempDir.html#method.close\n[`TempDir::new()`]: struct.TempDir.html#method.new\n[`TempDir::path()`]: struct.TempDir.html#method.path\n[`TempDir`]: struct.TempDir.html\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html\n[`std::fs`]: http://doc.rust-lang.org/std/fs/index.html\n[`std::process::exit()`]: http://doc.rust-lang.org/std/process/fn.exit.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:30","a:2:2775:240-0:28:1849","a:2:8621:9334-0:28:1849","a:2:8622:9422-0:28:1849","a:2:2792:250-0:28:1849","a:2:2832:2918-0:28:1849","b:2:2260-0:28:1849","b:2:2576-0:28:1849","b:2:2570-0:28:1849","b:2:2566-0:28:1849","b:2:2263-0:28:1849","b:2:3411-0:28:1849","b:2:2581-0:28:1849","0:47","0:43","0:45"]}}},"a:2:2832:2918-0:405:1859":{"id":"a:2:2832:2918-0:405:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2832:2918","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2584:132":{"id":"2:2584:132","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32033:3457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2570-0:405:1859":{"id":"b:2:2570-0:405:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:332:1987":{"id":"0:332:1987","crate_id":0,"name":"make","span":{"filename":"src/lib.rs","begin":[654,4],"end":[659,5]},"visibility":"public","docs":"Attempts to create a temporary file (or file-like object) using the\nprovided closure. The closure is passed a temporary file path and\nreturns an [`std::io::Result`]. The path provided to the closure will be\ninside of [`std::env::temp_dir()`]. Use [`Builder::make_in`] to provide\na custom temporary directory. If the closure returns one of the\nfollowing errors, then another randomized file path is tried:\n - [`std::io::ErrorKind::AlreadyExists`]\n - [`std::io::ErrorKind::AddrInUse`]\n\nThis can be helpful for taking full control over the file creation, but\nleaving the temporary file path construction up to the library. This\nalso enables creating a temporary UNIX domain socket, since it is not\npossible to bind to a socket that already exists.\n\nNote that [`Builder::append`] is ignored when using [`Builder::make`].\n\n# Security\n\nThis has the same [security implications][security] as\n[`NamedTempFile`], but with additional caveats. Specifically, it is up\nto the closure to ensure that the file does not exist and that such a\ncheck is *atomic*. Otherwise, a [time-of-check to time-of-use\nbug][TOCTOU] could be introduced.\n\nFor example, the following is **not** secure:\n\n```\n# use std::io;\n# use std::fs::File;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n// This is NOT secure!\nlet tempfile = Builder::new().make(|path| {\n    if path.is_file() {\n        return Err(io::ErrorKind::AlreadyExists.into());\n    }\n\n    // Between the check above and the usage below, an attacker could\n    // have replaced `path` with another file, which would get truncated\n    // by `File::create`.\n\n    File::create(path)\n})?;\n# Ok(())\n# }\n```\nNote that simply using [`std::fs::File::create`] alone is not correct\nbecause it does not fail if the file already exists:\n```\n# use std::io;\n# use std::fs::File;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n// This could overwrite an existing file!\nlet tempfile = Builder::new().make(|path| File::create(path))?;\n# Ok(())\n# }\n```\nFor creating regular temporary files, use [`Builder::tempfile`] instead\nto avoid these problems. This function is meant to enable more exotic\nuse-cases.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `NamedTempFile`.\n\n# Errors\n\nIf the closure returns any error besides\n[`std::io::ErrorKind::AlreadyExists`] or\n[`std::io::ErrorKind::AddrInUse`], then `Err` is returned.\n\n# Examples\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n# #[cfg(unix)]\nuse std::os::unix::net::UnixListener;\n# #[cfg(unix)]\nlet tempsock = Builder::new().make(|path| UnixListener::bind(path))?;\n# Ok(())\n# }\n```\n\n[TOCTOU]: https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use\n[security]: struct.NamedTempFile.html#security\n[resource-leaking]: struct.NamedTempFile.html#resource-leaking","links":{"`NamedTempFile`":"0:134:1852","`std::io::ErrorKind::AlreadyExists`":"1:8066:2546","`Builder::make_in`":"0:335:1991","`Builder::tempfile`":"0:325:1850","`Builder::append`":"0:324:1865","`std::fs::File::create`":"1:2234:1943","`std::io::ErrorKind::AddrInUse`":"1:8058:2547","`std::io::Result`":"1:2927:229","`Builder::make`":"0:332:1987","`std::env::temp_dir()`":"1:1838:1918"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3040:1990","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3411-0:28:1849":{"id":"b:2:3411-0:28:1849","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:188:2469":{"id":"0:188:2469","crate_id":0,"name":"reopen","span":{"filename":"src/file/mod.rs","begin":[948,4],"end":[951,5]},"visibility":"public","docs":"Securely reopen the temporary file.\n\nThis function is useful when you need multiple independent handles to\nthe same file. It's perfectly fine to drop the original `NamedTempFile`\nwhile holding on to `File`s returned by this function; the `File`s will\nremain usable. However, they may not be nameable.\n\n# Errors\n\nIf the file cannot be reopened, `Err` is returned.\n\n# Security\n\nUnlike `File::open(my_temp_file.path())`, `NamedTempFile::reopen()`\nguarantees that the re-opened file is the _same_ file, even in the\npresence of pathological temporary file cleaners.\n\n# Examples\n\n```no_run\n# use std::io;\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\nlet another_handle = file.reopen()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"File","id":"1:2214:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:2918-0:144:1854":{"id":"a:2:2832:2918-0:144:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2832:2918","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2832:2918","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:419:451":{"id":"0:419:451","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[194,16],"end":[194,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12445:6717":{"id":"2:12445:6717","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12076:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43530:6698","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12531:35825":{"id":"2:12531:35825","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12076:447","self::pattern":"2:12121:3087"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12542:30674":{"id":"2:12542:30674","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3411-0:385:1853":{"id":"b:2:3411-0:385:1853","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2263-0:28:1849":{"id":"b:2:2263-0:28:1849","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2265:28005"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:205:2472":{"id":"0:205:2472","crate_id":0,"name":"read_vectored","span":{"filename":"src/file/mod.rs","begin":[989,4],"end":[993,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"io::IoSliceMut","id":"1:3475:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:996":{"id":"0:31:996","crate_id":0,"name":"new","span":{"filename":"src/dir.rs","begin":[235,4],"end":[237,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `env::temp_dir()`.\n\nSee [`Builder`] for more configuration.\n\nThe directory and everything inside it will be automatically deleted\nonce the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`\nlet tmp_dir = TempDir::new()?;\n\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// `tmp_dir` goes out of scope, the directory as well as\n// `tmp_file` will be deleted here.\n# Ok(())\n# }\n```\n\n[`Builder`]: struct.Builder.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:186:1996":{"id":"0:186:1996","crate_id":0,"name":"from_parts","span":{"filename":"src/file/mod.rs","begin":[907,4],"end":[909,5]},"visibility":"public","docs":"Creates a `NamedTempFile` from its constituent parts.\n\nThis can be used with [`NamedTempFile::into_parts`] to reconstruct the\n`NamedTempFile`.","links":{"`NamedTempFile::into_parts`":"0:185:2455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["file",{"generic":"F"}],["path",{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8621:9334-0:399:1857":{"id":"a:2:8621:9334-0:399:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8621:9334","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:0:1850":{"id":"0:0:1850","crate_id":0,"name":"tempfile","span":{"filename":"src/lib.rs","begin":[1,0],"end":[701,1]},"visibility":"public","docs":"Temporary files and directories.\n\n- Use the [`tempfile()`] function for temporary files\n- Use the [`tempdir()`] function for temporary directories.\n\n# Design\n\nThis crate provides several approaches to creating temporary files and directories.\n[`tempfile()`] relies on the OS to remove the temporary file once the last handle is closed.\n[`TempDir`] and [`NamedTempFile`] both rely on Rust destructors for cleanup.\n\nWhen choosing between the temporary file variants, prefer `tempfile`\nunless you either need to know the file's path or to be able to persist it.\n\n## Resource Leaking\n\n`tempfile` will (almost) never fail to cleanup temporary resources. However `TempDir` and `NamedTempFile` will\nfail if their destructors don't run. This is because `tempfile` relies on the OS to cleanup the\nunderlying file, while `TempDir` and `NamedTempFile` rely on rust destructors to do so.\nDestructors may fail to run if the process exits through an unhandled signal interrupt (like `SIGINT`),\nor if the instance is declared statically (like with [`lazy_static`]), among other possible\nreasons.\n\n## Security\n\nIn the presence of pathological temporary file cleaner, relying on file paths is unsafe because\na temporary file cleaner could delete the temporary file which an attacker could then replace.\n\n`tempfile` doesn't rely on file paths so this isn't an issue. However, `NamedTempFile` does\nrely on file paths for _some_ operations. See the security documentation on\nthe `NamedTempFile` type for more information.\n\n## Early drop pitfall\n\nBecause `TempDir` and `NamedTempFile` rely on their destructors for cleanup, this can lead\nto an unexpected early removal of the directory/file, usually when working with APIs which are\ngeneric over `AsRef<Path>`. Consider the following example:\n\n```no_run\n# use tempfile::tempdir;\n# use std::io;\n# use std::process::Command;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`.\nlet temp_dir = tempdir()?;\n\n// Spawn the `touch` command inside the temporary directory and collect the exit status\n// Note that `temp_dir` is **not** moved into `current_dir`, but passed as a reference\nlet exit_status = Command::new(\"touch\").arg(\"tmp\").current_dir(&temp_dir).status()?;\nassert!(exit_status.success());\n\n# Ok(())\n# }\n```\n\nThis works because a reference to `temp_dir` is passed to `current_dir`, resulting in the\ndestructor of `temp_dir` being run after the `Command` has finished execution. Moving the\n`TempDir` into the `current_dir` call would result in the `TempDir` being converted into\nan internal representation, with the original value being dropped and the directory thus\nbeing deleted, before the command can be executed.\n\nThe `touch` command would fail with an `No such file or directory` error.\n\n## Examples\n\nCreate a temporary file and write some data into it:\n\n```\nuse tempfile::tempfile;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a file inside of `std::env::temp_dir()`.\nlet mut file = tempfile()?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\nCreate a named temporary file and open an independent file handle:\n\n```\nuse tempfile::NamedTempFile;\nuse std::io::{self, Write, Read};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet text = \"Brian was here. Briefly.\";\n\n// Create a file inside of `std::env::temp_dir()`.\nlet mut file1 = NamedTempFile::new()?;\n\n// Re-open it.\nlet mut file2 = file1.reopen()?;\n\n// Write some test data to the first handle.\nfile1.write_all(text.as_bytes())?;\n\n// Read the test data using the second handle.\nlet mut buf = String::new();\nfile2.read_to_string(&mut buf)?;\nassert_eq!(buf, text);\n# Ok(())\n# }\n```\n\nCreate a temporary directory and add a file to it:\n\n```\nuse tempfile::tempdir;\nuse std::fs::File;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`.\nlet dir = tempdir()?;\n\nlet file_path = dir.path().join(\"my-temporary-note.txt\");\nlet mut file = File::create(file_path)?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\n// By closing the `TempDir` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the directory will still be deleted when `dir` goes out\n// of scope, but we won't know whether deleting the directory\n// succeeded.\ndrop(file);\ndir.close()?;\n# Ok(())\n# }\n```\n\n[`tempfile()`]: fn.tempfile.html\n[`tempdir()`]: fn.tempdir.html\n[`TempDir`]: struct.TempDir.html\n[`NamedTempFile`]: struct.NamedTempFile.html\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html\n[`lazy_static`]: https://github.com/rust-lang-nursery/lazy-static.rs/issues/62","links":{},"attrs":["#![doc(html_logo_url =\n\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\nhtml_favicon_url = \"https://www.rust-lang.org/favicon.ico\", html_root_url =\n\"https://docs.rs/tempfile/3.1.0\")]","#![deny(rust_2018_idioms)]","#![allow(clippy :: redundant_field_names)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:298-0:25:1847","0:299-0:26:1848","0:300-0:28:1849","0:302-0:101:1850","0:303-0:102:1851","0:304-0:134:1852","0:305-0:385:1853","0:306-0:144:1854","0:307-0:112:1855","0:309-0:262:1856","0:310-0:399:1857","0:405:1859"],"is_stripped":false}}},"5:5518:2222":{"id":"5:5518:2222","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[114,0],"end":[119,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"io::Error","id":"1:2929:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:105:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5534:2801":{"id":"5:5534:2801","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169:2198":{"id":"0:169:2198","crate_id":0,"name":"with_prefix_in","span":{"filename":"src/file/mod.rs","begin":[644,4],"end":[649,5]},"visibility":"public","docs":"Create a new named temporary file with the specified filename prefix,\nin the specified directory.\n\nThis is equivalent to:\n\n```ignore\nBuilder::new().prefix(&prefix).tempfile_in(directory)\n```\n\nSee [`NamedTempFile::new()`] for details.\n\n[`NamedTempFile::new()`]: #method.new","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:1986:199","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3411-0:399:1857":{"id":"b:2:3411-0:399:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12512:35819":{"id":"2:12512:35819","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12441:35810":{"id":"2:12441:35810","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12082:1499","crate::ops::IndexMut":"2:3076:2840","str::slice_unchecked":"2:12440:35809"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:36488":{"id":"5:5533:36488","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2181","`String`":"5:7487:246"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:3873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:240":{"id":"0:240","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1070,0],"end":[1074,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["stream_len","stream_position","rewind"],"trait":{"name":"Seek","id":"1:3532:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2214:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"items":["0:241:2483"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2792:250-0:144:1854":{"id":"a:2:2792:250-0:144:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:268:2529":{"id":"0:268:2529","crate_id":0,"name":"into_inner","span":{"filename":"src/spooled.rs","begin":[113,4],"end":[115,5]},"visibility":"public","docs":"Consumes and returns the inner `SpooledData` type.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"SpooledData","id":"0:390:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:416":{"id":"0:416","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,16],"end":[194,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:419:451"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:305-0:385:1853":{"id":"0:305-0:385:1853","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,42],"end":[189,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::PathPersistError","name":"PathPersistError","id":"0:385:1853","glob":false}}},"0:266:2521":{"id":"0:266:2521","crate_id":0,"name":"roll","span":{"filename":"src/spooled.rs","begin":[86,4],"end":[96,5]},"visibility":"public","docs":"Rolls over to a file on disk, regardless of current size. Does nothing\nif already rolled over.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12515:35821":{"id":"2:12515:35821","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:2475":{"id":"0:196:2475","crate_id":0,"name":"read_to_end","span":{"filename":"src/file/mod.rs","begin":[965,4],"end":[969,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"5:6912:266","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:315":{"id":"0:315","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[213,0],"end":[701,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:318:996","0:319:1863","0:321:1864","0:323:1903","0:324:1865","0:325:1850","0:326:1851","0:329:1847","0:330:1848","0:332:1987","0:335:1991"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:241:2483":{"id":"0:241:2483","crate_id":0,"name":"seek","span":{"filename":"src/file/mod.rs","begin":[1071,4],"end":[1073,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"1:8206:2250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:245:2485":{"id":"0:245:2485","crate_id":0,"name":"as_fd","span":{"filename":"src/file/mod.rs","begin":[1078,4],"end":[1080,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"BorrowedFd","id":"1:8389:2255","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:741":{"id":"0:153:741","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[523,4],"end":[525,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Error","id":"1:2929:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:2918-0:399:1857":{"id":"a:2:2832:2918-0:399:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2832:2918","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2792:250-0:399:1857":{"id":"a:2:2792:250-0:399:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:326:1851":{"id":"0:326:1851","crate_id":0,"name":"tempfile_in","span":{"filename":"src/lib.rs","begin":[470,4],"end":[478,5]},"visibility":"public","docs":"Create the named temporary file in the specified directory.\n\n# Security\n\nSee [the security][security] docs on `NamedTempFile`.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `NamedTempFile`.\n\n# Errors\n\nIf the file cannot be created, `Err` is returned.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet tempfile = Builder::new().tempfile_in(\"./\")?;\n# Ok(())\n# }\n```\n\n[security]: struct.NamedTempFile.html#security\n[resource-leaking]: struct.NamedTempFile.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8622:9422-0:112:1855":{"id":"a:2:8622:9422-0:112:1855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8622:9422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:304-0:134:1852":{"id":"0:304-0:134:1852","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,27],"end":[189,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::NamedTempFile","name":"NamedTempFile","id":"0:134:1852","glob":false}}},"b:2:2566-0:405:1859":{"id":"b:2:2566-0:405:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2569:2224"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:194:2472":{"id":"0:194:2472","crate_id":0,"name":"read_vectored","span":{"filename":"src/file/mod.rs","begin":[959,4],"end":[963,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"io::IoSliceMut","id":"1:3475:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:335:1991":{"id":"0:335:1991","crate_id":0,"name":"make_in","span":{"filename":"src/lib.rs","begin":[683,4],"end":[700,5]},"visibility":"public","docs":"This is the same as [`Builder::make`], except `dir` is used as the base\ndirectory for the temporary file path.\n\nSee [`Builder::make`] for more details and security implications.\n\n# Examples\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n# #[cfg(unix)]\nuse std::os::unix::net::UnixListener;\n# #[cfg(unix)]\nlet tempsock = Builder::new().make_in(\"./\", |path| UnixListener::bind(path))?;\n# Ok(())\n# }\n```","links":{"`Builder::make`":"0:332:1987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3040:1990","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298-0:25:1847":{"id":"0:298-0:25:1847","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,21],"end":[187,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::dir::tempdir","name":"tempdir","id":"0:25:1847","glob":false}}},"b:2:2570-0:28:1849":{"id":"b:2:2570-0:28:1849","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:115:2236":{"id":"0:115:2236","crate_id":0,"name":"close","span":{"filename":"src/file/mod.rs","begin":[184,4],"end":[189,5]},"visibility":"public","docs":"Close and remove the temporary file.\n\nUse this if you want to detect errors in deleting the file.\n\n# Errors\n\nIf the file cannot be deleted, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io;\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\n// Close the file, but keep the path to it around.\nlet path = file.into_temp_path();\n\n// By closing the `TempPath` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly, the\n// file will still be deleted when `file` goes out of scope, but we\n// won't know whether deleting the file succeeded.\npath.close()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2263-0:399:1857":{"id":"b:2:2263-0:399:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2265:28005"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12458:29536":{"id":"2:12458:29536","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12076:447","self::pattern":"2:12121:3087"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12141:14589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:340":{"id":"0:143:340","crate_id":0,"name":"as_ref","span":{"filename":"src/file/mod.rs","begin":[502,4],"end":[504,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2581-0:134:1852":{"id":"b:2:2581-0:134:1852","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2584:132","2:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:119:2319":{"id":"0:119:2319","crate_id":0,"name":"persist_noclobber","span":{"filename":"src/file/mod.rs","begin":[293,4],"end":[311,5]},"visibility":"public","docs":"Persist the temporary file at the target path if and only if no file exists there.\n\nIf a file exists at the target path, fail. If this method fails, it will\nreturn `self` in the resulting [`PathPersistError`].\n\nNote: Temporary files cannot be persisted across filesystems. Also Note:\nThis method is not atomic. It can leave the original link to the\ntemporary file behind.\n\n# Security\n\nOnly use this method if you're positive that a temporary file cleaner\nwon't have deleted your file. Otherwise, you might end up persisting an\nattacker controlled file.\n\n# Errors\n\nIf the file cannot be moved to the new location or a file already exists\nthere, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet path = file.into_temp_path();\npath.persist_noclobber(\"./saved_file.txt\")?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:41737:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:2470":{"id":"0:203:2470","crate_id":0,"name":"read","span":{"filename":"src/file/mod.rs","begin":[985,4],"end":[987,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12514:35820":{"id":"2:12514:35820","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:385:1853":{"id":"0:385:1853","crate_id":0,"name":"PathPersistError","span":{"filename":"src/file/mod.rs","begin":[107,0],"end":[112,1]},"visibility":"public","docs":"Error returned when persisting a temporary file path fails.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:386:1844","0:387:1099"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2775:240-0:385:1853","a:2:8621:9334-0:385:1853","a:2:8622:9422-0:385:1853","a:2:2792:250-0:385:1853","a:2:2832:2918-0:385:1853","b:2:2260-0:385:1853","b:2:2576-0:385:1853","b:2:2570-0:385:1853","b:2:2566-0:385:1853","b:2:2263-0:385:1853","b:2:3411-0:385:1853","b:2:2581-0:385:1853","b:5:5790-0:385:1853","0:104","0:106","0:110","0:108","0:388"]}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[400,0],"end":[404,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:1986:199","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:232:2481":{"id":"0:232:2481","crate_id":0,"name":"write_all","span":{"filename":"src/file/mod.rs","begin":[1055,4],"end":[1057,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2775:240-0:134:1852":{"id":"a:2:2775:240-0:134:1852","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12440:35809":{"id":"2:12440:35809","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12082:1499","str::slice_mut_unchecked":"2:12441:35810","crate::ops::Index":"2:3072:2839"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8622:9422-0:385:1853":{"id":"a:2:8622:9422-0:385:1853","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8622:9422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:307-0:112:1855":{"id":"0:307-0:112:1855","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,74],"end":[189,82]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::TempPath","name":"TempPath","id":"0:112:1855","glob":false}}},"0:412":{"id":"0:412","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,9],"end":[194,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:415:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12420:867":{"id":"2:12420:867","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12076:447"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:248:2486":{"id":"0:248:2486","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/file/mod.rs","begin":[1086,4],"end":[1088,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RawFd","id":"1:4767:2256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123":{"id":"0:123","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[374,0],"end":[378,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:124:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:236":{"id":"0:236","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1064,0],"end":[1068,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Seek","id":"1:3532:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["stream_len","stream_position","rewind"],"trait":{"name":"Seek","id":"1:3532:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:238:2483"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:306-0:144:1854":{"id":"0:306-0:144:1854","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,60],"end":[189,72]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::PersistError","name":"PersistError","id":"0:144:1854","glob":false}}},"5:684:3403":{"id":"5:684:3403","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:311":{"id":"0:311","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[202,0],"end":[211,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2617:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:314:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:682:3401":{"id":"5:682:3401","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:12422:35805":{"id":"2:12422:35805","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12461:3382":{"id":"2:12461:3382","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41594:194","prim@char":"1:12076:447","self::pattern":"2:12121:3087"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41592:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:340":{"id":"0:133:340","crate_id":0,"name":"as_ref","span":{"filename":"src/file/mod.rs","begin":[401,4],"end":[403,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OsStr","id":"1:1986:199","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:243":{"id":"0:243","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1077,0],"end":[1081,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(any(unix, target_os = \"wasi\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsFd","id":"1:4849:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsFd","id":"1:4849:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:245:2485"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8622:9422-0:144:1854":{"id":"a:2:8622:9422-0:144:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"File","id":"1:2214:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8622:9422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:207:2475":{"id":"0:207:2475","crate_id":0,"name":"read_to_end","span":{"filename":"src/file/mod.rs","begin":[995,4],"end":[999,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"5:6912:266","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:390:2493":{"id":"0:390:2493","crate_id":0,"name":"SpooledData","span":{"filename":"src/spooled.rs","begin":[7,0],"end":[10,1]},"visibility":"public","docs":"A wrapper for the two states of a `SpooledTempFile`.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:391:2494","0:394:2495"],"impls":[]}}},"2:12443:29515":{"id":"2:12443:29515","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12442:29514"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5790-0:385:1853":{"id":"b:5:5790-0:385:1853","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9551:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5788:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5792:1558"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12508:35817":{"id":"2:12508:35817","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12539:30670":{"id":"2:12539:30670","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3411-0:112:1855":{"id":"b:2:3411-0:112:1855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:44:340":{"id":"0:44:340","crate_id":0,"name":"as_ref","span":{"filename":"src/dir.rs","begin":[452,4],"end":[454,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3411-0:134:1852":{"id":"b:2:3411-0:134:1852","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8621:9334-0:144:1854":{"id":"a:2:8621:9334-0:144:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"File","id":"1:2214:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8621:9334","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:2792:250-0:28:1849":{"id":"a:2:2792:250-0:28:1849","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:131:340":{"id":"0:131:340","crate_id":0,"name":"as_ref","span":{"filename":"src/file/mod.rs","begin":[395,4],"end":[397,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[394,0],"end":[398,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[528,0],"end":[533,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:156:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:215:2243":{"id":"0:215:2243","crate_id":0,"name":"write","span":{"filename":"src/file/mod.rs","begin":[1013,4],"end":[1015,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:221:2481":{"id":"0:221:2481","crate_id":0,"name":"write_all","span":{"filename":"src/file/mod.rs","begin":[1027,4],"end":[1031,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3411-0:144:1854":{"id":"b:2:3411-0:144:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2581-0:144:1854":{"id":"b:2:2581-0:144:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2584:132","2:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2576-0:399:1857":{"id":"b:2:2576-0:399:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2579:132","2:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:192:2470":{"id":"0:192:2470","crate_id":0,"name":"read","span":{"filename":"src/file/mod.rs","begin":[955,4],"end":[957,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2566-0:144:1854":{"id":"b:2:2566-0:144:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2569:2224"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:402":{"id":"0:402","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:403:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:324:1865":{"id":"0:324:1865","crate_id":0,"name":"append","span":{"filename":"src/lib.rs","begin":[397,4],"end":[400,5]},"visibility":"public","docs":"Set the file to be opened in append mode.\n\nDefault: `false`.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .append(true)\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["append",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:405:1859":{"id":"0:405:1859","crate_id":0,"name":"Builder","span":{"filename":"src/lib.rs","begin":[195,0],"end":[200,1]},"visibility":"public","docs":"Create a new temporary file or directory with custom parameters.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:315","a:2:2775:240-0:405:1859","a:2:8621:9334-0:405:1859","a:2:8622:9422-0:405:1859","a:2:2792:250-0:405:1859","a:2:2832:2918-0:405:1859","b:2:2260-0:405:1859","b:2:2576-0:405:1859","b:2:2570-0:405:1859","b:2:2566-0:405:1859","b:2:2263-0:405:1859","b:2:3411-0:405:1859","b:2:2581-0:405:1859","b:5:680-0:405:1859","0:311","0:420","0:430","0:427","0:416","0:412","0:423"]}}},"0:32:2138":{"id":"0:32:2138","crate_id":0,"name":"new_in","span":{"filename":"src/dir.rs","begin":[264,4],"end":[266,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `dir`.\nThe directory and everything inside it will be automatically\ndeleted once the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory\nlet tmp_dir = TempDir::new_in(\".\")?;\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:715":{"id":"0:124:715","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[375,4],"end":[377,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:715":{"id":"0:140:715","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[495,4],"end":[497,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[521,0],"end":[526,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"io::Error","id":"1:2929:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:153:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12449:31405":{"id":"2:12449:31405","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43808:2774","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12490:29532":{"id":"2:12490:29532","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41592:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2570-0:144:1854":{"id":"b:2:2570-0:144:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:167:2193":{"id":"0:167:2193","crate_id":0,"name":"with_prefix","span":{"filename":"src/file/mod.rs","begin":[629,4],"end":[631,5]},"visibility":"public","docs":"Create a new named temporary file with the specified filename prefix.\n\nSee [`NamedTempFile::new()`] for details.\n\n[`NamedTempFile::new()`]: #method.new","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:1986:199","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269":{"id":"0:269","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[118,0],"end":[153,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_exact","bytes","is_read_vectored","take","read_to_end","read_vectored","read_buf","chain","read_to_string","read_buf_exact","by_ref"],"trait":{"name":"Read","id":"1:3457:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:270:2470","0:271:2472","0:272:2475","0:273:2476","0:274:2477"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:217:2478":{"id":"0:217:2478","crate_id":0,"name":"flush","span":{"filename":"src/file/mod.rs","begin":[1017,4],"end":[1019,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12510:35818":{"id":"2:12510:35818","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12534:35826":{"id":"2:12534:35826","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12076:447","self::pattern":"2:12121:3087"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12141:14589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12430:339":{"id":"2:12430:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12431:338","`u8`":"1:12093:1605"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12540:30671":{"id":"2:12540:30671","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39562:30681","Self::is_ascii":"2:12539:30670"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41592:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39562:30681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12541:30673":{"id":"2:12541:30673","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160":{"id":"0:160","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[541,0],"end":[545,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["source","provide","type_id","description","cause"],"trait":{"name":"Error","id":"2:2628:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:162:2245"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/dir.rs","begin":[451,0],"end":[455,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:44:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2263-0:385:1853":{"id":"b:2:2263-0:385:1853","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2265:28005"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:200:2477":{"id":"0:200:2477","crate_id":0,"name":"read_exact","span":{"filename":"src/file/mod.rs","begin":[977,4],"end":[981,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:403:715":{"id":"0:403:715","crate_id":0,"name":"fmt","span":{"filename":"src/spooled.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2576-0:385:1853":{"id":"b:2:2576-0:385:1853","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2579:132","2:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12423:35806":{"id":"2:12423:35806","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12472:29524":{"id":"2:12472:29524","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12076:447","self::pattern":"2:12121:3087"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11937:6551","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12544:35828":{"id":"2:12544:35828","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4572:35828"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43853:6628","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:321:1864":{"id":"0:321:1864","crate_id":0,"name":"suffix","span":{"filename":"src/lib.rs","begin":[345,4],"end":[348,5]},"visibility":"public","docs":"Set a custom filename suffix.\n\nPath separators are legal but not advisable.\nDefault: empty.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .suffix(\".txt\")\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["suffix",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"S"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:1986:199","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2585:1581":{"id":"2:2585:1581","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41737:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:36484":{"id":"5:5517:36484","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:3873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2181","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:3873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:310-0:399:1857":{"id":"0:310-0:399:1857","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[191,43],"end":[191,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::spooled::SpooledTempFile","name":"SpooledTempFile","id":"0:399:1857","glob":false}}},"b:2:2260-0:405:1859":{"id":"b:2:2260-0:405:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2262:2647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2792:250-0:134:1852":{"id":"a:2:2792:250-0:134:1852","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5536:30753":{"id":"5:5536:30753","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12543:30675"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2792:250-0:385:1853":{"id":"a:2:2792:250-0:385:1853","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:117:2308":{"id":"0:117:2308","crate_id":0,"name":"persist","span":{"filename":"src/file/mod.rs","begin":[234,4],"end":[249,5]},"visibility":"public","docs":"Persist the temporary file at the target path.\n\nIf a file exists at the target path, persist will atomically replace it.\nIf this method fails, it will return `self` in the resulting\n[`PathPersistError`].\n\nNote: Temporary files cannot be persisted across filesystems. Also\nneither the file contents nor the containing directory are\nsynchronized, so the update may not yet have reached the disk when\n`persist` returns.\n\n# Security\n\nOnly use this method if you're positive that a temporary file cleaner\nwon't have deleted your file. Otherwise, you might end up persisting an\nattacker controlled file.\n\n# Errors\n\nIf the file cannot be moved to the new location, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet path = file.into_temp_path();\npath.persist(\"./saved_file.txt\")?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:41737:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:319:1863":{"id":"0:319:1863","crate_id":0,"name":"prefix","span":{"filename":"src/lib.rs","begin":[318,4],"end":[321,5]},"visibility":"public","docs":"Set a custom filename prefix.\n\nPath separators are legal but not advisable.\nDefault: `.tmp`.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .prefix(\"my-temporary-note\")\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["prefix",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"S"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:1986:199","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:2245":{"id":"0:111:2245","crate_id":0,"name":"source","span":{"filename":"src/file/mod.rs","begin":[135,4],"end":[137,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41592:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:2628:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12484:29528":{"id":"2:12484:29528","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12076:447","self::pattern":"2:12121:3087","str::rsplitn":"2:12487:29530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43658:6556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2580:1583":{"id":"2:2580:1583","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41737:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2576-0:28:1849":{"id":"b:2:2576-0:28:1849","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2579:132","2:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:234:2482":{"id":"0:234:2482","crate_id":0,"name":"write_fmt","span":{"filename":"src/file/mod.rs","begin":[1059,4],"end":[1061,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["fmt",{"resolved_path":{"name":"fmt::Arguments","id":"2:42689:74","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:36487":{"id":"5:5532:36487","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2775:240-0:405:1859":{"id":"a:2:2775:240-0:405:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12481:35813":{"id":"2:12481:35813","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12121:3087","str::split":"2:12469:29522","prim@char":"1:12076:447","str::split_terminator":"2:12478:35812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43622:6701","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12141:14589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101:1850":{"id":"0:101:1850","crate_id":0,"name":"tempfile","span":{"filename":"src/file/mod.rs","begin":[60,0],"end":[62,1]},"visibility":"public","docs":"Create a new temporary file.\n\nThe file will be created in the location returned by [`std::env::temp_dir()`].\n\n# Security\n\nThis variant is secure/reliable in the presence of a pathological temporary file cleaner.\n\n# Resource Leaking\n\nThe temporary file will be automatically removed by the OS when the last handle to it is closed.\nThis doesn't rely on Rust destructors being run, so will (almost) never fail to clean up the temporary file.\n\n# Errors\n\nIf the file can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempfile;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a file inside of `std::env::temp_dir()`.\nlet mut file = tempfile()?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2214:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2260-0:144:1854":{"id":"b:2:2260-0:144:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2262:2647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:430":{"id":"0:430","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,27],"end":[194,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2324:203","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:433:657"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12436:29490":{"id":"2:12436:29490","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[134,0],"end":[138,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","provide","type_id","description","cause"],"trait":{"name":"Error","id":"2:2628:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:111:2245"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:39:1099":{"id":"0:39:1099","crate_id":0,"name":"path","span":{"filename":"src/dir.rs","begin":[356,4],"end":[358,5]},"visibility":"public","docs":"Accesses the [`Path`] to the temporary directory.\n\n[`Path`]: http://doc.rust-lang.org/std/path/struct.Path.html\n\n# Examples\n\n```\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_path;\n\n{\n   let tmp_dir = TempDir::new()?;\n   tmp_path = tmp_dir.path().to_owned();\n\n   // Check that the temp directory actually exists.\n   assert!(tmp_path.exists());\n\n   // End of `tmp_dir` scope, directory will be deleted\n}\n\n// Temp directory should be deleted by now\nassert_eq!(tmp_path.exists(), false);\n# Ok(())\n# }\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"path::Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:2476":{"id":"0:198:2476","crate_id":0,"name":"read_to_string","span":{"filename":"src/file/mod.rs","begin":[971,4],"end":[975,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:1852":{"id":"0:134:1852","crate_id":0,"name":"NamedTempFile","span":{"filename":"src/file/mod.rs","begin":[489,0],"end":[492,1]},"visibility":"public","docs":"A named temporary file.\n\nThe default constructor, [`NamedTempFile::new()`], creates files in\nthe location returned by [`std::env::temp_dir()`], but `NamedTempFile`\ncan be configured to manage a temporary file in any location\nby constructing with [`NamedTempFile::new_in()`].\n\n# Security\n\nMost operating systems employ temporary file cleaners to delete old\ntemporary files. Unfortunately these temporary file cleaners don't always\nreliably _detect_ whether the temporary file is still being used.\n\nSpecifically, the following sequence of events can happen:\n\n1. A user creates a temporary file with `NamedTempFile::new()`.\n2. Time passes.\n3. The temporary file cleaner deletes (unlinks) the temporary file from the\n   filesystem.\n4. Some other program creates a new file to replace this deleted temporary\n   file.\n5. The user tries to re-open the temporary file (in the same program or in a\n   different program) by path. Unfortunately, they'll end up opening the\n   file created by the other program, not the original file.\n\n## Operating System Specific Concerns\n\nThe behavior of temporary files and temporary file cleaners differ by\noperating system.\n\n### Windows\n\nOn Windows, open files _can't_ be deleted. This removes most of the concerns\naround temporary file cleaners.\n\nFurthermore, temporary files are, by default, created in per-user temporary\nfile directories so only an application running as the same user would be\nable to interfere (which they could do anyways). However, an application\nrunning as the same user can still _accidentally_ re-create deleted\ntemporary files if the number of random bytes in the temporary file name is\ntoo small.\n\nSo, the only real concern on Windows is:\n\n1. Opening a named temporary file in a world-writable directory.\n2. Using the `into_temp_path()` and/or `into_parts()` APIs to close the file\n   handle without deleting the underlying file.\n3. Continuing to use the file by path.\n\n### UNIX\n\nUnlike on Windows, UNIX (and UNIX like) systems allow open files to be\n\"unlinked\" (deleted).\n\n#### MacOS\n\nLike on Windows, temporary files are created in per-user temporary file\ndirectories by default so calling `NamedTempFile::new()` should be\nrelatively safe.\n\n#### Linux\n\nUnfortunately, most _Linux_ distributions don't create per-user temporary\nfile directories. Worse, systemd's tmpfiles daemon (a common temporary file\ncleaner) will happily remove open temporary files if they haven't been\nmodified within the last 10 days.\n\n# Resource Leaking\n\nIf the program exits before the `NamedTempFile` destructor is\nrun, the temporary file will not be deleted. This can happen\nif the process exits using [`std::process::exit()`], a segfault occurs,\nreceiving an interrupt signal like `SIGINT` that is not handled, or by using\na statically declared `NamedTempFile` instance (like with [`lazy_static`]).\n\nUse the [`tempfile()`] function unless you need a named file path.\n\n[`tempfile()`]: fn.tempfile.html\n[`NamedTempFile::new()`]: #method.new\n[`NamedTempFile::new_in()`]: #method.new_in\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html\n[`std::process::exit()`]: http://doc.rust-lang.org/std/process/fn.exit.html\n[`lazy_static`]: https://github.com/rust-lang-nursery/lazy-static.rs/issues/62","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"std::fs::File","id":"1:2214:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:163","0:172","0:187","a:2:2775:240-0:134:1852","a:2:8621:9334-0:134:1852","a:2:8622:9422-0:134:1852","a:2:2792:250-0:134:1852","a:2:2832:2918-0:134:1852","b:2:2260-0:134:1852","b:2:2576-0:134:1852","b:2:2570-0:134:1852","b:2:2566-0:134:1852","b:2:2263-0:134:1852","b:2:3411-0:134:1852","b:2:2581-0:134:1852","0:138","0:141","0:154","0:246","0:225","0:202","0:243","0:190","0:240","0:236","0:213"]}}},"a:2:8621:9334-0:405:1859":{"id":"a:2:8621:9334-0:405:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8621:9334","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12519:35823":{"id":"2:12519:35823","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12076:447","self::pattern":"2:12121:3087"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12496:2530":{"id":"2:12496:2530","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12121:3087","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12076:447","str::rmatches":"2:12499:35814"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43758:6704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12432:29489":{"id":"2:12432:29489","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41594:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41592:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122:1997":{"id":"0:122:1997","crate_id":0,"name":"from_path","span":{"filename":"src/file/mod.rs","begin":[367,4],"end":[371,5]},"visibility":"public","docs":"Create a new TempPath from an existing path. This can be done even if no\nfile exists at the given path.\n\nThis is mostly useful for interacting with libraries and external\ncomponents that provide files to be consumed or expect a path with no\nexisting file to be given.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"impl_trait":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5156:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<PathBuf>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5156:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126:630":{"id":"0:126:630","crate_id":0,"name":"drop","span":{"filename":"src/file/mod.rs","begin":[381,4],"end":[383,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209:2476":{"id":"0:209:2476","crate_id":0,"name":"read_to_string","span":{"filename":"src/file/mod.rs","begin":[1001,4],"end":[1005,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:262:1856":{"id":"0:262:1856","crate_id":0,"name":"spooled_tempfile","span":{"filename":"src/spooled.rs","begin":[62,0],"end":[64,1]},"visibility":"public","docs":"Create a new spooled temporary file.\n\n# Security\n\nThis variant is secure/reliable in the presence of a pathological temporary\nfile cleaner.\n\n# Resource Leaking\n\nThe temporary file will be automatically removed by the OS when the last\nhandle to it is closed. This doesn't rely on Rust destructors being run, so\nwill (almost) never fail to clean up the temporary file.\n\n# Examples\n\n```\nuse tempfile::spooled_tempfile;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = spooled_tempfile(15);\n\nwriteln!(file, \"short line\")?;\nassert!(!file.is_rolled());\n\n// as a result of this write call, the size of the data will exceed\n// `max_size` (15), so it will be written to a temporary file on disk,\n// and the in-memory buffer will be dropped\nwriteln!(file, \"marvin gardens\")?;\nassert!(file.is_rolled());\n\n# Ok(())\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:303-0:102:1851":{"id":"0:303-0:102:1851","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,14],"end":[189,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::tempfile_in","name":"tempfile_in","id":"0:102:1851","glob":false}}},"0:30":{"id":"0:30","crate_id":0,"name":null,"span":{"filename":"src/dir.rs","begin":[200,0],"end":[449,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:31:996","0:32:2138","0:34:2193","0:36:2198","0:39:1099","0:40:2219","0:41:2236"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:184:2451":{"id":"0:184:2451","crate_id":0,"name":"into_temp_path","span":{"filename":"src/file/mod.rs","begin":[891,4],"end":[893,5]},"visibility":"public","docs":"Closes the file, leaving only the temporary file path.\n\nThis is useful when another process must be able to open the temporary\nfile.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:187":{"id":"0:187","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[912,0],"end":[952,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2214:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:188:2469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2263-0:405:1859":{"id":"b:2:2263-0:405:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2265:28005"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8621:9334-0:28:1849":{"id":"a:2:8621:9334-0:28:1849","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8621:9334","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:223:2482":{"id":"0:223:2482","crate_id":0,"name":"write_fmt","span":{"filename":"src/file/mod.rs","begin":[1033,4],"end":[1037,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["fmt",{"resolved_path":{"name":"fmt::Arguments","id":"2:42689:74","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12419":{"id":"2:12419","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12420:867","2:12421:3343","2:12422:35805","2:12423:35806","2:12425:35807","2:12428:28957","2:12429:35808","2:12430:339","2:12431:338","2:12432:29489","2:12434:2526","2:12436:29490","2:12438:29491","2:12440:35809","2:12441:35810","2:12442:29514","2:12443:29515","2:12444:6572","2:12445:6717","2:12446:3786","2:12447:33539","2:12448:33567","2:12449:31405","2:12450:35811","2:12451:33560","2:12452:29534","2:12455:29535","2:12458:29536","2:12461:3382","2:12465:3342","2:12469:29522","2:12472:29524","2:12475:29526","2:12478:35812","2:12481:35813","2:12484:29528","2:12487:29530","2:12490:29532","2:12493:29533","2:12496:2530","2:12499:35814","2:12502:35815","2:12505:35816","2:12508:35817","2:12510:35818","2:12512:35819","2:12514:35820","2:12515:35821","2:12516:35822","2:12519:35823","2:12522:28139","2:12525:29537","2:12528:35824","2:12531:35825","2:12534:35826","2:12537:35827","2:12539:30670","2:12540:30671","2:12541:30673","2:12542:30674","2:12543:30675","2:12544:35828","2:12546:9326","2:12547:35829"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8621:9334-0:385:1853":{"id":"a:2:8621:9334-0:385:1853","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8621:9334","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:388":{"id":"0:388","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[106,9],"end":[106,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:389:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:178:2319":{"id":"0:178:2319","crate_id":0,"name":"persist_noclobber","span":{"filename":"src/file/mod.rs","begin":[815,4],"end":[827,5]},"visibility":"public","docs":"Persist the temporary file at the target path if and only if no file exists there.\n\nIf a file exists at the target path, fail. If this method fails, it will\nreturn `self` in the resulting PersistError.\n\nNote: Temporary files cannot be persisted across filesystems. Also Note:\nThis method is not atomic. It can leave the original link to the\ntemporary file behind.\n\n# Security\n\nThis method persists the temporary file using its path and may not be\nsecure in the in all cases. Please read the security section on the top\nlevel documentation of this type for details.\n\n# Errors\n\nIf the file cannot be moved to the new location or a file already exists there,\n`Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\nlet mut persisted_file = file.persist_noclobber(\"./saved_file.txt\")?;\nwriteln!(persisted_file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:41737:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5790-0:144:1854":{"id":"b:5:5790-0:144:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9551:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5788:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["5:5792:1558"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:299-0:26:1848":{"id":"0:299-0:26:1848","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,30],"end":[187,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::dir::tempdir_in","name":"tempdir_in","id":"0:26:1848","glob":false}}},"b:2:2570-0:134:1852":{"id":"b:2:2570-0:134:1852","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12455:29535":{"id":"2:12455:29535","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12076:447","self::pattern":"2:12121:3087"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:420":{"id":"0:420","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,23],"end":[194,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2786:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:146:1844":{"id":"0:146:1844","crate_id":0,"name":"error","span":{"filename":"src/file/mod.rs","begin":[510,4],"end":[510,24]},"visibility":"public","docs":"The underlying IO error.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"io::Error","id":"1:2929:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:25:1847":{"id":"0:25:1847","crate_id":0,"name":"tempdir","span":{"filename":"src/dir.rs","begin":[65,0],"end":[67,1]},"visibility":"public","docs":"Create a new temporary directory.\n\nThe `tempdir` function creates a directory in the file system\nand returns a [`TempDir`].\nThe directory will be automatically deleted when the `TempDir`s\ndestructor is run.\n\n# Resource Leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempdir;\nuse std::fs::File;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`\nlet tmp_dir = tempdir()?;\n\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// `tmp_dir` goes out of scope, the directory as well as\n// `tmp_file` will be deleted here.\ndrop(tmp_file);\ntmp_dir.close()?;\n# Ok(())\n# }\n```\n\n[`TempDir`]: struct.TempDir.html\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2566-0:385:1853":{"id":"b:2:2566-0:385:1853","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2569:2224"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:48:630":{"id":"0:48:630","crate_id":0,"name":"drop","span":{"filename":"src/dir.rs","begin":[466,4],"end":[468,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:2918-0:112:1855":{"id":"a:2:2832:2918-0:112:1855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2832:2918","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2260-0:112:1855":{"id":"b:2:2260-0:112:1855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:1898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2262:2647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12447:33539":{"id":"2:12447:33539","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12448:33567"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43828:6707","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12546:9326":{"id":"2:12546:9326","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4573:9326"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43862:6514","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:302-0:101:1850":{"id":"0:302-0:101:1850","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,4],"end":[189,12]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::tempfile","name":"tempfile","id":"0:101:1850","glob":false}}},"0:190":{"id":"0:190","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[954,0],"end":[982,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:3457:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["read_exact","bytes","is_read_vectored","take","read_to_end","read_vectored","read_buf","chain","read_to_string","read_buf_exact","by_ref"],"trait":{"name":"Read","id":"1:3457:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:192:2470","0:194:2472","0:196:2475","0:198:2476","0:200:2477"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8621:9334-0:134:1852":{"id":"a:2:8621:9334-0:134:1852","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8621:9334","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8621:9334","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/dir.rs","begin":[457,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:46:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:387:1099":{"id":"0:387:1099","crate_id":0,"name":"path","span":{"filename":"src/file/mod.rs","begin":[111,4],"end":[111,22]},"visibility":"public","docs":"The temporary file path that couldn't be persisted.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"a:2:8622:9422-0:134:1852":{"id":"a:2:8622:9422-0:134:1852","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8622:9422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8622:9422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:264:996":{"id":"0:264:996","crate_id":0,"name":"new","span":{"filename":"src/spooled.rs","begin":[68,4],"end":[73,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202":{"id":"0:202","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[984,0],"end":[1010,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_exact","bytes","is_read_vectored","take","read_to_end","read_vectored","read_buf","chain","read_to_string","read_buf_exact","by_ref"],"trait":{"name":"Read","id":"1:3457:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2214:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"items":["0:203:2470","0:205:2472","0:207:2475","0:209:2476","0:211:2477"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2581-0:399:1857":{"id":"b:2:2581-0:399:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2584:132","2:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:150:715":{"id":"0:150:715","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[516,4],"end":[518,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1851":{"id":"0:102:1851","crate_id":0,"name":"tempfile_in","span":{"filename":"src/file/mod.rs","begin":[101,0],"end":[103,1]},"visibility":"public","docs":"Create a new temporary file in the specified directory.\n\n# Security\n\nThis variant is secure/reliable in the presence of a pathological temporary file cleaner.\nIf the temporary file isn't created in [`std::env::temp_dir()`] then temporary file cleaners aren't an issue.\n\n# Resource Leaking\n\nThe temporary file will be automatically removed by the OS when the last handle to it is closed.\nThis doesn't rely on Rust destructors being run, so will (almost) never fail to clean up the temporary file.\n\n# Errors\n\nIf the file can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempfile_in;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a file inside of the current working directory\nlet mut file = tempfile_in(\"./\")?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2214:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2534:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::path::Path","id":"1:5268:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:386:1844":{"id":"0:386:1844","crate_id":0,"name":"error","span":{"filename":"src/file/mod.rs","begin":[109,4],"end":[109,24]},"visibility":"public","docs":"The underlying IO error.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"io::Error","id":"1:2929:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:399:1857":{"id":"0:399:1857","crate_id":0,"name":"SpooledTempFile","span":{"filename":"src/spooled.rs","begin":[17,0],"end":[20,1]},"visibility":"public","docs":"An object that behaves like a regular temporary file, but keeps data in\nmemory until it reaches a configured size, at which point the data is\nwritten to a temporary file on disk, and further operations use the file\non disk.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:263","a:2:2775:240-0:399:1857","a:2:8621:9334-0:399:1857","a:2:8622:9422-0:399:1857","a:2:2792:250-0:399:1857","a:2:2832:2918-0:399:1857","b:2:2260-0:399:1857","b:2:2576-0:399:1857","b:2:2570-0:399:1857","b:2:2566-0:399:1857","b:2:2263-0:399:1857","b:2:3411-0:399:1857","b:2:2581-0:399:1857","0:279","0:275","0:402","0:269"]}}},"b:2:2581-0:405:1859":{"id":"b:2:2581-0:405:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2584:132","2:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:181:2442":{"id":"0:181:2442","crate_id":0,"name":"as_file","span":{"filename":"src/file/mod.rs","begin":[871,4],"end":[873,5]},"visibility":"public","docs":"Get a reference to the underlying file.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"F"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:2918-0:28:1849":{"id":"a:2:2832:2918-0:28:1849","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2832:2918","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12431:338":{"id":"2:12431:338","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12093:1605"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:144:1854":{"id":"0:144:1854","crate_id":0,"name":"PersistError","span":{"filename":"src/file/mod.rs","begin":[508,0],"end":[513,1]},"visibility":"public","docs":"Error returned when persisting a temporary file fails.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:146:1844","0:147:706"],"fields_stripped":false}},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"std::fs::File","id":"1:2214:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:2775:240-0:144:1854","a:2:8621:9334-0:144:1854","a:2:8622:9422-0:144:1854","a:2:2792:250-0:144:1854","a:2:2832:2918-0:144:1854","b:2:2260-0:144:1854","b:2:2576-0:144:1854","b:2:2570-0:144:1854","b:2:2566-0:144:1854","b:2:2263-0:144:1854","b:2:3411-0:144:1854","b:2:2581-0:144:1854","b:5:5790-0:144:1854","0:160","0:154","0:157","0:148","0:151"]}}},"0:182:2444":{"id":"0:182:2444","crate_id":0,"name":"as_file_mut","span":{"filename":"src/file/mod.rs","begin":[876,4],"end":[878,5]},"visibility":"public","docs":"Get a mutable reference to the underlying file.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"F"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12442:29514":{"id":"2:12442:29514","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12443:29515"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:396:1717":{"id":"0:396:1717","crate_id":0,"name":"0","span":{"filename":"src/spooled.rs","begin":[9,11],"end":[9,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"std::fs::File","id":"1:2214:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"5:683:3402":{"id":"5:683:3402","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:715":{"id":"0:46:715","crate_id":0,"name":"fmt","span":{"filename":"src/dir.rs","begin":[458,4],"end":[462,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12475:29526":{"id":"2:12475:29526","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12121:3087","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12076:447","str::split":"2:12469:29522"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43572:6554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12126:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12141:14589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12425:35807":{"id":"2:12425:35807","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12423:35806"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:741":{"id":"0:105:741","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[116,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PathPersistError","id":"0:385:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Error","id":"1:2929:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:225":{"id":"0:225","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1040,0],"end":[1062,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_fmt","write_vectored","write_all_vectored","write_all","is_write_vectored","by_ref"],"trait":{"name":"Write","id":"1:3514:2251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1852","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2214:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"items":["0:226:2243","0:228:2478","0:230:2479","0:232:2481","0:234:2482"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2581-0:112:1855":{"id":"b:2:2581-0:112:1855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2584:132","2:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:238:2483":{"id":"0:238:2483","crate_id":0,"name":"seek","span":{"filename":"src/file/mod.rs","begin":[1065,4],"end":[1067,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"1:8206:2250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2927:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:40844:2871":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:40397:2901":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:4772:2857":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"11:2194:7382":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"22:4951:7318":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1"],"kind":"union"},"2:32094:6611":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:25866:269":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"21:4408:4532":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"2:2930:2833":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"23:25:27970":{"crate_id":23,"path":["bitflags","iter","IterNames"],"kind":"struct"},"2:12121:3087":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"22:4577:4438":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_api"],"kind":"struct"},"6:6735:8107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:4800:416":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:21197:9444":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:5995:5673":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:43776:6705":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:21241:9445":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"22:4066:4277":{"crate_id":22,"path":["linux_raw_sys","general","fsxattr"],"kind":"struct"},"1:7920:134":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:30285:3481":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:2223:2476":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:2382:2708":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:12911:110":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"22:4751:4489":{"crate_id":22,"path":["linux_raw_sys","general","user_desc"],"kind":"struct"},"5:2962:8219":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:10815:1841":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:2924:2832":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:2942:2836":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:932:9344":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:1044:6008":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:12671:4866":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"22:4464:4418":{"crate_id":22,"path":["linux_raw_sys","general","termios2"],"kind":"struct"},"6:483:7401":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"22:3831:4220":{"crate_id":22,"path":["linux_raw_sys","general","vfs_cap_data"],"kind":"struct"},"16:5830:5800":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:2548:5699":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:40254:2883":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:4597:9401":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:8294:132":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:6156:5852":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:12092:789":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:5474:108":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:6696:5946":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:10186:4792":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:13422:5273":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:11761:4973":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"15:288:20537":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:9502:229":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:9505:133":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:7249:4052":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:580:7416":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:2644:2790":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:4985:2760":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:10561:4834":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:4417:5750":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:14173:5545":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:5325:4032":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"11:1831:4068":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:2216:2701":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:22:728":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"9:486:20432":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:6017:21443":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:4406:4088":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:10888:28485":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:2859:2817":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:39389:6619":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:4494:7680":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:5935:7985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:2321:5683":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"21:6670:14866":{"crate_id":21,"path":["rustix","ioctl","Direction"],"kind":"enum"},"22:4055:4273":{"crate_id":22,"path":["linux_raw_sys","general","inodes_stat_t"],"kind":"struct"},"16:7067:6005":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:1884:1844":{"crate_id":1,"path":["std","error"],"kind":"module"},"1:12083:1586":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:4020:6515":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:2376:2706":{"crate_id":1,"path":["std","fs","hard_link"],"kind":"function"},"6:4611:7723":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:261:4032":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:40129:2685":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:12711:5159":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:43498:6694":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:2913:2829":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:14134:5533":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:4641:5757":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:4393:2760":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"21:6650:4526":{"crate_id":21,"path":["rustix","ioctl","Opcode"],"kind":"struct"},"18:719:4600":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:7450:2681":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:45592:6744":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:9896:21524":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:10988:3430":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:9136:237":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:7367:2534":{"crate_id":2,"path":["core","iter","sources","repeat_with","repeat_with"],"kind":"function"},"11:447:148":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:4683:2855":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:1507:7435":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:0:310":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:13966:5490":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:10577:2794":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:13055:5227":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:12704:142":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:4826:2858":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:676:253":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:44054:6720":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:35:4029":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"22:3753:4209":{"crate_id":22,"path":["linux_raw_sys","general","__BindgenBitfieldUnit"],"kind":"struct"},"16:6268:36713":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:10009:4538":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:10588:4836":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:10980:4752":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:3764:5743":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:9233:8327":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:9242:4613":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:49869:9448":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:12135:4596":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:646:9328":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"22:4900:7293":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_key_specifier__bindgen_ty_1"],"kind":"union"},"2:39336:2842":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"21:374:9014":{"crate_id":21,"path":["rustix","backend","reg","ArgReg"],"kind":"struct"},"17:12007:5023":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:7128:6958":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:11433:8336":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"14:160:6251":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:6568:3275":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:2959:3401":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:0:2558":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:10870:2480":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:7478:4418":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:45863:6755":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:2461:8223":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:3212:6281":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"10:36:7384":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:30877:3322":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:7582:6094":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:11521:6879":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"21:5446:4532":{"crate_id":21,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"2:5568:2897":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:42144:87":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:2498:14657":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:6211:8231":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:6222:6895":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:2366:204":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:8134:6161":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:943:6266":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10316:4805":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:5844:7942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:14110:5529":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:8599:2746":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:44293:8317":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:9810:6547":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:1710:7558":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:3888:5746":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:13739:5437":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:2864:5712":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"23:90:6130":{"crate_id":23,"path":["bitflags","traits","Flag"],"kind":"struct"},"2:3248:139":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:2783:3847":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:12095:1603":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:11352:6897":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:12810:5172":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"11:2049:6270":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:4728:7749":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:1596:7486":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:21153:33984":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:4913:7830":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:4339:6884":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:2406:5693":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"23:11:2744":{"crate_id":23,"path":["bitflags","iter","Iter"],"kind":"struct"},"16:7694:5733":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"22:4114:4295":{"crate_id":22,"path":["linux_raw_sys","general","pollfd"],"kind":"struct"},"2:6909:2892":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:8183:2805":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:4032:6516":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:3600:5742":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:11547:4956":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:39292:217":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:32087:3647":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:11243:14585":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:3830:5745":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:6204:5859":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:12750:5164":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:9106:8323":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:6622:8093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:30479:34241":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:2865:2820":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10949:4897":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:4426:4059":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:2970:35597":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:43658:6556":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"18:113:25468":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"22:4506:4427":{"crate_id":22,"path":["linux_raw_sys","general","termio"],"kind":"struct"},"22:4399:4383":{"crate_id":22,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:44281:8314":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"24:27:4016":{"crate_id":24,"path":["fastrand","global_rng","RestoreOnDrop"],"kind":"struct"},"17:12074:5033":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"22:4161:4309":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_old_itimerval"],"kind":"struct"},"16:2933:20581":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:6824:4079":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:5866:5807":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:12465:5121":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:3198:9114":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:9184:6960":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:44527:6735":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:12724:5160":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:45660:6747":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"22:4307:7273":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_3"],"kind":"struct"},"2:44289:8316":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"23:51:8662":{"crate_id":23,"path":["bitflags","parser","AsDisplay"],"kind":"struct"},"1:12079:1110":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:43462:6693":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:11001:3450":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:5013:7875":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:47603:6837":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"11:2180:7380":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:5073:7904":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:44118:6721":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:7743:9331":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:12196:5054":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:13162:5248":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:2574:5700":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:13085:5230":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:5999:4125":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:6385:178":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:2472:5696":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"22:3876:3204":{"crate_id":22,"path":["linux_raw_sys","general","flock"],"kind":"struct"},"6:1501:7432":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:46359:6776":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:12100:1209":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:7090:6007":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"22:4378:7277":{"crate_id":22,"path":["linux_raw_sys","general","siginfo"],"kind":"struct"},"2:30301:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:6186:8086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"18:699:4594":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:22654:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"22:4586:4442":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_range"],"kind":"struct"},"17:12252:5072":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:46093:6768":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:8848:21506":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:5626:2886":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:10661:4848":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"11:1012:6272":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:12172:5050":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:7310:8194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:21404:2720":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:5459:3449":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:5156:206":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"21:5223:3243":{"crate_id":21,"path":["rustix","backend","io","types","ReadWriteFlags"],"kind":"struct"},"6:6640:3160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:7254:2865":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:11863:6568":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:9207:4612":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:46807:6798":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:14068:5518":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:4351:4087":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:501:4334":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:5001:1099":{"crate_id":1,"path":["std","path"],"kind":"module"},"16:8281:6174":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"23:101:27953":{"crate_id":23,"path":["bitflags","traits","Flags"],"kind":"trait"},"2:12146:14588":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:7403:104":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:7597:36708":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:9058:6955":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:2359:5691":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:14282:5589":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:40416:2903":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:2360:197":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:1521:7440":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"18:96:25467":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:2854:2818":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:1496:7430":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"21:5827:3233":{"crate_id":21,"path":["rustix","backend","mount","types","UnmountFlags"],"kind":"struct"},"5:207:4031":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:46883:6800":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12473:5123":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:4320:7586":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:840:2744":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:14536:5656":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:4643:7726":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:22984:182":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:4631:7725":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"11:97:7372":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:41805:198":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:4709:7741":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:10738:4858":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:42667:132":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:12598:5142":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"11:1663:150":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:7758:9332":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:41788:6277":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:7880:2716":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"11:119:4021":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:6600:21446":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"18:755:4608":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12086:5034":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:4474:7669":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10366:4807":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:11162:4915":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"14:221:6257":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:11638:6984":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"22:4960:7323":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"union"},"1:1986:199":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:7884:21453":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:2394:2712":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:41908:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:2618:5702":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:3288:2850":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:32181:3853":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:13632:5421":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:2366:2703":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:3142:97":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:12024:5025":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:4823:7790":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"21:2901:4532":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"17:12280:5082":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:45614:6745":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:7041:5999":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:41947:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:44301:8319":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:40263:2775":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:10084:4782":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:690:4593":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:4066:3134":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:7463:2682":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:11098:4910":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:13135:5246":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:6944:36709":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:7229:3348":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:40050:6514":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:9521:4749":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:3948:2760":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:4480:7672":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11281:4930":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:43704:6702":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:10135:6964":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:8909:6890":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:12081:1467":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:9762:147":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:5798:5794":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:20950:35104":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:13876:5469":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:4770:2856":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:3033:2239":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:43407:2882":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:11385:6900":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:11815:4977":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:1482:6278":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10420:4687":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:6901:5725":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:4768:2254":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:3315:5740":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:7587:4072":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:44006:6719":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:4016:3027":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:6956:4080":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:629:6353":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13024:5221":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:2178:4631":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:43442:6691":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:43938:14602":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:4002:4052":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"9:450:20433":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:10879:28491":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:3273:35067":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:22918:184":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"11:0:2554":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:2450:5695":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:14269:5583":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:3800:4068":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:22819:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:2644:5703":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:5409:3446":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:43281:6680":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:4745:4291":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:11415:6903":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:13778:5446":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:39250:215":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:45823:6753":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:11650:32996":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:44353:6732":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:822:4038":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:12093:1605":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:9010:6947":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"18:491:4560":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:14001:5499":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:4363:4059":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:14308:5598":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:39368:2844":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:47067:6802":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"21:6455:3157":{"crate_id":21,"path":["rustix","fs","xattr","XattrFlags"],"kind":"struct"},"2:42896:6677":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:42649:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:1473:6262":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:14056:5515":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:1102:36571":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:12922:4111":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"21:3326:4532":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"17:12136:5041":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:10012:4752":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:4774:5760":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"22:4145:4306":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_old_timeval"],"kind":"struct"},"21:6250:4532":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"2:22720:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"22:4407:4386":{"crate_id":22,"path":["linux_raw_sys","general","statx_timestamp"],"kind":"struct"},"2:22214:8232":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:6098:2760":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:7293:4338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:7488:2878":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:7555:4623":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:41830:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:7512:6380":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:22343:33607":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:8181:5736":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:44273:8312":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:7479:159":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:5508:2760":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:2214:133":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:14100:5526":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"22:4936:7313":{"crate_id":22,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1"],"kind":"union"},"2:12081:2749":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:2582:4101":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:43104:8311":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:9617:36718":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"21:5012:3036":{"crate_id":21,"path":["rustix","backend","io","errno","Errno"],"kind":"struct"},"2:10528:6553":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:6041:21444":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:43862:6514":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:13981:5492":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"18:481:4559":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:13228:5255":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:3429:2760":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:3183:36578":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"23:180:27975":{"crate_id":23,"path":["bitflags","parser","ParseErrorKind"],"kind":"enum"},"5:1514:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:39148:2849":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:9559:3625":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:7503:5729":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:39969:6620":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:6687:5945":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"11:1027:20512":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:7520:8195":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:3274:2798":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12123:5040":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:2534:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:4815:7786":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:3763:6880":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:1718:7562":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:10788:21611":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:4164:2760":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"21:2283:4532":{"crate_id":21,"path":["rustix","backend","fs","inotify","_","InternalBitFlags"],"kind":"struct"},"2:48024:6854":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:9046:81":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:1781:3410":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:7953:2789":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:7907:2715":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:3195:9090":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"22:4007:4252":{"crate_id":22,"path":["linux_raw_sys","general","file_clone_range"],"kind":"struct"},"2:7517:125":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:12452:5119":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:6531:5917":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:2844:2816":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"18:614:36725":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:3313:2794":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:5782:4386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:4745:5759":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"11:1121:6276":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:0:528":{"crate_id":2,"path":["core"],"kind":"module"},"1:5808:3270":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:6883:8186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:22753:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:13710:5429":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:42886:2740":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:13611:5416":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:5905:5809":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:12791:6578":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:1067:6272":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:10227:4798":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:43676:6557":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:13259:5261":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:7320:3348":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:32069:6609":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:44297:8318":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:4523:7696":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:12496:5127":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:2875:2822":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"22:4568:4436":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_5"],"kind":"struct"},"22:4352:4372":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"6:5833:7934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:47986:6852":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:10828:6976":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:7475:138":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:3330:4068":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:12154:5049":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:6742:5958":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:48063:6855":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:1011:4032":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"11:2060:6272":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:12087:689":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13215:5254":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:4053:5748":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:2918:2831":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:2696:5705":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:5653:223":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"22:4674:4474":{"crate_id":22,"path":["linux_raw_sys","general","__old_kernel_stat"],"kind":"struct"},"2:22372:8235":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:7436:5826":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:7162:32975":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:9312:3425":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:13286:5264":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:0:2559":{"crate_id":17,"path":["object"],"kind":"module"},"1:11223:8321":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"21:4170:3153":{"crate_id":21,"path":["rustix","backend","fs","types","SealFlags"],"kind":"struct"},"2:43818:6706":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:8794:21504":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:2257:100":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"18:538:4568":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:4731:9383":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:10574:2798":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:40596:2906":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:43871:6627":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:3565:4638":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:8621:9334":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:10197:4794":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:3022:2779":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:43341:6682":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:41507:33589":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:10009:4101":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"21:5052:4532":{"crate_id":21,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"2:10490:6552":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:11034:3456":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:2035:2491":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:6856:8180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:6454:2866":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:42612:113":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:40456:2890":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:14024:5504":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:13010:5218":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"18:564:4570":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:43989:6718":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:43622:6701":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:40432:2904":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"11:2168:7378":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:588:7421":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:2339:5685":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:10024:4106":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"11:1845:6282":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:1076:6276":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:2947:2837":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:8072:6153":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:4557:5754":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:8311:6882":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"14:0:2556":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:10575:4835":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:11991:5019":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:149:4019":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:39562:30681":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:6027:2909":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:2840:3852":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:10370:4808":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"9:426:20435":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:14448:5638":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:43853:6628":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:5056:7900":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:2049:6359":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:11381:4943":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:11573:4957":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:11016:28494":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:11316:4935":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:9146:155":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:3735:6359":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:20937:34995":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:7621:21451":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:7570:2877":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:4067:14561":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:1671:1149":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:10165:21542":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:6571:3276":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:41796:3348":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:1760:6382":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:261:4617":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:358:6862":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"12:0:2555":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:2832:5711":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11000:4900":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:1585:6283":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4922:7836":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:8953:21509":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:7265:3168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:5667:6889":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"11:986:6270":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:6703:8097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:4719:5758":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"18:599:36726":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:11561:6880":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:5743:5791":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:6261:5889":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:2190:1840":{"crate_id":1,"path":["std","fs"],"kind":"module"},"6:4296:7569":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:5596:3451":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:40796:6530":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:4943:9409":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"22:4361:4376":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_6"],"kind":"struct"},"5:6584:3348":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:4462:5751":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:8941:9426":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:12077:1621":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:47811:6841":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:6082:8047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:10285:3459":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:6171:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:6243:5879":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:1288:6270":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:40006:6624":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:12074:398":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:9233:33495":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:7024:2862":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:2546:260":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:895:2744":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"22:4106:4291":{"crate_id":22,"path":["linux_raw_sys","general","inotify_event"],"kind":"struct"},"2:11202:6561":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:13723:5434":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:12089:791":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:10698:4854":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4379:7628":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:1691:7552":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"22:3928:4242":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_key"],"kind":"struct"},"1:7566:6987":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:778:98":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:41423:8302":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:9141:238":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"22:3887:4233":{"crate_id":22,"path":["linux_raw_sys","general","flock64"],"kind":"struct"},"2:40124:103":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"21:3895:134":{"crate_id":21,"path":["rustix","backend","fs","types","FileType"],"kind":"enum"},"17:11639:4639":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:12621:5147":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:4806:5761":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"21:2454:4533":{"crate_id":21,"path":["rustix","backend","fs","inotify","WatchFlags"],"kind":"struct"},"2:47415:6835":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"21:2500:4532":{"crate_id":21,"path":["rustix","backend","fs","inotify","_","InternalBitFlags"],"kind":"struct"},"2:20909:3322":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"22:4603:4444":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_copy"],"kind":"struct"},"1:11358:3460":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:7579:8207":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:10929:4896":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"5:1442:3348":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:4889:5764":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:3254:2845":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:46139:6769":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:12531:5131":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:10478:4826":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:1817:3420":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:949:6268":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"21:1772:4529":{"crate_id":21,"path":["rustix","ioctl","patterns","Setter"],"kind":"struct"},"11:817:6266":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"13:0:2550":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:4846:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:5049:5769":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:11788:4974":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:3358:2784":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:12698:5157":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:14346:5608":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:46729:6797":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"22:4272:4349":{"crate_id":22,"path":["linux_raw_sys","general","sigaction"],"kind":"struct"},"2:43554:2778":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:41668:3348":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:4406:7639":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:2879:2826":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:13554:5379":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:40110:6635":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:6174:4111":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:41360:6536":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:30245:2221":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:39963:6514":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:40586:2776":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:10201:2720":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:8367:3160":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:6205:2888":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:40042:6627":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:6672:236":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:7513:6091":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"22:4037:4264":{"crate_id":22,"path":["linux_raw_sys","general","file_dedupe_range"],"kind":"struct"},"2:12192:14596":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:2409:1842":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:9660:36716":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:4022:3026":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:7651:6098":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:2766:5708":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"22:3968:4246":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_provisioning_key_payload"],"kind":"struct"},"2:40355:2899":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:22254:6589":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:8957:9425":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:10601:6555":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:5905:7962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:42849:6667":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:46045:6767":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:4792:7778":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:21851:3883":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:8257:2774":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:44328:126":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:9238:8567":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"11:1818:2744":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:6386:5901":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:6624:3280":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:11951:5008":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:4385:7630":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:8623:6544":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"21:6225:4553":{"crate_id":21,"path":["rustix","backend","mount","types","InternalMountFlags"],"kind":"struct"},"1:7796:6609":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"11:1611:4027":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:43828:6707":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:47876:6844":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:6583:5921":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"22:4875:26489":{"crate_id":22,"path":["linux_raw_sys","general","membarrier_cmd_flag"],"kind":"enum"},"1:12096:1604":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:41652:2744":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:14118:5530":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:8659:21488":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:9762:36717":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13575:5387":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:7567:8205":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:2837:109":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"5:7269:36574":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:11681:14591":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:641:6868":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:1591:7484":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:46647:6796":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"11:749:4052":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:955:6269":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:6465:4052":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:10850:134":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:7624:8216":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:8115:6158":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:5727:5789":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:10726:4857":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:7792:21452":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:6098:4120":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:3217:36577":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:5528:3450":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:21141:9439":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:14469:5644":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:589:9325":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:11886:6569":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:44081:6574":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:46312:6775":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:47922:6848":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:6415:5904":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:4949:5766":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"11:365:4025":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:4433:7653":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"22:4480:4421":{"crate_id":22,"path":["linux_raw_sys","general","ktermios"],"kind":"struct"},"6:4968:7861":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:9071:6958":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"13:226:7371":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"24:143:3836":{"crate_id":24,"path":["fastrand","Rng"],"kind":"struct"},"1:5110:6888":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:3655:4651":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:7492:6088":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:1302:6276":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:42183:94":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:3232:4635":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"23:126:27952":{"crate_id":23,"path":["bitflags","traits","Bits"],"kind":"trait"},"2:47907:6847":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:4070:3308":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"21:461:3126":{"crate_id":21,"path":["rustix","backend","fs","dir","Dir"],"kind":"struct"},"22:4544:4431":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"17:11327:4936":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:2894:4119":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:11710:4933":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:14378:5623":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:3457:2248":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:3581:2744":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:4259:6883":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:5781:3269":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:6663:4032":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"21:1801:25496":{"crate_id":21,"path":["rustix","ioctl","patterns","ReadOpcode"],"kind":"struct"},"17:10494:4828":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:21510:9432":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:9867:4762":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:12830:5173":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:32073:6060":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:11295:4931":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:8244:2777":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:863:3348":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:8146:2719":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"22:3849:4223":{"crate_id":22,"path":["linux_raw_sys","general","vfs_ns_cap_data"],"kind":"struct"},"16:6467:5908":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:5017:5768":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:7054:6002":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"22:4369:4379":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_7"],"kind":"struct"},"2:9521:136":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:13826:5452":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:7360:36712":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:12267:5078":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:47896:6846":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:46023:6766":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"11:836:6268":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:21103:2720":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"22:3742:7251":{"crate_id":22,"path":["linux_raw_sys","elf","Elf_Dyn_Union"],"kind":"union"},"17:14221:5582":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:46853:6799":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:10383:4809":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"11:1538:6280":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"22:4778:4498":{"crate_id":22,"path":["linux_raw_sys","general","kernel_sigaction"],"kind":"struct"},"2:47933:6849":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:21105:9437":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:2384:2709":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:14033:5507":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"11:2186:36691":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:39210:216":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4573:7721":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:10786:6974":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:6790:8144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:44565:6740":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4309:7578":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:21155:14800":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"5:3594:6277":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:41869:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:9985:4776":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:8833:3453":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:13667:5422":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:6456:5907":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:5760:21442":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:6795:4066":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:22786:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:4:1073":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"5:1273:6272":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:46571:6794":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:9650:4752":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:515:4558":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:918:6259":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"8:0:1998":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:256:4616":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:7677:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:45993:6765":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:6839:9429":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:2504:5697":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:11242:2726":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:3315:2795":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"21:5656:4532":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"5:7237:6374":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"11:1858:6284":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:44548:173":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:12076:447":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:4721:7748":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"3:0:472":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:4978:7862":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:9972:4774":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:7287:8192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:46261:6774":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:2929:132":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:43960:6710":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:9945:4772":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:9517:3126":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:45947:6758":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:42358:3624":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"9:0:2552":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"22:3822:4216":{"crate_id":22,"path":["linux_raw_sys","general","__user_cap_data_struct"],"kind":"struct"},"17:11687:21515":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:2969:20582":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"11:332:4023":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"23:175:4203":{"crate_id":23,"path":["bitflags","parser","ParseError"],"kind":"struct"},"22:4916:7299":{"crate_id":22,"path":["linux_raw_sys","general","__sifields"],"kind":"union"},"1:8237:2776":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:11169:6560":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:4548:7708":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"0:0:1850":{"crate_id":0,"path":["tempfile"],"kind":"module"},"22:4255:4338":{"crate_id":22,"path":["linux_raw_sys","general","clone_args"],"kind":"struct"},"17:10628:4842":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:13914:5477":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:4373:4312":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:10750:4859":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:7476:4064":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:7708:5734":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4775:7767":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:21360:9431":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"22:4648:3160":{"crate_id":22,"path":["linux_raw_sys","general","stat"],"kind":"struct"},"6:4884:1059":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:11023:4901":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:1922:3892":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:41643:3347":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:41986:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"9:237:2740":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:13546:5376":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:1912:16494":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"21:1085:2705":{"crate_id":21,"path":["rustix","fs","abs","rename"],"kind":"function"},"6:574:4313":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:6030:8032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:11872:4989":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:12208:5055":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:14145:5537":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:8097:6156":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:42344:3616":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:3409:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:2744:5707":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:8263:6920":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:44305:8320":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:2254:99":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:12225:5063":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:10646:4844":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:43524:6564":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"21:1875:19449":{"crate_id":21,"path":["rustix","ioctl","Ioctl"],"kind":"trait"},"17:8978:21510":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:3514:2251":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:4943:7851":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:6059:8041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:12645:5148":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"22:4217:4317":{"crate_id":22,"path":["linux_raw_sys","general","rusage"],"kind":"struct"},"2:11826:6565":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"22:3805:4213":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_fsid_t"],"kind":"struct"},"6:4900:7820":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:2537:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:7284:6657":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:1924:3655":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:1840:3425":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:43108:6548":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:11742:4970":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:596:7426":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:10377:29186":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:9277:4614":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:1075:4624":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:1639:7520":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:8731:6545":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:2883:2824":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:45568:6743":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:3233:2843":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:3475:2474":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:6686:4487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4829:7791":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:10714:4856":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:7776:3429":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"21:1924:25501":{"crate_id":21,"path":["rustix","path","arg","Arg"],"kind":"trait"},"2:41394:9367":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:13676:5426":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:10359:2744":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:2887:2823":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"22:3787:4208":{"crate_id":22,"path":["linux_raw_sys","general","__IncompleteArrayField"],"kind":"struct"},"2:41543:6882":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4461:7664":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:13244:5257":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:3539:2769":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:1734:7283":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"21:1735:4524":{"crate_id":21,"path":["rustix","ioctl","patterns","NoArg"],"kind":"struct"},"2:9563:3622":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:5363:5773":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:1464:6261":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:7011:8668":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:11092:4138":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:12983:5216":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:43452:6692":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:2219:2470":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:4167:6518":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:44277:8313":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:4208:9381":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"22:4640:4450":{"crate_id":22,"path":["linux_raw_sys","general","linux_dirent64"],"kind":"struct"},"17:12970:5214":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:9051:21489":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:42025:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"7:31:20419":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:46215:6772":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"18:707:4596":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"22:4631:4448":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_continue"],"kind":"struct"},"1:4187:9379":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:1632:7516":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:5816:5799":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7782:6103":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:12042:8569":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:8713:21502":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:9102:4609":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:32033:3457":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:10962:4898":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:6332:5715":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:6002:8019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:5752:3123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:654:4314":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:39226:213":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:9165:2726":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:4862:5763":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:5878:7955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"21:4369:3132":{"crate_id":21,"path":["rustix","backend","fs","types","StatxFlags"],"kind":"struct"},"2:2835:3850":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:12099:1661":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:10036:4779":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"21:6480:4532":{"crate_id":21,"path":["rustix","fs","xattr","_","InternalBitFlags"],"kind":"struct"},"22:3898:4234":{"crate_id":22,"path":["linux_raw_sys","general","open_how"],"kind":"struct"},"17:12778:5168":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:3865:6881":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:527:7404":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:7792:3430":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"21:2251:2701":{"crate_id":21,"path":["rustix","backend","fs","dir","DirEntry"],"kind":"struct"},"2:20922:34995":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:7474:6080":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:41710:6659":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:40294:2893":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:44153:6726":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:11124:4912":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:8036:6915":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"22:3915:4238":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_policy_v1"],"kind":"struct"},"2:4821:34599":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:483:4113":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:5939:5668":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"22:4614:4445":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_zeropage"],"kind":"struct"},"16:7828:6111":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:4992:9414":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:3698:9368":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"21:3725:4532":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"2:23017:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:11860:4146":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:11335:4140":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"22:4314:4361":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_4"],"kind":"struct"},"5:7328:3348":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:12737:5162":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:7606:4131":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:1184:4626":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:11189:3454":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:8205:21454":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:7532:8197":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:40234:2882":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"22:4239:4334":{"crate_id":22,"path":["linux_raw_sys","general","rlimit"],"kind":"struct"},"22:4342:4369":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"2:42865:6670":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:6494:3279":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:10672:4849":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:276:2181":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:2907:5714":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:8329:6926":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:40065:14652":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:13202:5253":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:11048:4903":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13758:5438":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"18:0:2560":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:11971:5018":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:20952:35102":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:6915:5726":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:4497:9383":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:46390:6777":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:2782:1898":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:12945:5211":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:12080:336":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:8154:6162":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:21288:14800":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:11203:3455":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"11:657:3348":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:2927:229":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:4462:3649":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:2628:132":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"22:4560:4435":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_4"],"kind":"struct"},"2:1471:2116":{"crate_id":2,"path":["core","mem"],"kind":"module"},"6:5085:7909":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:1411:2744":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:10685:4852":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"11:1501:20513":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:5788:254":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:4157:32980":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:1557:2744":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:10383:6277":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:11617:4960":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:1751:8229":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:1650:7528":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:622:3656":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:14296:5595":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:504:4622":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:14083:5522":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"7:78:20426":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:43332:6681":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:4663:4467":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:4690:7729":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:9051:6954":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:9564:4750":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:1895:3654":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:47665:6838":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:1764:654":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:10397:4810":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:45744:6750":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:4435:3304":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"22:4331:4365":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:21426:6580":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:1838:1918":{"crate_id":1,"path":["std","env","temp_dir"],"kind":"function"},"1:364:6863":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:5079:6888":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:2305:20580":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:1931:700":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:2881:5713":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:14163:5540":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:10265:4800":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:5079:7906":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"18:727:4603":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"21:6427:2250":{"crate_id":21,"path":["rustix","fs","seek_from","SeekFrom"],"kind":"enum"},"17:9455:36720":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"22:3796:4211":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_fd_set"],"kind":"struct"},"1:1568:4068":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"18:609:4578":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:47971:6851":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:1579:6282":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:7501:6379":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:2810:5710":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6485:5718":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:40375:2900":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"22:4325:7274":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5"],"kind":"struct"},"17:14460:5640":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:4892:7815":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:3178:6282":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:45882:6756":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:40332:6638":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:22145:6582":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"21:3281:3035":{"crate_id":21,"path":["rustix","backend","fs","types","OFlags"],"kind":"struct"},"1:9131:179":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:3518:4052":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:22281:6590":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:9752:4754":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:2722:5706":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:6893:5979":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:8926:21508":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:3232:5682":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"22:4123:4297":{"crate_id":22,"path":["linux_raw_sys","general","rand_pool_info"],"kind":"struct"},"2:3072:2839":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:5049:7897":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:2150:21569":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:1103:6275":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:13906:5475":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:6037:8033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:1492:6259":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:12765:5167":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:14126:5532":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:1737:14810":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:7601:8212":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:5915:7969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:11448:21513":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:9998:4729":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:7442:2879":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:4400:7636":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:5970:8006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:2131:4049":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:12043:5029":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:40610:2907":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:40384:2887":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:4585:5755":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:1576:7472":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"14:202:4203":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12062:5030":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:5121:5771":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:39109:2852":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:6511:4032":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:3125:2806":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"9:357:20448":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:6401:5717":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:10771:4861":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:4786:7775":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"11:1826:4052":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"22:3841:4222":{"crate_id":22,"path":["linux_raw_sys","general","vfs_cap_data__bindgen_ty_1"],"kind":"struct"},"22:4017:4257":{"crate_id":22,"path":["linux_raw_sys","general","fstrim_range"],"kind":"struct"},"6:1604:7491":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:548:4295":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:8389:2255":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:6425:5905":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:1564:4052":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:1573:6281":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11845:4981":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:2324:203":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"22:4299:7268":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_2"],"kind":"struct"},"2:42904:6678":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:7614:4234":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:5774:3268":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:39314:219":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:4847:849":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:5790:7916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"11:1852:6283":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:3797:5744":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:6613:4233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:5942:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:44577:6286":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:2788:5709":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:2497:2720":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:6190:4124":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:884:6262":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:11215:28492":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:489:4311":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:4700:7736":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:62:15132":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:42624:6130":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:6151:8061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:1674:7545":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:569:7296":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"21:3999:4532":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"17:12237:5066":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:39270:218":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:22266:33517":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:878:4040":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:45762:6751":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"10:44:6287":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:9051:88":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:14514:5650":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:8928:6946":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:2540:156":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:45900:6757":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:9852:21523":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"5:685:114":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:7715:4136":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:42064:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:7897:2718":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:4078:3309":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:3325:2851":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:10408:2778":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"14:165:20518":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:40077:6630":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:45548:6742":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:21536:9441":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:12554:5134":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"22:4090:4286":{"crate_id":22,"path":["linux_raw_sys","general","robust_list"],"kind":"struct"},"1:11400:6901":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:4418:7648":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:12086:687":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:6929:5981":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"22:4247:4337":{"crate_id":22,"path":["linux_raw_sys","general","rlimit64"],"kind":"struct"},"6:1703:7555":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:8594:21490":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:4441:7655":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:21975:9434":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:6960:5984":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:46413:6778":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:2170:8218":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:1528:7443":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"22:4291:4358":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_1"],"kind":"struct"},"6:119:15186":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:907:4068":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:22289:6591":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:5963:5815":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"22:4910:7296":{"crate_id":22,"path":["linux_raw_sys","general","sigval"],"kind":"union"},"16:6968:21448":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"21:3699:3061":{"crate_id":21,"path":["rustix","backend","fs","types","RenameFlags"],"kind":"struct"},"1:9085:28484":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:41720:14861":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:4847:7800":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:11937:6551":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:2966:35598":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:4179:9378":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"22:4137:4303":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_itimerspec"],"kind":"struct"},"22:4731:4488":{"crate_id":22,"path":["linux_raw_sys","general","compat_statfs64"],"kind":"struct"},"1:5336:124":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:6849:8177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:47525:6836":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:12997:5217":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:14401:5624":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:4867:7805":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"21:2258:4531":{"crate_id":21,"path":["rustix","backend","fs","inotify","CreateFlags"],"kind":"struct"},"6:1697:4236":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"21:5422:3242":{"crate_id":21,"path":["rustix","backend","io","types","DupFlags"],"kind":"struct"},"16:5588:5719":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:11260:3158":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"21:1444:3130":{"crate_id":21,"path":["rustix","fs","raw_dir","RawDirEntry"],"kind":"struct"},"1:6924:4129":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"18:574:4561":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:43722:6703":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:4394:7635":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"21:1834:25499":{"crate_id":21,"path":["rustix","ioctl","patterns","NoneOpcode"],"kind":"struct"},"2:2329:129":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"21:4812:4532":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"17:13851:5461":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:3461:5741":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:4497:5752":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:5994:15106":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:9070:4738":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:40157:2684":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"22:3860:4225":{"crate_id":22,"path":["linux_raw_sys","general","vfs_ns_cap_data__bindgen_ty_1"],"kind":"struct"},"6:4621:7724":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11407:21512":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"14:40:5005":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"21:1823:25498":{"crate_id":21,"path":["rustix","ioctl","patterns","ReadWriteOpcode"],"kind":"struct"},"16:7534:5730":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:4287:6520":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"13:110:36699":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:11137:4913":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:5864:7944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:10292:4752":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"9:393:20434":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:1558:7463":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:6545:5919":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"15:394:20547":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:2785:248":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:10534:4832":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12543:5133":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13274:4933":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:2891:2825":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:4074:6277":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:11657:6904":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:4921:5765":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:41677:6657":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:9992:4100":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:40819:2868":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:9780:4755":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:14355:5610":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:5574:5716":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:9015:110":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:507:4317":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:44132:14603":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"11:798:6263":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:582:4623":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:10992:6337":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"22:4185:4311":{"crate_id":22,"path":["linux_raw_sys","general","timeval"],"kind":"struct"},"6:7590:8211":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6352:5897":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"18:644:4561":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"11:1822:3348":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:9805:14661":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:14013:5500":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:13838:5455":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:2543:137":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"22:4893:7292":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg__bindgen_ty_1"],"kind":"union"},"22:3868:4226":{"crate_id":22,"path":["linux_raw_sys","general","f_owner_ex"],"kind":"struct"},"6:5030:7883":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:555:4422":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:7438:2880":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:12959:5213":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:4859:4252":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:7660:6099":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:1118:35599":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:14335:5607":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:15:2243":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:6279:5892":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:3669:4032":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:10023:4753":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"18:548:147":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:12888:5199":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:30279:3480":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:10656:6557":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:14042:5508":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:9201:6961":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"11:644:6277":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:9531:36721":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:10112:4784":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:45845:6754":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13792:5449":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:12959:146":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:39978:6621":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:1537:7448":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:6865:8183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:9390:133":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:10507:4830":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:12717:158":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10447:4818":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:12422:5110":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:9488:36719":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:11306:4933":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:13101:5233":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:9933:4770":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:2550:259":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:4282:6519":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:5599:3452":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:44535:6737":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:47948:6850":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:10340:4806":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:5420:2760":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:8345:6928":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"15:0:2557":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:6346:5896":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"18:507:4561":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"11:667:6259":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:11279:155":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:6083:20554":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:7722:5724":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:22393:6604":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:853:6277":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:4934:7845":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"22:3748:7253":{"crate_id":22,"path":["linux_raw_sys","elf","Elf_auxv_t"],"kind":"struct"},"2:9546:115":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:41566:6539":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:6808:2881":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"21:4780:3154":{"crate_id":21,"path":["rustix","backend","fs","types","StatVfsMountFlags"],"kind":"struct"},"2:45722:6749":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:7259:4043":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:4934:9408":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"7:0:1651":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:8895:21507":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"18:681:4591":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:8530:2742":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:12484:5126":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"21:6054:4532":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"6:5814:7932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:44484:230":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:10451:6551":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:43837:6708":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:25:654":{"crate_id":2,"path":["core","env"],"kind":"macro"},"20:0:1998":{"crate_id":20,"path":["cfg_if"],"kind":"module"},"17:8825:21505":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:2690:8226":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:4032:4032":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:9711:36722":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:5634:5776":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:7764:6873":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:42874:151":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:11235:4927":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:4653:3026":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:40171:2686":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:6663:8096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"18:671:4590":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:43350:6684":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:4805:7783":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:6043:8036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"10:0:2553":{"crate_id":10,"path":["adler"],"kind":"module"},"5:7387:9343":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"22:4026:4259":{"crate_id":22,"path":["linux_raw_sys","general","file_dedupe_range_info"],"kind":"struct"},"1:11098:4139":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:32080:6610":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:40276:2884":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"21:4982:3150":{"crate_id":21,"path":["rustix","backend","fs","types","FlockOperation"],"kind":"enum"},"1:7689:1859":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:11215:4922":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:7006:5995":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:11173:21635":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:8839:201":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:2934:2834":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:13567:5386":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:922:6260":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:1523:6358":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:8973:9427":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:10240:4772":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:7945:6913":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:6973:34799":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:14076:5521":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:41729:208":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:7625:4133":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"22:3736:7249":{"crate_id":22,"path":["linux_raw_sys","elf","Elf_Dyn"],"kind":"struct"},"17:434:4621":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"11:1838:6281":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:9350:4618":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"18:80:25466":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"18:531:4565":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:7526:8196":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:3958:9372":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:495:3106":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:22885:183":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:11902:6570":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:40314:2895":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:3401:2804":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:20969:35101":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:5419:4739":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:40141:33577":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:44474:222":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:42689:74":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"21:3961:3128":{"crate_id":21,"path":["rustix","backend","fs","types","MemfdFlags"],"kind":"struct"},"6:4669:7728":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:5373:14578":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:21344:2720":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"16:5982:5822":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"11:2033:6008":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"3:234:229":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:9555:3616":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:1842:3426":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:1138:36569":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:4753:7756":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:4639:14646":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:10211:242":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:1682:7546":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"14:187:20525":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:7544:6093":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"21:6697:3156":{"crate_id":21,"path":["rustix","ugid","Uid"],"kind":"struct"},"17:8765:21503":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:11886:4990":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:5403:4738":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:47887:6845":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"22:4282:4354":{"crate_id":22,"path":["linux_raw_sys","general","sigaltstack"],"kind":"struct"},"2:42594:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:13890:5472":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:4853:7802":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"23:0:3097":{"crate_id":23,"path":["bitflags"],"kind":"module"},"17:9328:2777":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:2160:631":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:7299:6375":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:13693:5428":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:40058:6628":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:5973:3266":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:2960:35596":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:42640:72":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:3076:2840":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"22:3974:7261":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_remove_key_arg"],"kind":"struct"},"2:10642:6556":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"22:4528:7288":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg"],"kind":"struct"},"2:39375:6617":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:11582:6881":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:41377:6538":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:2209:4634":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:4194:2760":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:12058:28476":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"11:403:36694":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"0:405:1859":{"crate_id":0,"path":["tempfile","Builder"],"kind":"struct"},"5:4234:2744":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:7523:6092":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:5384:21440":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:10520:4831":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:6721:21447":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"22:4450:4411":{"crate_id":22,"path":["linux_raw_sys","general","termios"],"kind":"struct"},"21:5854:4532":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"6:533:7407":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"11:2130:20507":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:44492:210":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:2832:2918":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:9372:4740":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:534:4114":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:7961:2491":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:1561:3348":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"21:1751:4527":{"crate_id":21,"path":["rustix","ioctl","patterns","Getter"],"kind":"struct"},"17:9445:4748":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"22:4551:4433":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"1:4056:3136":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:1664:7539":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11111:4911":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:8227:2775":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"22:3983:7264":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_get_key_status_arg"],"kind":"struct"},"1:10810:8333":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:11393:132":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:3037:2838":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:9063:6956":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:9557:3624":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:913:6278":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:45793:6752":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"21:1090:3028":{"crate_id":21,"path":["rustix","fs","abs","unlink"],"kind":"function"},"16:6792:5971":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:3236:2797":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"18:660:4584":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:7406:28273":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"14:31:6251":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"15:327:8545":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:11910:5004":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:3994:3135":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:3238:6284":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:12790:5169":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:2991:2848":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:4960:7856":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:10440:4815":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:5660:4125":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:11074:4908":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:10547:4833":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:41737:229":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"18:636:4583":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:6499:5735":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:9912:4765":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"11:2201:2747":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:41660:6277":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:39990:33591":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:42351:3617":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:44365:14908":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:12101:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:8996:3271":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:12685:5156":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:11337:21636":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:40834:2870":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:2368:2704":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:9223:33049":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:5648:5780":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:10571:2796":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:7015:5998":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:42365:3625":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"21:4198:4532":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"2:21754:9438":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:11351:4938":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:2903:2827":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:7462:6079":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:43381:6687":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:41780:2744":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:2829:3848":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:40323:2896":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:6814:4078":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:2604:2780":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:6604:3204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:11081:4137":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"11:723:6261":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:13071:5228":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:11201:4917":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"11:1517:6279":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:13816:5451":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:0:872":{"crate_id":6,"path":["libc"],"kind":"module"},"16:8050:6152":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:43089:6679":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:13451:5293":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:7375:2747":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"22:3961:7259":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_key_specifier"],"kind":"struct"},"2:10670:6558":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:14316:5601":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:6835:8168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:3760:6879":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:9701:4753":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:3201:9115":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:3915:5747":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:10456:4821":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:6569:5723":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:4989:7868":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:10133:6965":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:12111:5039":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:6811:8158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:4210:3646":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:46169:6770":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:22230:6584":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"22:4080:4284":{"crate_id":22,"path":["linux_raw_sys","general","futex_waitv"],"kind":"struct"},"6:4769:7764":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:9607:4751":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"21:6714:3151":{"crate_id":21,"path":["rustix","ugid","Gid"],"kind":"struct"},"2:2896:2830":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:6720:8102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:8031:6914":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:40346:2898":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"21:2869:3148":{"crate_id":21,"path":["rustix","backend","fs","types","AtFlags"],"kind":"struct"},"17:14324:5602":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"21:3528:4532":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"22:3997:4247":{"crate_id":22,"path":["linux_raw_sys","general","mount_attr"],"kind":"struct"},"6:7561:8204":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:1546:7454":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:21412:9435":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:4849:2253":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"11:285:7373":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:3170:214":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:14434:5631":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:4527:5753":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:7768:5722":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"11:1048:36692":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:2669:3659":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"6:4561:7712":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:7571:4068":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:3276:2799":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:5369:14577":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:6318:5894":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:1825:181":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:6023:8031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:897:4052":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:8513:2741":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:41578:6541":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:10430:4813":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:5063:7903":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11062:4907":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:1776:4068":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:10126:4786":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:536:5671":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:2012:4627":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:6145:8060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:47273:6834":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:4877:7810":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:10214:4797":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:6879:5977":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:22198:6583":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:4667:4471":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:8363:6929":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:9823:21522":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:3234:2796":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:30315:34242":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:2871:2819":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:12075:993":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:4759:715":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:12094:1602":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:47867:6843":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:21406:9433":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:21863:34993":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:8440:2739":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:43433:6690":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"18:590:4571":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:7931:2748":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:2428:5694":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:46617:6795":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:10512:4135":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"14:7:6251":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:6226:5873":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:1257:6008":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13148:5247":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:4734:7752":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:21973:2720":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"22:4691:3167":{"crate_id":22,"path":["linux_raw_sys","general","statfs"],"kind":"struct"},"22:4129:4300":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_timespec"],"kind":"struct"},"16:4344:5749":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:6741:8108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:7220:3873":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:11473:4707":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"22:4193:4312":{"crate_id":22,"path":["linux_raw_sys","general","itimerspec"],"kind":"struct"},"2:43420:6689":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:9770:151":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:6820:8161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:7938:2876":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:40825:2804":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:8588:2745":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:4555:7710":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12098:5037":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:4519:9384":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:6633:8095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:7862:6115":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:43530:6698":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:4613:5756":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:1641:3476":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"11:311:7376":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:12766:207":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:5820:7933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:8622:9422":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:6844:5973":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:12082:1499":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:5712:5786":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"21:6420:3155":{"crate_id":21,"path":["rustix","fs","fd","Timestamps"],"kind":"struct"},"2:47849:6842":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:7769:6909":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:7694:6905":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:6325:223":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:10410:4811":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:8582:2744":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:9553:3617":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:10114:3420":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:11661:4962":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:11586:4959":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:12091:793":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:44166:6730":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:46917:6801":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:12347:115":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"22:4520:4428":{"crate_id":22,"path":["linux_raw_sys","general","iovec"],"kind":"struct"},"5:2243:8222":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:40204:2700":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"21:3930:3127":{"crate_id":21,"path":["rustix","backend","fs","types","Advice"],"kind":"enum"},"2:9926:4097":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:4501:7683":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:5851:4411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:8422:9418":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"14:215:6255":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"22:4201:4313":{"crate_id":22,"path":["linux_raw_sys","general","itimerval"],"kind":"struct"},"6:4592:7722":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:44309:8321":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:6638:3281":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:10860:123":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:7487:246":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:5135:3266":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:3032:5737":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:7269:36714":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:2596:5701":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:43975:6715":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:14522:5653":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"22:4416:3123":{"crate_id":22,"path":["linux_raw_sys","general","statx"],"kind":"struct"},"17:11719:21516":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:871:6261":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:2170:14800":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:11191:4639":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:12047:9333":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:3040:1990":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"9:52:8548":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"18:736:25477":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:6753:5959":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:40214:2699":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:4411:6885":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13922:5479":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:10139:21541":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:12088:794":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:2501:2787":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:7670:6864":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:8323:9382":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:1672:4032":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:2775:240":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:5982:8011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:2792:250":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:11367:4940":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:2670:5704":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:7885:2717":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:6051:8038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:11427:8335":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"11:2174:7379":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:8250:2778":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:10278:4801":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:12305:5086":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:542:4428":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:13685:5427":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"11:760:4068":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:7937:123":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:7613:6097":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"22:4169:4310":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_sock_timeval"],"kind":"struct"},"2:22687:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:2380:5692":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:7669:2720":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:8167:6165":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:9921:4767":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:505:4049":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:8269:6922":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:6818:5972":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:41592:196":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:8041:2545":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:3171:2744":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:0:2551":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:30373:34240":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:7420:2683":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:6332:9522":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:6580:4349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:7102:21449":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:13174:5249":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:727:148":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"22:4927:7307":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1"],"kind":"union"},"1:558:6865":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:4488:7677":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:4195:9380":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:12373:5088":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:4540:7703":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:8887:2744":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:4008:3307":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:3065:4646":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:5423:3447":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:8851:3454":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:9137:4610":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"22:4177:3106":{"crate_id":22,"path":["linux_raw_sys","general","timespec"],"kind":"struct"},"11:793:6278":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:3964:9371":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:11535:4955":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:14090:5523":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:2284:20555":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:6981:4083":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"21:5028:3236":{"crate_id":21,"path":["rustix","backend","io","types","FdFlags"],"kind":"struct"},"2:47773:6840":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:1503:6260":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:9503:2251":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:13298:5271":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:5088:5770":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:11498:4142":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:13973:5491":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:2797:3651":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:10469:3453":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:6171:8075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:10617:4136":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:8865:3455":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:8195:6167":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:44285:8315":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"21:4609:4532":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"2:9561:209":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:7890:1841":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"22:3814:4214":{"crate_id":22,"path":["linux_raw_sys","general","__user_cap_header_struct"],"kind":"struct"},"2:12141:14589":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:9512:2717":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:4838:7794":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"21:1795:25495":{"crate_id":21,"path":["rustix","ioctl","patterns","BadOpcode"],"kind":"struct"},"17:10059:4780":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:11664:6904":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:7736:6101":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:42222:3267":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:5892:7956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:4759:7758":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:10468:4825":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:48001:6853":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:4949:7854":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"18:521:25479":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:9565:3623":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:4997:7870":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:7194:2803":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"18:582:3322":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:7975:33496":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:4665:4469":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:39195:2841":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:22852:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:6458:3272":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:6759:8118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:21529:2720":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:11507:21514":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:2141:6360":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:400:4619":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"22:4097:4287":{"crate_id":22,"path":["linux_raw_sys","general","robust_list_head"],"kind":"struct"},"22:4537:7290":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:40084:6631":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:5443:3448":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:5858:4052":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:416:177":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:4425:7652":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:7283:3348":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:782:4035":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:7544:8199":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:6912:266":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:12184:5053":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:4655:7727":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:3049:20583":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:42103:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:13487:5324":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:11490:4953":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:13802:5450":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:7554:5731":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:4136:6517":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:4529:7699":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"23:67:27974":{"crate_id":23,"path":["bitflags","parser","ParseHex"],"kind":"trait"},"17:11226:4926":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:11151:4914":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"22:4788:26487":{"crate_id":22,"path":["linux_raw_sys","general","fsconfig_command"],"kind":"enum"},"1:8879:3456":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"21:3110:4532":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"17:11272:4929":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:9886:4764":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:22306:33610":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:11651:14868":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:6376:21445":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:42584:8303":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:9003:21511":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:9790:36723":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:9574:36715":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:5435:5774":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"21:6025:3235":{"crate_id":21,"path":["rustix","backend","mount","types","MountPropagationFlags"],"kind":"struct"},"1:3523:31623":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:11667:6562":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:3441:4637":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:8895:6945":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:2392:2115":{"crate_id":1,"path":["std","fs","remove_dir_all"],"kind":"function"},"2:1634:630":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:12739:34063":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:43758:6704":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:9028:28205":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:10360:108":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:13113:5235":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:44186:6575":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:20967:35099":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:11244:4960":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:45692:6748":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:5994:8018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"22:3907:4236":{"crate_id":22,"path":["linux_raw_sys","general","epoll_event"],"kind":"struct"},"6:7538:8198":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:6216:4094":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:43370:6686":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12876:5197":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:1779:3409":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"11:805:9344":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:11934:5005":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"22:4943:7315":{"crate_id":22,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1"],"kind":"union"},"2:10563:6554":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:40852:2873":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:13040:5223":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:12576:5141":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"11:844:6269":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:475:7396":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:12098:843":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:3204:6283":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:43572:6554":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:44590:6741":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"18:652:4561":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:5631:4066":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:8206:2250":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"24:0:1999":{"crate_id":24,"path":["fastrand"],"kind":"module"},"6:6009:8020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:40407:2902":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:563:7413":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:2172:14801":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"22:4711:4487":{"crate_id":22,"path":["linux_raw_sys","general","statfs64"],"kind":"struct"},"21:1793:25494":{"crate_id":21,"path":["rustix","ioctl","patterns","CompileTimeOpcode"],"kind":"trait"},"2:22092:6581":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:4278:224":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"22:4383:7278":{"crate_id":22,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:43846:6571":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:43512:6697":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:7318:6039":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:1058:6270":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:8572:2743":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:30849:198":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:7391:21450":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"9:177:8558":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"15:306:20538":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:40304:2894":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"22:4153:4308":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_old_timespec"],"kind":"struct"},"21:2698:4532":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"1:8194:2480":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:22405:9370":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:2908:2828":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:40285:2885":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"21:3497:3152":{"crate_id":21,"path":["rustix","backend","fs","types","ResolveFlags"],"kind":"struct"},"16:4835:5762":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"11:630:2744":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:10193:6966":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:7626:171":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:2223:36624":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:7555:8203":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"22:4046:4269":{"crate_id":22,"path":["linux_raw_sys","general","files_stat_struct"],"kind":"struct"},"6:4799:7780":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:2526:5698":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:1983:200":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:12437:5114":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:2787:112":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"18:766:25478":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:3568:175":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"9:507:6340":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:43540:2777":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"21:2671:3147":{"crate_id":21,"path":["rustix","backend","fs","types","Access"],"kind":"struct"},"1:638:6866":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:7434:33577":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"22:4391:7283":{"crate_id":22,"path":["linux_raw_sys","general","sigevent"],"kind":"struct"},"2:30030:9369":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:2938:2835":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:2617:120":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:3532:2249":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:3653:3348":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:13014:9345":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:8239:6060":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"22:0:3096":{"crate_id":22,"path":["linux_raw_sys"],"kind":"module"},"6:5808:7929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"22:3955:7256":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg"],"kind":"struct"},"17:12911:5208":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:14478:5646":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:3009:121":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:5661:5785":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:10840:2718":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:13188:5250":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:4348:267":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13868:5466":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"23:64:27973":{"crate_id":23,"path":["bitflags","parser","WriteHex"],"kind":"trait"},"21:0:2000":{"crate_id":21,"path":["rustix"],"kind":"module"},"17:14499:5649":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:5673:5720":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"21:3072:3137":{"crate_id":21,"path":["rustix","backend","fs","types","Mode"],"kind":"struct"},"6:6588:3167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:45638:6746":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:4361:3647":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"11:736:6262":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"22:4769:4496":{"crate_id":22,"path":["linux_raw_sys","general","kernel_sigset_t"],"kind":"struct"},"2:44143:6722":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"21:1812:25497":{"crate_id":21,"path":["rustix","ioctl","patterns","WriteOpcode"],"kind":"struct"},"2:46191:6771":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:40364:2908":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:12097:1601":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"18:624:36727":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:7053:4130":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:3243:256":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:4451:7661":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:6361:5898":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:4333:7596":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:6092:8049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13897:5474":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:123:15187":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:8337:6920":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"22:4623:4447":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_writeprotect"],"kind":"struct"},"17:9959:4773":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:5322:5772":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:3260:2847":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:7291:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:41337:164":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:4728:9410":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:9086:4739":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:5020:7878":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:40810:2866":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4346:7606":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:1429:150":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:8903:3348":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"21:4579:3149":{"crate_id":21,"path":["rustix","backend","fs","types","FallocateFlags"],"kind":"struct"},"1:8490:2740":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:40803:2864":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:1570:7471":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12658:5151":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:4415:3648":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"19:0:1090":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"11:968:6008":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:926:6263":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"22:4594:4443":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_register"],"kind":"struct"},"17:12293:5083":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:6513:5909":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:9551:124":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:11086:4909":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:1548:2760":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"9:330:7385":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:21759:9446":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:1590:6284":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:6560:4020":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:12513:5130":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:23464:239":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:10684:6559":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:1426:6277":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:9021:6950":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"21:1370:36737":{"crate_id":21,"path":["rustix","fs","ioctl","Ficlone"],"kind":"struct"},"17:11389:4945":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:40030:6626":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:10903:4893":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:21327:9436":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:7573:8206":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:42857:6669":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:5268:205":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:12025:6990":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:7934:2875":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:3043:2246":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:10916:4894":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:10603:4838":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:5897:7957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:6015:223":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:4986:5767":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7568:5732":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:2786:247":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:2849:2821":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:12126:6545":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"11:399:36693":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:2568:2788":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:5612:5721":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:21538:6580":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"21:5251:4532":{"crate_id":21,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"17:12934:5209":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:8686:21501":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:8318:8322":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:13989:5493":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11358:21637":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"22:3939:4243":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_policy_v2"],"kind":"struct"},"1:8274:9366":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"11:1068:6274":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:46237:6773":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:6726:8104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:10637:4843":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:10805:8331":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:8174:2803":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:5696:21441":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:22951:185":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:47727:6839":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"22:4496:4422":{"crate_id":22,"path":["linux_raw_sys","general","winsize"],"kind":"struct"},"17:9172:4611":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:21274:9440":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:40091:14653":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:14420:5629":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:43808:2774":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:11261:4928":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:46493:6779":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:4511:7690":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:43604:6700":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:7342:36711":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:10097:4783":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:13949:5483":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:22379:6603":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:3720:2491":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:12090:792":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:14156:5538":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:4954:4337":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"11:695:6260":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:5853:3278":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:2276:107":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:0:1491":{"crate_id":1,"path":["std"],"kind":"module"},"2:21505:2720":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:10616:4839":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:6189:5857":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:41530:6655":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:40446:2905":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:40020:6625":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:12846:5178":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:43360:6685":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:4767:2256":{"crate_id":1,"path":["std","os","fd","raw","RawFd"],"kind":"type_alias"},"21:5617:3234":{"crate_id":21,"path":["rustix","backend","mount","types","MountFlags"],"kind":"struct"},"1:6277:4125":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:4044:105":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"22:4209:4314":{"crate_id":22,"path":["linux_raw_sys","general","timezone"],"kind":"struct"},"2:22327:33543":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:1514:7438":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:4468:7667":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"22:4827:26488":{"crate_id":22,"path":["linux_raw_sys","general","membarrier_cmd"],"kind":"enum"},"5:1374:96":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"}},"external_crates":{"23":{"name":"bitflags","html_root_url":null},"20":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"linux_raw_sys","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"fastrand","html_root_url":null},"21":{"name":"rustix","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}