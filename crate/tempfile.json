{"root":"0:0:2465","crate_version":"3.10.1","includes_private":false,"index":{"2:2774:3303":{"id":"2:2774:3303","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2806:29859":{"id":"2:2806:29859","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:120":{"id":"0:120","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[134,0],"end":[138,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","cause","type_id","source","provide"],"trait":{"name":"Error","id":"2:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:121:2902"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32765:248-0:419:2474":{"id":"a:2:32765:248-0:419:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32765:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13757:33237":{"id":"2:13757:33237","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40435:15731","Self::is_ascii":"2:13756:31132"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42534:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40435:15731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:2887":{"id":"0:40:2887","crate_id":0,"name":"close","span":{"filename":"src/dir/mod.rs","begin":[437,4],"end":[448,5]},"visibility":"public","docs":"Closes and removes the temporary directory, returning a `Result`.\n\nAlthough `TempDir` removes the directory on drop, in the destructor\nany errors are ignored. To detect errors cleaning up the temporary\ndirectory, call `close` instead.\n\n# Errors\n\nThis function may return a variety of [`std::io::Error`]s that result from deleting\nthe files and directories contained with the temporary directory,\nas well as from deleting the temporary directory itself. These errors\nmay be platform specific.\n\n[`std::io::Error`]: http://doc.rust-lang.org/std/io/struct.Error.html\n\n# Examples\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`.\nlet tmp_dir = TempDir::new()?;\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// By closing the `TempDir` explicitly we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the directory will still be deleted when `tmp_dir` goes out\n// of scope, but we won't know whether deleting the directory\n// succeeded.\ndrop(tmp_file);\ntmp_dir.close()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42627:10391-0:399:2468":{"id":"a:2:42627:10391-0:399:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42627:10391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[494,0],"end":[498,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10552:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:150:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42627:10391-0:154:2469":{"id":"a:2:42627:10391-0:154:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"File","id":"1:2326:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42627:10391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:427":{"id":"0:427","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,9],"end":[194,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10552:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:430:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:136:693":{"id":"0:136:693","crate_id":0,"name":"drop","span":{"filename":"src/file/mod.rs","begin":[381,4],"end":[383,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3335:4521-0:419:2474":{"id":"a:2:3335:4521-0:419:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3335:4521","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[984,0],"end":[1010,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_exact","read_buf_exact","bytes","is_read_vectored","read_vectored","read_to_end","by_ref","chain","read_to_string","read_buf","take"],"trait":{"name":"Read","id":"1:3602:2903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2326:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"items":["0:213:3123","0:215:3125","0:217:3128","0:219:3129","0:221:3130"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13663:4459":{"id":"2:13663:4459","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44390:3452","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2772-0:413:2472":{"id":"b:2:2772-0:413:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:3303"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3087-0:413:2472":{"id":"b:2:3087-0:413:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[374,0],"end":[378,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10552:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:134:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:258:3140":{"id":"0:258:3140","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/file/mod.rs","begin":[1086,4],"end":[1088,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RawFd","id":"1:4938:2910","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213:3123":{"id":"0:213:3123","crate_id":0,"name":"read","span":{"filename":"src/file/mod.rs","begin":[985,4],"end":[987,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13642:33292":{"id":"2:13642:33292","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12870:15665"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3943-0:27:2464":{"id":"b:2:3943-0:27:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3945:1863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3335:4521-0:122:2470":{"id":"a:2:3335:4521-0:122:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3335:4521","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:277:3179":{"id":"0:277:3179","crate_id":0,"name":"set_len","span":{"filename":"src/spooled.rs","begin":[98,4],"end":[109,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["size",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Result","id":"2:42666:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"io::Error","id":"1:3077:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[215,0],"end":[797,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:328:1208","0:329:2478","0:331:2479","0:333:2519","0:334:2480","0:335:2481","0:336:2465","0:337:2466","0:340:2462","0:341:2463","0:343:2635","0:346:2638"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13675:31673":{"id":"2:13675:31673","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13323:3768"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13344:15663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:175:2790":{"id":"0:175:2790","crate_id":0,"name":"new_in","span":{"filename":"src/file/mod.rs","begin":[620,4],"end":[622,5]},"visibility":"public","docs":"Create a new named temporary file in the specified directory.\n\nThis is equivalent to:\n\n```ignore\nBuilder::new().tempfile_in(dir)\n```\n\nSee [`NamedTempFile::new()`] for details.\n\n[`NamedTempFile::new()`]: #method.new","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:2972":{"id":"0:188:2972","crate_id":0,"name":"persist_noclobber","span":{"filename":"src/file/mod.rs","begin":[815,4],"end":[827,5]},"visibility":"public","docs":"Persist the temporary file at the target path if and only if no file exists there.\n\nIf a file exists at the target path, fail. If this method fails, it will\nreturn `self` in the resulting PersistError.\n\nNote: Temporary files cannot be persisted across filesystems. Also Note:\nThis method is not atomic. It can leave the original link to the\ntemporary file behind.\n\n# Security\n\nThis method persists the temporary file using its path and may not be\nsecure in all cases. Please read the security section on the top\nlevel documentation of this type for details.\n\n# Errors\n\nIf the file cannot be moved to the new location or a file already exists there,\n`Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\nlet mut persisted_file = file.persist_noclobber(\"./saved_file.txt\")?;\nwriteln!(persisted_file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:42666:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13639:37990":{"id":"2:13639:37990","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13637:37989"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:439":{"id":"0:439","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,27],"end":[194,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32767:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3081-0:144:2467":{"id":"b:2:3081-0:144:2467","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[515,0],"end":[519,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10552:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:160:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13686:32066":{"id":"2:13686:32066","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13323:3768","`DoubleEndedIterator`":"2:8473:133","prim@char":"1:12451:490","str::split_whitespace":"2:13664:35630","str::rsplit":"2:13692:32070"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44404:3453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[128,0],"end":[132,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10557:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:119:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13748:38008":{"id":"2:13748:38008","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13323:3768"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114":{"id":"0:114","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[114,0],"end":[119,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"io::Error","id":"1:3077:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:115:857"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:190:2978":{"id":"0:190:2978","crate_id":0,"name":"keep","span":{"filename":"src/file/mod.rs","begin":[859,4],"end":[868,5]},"visibility":"public","docs":"Keep the temporary file from being deleted. This function will turn the\ntemporary file into a non-temporary file without moving it.\n\n\n# Errors\n\nOn some platforms (e.g., Windows), we need to mark the file as\nnon-temporary. This operation could fail.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet (file, path) = file.keep()?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42666:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"F"},{"resolved_path":{"name":"PathBuf","id":"1:5362:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}},{"type":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:2902":{"id":"0:172:2902","crate_id":0,"name":"source","span":{"filename":"src/file/mod.rs","begin":[542,4],"end":[544,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42534:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:255:3139":{"id":"0:255:3139","crate_id":0,"name":"as_fd","span":{"filename":"src/file/mod.rs","begin":[1078,4],"end":[1080,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"BorrowedFd","id":"1:8694:2909","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:275:3171":{"id":"0:275:3171","crate_id":0,"name":"is_rolled","span":{"filename":"src/spooled.rs","begin":[77,4],"end":[82,5]},"visibility":"public","docs":"Returns true if the file has been rolled over to disk.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:174:1208":{"id":"0:174:1208","crate_id":0,"name":"new","span":{"filename":"src/file/mod.rs","begin":[605,4],"end":[607,5]},"visibility":"public","docs":"Create a new named temporary file.\n\nSee [`Builder`] for more configuration.\n\n# Security\n\nThis will create a temporary file in the default temporary file\ndirectory (platform dependent). This has security implications on many\nplatforms so please read the security section of this type's\ndocumentation.\n\nReasons to use this method:\n\n  1. The file has a short lifetime and your temporary file cleaner is\n     sane (doesn't delete recently accessed files).\n\n  2. You trust every user on your system (i.e. you are the only user).\n\n  3. You have disabled your system's temporary file cleaner or verified\n     that your system doesn't have a temporary file cleaner.\n\nReasons not to use this method:\n\n  1. You'll fix it later. No you won't.\n\n  2. You don't care about the security of the temporary file. If none of\n     the \"reasons to use this method\" apply, referring to a temporary\n     file by name may allow an attacker to create/overwrite your\n     non-temporary files. There are exceptions but if you don't already\n     know them, don't use this method.\n\n# Errors\n\nIf the file can not be created, `Err` is returned.\n\n# Examples\n\nCreate a named temporary file and write some data to it:\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), ::std::io::Error> {\nlet mut file = NamedTempFile::new()?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`Builder`]: struct.Builder.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42627:10391-0:413:2472":{"id":"a:2:42627:10391-0:413:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42627:10391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:281:3125":{"id":"0:281:3125","crate_id":0,"name":"read_vectored","span":{"filename":"src/spooled.rs","begin":[126,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"io::IoSliceMut","id":"1:3620:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13739:30237":{"id":"2:13739:30237","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13323:3768"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42534:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42":{"id":"0:42","crate_id":0,"name":null,"span":{"filename":"src/dir/mod.rs","begin":[451,0],"end":[455,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:43:351"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:192:3097":{"id":"0:192:3097","crate_id":0,"name":"as_file_mut","span":{"filename":"src/file/mod.rs","begin":[876,4],"end":[878,5]},"visibility":"public","docs":"Get a mutable reference to the underlying file.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"F"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179:2850":{"id":"0:179:2850","crate_id":0,"name":"with_prefix_in","span":{"filename":"src/file/mod.rs","begin":[644,4],"end":[649,5]},"visibility":"public","docs":"Create a new named temporary file with the specified filename prefix,\nin the specified directory.\n\nThis is equivalent to:\n\n```ignore\nBuilder::new().prefix(&prefix).tempfile_in(directory)\n```\n\nSee [`NamedTempFile::new()`] for details.\n\n[`NamedTempFile::new()`]: #method.new","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42628:10493-0:154:2469":{"id":"a:2:42628:10493-0:154:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"File","id":"1:2326:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42628:10493","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13763:33242":{"id":"2:13763:33242","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:42077"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5729:38708":{"id":"5:5729:38708","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7801:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13716:37997":{"id":"2:13716:37997","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13323:3768","`DoubleEndedIterator`":"2:8473:133","prim@char":"1:12451:490","str::matches":"2:13713:3184"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44626:8180","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13344:15663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2772-0:399:2468":{"id":"b:2:2772-0:399:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:3303"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:240:3132":{"id":"0:240:3132","crate_id":0,"name":"write_vectored","span":{"filename":"src/file/mod.rs","begin":[1049,4],"end":[1053,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"io::IoSlice","id":"1:8507:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:334:2480":{"id":"0:334:2480","crate_id":0,"name":"append","span":{"filename":"src/lib.rs","begin":[399,4],"end":[402,5]},"visibility":"public","docs":"Set the file to be opened in append mode.\n\nDefault: `false`.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .append(true)\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["append",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410:2019":{"id":"0:410:2019","crate_id":0,"name":"0","span":{"filename":"src/spooled.rs","begin":[9,11],"end":[9,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"std::fs::File","id":"1:2326:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"5:5739:3477":{"id":"5:5739:3477","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7801:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7801:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287:3132":{"id":"0:287:3132","crate_id":0,"name":"write_vectored","span":{"filename":"src/spooled.rs","begin":[172,4],"end":[187,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"io::IoSlice","id":"1:8507:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13672:31671":{"id":"2:13672:31671","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13323:3768"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13692:32070":{"id":"2:13692:32070","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13323:3768","`DoubleEndedIterator`":"2:8473:133","prim@char":"1:12451:490","str::split":"2:13686:32066"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44422:8015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13344:15663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42627:10391-0:27:2464":{"id":"a:2:42627:10391-0:27:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42627:10391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:235":{"id":"0:235","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1040,0],"end":[1062,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","by_ref","write_fmt","write_vectored","write_all_vectored","write_all"],"trait":{"name":"Write","id":"1:3659:2906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2326:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"items":["0:236:2900","0:238:3131","0:240:3132","0:242:3134","0:244:3135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3090:149":{"id":"2:3090:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:210:3130":{"id":"0:210:3130","crate_id":0,"name":"read_exact","span":{"filename":"src/file/mod.rs","begin":[977,4],"end":[981,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3943-0:154:2469":{"id":"b:2:3943-0:154:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3945:1863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:356:1917":{"id":"0:356:1917","crate_id":0,"name":"unix","span":{"filename":"src/file/imp/unix.rs","begin":[1,0],"end":[157,1]},"visibility":{"restricted":{"parent":"0:110:2891","path":"::file::imp"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":true}}},"0:404:3146":{"id":"0:404:3146","crate_id":0,"name":"SpooledData","span":{"filename":"src/spooled.rs","begin":[7,0],"end":[10,1]},"visibility":"public","docs":"A wrapper for the two states of a `SpooledTempFile`.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:405:3147","0:408:3148"],"impls":[]}}},"0:121:2902":{"id":"0:121:2902","crate_id":0,"name":"source","span":{"filename":"src/file/mod.rs","begin":[135,4],"end":[137,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42534:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3943-0:144:2467":{"id":"b:2:3943-0:144:2467","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3945:1863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:195:3108":{"id":"0:195:3108","crate_id":0,"name":"into_parts","span":{"filename":"src/file/mod.rs","begin":[899,4],"end":[901,5]},"visibility":"public","docs":"Converts the named temporary file into its constituent parts.\n\nNote: When the path is dropped, the file is deleted but the file handle\nis still usable.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"generic":"F"},{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:166:857":{"id":"0:166:857","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[530,4],"end":[532,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3300:260-0:154:2469":{"id":"a:2:3300:260-0:154:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:282:3128":{"id":"0:282:3128","crate_id":0,"name":"read_to_end","span":{"filename":"src/spooled.rs","begin":[133,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"5:7214:278","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290:3137":{"id":"0:290:3137","crate_id":0,"name":"seek","span":{"filename":"src/spooled.rs","begin":[199,4],"end":[204,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"1:8516:2905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:329:2478":{"id":"0:329:2478","crate_id":0,"name":"prefix","span":{"filename":"src/lib.rs","begin":[320,4],"end":[323,5]},"visibility":"public","docs":"Set a custom filename prefix.\n\nPath separators are legal but not advisable.\nDefault: `.tmp`.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .prefix(\"my-temporary-note\")\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["prefix",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"S"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13652:32036":{"id":"2:13652:32036","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11456:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11456:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13658:32064":{"id":"2:13658:32064","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13659:32065"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42534:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13668:35627":{"id":"2:13668:35627","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44696:8032","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:219:3129":{"id":"0:219:3129","crate_id":0,"name":"read_to_string","span":{"filename":"src/file/mod.rs","begin":[1001,4],"end":[1005,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7801:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13695:37995":{"id":"2:13695:37995","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13323:3768","str::split":"2:13686:32066","prim@char":"1:12451:490","`DoubleEndedIterator`":"2:8473:133","str::rsplit_terminator":"2:13698:37996"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44454:8175","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:215:3125":{"id":"0:215:3125","crate_id":0,"name":"read_vectored","span":{"filename":"src/file/mod.rs","begin":[989,4],"end":[993,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"io::IoSliceMut","id":"1:3620:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13710:32077":{"id":"2:13710:32077","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42534:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13344:15663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13733:38005":{"id":"2:13733:38005","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13323:3768"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13349:15662","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[386,0],"end":[392,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3535:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:138:262","0:139:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:131:2978":{"id":"0:131:2978","crate_id":0,"name":"keep","span":{"filename":"src/file/mod.rs","begin":[344,4],"end":[359,5]},"visibility":"public","docs":"Keep the temporary file from being deleted. This function will turn the\ntemporary file into a non-temporary file without moving it.\n\n\n# Errors\n\nOn some platforms (e.g., Windows), we need to mark the file as\nnon-temporary. This operation could fail.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet path = file.into_temp_path();\nlet path = path.keep()?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42666:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5362:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13731:38003":{"id":"2:13731:38003","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13742:32079":{"id":"2:13742:32079","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13323:3768"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42534:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13344:15663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:321":{"id":"0:321","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[203,0],"end":[213,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3129:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:324:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13745:38007":{"id":"2:13745:38007","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13323:3768"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13344:15663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2465":{"id":"0:0:2465","crate_id":0,"name":"tempfile","span":{"filename":"src/lib.rs","begin":[1,0],"end":[797,1]},"visibility":"public","docs":"Temporary files and directories.\n\n- Use the [`tempfile()`] function for temporary files\n- Use the [`tempdir()`] function for temporary directories.\n\n# Design\n\nThis crate provides several approaches to creating temporary files and directories.\n[`tempfile()`] relies on the OS to remove the temporary file once the last handle is closed.\n[`TempDir`] and [`NamedTempFile`] both rely on Rust destructors for cleanup.\n\nWhen choosing between the temporary file variants, prefer `tempfile`\nunless you either need to know the file's path or to be able to persist it.\n\n## Resource Leaking\n\n`tempfile` will (almost) never fail to cleanup temporary resources. However `TempDir` and `NamedTempFile` will\nfail if their destructors don't run. This is because `tempfile` relies on the OS to cleanup the\nunderlying file, while `TempDir` and `NamedTempFile` rely on rust destructors to do so.\nDestructors may fail to run if the process exits through an unhandled signal interrupt (like `SIGINT`),\nor if the instance is declared statically (like with [`lazy_static`]), among other possible\nreasons.\n\n## Security\n\nIn the presence of pathological temporary file cleaner, relying on file paths is unsafe because\na temporary file cleaner could delete the temporary file which an attacker could then replace.\n\n`tempfile` doesn't rely on file paths so this isn't an issue. However, `NamedTempFile` does\nrely on file paths for _some_ operations. See the security documentation on\nthe `NamedTempFile` type for more information.\n\n## Early drop pitfall\n\nBecause `TempDir` and `NamedTempFile` rely on their destructors for cleanup, this can lead\nto an unexpected early removal of the directory/file, usually when working with APIs which are\ngeneric over `AsRef<Path>`. Consider the following example:\n\n```no_run\n# use tempfile::tempdir;\n# use std::io;\n# use std::process::Command;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`.\nlet temp_dir = tempdir()?;\n\n// Spawn the `touch` command inside the temporary directory and collect the exit status\n// Note that `temp_dir` is **not** moved into `current_dir`, but passed as a reference\nlet exit_status = Command::new(\"touch\").arg(\"tmp\").current_dir(&temp_dir).status()?;\nassert!(exit_status.success());\n\n# Ok(())\n# }\n```\n\nThis works because a reference to `temp_dir` is passed to `current_dir`, resulting in the\ndestructor of `temp_dir` being run after the `Command` has finished execution. Moving the\n`TempDir` into the `current_dir` call would result in the `TempDir` being converted into\nan internal representation, with the original value being dropped and the directory thus\nbeing deleted, before the command can be executed.\n\nThe `touch` command would fail with an `No such file or directory` error.\n\n## Examples\n\nCreate a temporary file and write some data into it:\n\n```\nuse tempfile::tempfile;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a file inside of `std::env::temp_dir()`.\nlet mut file = tempfile()?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\nCreate a named temporary file and open an independent file handle:\n\n```\nuse tempfile::NamedTempFile;\nuse std::io::{self, Write, Read};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet text = \"Brian was here. Briefly.\";\n\n// Create a file inside of `std::env::temp_dir()`.\nlet mut file1 = NamedTempFile::new()?;\n\n// Re-open it.\nlet mut file2 = file1.reopen()?;\n\n// Write some test data to the first handle.\nfile1.write_all(text.as_bytes())?;\n\n// Read the test data using the second handle.\nlet mut buf = String::new();\nfile2.read_to_string(&mut buf)?;\nassert_eq!(buf, text);\n# Ok(())\n# }\n```\n\nCreate a temporary directory and add a file to it:\n\n```\nuse tempfile::tempdir;\nuse std::fs::File;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`.\nlet dir = tempdir()?;\n\nlet file_path = dir.path().join(\"my-temporary-note.txt\");\nlet mut file = File::create(file_path)?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\n// By closing the `TempDir` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the directory will still be deleted when `dir` goes out\n// of scope, but we won't know whether deleting the directory\n// succeeded.\ndrop(file);\ndir.close()?;\n# Ok(())\n# }\n```\n\n[`tempfile()`]: fn.tempfile.html\n[`tempdir()`]: fn.tempdir.html\n[`TempDir`]: struct.TempDir.html\n[`NamedTempFile`]: struct.NamedTempFile.html\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html\n[`lazy_static`]: https://github.com/rust-lang-nursery/lazy-static.rs/issues/62","links":{},"attrs":["#![doc(html_logo_url =\n\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\nhtml_favicon_url = \"https://www.rust-lang.org/favicon.ico\", html_root_url =\n\"https://docs.rs/tempfile/3.1.0\")]","#![deny(rust_2018_idioms)]","#![allow(clippy::redundant_field_names)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:308-0:24:2462","0:309-0:25:2463","0:310-0:27:2464","0:312-0:111:2465","0:313-0:112:2466","0:314-0:144:2467","0:315-0:399:2468","0:316-0:154:2469","0:317-0:122:2470","0:319-0:272:2471","0:320-0:413:2472","0:419:2474"],"is_stripped":false}}},"2:13762:33241":{"id":"2:13762:33241","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:42077"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:401:1333":{"id":"0:401:1333","crate_id":0,"name":"path","span":{"filename":"src/file/mod.rs","begin":[111,4],"end":[111,22]},"visibility":"public","docs":"The temporary file path that couldn't be persisted.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:2775-0:122:2470":{"id":"b:2:2775-0:122:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:29856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2777:29856":{"id":"2:2777:29856","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3083:857":{"id":"2:3083:857","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:223":{"id":"0:223","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1012,0],"end":[1038,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"1:3659:2906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","by_ref","write_fmt","write_vectored","write_all_vectored","write_all"],"trait":{"name":"Write","id":"1:3659:2906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:225:2900","0:227:3131","0:229:3132","0:231:3134","0:233:3135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3087-0:154:2469":{"id":"b:2:3087-0:154:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3090:149","2:3091:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3080:2875":{"id":"2:3080:2875","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3054:156"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:405:3147":{"id":"0:405:3147","crate_id":0,"name":"InMemory","span":{"filename":"src/spooled.rs","begin":[8,4],"end":[8,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:407:2019"]},"discriminant":null}}},"0:340:2462":{"id":"0:340:2462","crate_id":0,"name":"tempdir","span":{"filename":"src/lib.rs","begin":[596,4],"end":[598,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix, `prefix`. The directory and\neverything inside it will be automatically deleted once the\nreturned `TempDir` is destroyed.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::Builder;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_dir = Builder::new().tempdir()?;\n# Ok(())\n# }\n```\n\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:435":{"id":"0:435","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,23],"end":[194,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:445:722":{"id":"0:445:722","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[194,27],"end":[194,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13657:32061":{"id":"2:13657:32061","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13656:32060","str::split_at_mut_checked":"2:13659:32065"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13704:32074":{"id":"2:13704:32074","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12451:490","str::splitn":"2:13701:32072","self::pattern":"2:13323:3768"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44526:8018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13344:15663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13759:31137":{"id":"2:13759:31137","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:204:3125":{"id":"0:204:3125","crate_id":0,"name":"read_vectored","span":{"filename":"src/file/mod.rs","begin":[959,4],"end":[963,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"io::IoSliceMut","id":"1:3620:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246":{"id":"0:246","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1064,0],"end":[1068,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Seek","id":"1:3677:2904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["stream_len","seek_relative","rewind","stream_position"],"trait":{"name":"Seek","id":"1:3677:2904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:248:3137"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13644:350":{"id":"2:13644:350","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13645:32037","`u8`":"1:12470:1893"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[521,0],"end":[526,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"io::Error","id":"1:3077:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:163:857"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42627:10391-0:122:2470":{"id":"a:2:42627:10391-0:122:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42627:10391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2772-0:144:2467":{"id":"b:2:2772-0:144:2467","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2774:3303"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:783-0:419:2474":{"id":"b:5:783-0:419:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:779:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["5:785:4082","5:786:4083","5:787:4084"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13719:37998":{"id":"2:13719:37998","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13323:3768","`DoubleEndedIterator`":"2:8473:133","prim@char":"1:12451:490","str::rmatch_indices":"2:13722:37999"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44554:8177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13761:33240":{"id":"2:13761:33240","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:42077"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[118,0],"end":[153,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_exact","read_buf_exact","bytes","is_read_vectored","read_vectored","read_to_end","by_ref","chain","read_to_string","read_buf","take"],"trait":{"name":"Read","id":"1:3602:2903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:280:3123","0:281:3125","0:282:3128","0:283:3129","0:284:3130"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32824:3595-0:122:2470":{"id":"a:2:32824:3595-0:122:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32824:3595","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3943-0:419:2474":{"id":"b:2:3943-0:419:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:3945:1863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:400:2459":{"id":"0:400:2459","crate_id":0,"name":"error","span":{"filename":"src/file/mod.rs","begin":[109,4],"end":[109,24]},"visibility":"public","docs":"The underlying IO error.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"io::Error","id":"1:3077:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[150,0],"end":[372,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:125:2887","0:127:2961","0:129:2972","0:131:2978","0:132:2645"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2775-0:399:2468":{"id":"b:2:2775-0:399:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:29856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42628:10493-0:27:2464":{"id":"a:2:42628:10493-0:27:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42628:10493","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13636:37988":{"id":"2:13636:37988","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138:262":{"id":"0:138:262","crate_id":0,"name":"Target","span":{"filename":"src/file/mod.rs","begin":[387,4],"end":[387,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:47:693":{"id":"0:47:693","crate_id":0,"name":"drop","span":{"filename":"src/dir/mod.rs","begin":[466,4],"end":[468,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:337:2466":{"id":"0:337:2466","crate_id":0,"name":"tempfile_in","span":{"filename":"src/lib.rs","begin":[555,4],"end":[566,5]},"visibility":"public","docs":"Create the named temporary file in the specified directory.\n\n# Security\n\nSee [the security][security] docs on `NamedTempFile`.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `NamedTempFile`.\n\n# Errors\n\nIf the file cannot be created, `Err` is returned.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet tempfile = Builder::new().tempfile_in(\"./\")?;\n# Ok(())\n# }\n```\n\n[security]: struct.NamedTempFile.html#security\n[resource-leaking]: struct.NamedTempFile.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13756:31132":{"id":"2:13756:31132","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13662:8192":{"id":"2:13662:8192","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12451:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44380:8173","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:186:2961":{"id":"0:186:2961","crate_id":0,"name":"persist","span":{"filename":"src/file/mod.rs","begin":[762,4],"end":[774,5]},"visibility":"public","docs":"Persist the temporary file at the target path.\n\nIf a file exists at the target path, persist will atomically replace it.\nIf this method fails, it will return `self` in the resulting\n[`PersistError`].\n\nNote: Temporary files cannot be persisted across filesystems. Also\nneither the file contents nor the containing directory are\nsynchronized, so the update may not yet have reached the disk when\n`persist` returns.\n\n# Security\n\nThis method persists the temporary file using its path and may not be\nsecure in all cases. Please read the security section on the top\nlevel documentation of this type for details.\n\n# Errors\n\nIf the file cannot be moved to the new location, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\nlet mut persisted_file = file.persist(\"./saved_file.txt\")?;\nwriteln!(persisted_file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`PersistError`]: struct.PersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:42666:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32824:3595-0:154:2469":{"id":"a:2:32824:3595-0:154:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32824:3595","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32824:3595","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3092-0:413:2472":{"id":"b:2:3092-0:413:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1848"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:30:1208":{"id":"0:30:1208","crate_id":0,"name":"new","span":{"filename":"src/dir/mod.rs","begin":[235,4],"end":[237,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `env::temp_dir()`.\n\nSee [`Builder`] for more configuration.\n\nThe directory and everything inside it will be automatically deleted\nonce the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`\nlet tmp_dir = TempDir::new()?;\n\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// `tmp_dir` goes out of scope, the directory as well as\n// `tmp_file` will be deleted here.\n# Ok(())\n# }\n```\n\n[`Builder`]: struct.Builder.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:2972":{"id":"0:129:2972","crate_id":0,"name":"persist_noclobber","span":{"filename":"src/file/mod.rs","begin":[293,4],"end":[311,5]},"visibility":"public","docs":"Persist the temporary file at the target path if and only if no file exists there.\n\nIf a file exists at the target path, fail. If this method fails, it will\nreturn `self` in the resulting [`PathPersistError`].\n\nNote: Temporary files cannot be persisted across filesystems. Also Note:\nThis method is not atomic. It can leave the original link to the\ntemporary file behind.\n\n# Security\n\nOnly use this method if you're positive that a temporary file cleaner\nwon't have deleted your file. Otherwise, you might end up persisting an\nattacker controlled file.\n\n# Errors\n\nIf the file cannot be moved to the new location or a file already exists\nthere, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet path = file.into_temp_path();\npath.persist_noclobber(\"./saved_file.txt\")?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:42666:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3087-0:399:2468":{"id":"b:2:3087-0:399:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13698:37996":{"id":"2:13698:37996","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13323:3768","str::split":"2:13686:32066","prim@char":"1:12451:490","str::split_terminator":"2:13695:37995"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44472:8176","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13344:15663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3092-0:27:2464":{"id":"b:2:3092-0:27:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1848"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:276:3174":{"id":"0:276:3174","crate_id":0,"name":"roll","span":{"filename":"src/spooled.rs","begin":[86,4],"end":[96,5]},"visibility":"public","docs":"Rolls over to a file on disk, regardless of current size. Does nothing\nif already rolled over.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170":{"id":"0:170","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[541,0],"end":[545,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["description","cause","type_id","source","provide"],"trait":{"name":"Error","id":"2:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:172:2902"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:320-0:413:2472":{"id":"0:320-0:413:2472","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[191,43],"end":[191,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::spooled::SpooledTempFile","name":"SpooledTempFile","id":"0:413:2472","glob":false}}},"0:44":{"id":"0:44","crate_id":0,"name":null,"span":{"filename":"src/dir/mod.rs","begin":[457,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10552:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:45:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2775-0:419:2474":{"id":"b:2:2775-0:419:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2777:29856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3081-0:27:2464":{"id":"b:2:3081-0:27:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:431":{"id":"0:431","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,16],"end":[194,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:434:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:132:2645":{"id":"0:132:2645","crate_id":0,"name":"from_path","span":{"filename":"src/file/mod.rs","begin":[367,4],"end":[371,5]},"visibility":"public","docs":"Create a new TempPath from an existing path. This can be done even if no\nfile exists at the given path.\n\nThis is mostly useful for interacting with libraries and external\ncomponents that provide files to be consumed or expect a path with no\nexisting file to be given.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"impl_trait":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5362:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<PathBuf>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5362:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2772-0:419:2474":{"id":"b:2:2772-0:419:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2774:3303"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5974-0:154:2469":{"id":"b:5:5974-0:154:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10557:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5972:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["5:5976:1823"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:333:2519":{"id":"0:333:2519","crate_id":0,"name":"rand_bytes","span":{"filename":"src/lib.rs","begin":[373,4],"end":[376,5]},"visibility":"public","docs":"Set the number of random bytes.\n\nDefault: `6`.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .rand_bytes(5)\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rand",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:430:827":{"id":"0:430:827","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[194,9],"end":[194,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10516:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10497:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13643:37991":{"id":"2:13643:37991","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2775-0:413:2472":{"id":"b:2:2775-0:413:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:29856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42627:10391-0:144:2467":{"id":"a:2:42627:10391-0:144:2467","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42627:10391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42627:10391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:284:3130":{"id":"0:284:3130","crate_id":0,"name":"read_exact","span":{"filename":"src/spooled.rs","begin":[147,4],"end":[152,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3092-0:144:2467":{"id":"b:2:3092-0:144:2467","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3095:149","2:3096:1848"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:787:4084":{"id":"5:787:4084","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13678:4063":{"id":"2:13678:4063","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42536:202","prim@char":"1:12451:490","self::pattern":"2:13323:3768"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42534:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:827":{"id":"0:160:827","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[516,4],"end":[518,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10516:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10497:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:283:3129":{"id":"0:283:3129","crate_id":0,"name":"read_to_string","span":{"filename":"src/spooled.rs","begin":[140,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7801:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5737:38709":{"id":"5:5737:38709","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7801:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13654:37992":{"id":"2:13654:37992","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12457:1763","str::slice_mut_unchecked":"2:13655:37993","crate::ops::Index":"2:40080:3519"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:251:3137":{"id":"0:251:3137","crate_id":0,"name":"seek","span":{"filename":"src/file/mod.rs","begin":[1071,4],"end":[1073,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"1:8516:2905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:289":{"id":"0:289","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[198,0],"end":[205,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["stream_len","seek_relative","rewind","stream_position"],"trait":{"name":"Seek","id":"1:3677:2904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:290:3137"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[912,0],"end":[952,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2326:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:198:3122"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2775-0:144:2467":{"id":"b:2:2775-0:144:2467","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2777:29856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:242:3134":{"id":"0:242:3134","crate_id":0,"name":"write_all","span":{"filename":"src/file/mod.rs","begin":[1055,4],"end":[1057,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:310-0:27:2464":{"id":"0:310-0:27:2464","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,42],"end":[187,49]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::dir::TempDir","name":"TempDir","id":"0:27:2464","glob":false}}},"2:13635:4026":{"id":"2:13635:4026","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157:816":{"id":"0:157:816","crate_id":0,"name":"file","span":{"filename":"src/file/mod.rs","begin":[512,4],"end":[512,30]},"visibility":"public","docs":"The temporary file that couldn't be persisted.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}},"a:2:32765:248-0:413:2472":{"id":"a:2:32765:248-0:413:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32765:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13682:4025":{"id":"2:13682:4025","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42536:202","prim@char":"1:12451:490","self::pattern":"2:13323:3768"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42534:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13344:15663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:3104":{"id":"0:194:3104","crate_id":0,"name":"into_temp_path","span":{"filename":"src/file/mod.rs","begin":[891,4],"end":[893,5]},"visibility":"public","docs":"Closes the file, leaving only the temporary file path.\n\nThis is useful when another process must be able to open the temporary\nfile.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:244:3135":{"id":"0:244:3135","crate_id":0,"name":"write_fmt","span":{"filename":"src/file/mod.rs","begin":[1059,4],"end":[1061,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["fmt",{"resolved_path":{"name":"fmt::Arguments","id":"2:43580:3136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173":{"id":"0:173","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[547,0],"end":[650,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2326:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:174:1208","0:175:2790","0:177:2845","0:179:2850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3077-0:413:2472":{"id":"b:2:3077-0:413:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:2875"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:116":{"id":"0:116","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[121,0],"end":[126,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:117:857"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13637:37989":{"id":"2:13637:37989","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:827":{"id":"0:45:827","crate_id":0,"name":"fmt","span":{"filename":"src/dir/mod.rs","begin":[458,4],"end":[462,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10516:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10497:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:312-0:111:2465":{"id":"0:312-0:111:2465","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,4],"end":[189,12]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::tempfile","name":"tempfile","id":"0:111:2465","glob":false}}},"0:416":{"id":"0:416","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10552:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:417:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:308-0:24:2462":{"id":"0:308-0:24:2462","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,21],"end":[187,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::dir::tempdir","name":"tempdir","id":"0:24:2462","glob":false}}},"2:13665:35597":{"id":"2:13665:35597","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13664:35630"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44687:8183","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:2465":{"id":"0:111:2465","crate_id":0,"name":"tempfile","span":{"filename":"src/file/mod.rs","begin":[60,0],"end":[62,1]},"visibility":"public","docs":"Create a new temporary file.\n\nThe file will be created in the location returned by [`std::env::temp_dir()`].\n\n# Security\n\nThis variant is secure/reliable in the presence of a pathological temporary file cleaner.\n\n# Resource Leaking\n\nThe temporary file will be automatically removed by the OS when the last handle to it is closed.\nThis doesn't rely on Rust destructors being run, so will (almost) never fail to clean up the temporary file.\n\n# Errors\n\nIf the file can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempfile;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a file inside of `std::env::temp_dir()`.\nlet mut file = tempfile()?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2326:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:231:3134":{"id":"0:231:3134","crate_id":0,"name":"write_all","span":{"filename":"src/file/mod.rs","begin":[1027,4],"end":[1031,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42627:10391-0:419:2474":{"id":"a:2:42627:10391-0:419:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42627:10391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:328:1208":{"id":"0:328:1208","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[294,4],"end":[296,5]},"visibility":"public","docs":"Create a new `Builder`.\n\n# Examples\n\nCreate a named temporary file and write some data into it:\n\n```\n# use std::io;\n# use std::ffi::OsStr;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nuse tempfile::Builder;\n\nlet named_tempfile = Builder::new()\n    .prefix(\"my-temporary-note\")\n    .suffix(\".txt\")\n    .rand_bytes(5)\n    .tempfile()?;\n\nlet name = named_tempfile\n    .path()\n    .file_name().and_then(OsStr::to_str);\n\nif let Some(name) = name {\n    assert!(name.starts_with(\"my-temporary-note\"));\n    assert!(name.ends_with(\".txt\"));\n    assert_eq!(name.len(), \"my-temporary-note.txt\".len() + 5);\n}\n# Ok(())\n# }\n```\n\nCreate a temporary directory and add a file to it:\n\n```\n# use std::io::{self, Write};\n# use std::fs::File;\n# use std::ffi::OsStr;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nuse tempfile::Builder;\n\nlet dir = Builder::new()\n    .prefix(\"my-temporary-dir\")\n    .rand_bytes(5)\n    .tempdir()?;\n\nlet file_path = dir.path().join(\"my-temporary-note.txt\");\nlet mut file = File::create(file_path)?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\n// By closing the `TempDir` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the directory will still be deleted when `dir` goes out\n// of scope, but we won't know whether deleting the directory\n// succeeded.\ndrop(file);\ndir.close()?;\n# Ok(())\n# }\n```\n\nCreate a temporary directory with a chosen prefix under a chosen folder:\n\n```ignore\nlet dir = Builder::new()\n    .prefix(\"my-temporary-dir\")\n    .tempdir_in(\"folder-with-tempdirs\")?;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32765:248-0:399:2468":{"id":"a:2:32765:248-0:399:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32765:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32824:3595-0:419:2474":{"id":"a:2:32824:3595-0:419:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32824:3595","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42628:10493-0:413:2472":{"id":"a:2:42628:10493-0:413:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42628:10493","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5740:31134":{"id":"5:5740:31134","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13759:31137"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:2870":{"id":"0:39:2870","crate_id":0,"name":"into_path","span":{"filename":"src/dir/mod.rs","begin":[388,4],"end":[395,5]},"visibility":"public","docs":"Persist the temporary directory to disk, returning the [`PathBuf`] where it is located.\n\nThis consumes the [`TempDir`] without deleting directory on the filesystem, meaning that\nthe directory will no longer be automatically deleted.\n\n[`TempDir`]: struct.TempDir.html\n[`PathBuf`]: http://doc.rust-lang.org/std/path/struct.PathBuf.html\n\n# Examples\n\n```\nuse std::fs;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_dir = TempDir::new()?;\n\n// Persist the temporary directory to disk,\n// getting the path where it is.\nlet tmp_path = tmp_dir.into_path();\n\n// Delete the temporary directory ourselves.\nfs::remove_dir_all(tmp_path)?;\n# Ok(())\n# }\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"PathBuf","id":"1:5362:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142":{"id":"0:142","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[400,0],"end":[404,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:143:351"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:163:857":{"id":"0:163:857","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[523,4],"end":[525,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Error","id":"1:3077:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43:351":{"id":"0:43:351","crate_id":0,"name":"as_ref","span":{"filename":"src/dir/mod.rs","begin":[452,4],"end":[454,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:236:2900":{"id":"0:236:2900","crate_id":0,"name":"write","span":{"filename":"src/file/mod.rs","begin":[1041,4],"end":[1043,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:309-0:25:2463":{"id":"0:309-0:25:2463","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,30],"end":[187,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::dir::tempdir_in","name":"tempdir_in","id":"0:25:2463","glob":false}}},"0:324:60":{"id":"0:324:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[204,4],"end":[212,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13713:3184":{"id":"2:13713:3184","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13323:3768","`DoubleEndedIterator`":"2:8473:133","prim@char":"1:12451:490","str::rmatches":"2:13716:37997"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44608:8179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32765:248-0:27:2464":{"id":"a:2:32765:248-0:27:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32765:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3335:4521-0:27:2464":{"id":"a:2:3335:4521-0:27:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3335:4521","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:198:3122":{"id":"0:198:3122","crate_id":0,"name":"reopen","span":{"filename":"src/file/mod.rs","begin":[948,4],"end":[951,5]},"visibility":"public","docs":"Securely reopen the temporary file.\n\nThis function is useful when you need multiple independent handles to\nthe same file. It's perfectly fine to drop the original `NamedTempFile`\nwhile holding on to `File`s returned by this function; the `File`s will\nremain usable. However, they may not be nameable.\n\n# Errors\n\nIf the file cannot be reopened, `Err` is returned.\n\n# Security\n\nUnlike `File::open(my_temp_file.path())`, `NamedTempFile::reopen()`\nguarantees that the re-opened file is the _same_ file, even in the\npresence of pathological temporary file cleaners.\n\n# Examples\n\n```no_run\n# use std::io;\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\nlet another_handle = file.reopen()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"File","id":"1:2326:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13689:32068":{"id":"2:13689:32068","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13323:3768"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13138:8012","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:233:3135":{"id":"0:233:3135","crate_id":0,"name":"write_fmt","span":{"filename":"src/file/mod.rs","begin":[1033,4],"end":[1037,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["fmt",{"resolved_path":{"name":"fmt::Arguments","id":"2:43580:3136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13646:32034":{"id":"2:13646:32034","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42536:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42534:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11456:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11456:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[380,0],"end":[384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3564:2890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:693"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3300:260-0:27:2464":{"id":"a:2:3300:260-0:27:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3300:260-0:144:2467":{"id":"a:2:3300:260-0:144:2467","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:177:2845":{"id":"0:177:2845","crate_id":0,"name":"with_prefix","span":{"filename":"src/file/mod.rs","begin":[629,4],"end":[631,5]},"visibility":"public","docs":"Create a new named temporary file with the specified filename prefix.\n\nSee [`NamedTempFile::new()`] for details.\n\n[`NamedTempFile::new()`]: #method.new","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13725:38000":{"id":"2:13725:38000","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/dir/mod.rs","begin":[465,0],"end":[469,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3564:2890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:693"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:408:3148":{"id":"0:408:3148","crate_id":0,"name":"OnDisk","span":{"filename":"src/spooled.rs","begin":[9,4],"end":[9,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:410:2019"]},"discriminant":null}}},"b:2:2775-0:27:2464":{"id":"b:2:2775-0:27:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:29856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2775-0:154:2469":{"id":"b:2:2775-0:154:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2777:29856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13701:32072":{"id":"2:13701:32072","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13323:3768","str::rsplitn":"2:13704:32074"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44508:8017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:2644":{"id":"0:196:2644","crate_id":0,"name":"from_parts","span":{"filename":"src/file/mod.rs","begin":[907,4],"end":[909,5]},"visibility":"public","docs":"Creates a `NamedTempFile` from its constituent parts.\n\nThis can be used with [`NamedTempFile::into_parts`] to reconstruct the\n`NamedTempFile`.","links":{"`NamedTempFile::into_parts`":"0:195:3108"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["file",{"generic":"F"}],["path",{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:229:3132":{"id":"0:229:3132","crate_id":0,"name":"write_vectored","span":{"filename":"src/file/mod.rs","begin":[1021,4],"end":[1025,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"io::IoSlice","id":"1:8507:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:827":{"id":"0:119:827","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[129,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10516:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10497:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238:3131":{"id":"0:238:3131","crate_id":0,"name":"flush","span":{"filename":"src/file/mod.rs","begin":[1045,4],"end":[1047,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[394,0],"end":[398,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:141:351"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13656:32060":{"id":"2:13656:32060","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13658:32064","str::split_at_mut":"2:13657:32061"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3092-0:154:2469":{"id":"b:2:3092-0:154:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3095:149","2:3096:1848"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:139:651":{"id":"0:139:651","crate_id":0,"name":"deref","span":{"filename":"src/file/mod.rs","begin":[389,4],"end":[391,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:225:2900":{"id":"0:225:2900","crate_id":0,"name":"write","span":{"filename":"src/file/mod.rs","begin":[1013,4],"end":[1015,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3300:260-0:122:2470":{"id":"a:2:3300:260-0:122:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3335:4521-0:399:2468":{"id":"a:2:3335:4521-0:399:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3335:4521","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:141:351":{"id":"0:141:351","crate_id":0,"name":"as_ref","span":{"filename":"src/file/mod.rs","begin":[395,4],"end":[397,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:2887":{"id":"0:185:2887","crate_id":0,"name":"close","span":{"filename":"src/file/mod.rs","begin":[715,4],"end":[718,5]},"visibility":"public","docs":"Close and remove the temporary file.\n\nUse this if you want to detect errors in deleting the file.\n\n# Errors\n\nIf the file cannot be deleted, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io;\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\n// By closing the `NamedTempFile` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the file will still be deleted when `file` goes out\n// of scope, but we won't know whether deleting the file\n// succeeded.\nfile.close()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:191:3095":{"id":"0:191:3095","crate_id":0,"name":"as_file","span":{"filename":"src/file/mod.rs","begin":[871,4],"end":[873,5]},"visibility":"public","docs":"Get a reference to the underlying file.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"F"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3335:4521-0:413:2472":{"id":"a:2:3335:4521-0:413:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3335:4521","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:419:2474":{"id":"0:419:2474","crate_id":0,"name":"Builder","span":{"filename":"src/lib.rs","begin":[195,0],"end":[201,1]},"visibility":"public","docs":"Create a new temporary file or directory with custom parameters.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:325","a:2:3300:260-0:419:2474","a:2:32765:248-0:419:2474","a:2:32824:3595-0:419:2474","a:2:3335:4521-0:419:2474","a:2:42628:10493-0:419:2474","a:2:42627:10391-0:419:2474","b:2:3092-0:419:2474","b:2:2772-0:419:2474","b:2:3087-0:419:2474","b:2:3943-0:419:2474","b:2:3077-0:419:2474","b:2:2804-0:419:2474","b:2:2775-0:419:2474","b:2:3081-0:419:2474","b:5:783-0:419:2474","0:439","0:435","0:442","0:431","0:321","0:427"]}}},"2:3096:1848":{"id":"2:3096:1848","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42666:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3943-0:399:2468":{"id":"b:2:3943-0:399:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3945:1863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:273":{"id":"0:273","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[66,0],"end":[116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:274:1208","0:275:3171","0:276:3174","0:277:3179","0:278:3183"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:286:2900":{"id":"0:286:2900","crate_id":0,"name":"write","span":{"filename":"src/spooled.rs","begin":[156,4],"end":[170,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:319-0:272:2471":{"id":"0:319-0:272:2471","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[191,25],"end":[191,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::spooled::spooled_tempfile","name":"spooled_tempfile","id":"0:272:2471","glob":false}}},"2:13661:8033":{"id":"2:13661:8033","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12451:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44374:8025","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13633":{"id":"2:13633","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13634:1024","2:13635:4026","2:13636:37988","2:13637:37989","2:13639:37990","2:13642:33292","2:13643:37991","2:13644:350","2:13645:32037","2:13646:32034","2:13648:3180","2:13650:32035","2:13652:32036","2:13654:37992","2:13655:37993","2:13656:32060","2:13657:32061","2:13658:32064","2:13659:32065","2:13661:8033","2:13662:8192","2:13663:4459","2:13664:35630","2:13665:35597","2:13666:35214","2:13667:37994","2:13668:35627","2:13669:32078","2:13672:31671","2:13675:31673","2:13678:4063","2:13682:4025","2:13686:32066","2:13689:32068","2:13692:32070","2:13695:37995","2:13698:37996","2:13701:32072","2:13704:32074","2:13707:32076","2:13710:32077","2:13713:3184","2:13716:37997","2:13719:37998","2:13722:37999","2:13725:38000","2:13727:38001","2:13729:38002","2:13731:38003","2:13732:38004","2:13733:38005","2:13736:38006","2:13739:30237","2:13742:32079","2:13745:38007","2:13748:38008","2:13751:38009","2:13754:38010","2:13756:31132","2:13757:33237","2:13758:31136","2:13759:31137","2:13760:31138","2:13761:33240","2:13762:33241","2:13763:33242","2:13764:38011","2:13766:10384","2:13767:38012"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13736:38006":{"id":"2:13736:38006","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13323:3768"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5721":{"id":"5:5721","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5722:38706","5:5723:2873","5:5726:38707","5:5729:38708","5:5737:38709","5:5738:38710","5:5739:3477","5:5740:31134","5:5741:31135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3943-0:122:2470":{"id":"b:2:3943-0:122:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3945:1863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:125:2887":{"id":"0:125:2887","crate_id":0,"name":"close","span":{"filename":"src/file/mod.rs","begin":[184,4],"end":[189,5]},"visibility":"public","docs":"Close and remove the temporary file.\n\nUse this if you want to detect errors in deleting the file.\n\n# Errors\n\nIf the file cannot be deleted, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io;\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\n// Close the file, but keep the path to it around.\nlet path = file.into_temp_path();\n\n// By closing the `TempPath` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly, the\n// file will still be deleted when `file` goes out of scope, but we\n// won't know whether deleting the file succeeded.\npath.close()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:2790":{"id":"0:31:2790","crate_id":0,"name":"new_in","span":{"filename":"src/dir/mod.rs","begin":[264,4],"end":[266,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `dir`.\nThe directory and everything inside it will be automatically\ndeleted once the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory\nlet tmp_dir = TempDir::new_in(\".\")?;\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3945:1863":{"id":"2:3945:1863","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40249:8096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32765:248-0:122:2470":{"id":"a:2:32765:248-0:122:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32765:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:250":{"id":"0:250","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1070,0],"end":[1074,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["stream_len","seek_relative","rewind","stream_position"],"trait":{"name":"Seek","id":"1:3677:2904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2326:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"items":["0:251:3137"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13666:35214":{"id":"2:13666:35214","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44658:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:227:3131":{"id":"0:227:3131","crate_id":0,"name":"flush","span":{"filename":"src/file/mod.rs","begin":[1017,4],"end":[1019,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:154:2469":{"id":"b:2:3081-0:154:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:442":{"id":"0:442","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,27],"end":[194,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2854:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:445:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:402":{"id":"0:402","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[106,9],"end":[106,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10552:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:403:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:272:2471":{"id":"0:272:2471","crate_id":0,"name":"spooled_tempfile","span":{"filename":"src/spooled.rs","begin":[62,0],"end":[64,1]},"visibility":"public","docs":"Create a new spooled temporary file.\n\n# Security\n\nThis variant is secure/reliable in the presence of a pathological temporary\nfile cleaner.\n\n# Resource Leaking\n\nThe temporary file will be automatically removed by the OS when the last\nhandle to it is closed. This doesn't rely on Rust destructors being run, so\nwill (almost) never fail to clean up the temporary file.\n\n# Examples\n\n```\nuse tempfile::spooled_tempfile;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = spooled_tempfile(15);\n\nwriteln!(file, \"short line\")?;\nassert!(!file.is_rolled());\n\n// as a result of this write call, the size of the data will exceed\n// `max_size` (15), so it will be written to a temporary file on disk,\n// and the in-memory buffer will be dropped\nwriteln!(file, \"marvin gardens\")?;\nassert!(file.is_rolled());\n\n# Ok(())\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13766:10384":{"id":"2:13766:10384","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5147:10384"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44712:7973","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[500,0],"end":[505,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:153:351"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:38:1333":{"id":"0:38:1333","crate_id":0,"name":"path","span":{"filename":"src/dir/mod.rs","begin":[356,4],"end":[358,5]},"visibility":"public","docs":"Accesses the [`Path`] to the temporary directory.\n\n[`Path`]: http://doc.rust-lang.org/std/path/struct.Path.html\n\n# Examples\n\n```\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_path;\n\n{\n   let tmp_dir = TempDir::new()?;\n   tmp_path = tmp_dir.path().to_owned();\n\n   // Check that the temp directory actually exists.\n   assert!(tmp_path.exists());\n\n   // End of `tmp_dir` scope, directory will be deleted\n}\n\n// Temp directory should be deleted by now\nassert_eq!(tmp_path.exists(), false);\n# Ok(())\n# }\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"path::Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32765:248-0:154:2469":{"id":"a:2:32765:248-0:154:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32765:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32765:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:112:2466":{"id":"0:112:2466","crate_id":0,"name":"tempfile_in","span":{"filename":"src/file/mod.rs","begin":[101,0],"end":[103,1]},"visibility":"public","docs":"Create a new temporary file in the specified directory.\n\n# Security\n\nThis variant is secure/reliable in the presence of a pathological temporary file cleaner.\nIf the temporary file isn't created in [`std::env::temp_dir()`] then temporary file cleaners aren't an issue.\n\n# Resource Leaking\n\nThe temporary file will be automatically removed by the OS when the last handle to it is closed.\nThis doesn't rely on Rust destructors being run, so will (almost) never fail to clean up the temporary file.\n\n# Errors\n\nIf the file can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempfile_in;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a file inside of the current working directory\nlet mut file = tempfile_in(\"./\")?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2326:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::path::Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13767:38012":{"id":"2:13767:38012","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5144:38012"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44721:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13758:31136":{"id":"2:13758:31136","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32824:3595-0:27:2464":{"id":"a:2:32824:3595-0:27:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32824:3595","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:24:2462":{"id":"0:24:2462","crate_id":0,"name":"tempdir","span":{"filename":"src/dir/mod.rs","begin":[65,0],"end":[67,1]},"visibility":"public","docs":"Create a new temporary directory.\n\nThe `tempdir` function creates a directory in the file system\nand returns a [`TempDir`].\nThe directory will be automatically deleted when the `TempDir`s\ndestructor is run.\n\n# Resource Leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempdir;\nuse std::fs::File;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`\nlet tmp_dir = tempdir()?;\n\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// `tmp_dir` goes out of scope, the directory as well as\n// `tmp_file` will be deleted here.\ndrop(tmp_file);\ntmp_dir.close()?;\n# Ok(())\n# }\n```\n\n[`TempDir`]: struct.TempDir.html\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32824:3595-0:413:2472":{"id":"a:2:32824:3595-0:413:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32824:3595","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32824:3595-0:144:2467":{"id":"a:2:32824:3595-0:144:2467","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32824:3595","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32824:3595","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:248:3137":{"id":"0:248:3137","crate_id":0,"name":"seek","span":{"filename":"src/file/mod.rs","begin":[1065,4],"end":[1067,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"1:8516:2905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:397-0:356:1917":{"id":"0:397-0:356:1917","crate_id":0,"name":null,"span":{"filename":"src/file/imp/mod.rs","begin":[4,8],"end":[4,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::unix","name":"unix","id":"0:356:1917","glob":true}}},"0:403:827":{"id":"0:403:827","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[106,9],"end":[106,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10516:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10497:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3077-0:154:2469":{"id":"b:2:3077-0:154:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3080:2875"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13729:38002":{"id":"2:13729:38002","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:2463":{"id":"0:25:2463","crate_id":0,"name":"tempdir_in","span":{"filename":"src/dir/mod.rs","begin":[114,0],"end":[116,1]},"visibility":"public","docs":"Create a new temporary directory in a specific directory.\n\nThe `tempdir_in` function creates a directory in the specified directory\nand returns a [`TempDir`].\nThe directory will be automatically deleted when the `TempDir`s\ndestructor is run.\n\n# Resource Leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempdir_in;\nuse std::fs::File;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory.\nlet tmp_dir = tempdir_in(\".\")?;\n\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// `tmp_dir` goes out of scope, the directory as well as\n// `tmp_file` will be deleted here.\ndrop(tmp_file);\ntmp_dir.close()?;\n# Ok(())\n# }\n```\n\n[`TempDir`]: struct.TempDir.html\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::path::Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:193:3100":{"id":"0:193:3100","crate_id":0,"name":"into_file","span":{"filename":"src/file/mod.rs","begin":[883,4],"end":[885,5]},"visibility":"public","docs":"Convert the temporary file into a `std::fs::File`.\n\nThe inner file will be deleted.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"F"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[535,0],"end":[539,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10557:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:169:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:122:2470":{"id":"0:122:2470","crate_id":0,"name":"TempPath","span":{"filename":"src/file/mod.rs","begin":[146,0],"end":[148,1]},"visibility":"public","docs":"A path to a named temporary file without an open file handle.\n\nThis is useful when the temporary file needs to be used by a child process,\nfor example.\n\nWhen dropped, the temporary file is deleted.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:124","a:2:3300:260-0:122:2470","a:2:32765:248-0:122:2470","a:2:32824:3595-0:122:2470","a:2:3335:4521-0:122:2470","a:2:42628:10493-0:122:2470","a:2:42627:10391-0:122:2470","b:2:3092-0:122:2470","b:2:2772-0:122:2470","b:2:3087-0:122:2470","b:2:3943-0:122:2470","b:2:3077-0:122:2470","b:2:2775-0:122:2470","b:2:3081-0:122:2470","0:135","0:140","0:137","0:142","0:116","0:133"]}}},"5:786:4083":{"id":"5:786:4083","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:434:494":{"id":"0:434:494","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[194,16],"end":[194,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:317-0:122:2470":{"id":"0:317-0:122:2470","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,74],"end":[189,82]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::TempPath","name":"TempPath","id":"0:122:2470","glob":false}}},"2:13669:32078":{"id":"2:13669:32078","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13323:3768"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:785:4082":{"id":"5:785:4082","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/dir/mod.rs","begin":[200,0],"end":[449,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:1208","0:31:2790","0:33:2845","0:35:2850","0:38:1333","0:39:2870","0:40:2887"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13664:35630":{"id":"2:13664:35630","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13665:35597"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44678:8182","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61-0:50:1917":{"id":"0:61-0:50:1917","crate_id":0,"name":null,"span":{"filename":"src/dir/imp/mod.rs","begin":[4,0],"end":[4,16]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(unix)]"],"deprecation":null,"inner":{"import":{"source":"unix","name":"unix","id":"0:50:1917","glob":true}}},"b:5:5974-0:399:2468":{"id":"b:5:5974-0:399:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10557:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5972:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5976:1823"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3077-0:144:2467":{"id":"b:2:3077-0:144:2467","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3080:2875"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:221:3130":{"id":"0:221:3130","crate_id":0,"name":"read_exact","span":{"filename":"src/file/mod.rs","begin":[1007,4],"end":[1009,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:413:2472":{"id":"0:413:2472","crate_id":0,"name":"SpooledTempFile","span":{"filename":"src/spooled.rs","begin":[17,0],"end":[20,1]},"visibility":"public","docs":"An object that behaves like a regular temporary file, but keeps data in\nmemory until it reaches a configured size, at which point the data is\nwritten to a temporary file on disk, and further operations use the file\non disk.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:273","a:2:3300:260-0:413:2472","a:2:32765:248-0:413:2472","a:2:32824:3595-0:413:2472","a:2:3335:4521-0:413:2472","a:2:42628:10493-0:413:2472","a:2:42627:10391-0:413:2472","b:2:3092-0:413:2472","b:2:2772-0:413:2472","b:2:3087-0:413:2472","b:2:3943-0:413:2472","b:2:3077-0:413:2472","b:2:2775-0:413:2472","b:2:3081-0:413:2472","0:285","0:416","0:279","0:289"]}}},"0:346:2638":{"id":"0:346:2638","crate_id":0,"name":"make_in","span":{"filename":"src/lib.rs","begin":[778,4],"end":[796,5]},"visibility":"public","docs":"This is the same as [`Builder::make`], except `dir` is used as the base\ndirectory for the temporary file path.\n\nSee [`Builder::make`] for more details and security implications.\n\n# Examples\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n# #[cfg(unix)]\nuse std::os::unix::net::UnixListener;\n# #[cfg(unix)]\nlet tempsock = Builder::new().make_in(\"./\", |path| UnixListener::bind(path))?;\n# Ok(())\n# }\n```","links":{"`Builder::make`":"0:343:2635"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3573:153","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13707:32076":{"id":"2:13707:32076","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42534:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42628:10493-0:122:2470":{"id":"a:2:42628:10493-0:122:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42628:10493","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13754:38010":{"id":"2:13754:38010","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13284:148","`FromStr`":"2:13283:3409"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42666:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13283:3409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13283:3409","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3087-0:27:2464":{"id":"b:2:3087-0:27:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13727:38001":{"id":"2:13727:38001","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3077-0:27:2464":{"id":"b:2:3077-0:27:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:2875"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3081-0:413:2472":{"id":"b:2:3081-0:413:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13659:32065":{"id":"2:13659:32065","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13658:32064"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42534:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:1917":{"id":"0:50:1917","crate_id":0,"name":"unix","span":{"filename":"src/dir/imp/unix.rs","begin":[1,0],"end":[21,1]},"visibility":{"restricted":{"parent":"0:49:2891","path":"::dir::imp"}},"docs":null,"links":{},"attrs":["#[cfg(unix)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":true}}},"2:3091:1850":{"id":"2:3091:1850","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42666:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3087-0:122:2470":{"id":"b:2:3087-0:122:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:184:1333":{"id":"0:184:1333","crate_id":0,"name":"path","span":{"filename":"src/file/mod.rs","begin":[680,4],"end":[682,5]},"visibility":"public","docs":"Get the temporary file's path.\n\n# Security\n\nReferring to a temporary file's path may not be secure in all cases.\nPlease read the security section on the top level documentation of this\ntype for details.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), ::std::io::Error> {\nlet file = NamedTempFile::new()?;\n\nprintln!(\"{:?}\", file.path());\n# Ok(())\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202:3123":{"id":"0:202:3123","crate_id":0,"name":"read","span":{"filename":"src/file/mod.rs","begin":[955,4],"end":[957,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:182":{"id":"0:182","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[652,0],"end":[910,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:184:1333","0:185:2887","0:186:2961","0:188:2972","0:190:2978","0:191:3095","0:192:3097","0:193:3100","0:194:3104","0:195:3108","0:196:2644"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:117:857":{"id":"0:117:857","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[123,4],"end":[125,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:827":{"id":"0:150:827","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[495,4],"end":[497,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10516:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10497:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2772-0:27:2464":{"id":"b:2:2772-0:27:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:3303"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:156:2459":{"id":"0:156:2459","crate_id":0,"name":"error","span":{"filename":"src/file/mod.rs","begin":[510,4],"end":[510,24]},"visibility":"public","docs":"The underlying IO error.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"io::Error","id":"1:3077:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:2772-0:154:2469":{"id":"b:2:2772-0:154:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2774:3303"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:33:2845":{"id":"0:33:2845","crate_id":0,"name":"with_prefix","span":{"filename":"src/dir/mod.rs","begin":[292,4],"end":[294,5]},"visibility":"public","docs":"Attempts to make a temporary directory with the specified prefix inside of\n`env::temp_dir()`. The directory and everything inside it will be automatically\ndeleted once the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory\nlet tmp_dir = TempDir::with_prefix(\"foo-\")?;\nlet tmp_name = tmp_dir.path().file_name().unwrap().to_str().unwrap();\nassert!(tmp_name.starts_with(\"foo-\"));\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:285":{"id":"0:285","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[155,0],"end":[196,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","by_ref","write_fmt","write_vectored","write_all_vectored","write_all"],"trait":{"name":"Write","id":"1:3659:2906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:286:2900","0:287:3132","0:288:3131"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:315-0:399:2468":{"id":"0:315-0:399:2468","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,42],"end":[189,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::PathPersistError","name":"PathPersistError","id":"0:399:2468","glob":false}}},"0:336:2465":{"id":"0:336:2465","crate_id":0,"name":"tempfile","span":{"filename":"src/lib.rs","begin":[519,4],"end":[521,5]},"visibility":"public","docs":"Create the named temporary file.\n\n# Security\n\nSee [the security][security] docs on `NamedTempFile`.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `NamedTempFile`.\n\n# Errors\n\nIf the file cannot be created, `Err` is returned.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet tempfile = Builder::new().tempfile()?;\n# Ok(())\n# }\n```\n\n[security]: struct.NamedTempFile.html#security\n[resource-leaking]: struct.NamedTempFile.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3077-0:419:2474":{"id":"b:2:3077-0:419:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:3080:2875"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:314-0:144:2467":{"id":"0:314-0:144:2467","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,27],"end":[189,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::NamedTempFile","name":"NamedTempFile","id":"0:144:2467","glob":false}}},"b:2:3081-0:122:2470":{"id":"b:2:3081-0:122:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:27:2464":{"id":"0:27:2464","crate_id":0,"name":"TempDir","span":{"filename":"src/dir/mod.rs","begin":[196,0],"end":[198,1]},"visibility":"public","docs":"A directory in the filesystem that is automatically deleted when\nit goes out of scope.\n\nThe [`TempDir`] type creates a directory on the file system that\nis deleted once it goes out of scope. At construction, the\n`TempDir` creates a new directory with a randomly generated name.\n\nThe default constructor, [`TempDir::new()`], creates directories in\nthe location returned by [`std::env::temp_dir()`], but `TempDir`\ncan be configured to manage a temporary directory in any location\nby constructing with a [`Builder`].\n\nAfter creating a `TempDir`, work with the file system by doing\nstandard [`std::fs`] file system operations on its [`Path`],\nwhich can be retrieved with [`TempDir::path()`]. Once the `TempDir`\nvalue is dropped, the directory at the path will be deleted, along\nwith any files and directories it contains. It is your responsibility\nto ensure that no further file system operations are attempted\ninside the temporary directory once it has been deleted.\n\n# Resource Leaking\n\nVarious platform-specific conditions may cause `TempDir` to fail\nto delete the underlying directory. It's important to ensure that\nhandles (like [`File`] and [`ReadDir`]) to files inside the\ndirectory are dropped before the `TempDir` goes out of scope. The\n`TempDir` destructor will silently ignore any errors in deleting\nthe directory; to instead handle errors call [`TempDir::close()`].\n\nNote that if the program exits before the `TempDir` destructor is\nrun, such as via [`std::process::exit()`], by segfaulting, or by\nreceiving a signal like `SIGINT`, then the temporary directory\nwill not be deleted.\n\n# Examples\n\nCreate a temporary directory with a generated name:\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`\nlet tmp_dir = TempDir::new()?;\n# Ok(())\n# }\n```\n\nCreate a temporary directory with a prefix in its name:\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::Builder;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`,\n// whose name will begin with 'example'.\nlet tmp_dir = Builder::new().prefix(\"example\").tempdir()?;\n# Ok(())\n# }\n```\n\n[`File`]: http://doc.rust-lang.org/std/fs/struct.File.html\n[`Path`]: http://doc.rust-lang.org/std/path/struct.Path.html\n[`ReadDir`]: http://doc.rust-lang.org/std/fs/struct.ReadDir.html\n[`Builder`]: struct.Builder.html\n[`TempDir::close()`]: struct.TempDir.html#method.close\n[`TempDir::new()`]: struct.TempDir.html#method.new\n[`TempDir::path()`]: struct.TempDir.html#method.path\n[`TempDir`]: struct.TempDir.html\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html\n[`std::fs`]: http://doc.rust-lang.org/std/fs/index.html\n[`std::process::exit()`]: http://doc.rust-lang.org/std/process/fn.exit.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:29","a:2:3300:260-0:27:2464","a:2:32765:248-0:27:2464","a:2:32824:3595-0:27:2464","a:2:3335:4521-0:27:2464","a:2:42628:10493-0:27:2464","a:2:42627:10391-0:27:2464","b:2:3092-0:27:2464","b:2:2772-0:27:2464","b:2:3087-0:27:2464","b:2:3943-0:27:2464","b:2:3077-0:27:2464","b:2:2775-0:27:2464","b:2:3081-0:27:2464","0:44","0:46","0:42"]}}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[528,0],"end":[533,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:166:857"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:144:2467":{"id":"0:144:2467","crate_id":0,"name":"NamedTempFile","span":{"filename":"src/file/mod.rs","begin":[489,0],"end":[492,1]},"visibility":"public","docs":"A named temporary file.\n\nThe default constructor, [`NamedTempFile::new()`], creates files in\nthe location returned by [`std::env::temp_dir()`], but `NamedTempFile`\ncan be configured to manage a temporary file in any location\nby constructing with [`NamedTempFile::new_in()`].\n\n# Security\n\nMost operating systems employ temporary file cleaners to delete old\ntemporary files. Unfortunately these temporary file cleaners don't always\nreliably _detect_ whether the temporary file is still being used.\n\nSpecifically, the following sequence of events can happen:\n\n1. A user creates a temporary file with `NamedTempFile::new()`.\n2. Time passes.\n3. The temporary file cleaner deletes (unlinks) the temporary file from the\n   filesystem.\n4. Some other program creates a new file to replace this deleted temporary\n   file.\n5. The user tries to re-open the temporary file (in the same program or in a\n   different program) by path. Unfortunately, they'll end up opening the\n   file created by the other program, not the original file.\n\n## Operating System Specific Concerns\n\nThe behavior of temporary files and temporary file cleaners differ by\noperating system.\n\n### Windows\n\nOn Windows, open files _can't_ be deleted. This removes most of the concerns\naround temporary file cleaners.\n\nFurthermore, temporary files are, by default, created in per-user temporary\nfile directories so only an application running as the same user would be\nable to interfere (which they could do anyways). However, an application\nrunning as the same user can still _accidentally_ re-create deleted\ntemporary files if the number of random bytes in the temporary file name is\ntoo small.\n\nSo, the only real concern on Windows is:\n\n1. Opening a named temporary file in a world-writable directory.\n2. Using the `into_temp_path()` and/or `into_parts()` APIs to close the file\n   handle without deleting the underlying file.\n3. Continuing to use the file by path.\n\n### UNIX\n\nUnlike on Windows, UNIX (and UNIX like) systems allow open files to be\n\"unlinked\" (deleted).\n\n#### MacOS\n\nLike on Windows, temporary files are created in per-user temporary file\ndirectories by default so calling `NamedTempFile::new()` should be\nrelatively safe.\n\n#### Linux\n\nUnfortunately, most _Linux_ distributions don't create per-user temporary\nfile directories. Worse, systemd's tmpfiles daemon (a common temporary file\ncleaner) will happily remove open temporary files if they haven't been\nmodified within the last 10 days.\n\n# Resource Leaking\n\nIf the program exits before the `NamedTempFile` destructor is\nrun, the temporary file will not be deleted. This can happen\nif the process exits using [`std::process::exit()`], a segfault occurs,\nreceiving an interrupt signal like `SIGINT` that is not handled, or by using\na statically declared `NamedTempFile` instance (like with [`lazy_static`]).\n\nUse the [`tempfile()`] function unless you need a named file path.\n\n[`tempfile()`]: fn.tempfile.html\n[`NamedTempFile::new()`]: #method.new\n[`NamedTempFile::new_in()`]: #method.new_in\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html\n[`std::process::exit()`]: http://doc.rust-lang.org/std/process/fn.exit.html\n[`lazy_static`]: https://github.com/rust-lang-nursery/lazy-static.rs/issues/62","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"std::fs::File","id":"1:2326:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:173","0:182","0:197","a:2:3300:260-0:144:2467","a:2:32765:248-0:144:2467","a:2:32824:3595-0:144:2467","a:2:3335:4521-0:144:2467","a:2:42628:10493-0:144:2467","a:2:42627:10391-0:144:2467","b:2:3092-0:144:2467","b:2:2772-0:144:2467","b:2:3087-0:144:2467","b:2:3943-0:144:2467","b:2:3077-0:144:2467","b:2:2775-0:144:2467","b:2:3081-0:144:2467","0:148","0:151","0:200","0:256","0:250","0:235","0:223","0:246","0:164","0:253","0:212"]}}},"b:2:3081-0:399:2468":{"id":"b:2:3081-0:399:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3092-0:122:2470":{"id":"b:2:3092-0:122:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1848"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:206:3128":{"id":"0:206:3128","crate_id":0,"name":"read_to_end","span":{"filename":"src/file/mod.rs","begin":[965,4],"end":[969,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"5:7214:278","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:407:2019":{"id":"0:407:2019","crate_id":0,"name":"0","span":{"filename":"src/spooled.rs","begin":[8,13],"end":[8,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"std::io::Cursor","id":"1:8284:3144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7214:278","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}}}}},"a:2:3300:260-0:413:2472":{"id":"a:2:3300:260-0:413:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13655:37993":{"id":"2:13655:37993","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12457:1763","crate::ops::IndexMut":"2:3605:3520","str::slice_unchecked":"2:13654:37992"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3077-0:399:2468":{"id":"b:2:3077-0:399:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:2875"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:256":{"id":"0:256","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1084,0],"end":[1089,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(any(unix, target_os = \"wasi\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRawFd","id":"1:4939:2908","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:4939:2908","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:258:3140"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13667:37994":{"id":"2:13667:37994","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44668:8181","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32824:3595-0:399:2468":{"id":"a:2:32824:3595-0:399:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32824:3595","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5976:1823":{"id":"5:5976:1823","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35:2850":{"id":"0:35:2850","crate_id":0,"name":"with_prefix_in","span":{"filename":"src/dir/mod.rs","begin":[320,4],"end":[325,5]},"visibility":"public","docs":"Attempts to make a temporary directory with the specified prefix inside\nthe specified directory. The directory and everything inside it will be\nautomatically deleted once the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory\nlet tmp_dir = TempDir::with_prefix_in(\"foo-\", \".\")?;\nlet tmp_name = tmp_dir.path().file_name().unwrap().to_str().unwrap();\nassert!(tmp_name.starts_with(\"foo-\"));\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13732:38004":{"id":"2:13732:38004","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5722:38706":{"id":"5:5722:38706","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2833","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:296:2833","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3095:149":{"id":"2:3095:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32689:4138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:341:2463":{"id":"0:341:2463","crate_id":0,"name":"tempdir_in","span":{"filename":"src/lib.rs","begin":[627,4],"end":[644,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `dir`.\nThe directory and everything inside it will be automatically\ndeleted once the returned `TempDir` is destroyed.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::Builder;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_dir = Builder::new().tempdir_in(\"./\")?;\n# Ok(())\n# }\n```\n\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:27:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:2961":{"id":"0:127:2961","crate_id":0,"name":"persist","span":{"filename":"src/file/mod.rs","begin":[234,4],"end":[249,5]},"visibility":"public","docs":"Persist the temporary file at the target path.\n\nIf a file exists at the target path, persist will atomically replace it.\nIf this method fails, it will return `self` in the resulting\n[`PathPersistError`].\n\nNote: Temporary files cannot be persisted across filesystems. Also\nneither the file contents nor the containing directory are\nsynchronized, so the update may not yet have reached the disk when\n`persist` returns.\n\n# Security\n\nOnly use this method if you're positive that a temporary file cleaner\nwon't have deleted your file. Otherwise, you might end up persisting an\nattacker controlled file.\n\n# Errors\n\nIf the file cannot be moved to the new location, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet path = file.into_temp_path();\npath.persist(\"./saved_file.txt\")?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:42666:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5723:2873":{"id":"5:5723:2873","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7801:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:38707":{"id":"5:5726:38707","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7801:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7801:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13751:38009":{"id":"2:13751:38009","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13323:3768"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13344:15663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:351":{"id":"0:143:351","crate_id":0,"name":"as_ref","span":{"filename":"src/file/mod.rs","begin":[401,4],"end":[403,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253":{"id":"0:253","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1077,0],"end":[1081,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(any(unix, target_os = \"wasi\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsFd","id":"1:5020:2907","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsFd","id":"1:5020:2907","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:255:3139"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2772-0:122:2470":{"id":"b:2:2772-0:122:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:3303"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42628:10493-0:144:2467":{"id":"a:2:42628:10493-0:144:2467","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42628:10493","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42628:10493","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:399:2468":{"id":"0:399:2468","crate_id":0,"name":"PathPersistError","span":{"filename":"src/file/mod.rs","begin":[107,0],"end":[112,1]},"visibility":"public","docs":"Error returned when persisting a temporary file path fails.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:400:2459","0:401:1333"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:3300:260-0:399:2468","a:2:32765:248-0:399:2468","a:2:32824:3595-0:399:2468","a:2:3335:4521-0:399:2468","a:2:42628:10493-0:399:2468","a:2:42627:10391-0:399:2468","b:2:3092-0:399:2468","b:2:2772-0:399:2468","b:2:3087-0:399:2468","b:2:3943-0:399:2468","b:2:3077-0:399:2468","b:2:2775-0:399:2468","b:2:3081-0:399:2468","b:5:5974-0:399:2468","0:402","0:120","0:116","0:118","0:114"]}}},"0:153:351":{"id":"0:153:351","crate_id":0,"name":"as_ref","span":{"filename":"src/file/mod.rs","begin":[502,4],"end":[504,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154:2469":{"id":"0:154:2469","crate_id":0,"name":"PersistError","span":{"filename":"src/file/mod.rs","begin":[508,0],"end":[513,1]},"visibility":"public","docs":"Error returned when persisting a temporary file fails.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:156:2459","0:157:816"],"fields_stripped":false}},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"std::fs::File","id":"1:2326:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:3300:260-0:154:2469","a:2:32765:248-0:154:2469","a:2:32824:3595-0:154:2469","a:2:3335:4521-0:154:2469","a:2:42628:10493-0:154:2469","a:2:42627:10391-0:154:2469","b:2:3092-0:154:2469","b:2:2772-0:154:2469","b:2:3087-0:154:2469","b:2:3943-0:154:2469","b:2:3077-0:154:2469","b:2:2775-0:154:2469","b:2:3081-0:154:2469","b:5:5974-0:154:2469","0:170","0:161","0:164","0:167","0:158"]}}},"0:343:2635":{"id":"0:343:2635","crate_id":0,"name":"make","span":{"filename":"src/lib.rs","begin":[749,4],"end":[754,5]},"visibility":"public","docs":"Attempts to create a temporary file (or file-like object) using the\nprovided closure. The closure is passed a temporary file path and\nreturns an [`std::io::Result`]. The path provided to the closure will be\ninside of [`std::env::temp_dir()`]. Use [`Builder::make_in`] to provide\na custom temporary directory. If the closure returns one of the\nfollowing errors, then another randomized file path is tried:\n - [`std::io::ErrorKind::AlreadyExists`]\n - [`std::io::ErrorKind::AddrInUse`]\n\nThis can be helpful for taking full control over the file creation, but\nleaving the temporary file path construction up to the library. This\nalso enables creating a temporary UNIX domain socket, since it is not\npossible to bind to a socket that already exists.\n\nNote that [`Builder::append`] is ignored when using [`Builder::make`].\n\n# Security\n\nThis has the same [security implications][security] as\n[`NamedTempFile`], but with additional caveats. Specifically, it is up\nto the closure to ensure that the file does not exist and that such a\ncheck is *atomic*. Otherwise, a [time-of-check to time-of-use\nbug][TOCTOU] could be introduced.\n\nFor example, the following is **not** secure:\n\n```\n# use std::io;\n# use std::fs::File;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n// This is NOT secure!\nlet tempfile = Builder::new().make(|path| {\n    if path.is_file() {\n        return Err(io::ErrorKind::AlreadyExists.into());\n    }\n\n    // Between the check above and the usage below, an attacker could\n    // have replaced `path` with another file, which would get truncated\n    // by `File::create`.\n\n    File::create(path)\n})?;\n# Ok(())\n# }\n```\nNote that simply using [`std::fs::File::create`] alone is not correct\nbecause it does not fail if the file already exists:\n```\n# use std::io;\n# use std::fs::File;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n// This could overwrite an existing file!\nlet tempfile = Builder::new().make(|path| File::create(path))?;\n# Ok(())\n# }\n```\nFor creating regular temporary files, use [`Builder::tempfile`] instead\nto avoid these problems. This function is meant to enable more exotic\nuse-cases.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `NamedTempFile`.\n\n# Errors\n\nIf the closure returns any error besides\n[`std::io::ErrorKind::AlreadyExists`] or\n[`std::io::ErrorKind::AddrInUse`], then `Err` is returned.\n\n# Examples\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n# #[cfg(unix)]\nuse std::os::unix::net::UnixListener;\n# #[cfg(unix)]\nlet tempsock = Builder::new().make(|path| UnixListener::bind(path))?;\n# Ok(())\n# }\n```\n\n[TOCTOU]: https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use\n[security]: struct.NamedTempFile.html#security\n[resource-leaking]: struct.NamedTempFile.html#resource-leaking","links":{"`NamedTempFile`":"0:144:2467","`std::io::ErrorKind::AlreadyExists`":"1:8393:3200","`Builder::make_in`":"0:346:2638","`Builder::tempfile`":"0:336:2465","`Builder::append`":"0:334:2480","`std::fs::File::create`":"1:2346:2591","`std::io::ErrorKind::AddrInUse`":"1:8385:3201","`std::io::Result`":"1:3075:237","`Builder::make`":"0:343:2635","`std::env::temp_dir()`":"1:1928:2566"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3573:153","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5475:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13650:32035":{"id":"2:13650:32035","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11456:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11456:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3943-0:413:2472":{"id":"b:2:3943-0:413:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3945:1863"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13764:38011":{"id":"2:13764:38011","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5146:38011"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44703:8107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2804-0:419:2474":{"id":"b:2:2804-0:419:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:3992","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2806:29859"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:335:2481":{"id":"0:335:2481","crate_id":0,"name":"permissions","span":{"filename":"src/lib.rs","begin":[482,4],"end":[485,5]},"visibility":"public","docs":"The permissions to create the tempfile or [tempdir](Self::tempdir) with.\nThis allows to them differ from the default mode of `0o600` on Unix.\n\n# Security\n\nBy default, the permissions of tempfiles on unix are set for it to be\nreadable and writable by the owner only, yielding the greatest amount\nof security.\nAs this method allows to widen the permissions, security would be\nreduced in such cases.\n\n# Platform Notes\n## Unix\n\nThe actual permission bits set on the tempfile or tempdir will be affected by the\n`umask` applied by the underlying syscall.\n\n\n## Windows and others\n\nThis setting is unsupported and trying to set a file or directory read-only\nwill cause an error to be returned..\n\n# Examples\n\nCreate a named temporary file that is world-readable.\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n#[cfg(unix)]\n{\n    use std::os::unix::fs::PermissionsExt;\n    let all_read_write = std::fs::Permissions::from_mode(0o666);\n    let tempfile = Builder::new().permissions(all_read_write).tempfile()?;\n    let actual_permissions = tempfile.path().metadata()?.permissions();\n    assert_ne!(\n        actual_permissions.mode() & !0o170000,\n        0o600,\n        \"we get broader permissions than the default despite umask\"\n    );\n}\n# Ok(())\n# }\n```\n\nCreate a named temporary directory that is restricted to the owner.\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n#[cfg(unix)]\n{\n    use std::os::unix::fs::PermissionsExt;\n    let owner_rwx = std::fs::Permissions::from_mode(0o700);\n    let tempdir = Builder::new().permissions(owner_rwx).tempdir()?;\n    let actual_permissions = tempdir.path().metadata()?.permissions();\n    assert_eq!(\n        actual_permissions.mode() & !0o170000,\n        0o700,\n        \"we get the narrow permissions we asked for\"\n    );\n}\n# Ok(())\n# }\n```","links":{"Self::tempdir":"0:340:2462"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["permissions",{"resolved_path":{"name":"std::fs::Permissions","id":"1:8223:2482","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13645:32037":{"id":"2:13645:32037","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12470:1893"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13760:31138":{"id":"2:13760:31138","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3335:4521-0:144:2467":{"id":"a:2:3335:4521-0:144:2467","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3335:4521","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3335:4521","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3335:4521-0:154:2469":{"id":"a:2:3335:4521-0:154:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3335:4521","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3335:4521","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:154:2469","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13648:3180":{"id":"2:13648:3180","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42536:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42534:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11456:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11456:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3087-0:419:2474":{"id":"b:2:3087-0:419:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:3090:149","2:3091:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:331:2479":{"id":"0:331:2479","crate_id":0,"name":"suffix","span":{"filename":"src/lib.rs","begin":[347,4],"end":[350,5]},"visibility":"public","docs":"Set a custom filename suffix.\n\nPath separators are legal but not advisable.\nDefault: empty.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .suffix(\".txt\")\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["suffix",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"S"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32766:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3300:260-0:399:2468":{"id":"a:2:3300:260-0:399:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:316-0:154:2469":{"id":"0:316-0:154:2469","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,60],"end":[189,72]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::PersistError","name":"PersistError","id":"0:154:2469","glob":false}}},"a:2:42628:10493-0:419:2474":{"id":"a:2:42628:10493-0:419:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42628:10493","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13722:37999":{"id":"2:13722:37999","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13323:3768","`DoubleEndedIterator`":"2:8473:133","prim@char":"1:12451:490","str::match_indices":"2:13719:37998"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44572:8178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13329:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13344:15663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:827":{"id":"0:134:827","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[375,4],"end":[377,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10516:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10497:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115:857":{"id":"0:115:857","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[116,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Error","id":"1:3077:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:280:3123":{"id":"0:280:3123","crate_id":0,"name":"read","span":{"filename":"src/spooled.rs","begin":[119,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:419:2474":{"id":"b:2:3081-0:419:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3092-0:419:2474":{"id":"b:2:3092-0:419:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:3095:149","2:3096:1848"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:417:827":{"id":"0:417:827","crate_id":0,"name":"fmt","span":{"filename":"src/spooled.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10516:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10497:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5738:38710":{"id":"5:5738:38710","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:296:2833","`String`":"5:7801:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2833","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278:3183":{"id":"0:278:3183","crate_id":0,"name":"into_inner","span":{"filename":"src/spooled.rs","begin":[113,4],"end":[115,5]},"visibility":"public","docs":"Consumes and returns the inner `SpooledData` type.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"SpooledData","id":"0:404:3146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5741:31135":{"id":"5:5741:31135","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13760:31138"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42628:10493-0:399:2468":{"id":"a:2:42628:10493-0:399:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42628:10493","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:274:1208":{"id":"0:274:1208","crate_id":0,"name":"new","span":{"filename":"src/spooled.rs","begin":[68,4],"end":[73,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SpooledTempFile","id":"0:413:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169:827":{"id":"0:169:827","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[536,4],"end":[538,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10516:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10497:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288:3131":{"id":"0:288:3131","crate_id":0,"name":"flush","span":{"filename":"src/spooled.rs","begin":[190,4],"end":[195,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3077-0:122:2470":{"id":"b:2:3077-0:122:2470","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:122:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:2875"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32765:248-0:144:2467":{"id":"a:2:32765:248-0:144:2467","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32765:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32765:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:217:3128":{"id":"0:217:3128","crate_id":0,"name":"read_to_end","span":{"filename":"src/file/mod.rs","begin":[995,4],"end":[999,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"5:7214:278","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:313-0:112:2466":{"id":"0:313-0:112:2466","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,14],"end":[189,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::tempfile_in","name":"tempfile_in","id":"0:112:2466","glob":false}}},"b:2:3092-0:399:2468":{"id":"b:2:3092-0:399:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:399:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1848"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3087-0:144:2467":{"id":"b:2:3087-0:144:2467","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3090:149","2:3091:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:208:3129":{"id":"0:208:3129","crate_id":0,"name":"read_to_string","span":{"filename":"src/file/mod.rs","begin":[971,4],"end":[975,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7801:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3075:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3300:260-0:419:2474":{"id":"a:2:3300:260-0:419:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:419:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:200":{"id":"0:200","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[954,0],"end":[982,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:3602:2903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["read_exact","read_buf_exact","bytes","is_read_vectored","read_vectored","read_to_end","by_ref","chain","read_to_string","read_buf","take"],"trait":{"name":"Read","id":"1:3602:2903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:144:2467","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:202:3123","0:204:3125","0:206:3128","0:208:3129","0:210:3130"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13634:1024":{"id":"2:13634:1024","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12451:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:7825:10116":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"6:6493:9304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:5205:9074":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:954:7732":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"22:3918:5555":{"crate_id":22,"path":["linux_raw_sys","general","epoll_event"],"kind":"struct"},"6:5405:9150":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"21:1915:21082":{"crate_id":21,"path":["rustix","ioctl","Ioctl"],"kind":"trait"},"1:8255:8384":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"22:4918:8668":{"crate_id":22,"path":["linux_raw_sys","general","sigval"],"kind":"union"},"22:3833:5535":{"crate_id":22,"path":["linux_raw_sys","general","__user_cap_data_struct"],"kind":"struct"},"15:288:22178":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:6310:5491":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:11902:6147":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:6907:3585":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:42514:8002":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:4825:5786":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:11900:8018":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:43232:4296":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:10928:6086":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:7899:5446":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:5044:9040":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:5658:9257":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:12035:6160":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:4120:7194":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:11627:7731":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"21:5278:5854":{"crate_id":21,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"1:996:7723":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4805:8910":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:6205:23084":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:16399:7010":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:8179:7556":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:7824:7838":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:2920:7161":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:14279:5482":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:11448:6104":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:2328:3361":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:3503:5954":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:10729:5933":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:8284:9594":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:43465:9692":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:43580:3136":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:4829:5790":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:8316:3187":{"crate_id":2,"path":["core","iter","sources","repeat_with","repeat_with"],"kind":"function"},"2:43756:8146":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"11:2349:7726":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"22:3939:5561":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_key"],"kind":"struct"},"2:22954:15888":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"2:44928:8035":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11515:6111":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:3303:7736":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:14031:6410":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:6211:5496":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:42570:7731":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:31552:4005":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:40922:8104":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:7578:8471":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11163:6090":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:32735:7517":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:14573:6518":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:14438:6500":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:11958:6150":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:47646:8338":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:564:5632":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"22:4204:5631":{"crate_id":22,"path":["linux_raw_sys","general","itimerspec"],"kind":"struct"},"16:2900:7160":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:41305:3584":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"21:2308:3361":{"crate_id":21,"path":["rustix","backend","fs","dir","DirEntry"],"kind":"struct"},"1:4941:3532":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:8000:7181":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:3352:3473":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"9:236:3401":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:47489:8329":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:15989:6886":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:7789:38995":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:12475:993":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:22952:36160":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"16:8014:7182":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:44526:8018":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:22926:3380":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:4233:2894":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:5224:9082":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:11068:30552":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:43475:4293":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:546:7118":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:990:7722":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:40951:7973":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:14708:6537":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:532:5747":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:46403:8227":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:46663:8254":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:9751:3808":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:22069:35860":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:3455:5442":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:4149:3417":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:4369:3405":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"22:3909:5553":{"crate_id":22,"path":["linux_raw_sys","general","open_how"],"kind":"struct"},"22:3816:5532":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_fsid_t"],"kind":"struct"},"17:13290:6030":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:5387:5571":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:6758:9425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"18:538:5887":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"23:25:29823":{"crate_id":23,"path":["bitflags","iter","IterNames"],"kind":"struct"},"2:14105:8043":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:5804:4132":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"23:0:3778":{"crate_id":23,"path":["bitflags"],"kind":"module"},"6:6473:9302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"21:2554:5854":{"crate_id":21,"path":["rustix","backend","fs","inotify","_","InternalBitFlags"],"kind":"struct"},"17:15896:6861":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:23576:8080":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:44668:8181":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"23:171:5520":{"crate_id":23,"path":["bitflags","parser","ParseError"],"kind":"struct"},"1:4113:10447":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:599:8374":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:7990:7549":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:15573:6785":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:15997:6887":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:15050:6609":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:32689:4138":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:6876:9454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:5006:3989":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:7521:7462":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:7262:5459":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:41781:3546":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:3548:3454":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"21:6442:3912":{"crate_id":21,"path":["rustix","fs","ioctl","IFlags"],"kind":"struct"},"1:10387:4101":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:8895:3406":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"11:1907:7736":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:9292:3953":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:11021:35389":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"18:651:5880":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:3313:10141":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:5255:9091":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"18:589:5890":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:884:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"11:1674:5397":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:13006:6286":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:41120:3346":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"16:7838:23093":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:725:7810":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:3759:3523":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:15689:6808":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:8267:7566":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:43765:168":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:6731:9415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:12234:6185":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:7986:3844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:16283:6983":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:42706:3405":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:45000:8201":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:7949:7179":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:16613:6375":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:13306:6307":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:5131:5963":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"18:96:27343":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:6823:9443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:10498:2906":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:8583:10428":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:8137:7183":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"22:4531:5747":{"crate_id":22,"path":["linux_raw_sys","general","iovec"],"kind":"struct"},"16:7044:7173":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:6708:9410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:14832:6573":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:11793:8409":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:1122:5402":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:46567:8241":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:14483:6506":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:8031:8416":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13322:23161":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:3851:10430":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:44979:15677":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:5676:9266":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:2086:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:5670:9264":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:11016:6087":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:3620:3127":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:6256:7250":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:2013:4320":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:12122:6174":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:16377:7004":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"22:3842:5539":{"crate_id":22,"path":["linux_raw_sys","general","vfs_cap_data"],"kind":"struct"},"2:11652:3453":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"11:328:8709":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"18:573:5880":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:8672:3837":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"21:1833:27370":{"crate_id":21,"path":["rustix","ioctl","patterns","CompileTimeOpcode"],"kind":"trait"},"1:4362:10457":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:42731:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:16761:7102":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:12409:23265":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:12423:10390":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:6758:5402":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"9:0:3206":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:11075:39007":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:4225:3422":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:7721:3340":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:2437:5953":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:7386:7438":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"22:3887:3881":{"crate_id":22,"path":["linux_raw_sys","general","flock"],"kind":"struct"},"1:1626:5422":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"11:2566:3408":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"11:740:7714":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:1974:2459":{"crate_id":1,"path":["std","error"],"kind":"module"},"2:40262:8098":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"22:4418:5705":{"crate_id":22,"path":["linux_raw_sys","general","statx_timestamp"],"kind":"struct"},"6:4816:8918":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"0:419:2474":{"crate_id":0,"path":["tempfile","Builder"],"kind":"struct"},"1:4018:8388":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:5349:9129":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:46581:8242":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:12962:23290":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:7590:38932":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:16812:7112":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"16:2530:7143":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"18:635:5902":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"18:718:5919":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:11147:5510":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:16520:7028":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:16385:7007":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:9305:8460":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:15077:6613":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:9496:8473":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:45013:8205":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:3564:2890":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:13610:6330":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:7350:7436":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:11248:4134":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"11:708:7713":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"18:581:4005":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:40894:35518":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:5993:3951":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:42496:8000":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:4873:7204":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:14672:6531":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:46921:8282":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:8320:23096":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:11232:23173":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12648:6245":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:12108:6173":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"11:1884:4030":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:8140:3479":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:14738:6556":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:586:8758":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:3045:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:3405:3475":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:322:5936":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:15905:6862":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:11363:9721":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:9271:10498":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:6781:7347":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:23332:35514":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:9433:3433":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:14627:6526":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:41245:145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:8624:9715":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:15351:6680":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:7807:38998":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:12465:936":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:5165:9060":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:1928:2566":{"crate_id":1,"path":["std","env","temp_dir"],"kind":"function"},"11:1085:38968":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:7540:4030":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:16507:6361":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:15931:6872":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:14084:6423":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"18:643:5880":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:3403:3517":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"22:4625:5764":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_zeropage"],"kind":"struct"},"6:570:8749":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:16218:6964":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"11:299:8706":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:7814:7837":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:6126:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:3293:276":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:13349:6309":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:10009:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11222:6091":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:46324:8218":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:12854:8023":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:12992:6283":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"22:4156:5625":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_old_timeval"],"kind":"struct"},"2:32766:250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:1400:7724":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:15549:6783":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:12347:6202":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11777:6134":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:47802:8366":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"22:4491:5740":{"crate_id":22,"path":["linux_raw_sys","general","ktermios"],"kind":"struct"},"17:12260:23264":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"17:15777:6831":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:22607:35858":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:13921:6390":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:6408:7273":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:5835:5439":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:15540:6782":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"22:4722:5806":{"crate_id":22,"path":["linux_raw_sys","general","statfs64"],"kind":"struct"},"17:12605:6090":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:44250:8162":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"11:2380:3405":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:44350:8169":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:10190:35784":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:12452:1915":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:46692:8255":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"22:4101:5605":{"crate_id":22,"path":["linux_raw_sys","general","robust_list"],"kind":"struct"},"2:24094:247":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"18:698:5913":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"22:4037:5578":{"crate_id":22,"path":["linux_raw_sys","general","file_dedupe_range_info"],"kind":"struct"},"1:7495:34860":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"18:623:39017":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:1500:8767":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:2990:7164":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:884:201":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:6716:9413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"6:6770:9427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:12952:6279":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:46648:8253":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:42553:184":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:47606:8334":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:42328:10429":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:46844:8263":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:6526:9317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:7350:9487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:1489:8762":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:3573:153":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:10938:39005":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:14236:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:3850:3144":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:3799:35697":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:13871:6382":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"15:0:3211":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:11845:8016":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:894:7731":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:10934:8485":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:5742:6070":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:23463:10445":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:43559:149":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:8424:157":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:14917:6586":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:4171:3418":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:6952:244":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:44472:8176":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:5449:7222":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:13145:6294":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:6680:9398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:3458:3507":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:5630:4128":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"22:3860:5542":{"crate_id":22,"path":["linux_raw_sys","general","vfs_ns_cap_data"],"kind":"struct"},"1:7743:30355":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"11:2533:8711":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"21:5014:3825":{"crate_id":21,"path":["rustix","backend","fs","types","FlockOperation"],"kind":"enum"},"1:3075:237":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:14586:6519":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:44321:8167":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:14997:6605":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:31146:3994":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:12983:23291":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:6984:7185":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"22:4908:8665":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_key_specifier__bindgen_ty_1"],"kind":"union"},"1:9316:8463":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:7358:7175":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:22568:3380":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:12537:6239":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:5224:7215":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:43090:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:14416:6493":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:41195:3560":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"22:3985:8633":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_remove_key_arg"],"kind":"struct"},"1:5682:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"22:4555:5750":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"17:2406:5950":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"21:3573:5854":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"11:2137:7724":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:40883:8100":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"22:3749:8621":{"crate_id":22,"path":["linux_raw_sys","elf","Elf_Dyn"],"kind":"struct"},"2:14371:10405":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:6808:7165":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12776:6258":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:2486:7141":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:2480:3363":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:40932:8105":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:5128:10480":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:5051:9042":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:5603:9230":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:6713:7334":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:13635:6331":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:45411:8215":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:2570:7145":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:8105:7554":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"21:2315:5853":{"crate_id":21,"path":["rustix","backend","fs","inotify","CreateFlags"],"kind":"struct"},"2:46745:8258":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:41358:3579":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:10663:5931":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:7731:8134":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"22:4172:5628":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_old_itimerval"],"kind":"struct"},"6:1711:8894":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:1108:7726":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:5301:9116":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:5482:5656":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:5635:9250":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:47293:8325":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:5295:9113":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"11:2495:22148":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:3814:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:7335:10113":{"crate_id":1,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:8091:10389":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:5144:7212":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:42940:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:3916:8387":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"21:1095:3365":{"crate_id":21,"path":["rustix","fs","abs","rename"],"kind":"function"},"18:680:5910":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:10843:6076":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:14299:6476":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"2:45448:7743":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:4810:7202":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"21:6854:5848":{"crate_id":21,"path":["rustix","ioctl","Opcode"],"kind":"struct"},"2:43777:3401":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:6640:7311":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"2:44853:8194":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:8572:8431":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"22:4148:5622":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_itimerspec"],"kind":"struct"},"17:11952:6149":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:3051:174":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:43748:8145":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:14963:6592":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:1625:8848":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11457:6106":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"17:12625:6244":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:16209:6962":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:5972:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:1551:8795":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"22:4117:5610":{"crate_id":22,"path":["linux_raw_sys","general","inotify_event"],"kind":"struct"},"6:6534:9322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:3720:5956":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:1604:7713":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:6579:10597":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:10861:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"11:1914:7737":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:7896:5942":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:5085:7210":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:13471:5958":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:4162:5402":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:2508:3373":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"11:488:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:1675:8878":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:5379:7220":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:10097:23144":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:16714:7092":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:3774:158":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:13205:6299":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:23452:8071":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:16241:6977":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:5288:9111":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:22295:10503":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:6666:9393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"22:4380:5698":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_7"],"kind":"struct"},"17:15973:6883":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:3341:4523":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:5114:10479":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"6:5186:9062":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:11539:6115":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:11831:6115":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"22:3761:8625":{"crate_id":22,"path":["linux_raw_sys","elf","Elf_auxv_t"],"kind":"struct"},"2:44712:7973":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:15496:6777":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:4875:8960":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:14375:6489":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:1727:8655":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:8444:3554":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:4902:7205":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:10771:3472":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:46730:8257":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"22:4125:5614":{"crate_id":22,"path":["linux_raw_sys","general","pollfd"],"kind":"struct"},"22:4389:8649":{"crate_id":22,"path":["linux_raw_sys","general","siginfo"],"kind":"struct"},"16:3014:22223":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:9356:8469":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:12163:6177":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:7454:9498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:6507:9315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:41349:3578":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"21:3543:3828":{"crate_id":21,"path":["rustix","backend","fs","types","ResolveFlags"],"kind":"struct"},"6:4957:8996":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:5127:9057":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:3602:2903":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:4854:7979":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:2347:38905":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"18:507:5880":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:5025:9031":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:5305:5965":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:6740:9417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:6537:231":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:15939:6875":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:11772:8014":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:3388:3496":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:32854:4524":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"11:671:3405":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"18:598:39014":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:16084:6936":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:16332:6998":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:1696:8887":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:40097:224":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:1641:7736":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:5441:9170":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:7813:10115":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"2:4564:7974":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"23:122:29805":{"crate_id":23,"path":["bitflags","traits","Bits"],"kind":"trait"},"17:16775:7106":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:42903:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:22864:10589":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"11:2121:7465":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:13385:6311":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:15876:6854":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:47626:8336":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"22:4318:8645":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_3"],"kind":"struct"},"1:9377:30422":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:15946:6876":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:12851:6270":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:10552:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:7539:9552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:43980:9702":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"2:2896:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:23346:8057":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"22:4212:5632":{"crate_id":22,"path":["linux_raw_sys","general","itimerval"],"kind":"struct"},"22:3766:5528":{"crate_id":22,"path":["linux_raw_sys","general","__BindgenBitfieldUnit"],"kind":"struct"},"6:517:8737":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:43520:35638":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"2:0:582":{"crate_id":2,"path":["core"],"kind":"module"},"6:6521:9316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:14220:6445":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:15769:6829":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"11:2148:7726":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:12462:763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:42649:15949":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:3786:3527":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:8553:3452":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:8066:23094":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:6652:9391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:5142:3433":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:1563:8803":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:8097:4110":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:3129:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:7102:9620":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:44404:3453":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"22:4108:5606":{"crate_id":22,"path":["linux_raw_sys","general","robust_list_head"],"kind":"struct"},"1:6020:3952":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:3553:3515":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:40242:3524":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:9768:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:43542:4293":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"11:1601:7734":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:9478:3386":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:12082:6170":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:439:196":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:42562:3405":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:2415:22196":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:5172:7213":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:13757:6361":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:16798:7111":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"16:6914:7363":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:12434:30553":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:14358:6486":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6696:7333":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:6560:10596":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:10274:23150":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"18:515:5877":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:10564:5928":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:32767:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"21:6873:15955":{"crate_id":21,"path":["rustix","ioctl","Direction"],"kind":"enum"},"17:12135:6175":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:10823:5937":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:3769:267":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:1930:4106":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:8284:3144":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:2816:3993":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"6:5381:9142":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:43225:4295":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11065:6088":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:14327:6480":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:12723:6254":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:7980:7180":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:925:7716":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:9442:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"22:4283:5668":{"crate_id":22,"path":["linux_raw_sys","general","sigaction"],"kind":"struct"},"6:1703:8890":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:8043:38990":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:13082:6091":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:7180:10500":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"22:4642:5767":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_continue"],"kind":"struct"},"1:8617:8389":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"22:4968:8695":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"union"},"2:45031:8036":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:7428:5503":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:13933:6391":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:15439:6743":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:7907:7535":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:8008:9583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:41733:7992":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"22:3798:5527":{"crate_id":22,"path":["linux_raw_sys","general","__IncompleteArrayField"],"kind":"struct"},"11:2366:7741":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:11358:23170":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:12458:1853":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:10195:9779":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:40172:225":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:5616:4127":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:9351:8468":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:43504:5525":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:42866:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:4983:7208":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13733:6347":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:12044:6163":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:0:1755":{"crate_id":1,"path":["std"],"kind":"module"},"1:3677:2904":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"14:7:7705":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:7563:9562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:7620:7833":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:2860:7158":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:5362:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"22:4762:5808":{"crate_id":22,"path":["linux_raw_sys","general","user_desc"],"kind":"struct"},"17:14807:6570":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:44626:8180":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"22:3979:5565":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_provisioning_key_payload"],"kind":"struct"},"22:4924:8671":{"crate_id":22,"path":["linux_raw_sys","general","__sifields"],"kind":"union"},"17:13838:6376":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:5271:9100":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"21:6899:3833":{"crate_id":21,"path":["rustix","ugid","Uid"],"kind":"struct"},"2:34752:3506":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:14393:6490":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:5543:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:1369:7465":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:6269:7251":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:12478:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:7737:3343":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:6144:23083":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:8888:161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:5007:9022":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:4792:8901":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:8528:7610":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:23034:3380":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:45146:9711":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:5318:7218":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"11:2559:8715":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:0:3213":{"crate_id":17,"path":["object"],"kind":"module"},"6:8353:9607":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:11029:35393":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:16555:7058":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:43246:4304":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:7554:23092":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11579:6119":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:15064:6612":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"22:4394:8650":{"crate_id":22,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"17:12550:6241":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:11757:23193":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:6777:9428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:12906:6274":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:44658:3449":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"22:4008:5566":{"crate_id":22,"path":["linux_raw_sys","general","mount_attr"],"kind":"struct"},"11:1880:3405":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:10784:6072":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"6:4997:9015":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:1784:5402":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"22:4789:5817":{"crate_id":22,"path":["linux_raw_sys","general","kernel_sigaction"],"kind":"struct"},"2:6284:3573":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:47062:8287":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:44554:8177":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"7:0:1945":{"crate_id":7,"path":["unwind"],"kind":"module"},"9:355:22088":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:31167:4293":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"11:772:7715":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:9206:4030":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:2652:694":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:7463:9501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:5575:15651":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:380:8371":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:7089:5439":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:46631:8252":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:6813:9441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:984:5410":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:16656:7077":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"21:1852:27373":{"crate_id":21,"path":["rustix","ioctl","patterns","WriteOpcode"],"kind":"struct"},"1:8363:8426":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:13818:6375":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:3570:152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:41168:3379":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:46371:8225":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:46861:8264":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:682:8377":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:9364:8471":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:7361:9489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:16187:6956":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:40134:223":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:47672:8340":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:44239:8161":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:5477:9194":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:6794:7348":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"11:2466:5442":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:5526:5402":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:6158:3948":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:211:5401":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"11:1140:7729":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:4899:10481":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"18:659:5903":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:3140:149":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:22116:3380":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:6065:3963":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:5649:7223":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"22:0:3777":{"crate_id":22,"path":["linux_raw_sys"],"kind":"module"},"23:11:3405":{"crate_id":23,"path":["bitflags","iter","Iter"],"kind":"struct"},"6:1597:8823":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"11:434:38973":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:12464:758":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"16:903:5935":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"21:4845:5854":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"2:7746:3558":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:2435:22222":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:5562:9216":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:43239:4303":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:10516:23158":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"21:1813:27369":{"crate_id":21,"path":["rustix","ioctl","patterns","Updater"],"kind":"struct"},"5:1249:38838":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:1869:4090":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:4414:8390":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:8058:7552":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:2890:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:10993:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:4050:5422":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:6631:9379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"11:798:5422":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:41226:3562":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:22940:10593":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:12026:8494":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:6691:9401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"22:4427:3804":{"crate_id":22,"path":["linux_raw_sys","general","statx"],"kind":"struct"},"22:4571:5754":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_4"],"kind":"struct"},"22:4475:5737":{"crate_id":22,"path":["linux_raw_sys","general","termios2"],"kind":"struct"},"5:4561:3433":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"1:1647:7737":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:45172:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:6173:7240":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:42627:10391":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:8290:9595":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:44721:8106":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"22:4548:8662":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"5:1626:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:41264:3572":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:46794:8261":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:16595:6365":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:7959:7547":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:2854:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:46552:8240":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"4:0:3205":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"22:4140:5619":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_timespec"],"kind":"struct"},"1:8516:2905":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:9683:8007":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:44289:8164":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:6890:7167":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:5301:3948":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:16341:7000":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:3539:3480":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:2521:3375":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"1:12463:779":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:1523:3405":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:6526:5441":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"2:32756:8090":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:22991:10594":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"21:6634:2905":{"crate_id":21,"path":["rustix","fs","seek_from","SeekFrom"],"kind":"enum"},"5:3296:3405":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:3517:3528":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:5375:9140":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:42312:7999":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:3300:260":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:10571:4302":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:9156:4134":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:8206:2456":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:41533:3582":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:6599:9366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:5105:10478":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:7801:10114":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"2:23048:10584":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:4947:8993":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:3913:8386":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"22:4258:5656":{"crate_id":22,"path":["linux_raw_sys","general","rlimit64"],"kind":"struct"},"17:10803:3452":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"22:4951:8687":{"crate_id":22,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1"],"kind":"union"},"17:12711:6253":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:2880:7159":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:16036:6899":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:6658:7325":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:7159:7402":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"22:4134:5616":{"crate_id":22,"path":["linux_raw_sys","general","rand_pool_info"],"kind":"struct"},"6:8261:9588":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:7548:7831":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:2640:7148":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:8165:7174":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:1984:4319":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:4349:10456":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:2772:7154":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:13084:8030":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:5060:7209":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:44608:8179":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"21:1874:27375":{"crate_id":21,"path":["rustix","ioctl","patterns","NoneOpcode"],"kind":"struct"},"6:7487:9512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:42578:4030":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:46610:8251":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:14127:6439":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:41789:3548":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:9323:30234":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:46354:8222":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:11000:3811":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"2:47568:8332":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:6386:5480":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:11617:6091":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:7969:7548":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"22:4180:5629":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_sock_timeval"],"kind":"struct"},"16:3048:22224":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:32731:8088":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:2112:4154":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:5490:1004":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:9256:10496":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12524:6238":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:16026:6894":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:6638:9380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:12446:8022":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:1871:4091":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:12451:490":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:14507:6507":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:1385:7726":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:42714:7731":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:41326:3564":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:4964:8999":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:4766:7201":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:13554:6324":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"2:2208:15899":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:8536:3450":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:12457:1763":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:8151:7184":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:44678:8182":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"9:53:9760":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:7577:9571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:23521:8075":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:13515:23162":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:15731:6821":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:8546:7612":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:41317:3576":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:3930:5442":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:1630:5442":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:22052:35865":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:40152:226":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:3987:5981":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:768:165":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:13570:23163":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:6881:3965":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:31114:2872":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:8196:3376":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:11592:6053":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:8668:8440":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:11129:5508":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:14560:6516":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"21:5471:5854":{"crate_id":21,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"17:12570:6242":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:8643:8431":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:34060:3503":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:26494:281":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:22118:10506":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:36801:3509":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:15641:6802":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:40853:8099":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"22:4539:8660":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg"],"kind":"struct"},"11:1893:5442":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"18:563:5889":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"3:234:237":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"11:2551:38978":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:6239:7245":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"15:306:22179":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:7414:5806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:3696:222":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"22:4605:5762":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_register"],"kind":"struct"},"5:928:5408":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:16145:6943":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:5198:7214":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:2335:3129":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:44380:8173":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:41148:3359":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:4845:232":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:578:8754":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:5629:9247":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:23282:9621":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:23543:8077":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"16:3695:7192":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:12467:924":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:5462:9185":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:45421:191":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:7287:5462":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:15836:6845":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:2796:7155":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:14975:6594":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:4680:10459":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:7919:7536":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:1927:2768":{"crate_id":2,"path":["core","mem"],"kind":"module"},"6:5139:9058":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:14902:6582":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:1690:5555":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:12392:6206":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:3659:2906":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:948:5442":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"22:3898:5552":{"crate_id":22,"path":["linux_raw_sys","general","flock64"],"kind":"struct"},"17:13692:6338":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:32742:8089":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:12359:6203":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:6723:9414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"5:2294:9609":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:4956:7207":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:14947:6589":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:13283:3409":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:40212:3522":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:8578:8433":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:1099:7724":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:5151:9059":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:3706:3405":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:16198:6961":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:42658:5363":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"23:64:29830":{"crate_id":23,"path":["bitflags","parser","WriteHex"],"kind":"trait"},"1:3687:3444":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:6028:7166":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:34406:3504":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:34925:3508":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:42792:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:12838:15957":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:11630:6121":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:938:5422":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"11:351:38969":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:47687:8341":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:42356:9691":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"11:123:5391":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"14:220:7711":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:10296:23151":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:15953:6877":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:1632:8852":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:15655:6805":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:8566:3449":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:1584:8816":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"18:80:27342":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:3085:37729":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:6843:7355":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:15531:6778":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"21:2339:5854":{"crate_id":21,"path":["rustix","backend","fs","inotify","_","InternalBitFlags"],"kind":"struct"},"17:13193:6298":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:16739:7100":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:10246:23149":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:2490:3366":{"crate_id":1,"path":["std","fs","hard_link"],"kind":"function"},"1:5206:1333":{"crate_id":1,"path":["std","path"],"kind":"module"},"6:5648:9256":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:4902:8971":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:6902:9469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12920:6275":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:4929:8985":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"7:32:22060":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:15410:6732":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:3834:7193":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:9581:4106":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"5:6284:3433":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:4630:15703":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:44807:8185":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:32825:4525":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:41523:3451":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:11102:5477":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"18:531:5884":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:16159:6949":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:9460:173":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:23432:9624":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:2684:7150":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:46988:8285":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:10565:30719":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:5986:3950":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:4984:9009":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:23642:8086":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"22:3852:5541":{"crate_id":22,"path":["linux_raw_sys","general","vfs_cap_data__bindgen_ty_1"],"kind":"struct"},"5:1576:7715":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:13138:8012":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:23587:8081":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:47370:8326":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:11503:6110":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"17:15963:6880":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:3084:4082":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:4869:5631":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:2083:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:7431:9491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"11:873:7722":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"22:4048:5583":{"crate_id":22,"path":["linux_raw_sys","general","file_dedupe_range"],"kind":"struct"},"2:41771:3545":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:4495:8391":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"21:3743:3741":{"crate_id":21,"path":["rustix","backend","fs","types","RenameFlags"],"kind":"struct"},"11:1564:22153":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:10777:3470":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"22:4077:5596":{"crate_id":22,"path":["linux_raw_sys","general","fsxattr"],"kind":"struct"},"17:12306:6196":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"2:23554:8078":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"5:2147:3144":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:534:5419":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:2255:5419":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:473:8734":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:46506:8237":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:44331:8168":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:155:5390":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:7604:4030":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:8014:5657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:41217:3561":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:11720:6128":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:553:8746":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:10332:23152":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:22902:10590":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"21:1771:5849":{"crate_id":21,"path":["rustix","ioctl","patterns","Getter"],"kind":"struct"},"17:10487:23157":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:4902:10459":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"21:378:10136":{"crate_id":21,"path":["rustix","backend","reg","ArgReg"],"kind":"struct"},"16:4184:7196":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:8302:9597":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:41204:3450":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:2718:3464":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:10793:6074":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"18:608:5897":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:1589:8818":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"10:36:8717":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"22:4028:5576":{"crate_id":22,"path":["linux_raw_sys","general","fstrim_range"],"kind":"struct"},"6:6419:9276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:6876:7359":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"23:67:29831":{"crate_id":23,"path":["bitflags","parser","ParseHex"],"kind":"trait"},"2:2029:3433":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:12066:6168":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:1585:7716":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:6042:7169":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:12470:1893":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:4976:9004":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:1619:3405":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:22285:3380":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"11:1920:7738":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:4486:3433":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:4970:9001":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:47100:8289":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:4849:7978":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:6822:23087":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:41762:3480":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:13024:8026":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:14547:6515":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:44836:8193":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:46538:8239":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:7968:3537":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:10559:4296":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:12931:6277":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:11971:6151":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:2302:2455":{"crate_id":1,"path":["std","fs"],"kind":"module"},"2:2209:3363":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"21:1835:27371":{"crate_id":21,"path":["rustix","ioctl","patterns","BadOpcode"],"kind":"struct"},"1:11141:5509":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:2020:810":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:39421:3514":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:13983:6398":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:15090:6614":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:9739:150":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:46339:8221":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:479:5630":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:15714:6816":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:1684:8884":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:1569:8804":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"21:3121:3811":{"crate_id":21,"path":["rustix","backend","fs","types","Mode"],"kind":"struct"},"6:7391:9490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"21:1100:3709":{"crate_id":21,"path":["rustix","fs","abs","unlink"],"kind":"function"},"2:47216:8293":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"13:0:3204":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:2450:7133":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:5395:9145":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:1229:37727":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:5348:7219":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:11085:4137":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"16:6588:7306":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"1:575:5484":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:15160:6627":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:13592:6327":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"22:4562:5752":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"22:4293:5673":{"crate_id":22,"path":["linux_raw_sys","general","sigaltstack"],"kind":"struct"},"2:10972:5476":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"2:11695:8012":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:23321:8056":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:12008:6011":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:7604:9577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:13222:23159":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:9425:3954":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:3400:3516":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:6381:3804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:3305:4317":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:45437:8216":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:2378:23220":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:14055:6412":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:15864:6853":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"22:4310:8640":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_2"],"kind":"struct"},"2:11734:8013":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:14001:6406":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:3091:37724":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:2660:7149":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:3267:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:11949:8387":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:44150:8155":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:6748:9418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:12069:5517":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"1:5475:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:11475:23173":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"1:11053:4131":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:912:7715":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:47589:8333":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:8026:2474":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:11280:9713":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"11:1064:22152":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:12870:15665":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"11:1725:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:14269:6467":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:5282:9108":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:465:8729":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:5709:23082":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:6302:7258":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:4311:34856":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:14346:6485":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:10597:5929":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:8636:23097":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:538:5614":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:16362:7003":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"14:40:6362":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:32749:4313":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"21:1614:3806":{"crate_id":21,"path":["rustix","fs","StatExt"],"kind":"trait"},"16:4404:7199":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:3605:3520":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:16171:6952":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:6440:23085":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:7789:5371":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:8031:9585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:11781:8406":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:854:7720":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:296:2833":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:12860:6271":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:7508:7459":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"22:4517:5746":{"crate_id":22,"path":["linux_raw_sys","general","termio"],"kind":"struct"},"2:33297:3495":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:23076:10585":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:12476:1955":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:40112:221":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:8096:7553":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:2732:5487":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:3342:38961":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:46713:8256":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:46876:8265":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:12249:6189":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:15418:6735":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:8343:5553":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"11:685:7731":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:4943:3533":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:16311:6992":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:3865:7815":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:14612:6523":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:7839:10117":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"22:4057:5588":{"crate_id":22,"path":["linux_raw_sys","general","files_stat_struct"],"kind":"struct"},"22:4702:3843":{"crate_id":22,"path":["linux_raw_sys","general","statfs"],"kind":"struct"},"2:45138:9709":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:6904:7362":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:2550:7144":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:14316:163":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:6123:7170":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:15812:6837":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:881:10432":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:12976:6281":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"21:1964:27378":{"crate_id":21,"path":["rustix","path","arg","Arg"],"kind":"trait"},"21:4445:5854":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"22:3926:5557":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_policy_v1"],"kind":"struct"},"1:4221:3421":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"0:0:2465":{"crate_id":0,"path":["tempfile"],"kind":"module"},"1:8498:3481":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:2820:7156":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:4483:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:10770:164":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:11124:39001":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6953:7366":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:4163:2895":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:40192:227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:545:5741":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:12826:6261":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12176:6178":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:11717:3401":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"2:44374:8025":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:6706:3541":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:15602:6793":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:15760:6828":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:16132:6937":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:1888:5442":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:8694:2909":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:6765:9426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:13397:15670":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:670:5909":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:5872:5496":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:46471:8235":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:14072:6420":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:45321:162":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:7305:7430":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:11678:6124":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:41273:8115":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:3295:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:12335:6201":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:13559:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"21:2951:5854":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"2:22084:35869":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:43795:8154":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"22:4220:5633":{"crate_id":22,"path":["linux_raw_sys","general","timezone"],"kind":"struct"},"24:0:2647":{"crate_id":24,"path":["fastrand"],"kind":"module"},"6:6659:9392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:6700:9407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:4177:3419":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:40435:15731":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:13798:6365":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:10335:4294":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:12216:6183":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:6337:7260":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10167:23147":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:2506:7142":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"21:3971:3822":{"crate_id":21,"path":["rustix","backend","fs","types","Advice"],"kind":"enum"},"2:22040:35865":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:14933:6587":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:6611:9371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:8753:3400":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:5448:3482":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:10818:8008":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:12583:6243":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:8824:3402":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:5057:9044":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:5255:7216":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:10534:6069":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:45460:8217":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:5265:9097":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:1491:167":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"18:613:39016":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:7765:7496":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:2666:15888":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"6:5541:9209":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"11:1580:7733":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:2326:150":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:46762:8259":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:47518:8330":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"21:4210:3829":{"crate_id":21,"path":["rustix","backend","fs","types","SealFlags"],"kind":"struct"},"1:6710:3955":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:12468:930":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:11319:39006":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:47740:8350":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:2766:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:14405:6492":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:15621:6794":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:11553:6116":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:45134:9708":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:3851:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"22:4507:5741":{"crate_id":22,"path":["linux_raw_sys","general","winsize"],"kind":"struct"},"22:4372:5695":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_6"],"kind":"struct"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:46523:8238":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:13344:15663":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:23298:8051":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:45338:238":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:8235:151":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:10115:23145":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:959:7713":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:4498:5429":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:4984:4314":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:47763:8351":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:11309:6093":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:13323:3768":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:5807:4133":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"11:1900:7735":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:2245:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"6:5069:9053":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:44965:8196":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:12886:6272":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:45328:230":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:8308:9598":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:8598:7619":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:667:5942":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:23005:15888":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:3024:3380":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:9190:3405":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:11706:6126":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:8011:8373":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:45118:9704":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:23405:35501":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:6402:5495":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"14:187:22166":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:5037:4315":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"22:3950:5562":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_policy_v2"],"kind":"struct"},"1:12466:918":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:8330:9603":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:2815:9617":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"22:4250:5653":{"crate_id":22,"path":["linux_raw_sys","general","rlimit"],"kind":"struct"},"1:8249:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"22:4188:3788":{"crate_id":22,"path":["linux_raw_sys","general","timespec"],"kind":"struct"},"2:22169:3380":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:43014:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:485:3788":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:40036:3529":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:42628:10493":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:6188:7242":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:6895:3966":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"11:2440:5422":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:5650:4129":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"23:97:29806":{"crate_id":23,"path":["bitflags","traits","Flags"],"kind":"trait"},"11:698:4030":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:8711:7628":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:46971:8284":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:41740:3539":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:44572:8178":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:15887:6858":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:9452:3962":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:15829:6844":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:44687:8183":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:6179:16191":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:13965:8042":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"6:5088:9054":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"22:4588:5757":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_api"],"kind":"struct"},"16:2590:7146":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:6824:3958":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:32824:3595":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:8223:7558":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"22:3755:8623":{"crate_id":22,"path":["linux_raw_sys","elf","Elf_Dyn_Union"],"kind":"union"},"11:881:7723":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:3087:9610":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"18:754:5927":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:8483:7606":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:10963:2456":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:12456:1729":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:1554:4030":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"24:30:5387":{"crate_id":24,"path":["fastrand","global_rng","RestoreOnDrop"],"kind":"struct"},"21:1863:27374":{"crate_id":21,"path":["rustix","ioctl","patterns","ReadWriteOpcode"],"kind":"struct"},"2:11109:5478":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"1:12455:349":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:23609:8083":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:11807:8410":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:3535:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:15679:6807":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:22067:35867":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:5641:9253":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:13909:6387":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:47121:8290":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"21:2750:5854":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"1:1652:7738":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:12699:6252":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:6790:9435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:13181:6297":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"21:3768:5854":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"2:41388:3581":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:44302:8165":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"22:3825:5533":{"crate_id":22,"path":["linux_raw_sys","general","__user_cap_header_struct"],"kind":"struct"},"2:41054:8112":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"21:5043:3717":{"crate_id":21,"path":["rustix","backend","io","errno","Errno"],"kind":"struct"},"5:1635:7814":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:4815:3419":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:521:27354":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:38677:3510":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:15753:6827":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:38787:3512":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:15:2900":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:10497:237":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:11026:39004":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:5325:9124":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:4939:2908":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:47033:8286":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:10442:23156":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:43127:3949":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:8581:189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:507:5483":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:7580:7832":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"16:7030:7376":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:41175:3559":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:12798:23289":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:13338:5915":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:2793:3466":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:15431:6742":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:779:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:8649:8439":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:3310:10140":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:22297:8047":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:6098:7231":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:7214:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:3141:5968":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:42462:8132":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"9:480:22072":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"11:1158:7730":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:8077:10388":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:5520:9203":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:10406:8477":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:12280:6192":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:1657:8871":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11566:6117":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"18:735:27352":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:6998:7367":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:11926:6148":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:12413:8021":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:42296:7997":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:8435:176":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:7938:7544":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:22728:10504":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"11:2301:7465":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:12472:1881":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"7:79:22067":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:6449:9293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"18:113:27344":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:3373:3493":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:10218:23148":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:14533:6211":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:5217:15720":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:7852:3569":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:15844:6846":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:13266:23160":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:12371:6204":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:3308:38959":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"21:6915:3826":{"crate_id":21,"path":["rustix","ugid","Gid"],"kind":"struct"},"2:6398:3563":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:1907:4101":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:6942:7365":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:7951:5504":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:9139:4135":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:10141:23146":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:2227:5946":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:47661:8339":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:583:5941":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:6746:3964":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:13055:6115":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:42587:8134":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"21:1792:5851":{"crate_id":21,"path":["rustix","ioctl","patterns","Setter"],"kind":"struct"},"9:390:22074":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:3854:5957":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:11432:23172":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:5417:7221":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:42977:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:8249:9586":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5319:9123":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:10778:6071":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"6:5471:9191":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:9182:4137":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:22820:10588":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:15557:6784":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:10813:10422":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:41039:8110":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"13:110:38979":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"21:6243:5874":{"crate_id":21,"path":["rustix","backend","mount","types","InternalMountFlags"],"kind":"struct"},"8:0:2646":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:8669:7517":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"22:4461:5730":{"crate_id":22,"path":["linux_raw_sys","general","termios"],"kind":"struct"},"2:43993:9703":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:4727:7977":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:11291:39002":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:3110:7187":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:10280:5860":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:16832:6396":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:46823:8262":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:45196:8207":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:9447:3961":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"6:4896:8968":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:6443:9292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"11:1049:7726":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:4775:4312":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:5757:7225":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:41067:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:3448:3471":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:4132:5422":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:10418:23155":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:16750:7101":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:25:719":{"crate_id":2,"path":["core","env"],"kind":"macro"},"2:31178:35503":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:12816:5958":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:7542:7464":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:8565:7615":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:13945:6394":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:3408:3518":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"6:7341:5552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:8276:3465":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:12840:6266":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:12204:6181":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:46950:8283":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:9145:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:3025:15730":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"23:185:5525":{"crate_id":23,"path":["bitflags","traits","Flag"],"kind":"struct"},"1:10958:9719":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:44229:8160":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:44422:8015":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:6731:7344":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:6866:23088":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:13970:6397":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:317:5935":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"22:4944:8685":{"crate_id":22,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1"],"kind":"union"},"16:7168:7403":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:5570:9218":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:40080:3519":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:10561:4295":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:10549:6070":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:2584:9614":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:33509:3494":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:38732:3511":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:10774:3474":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:11173:39008":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:12477:1455":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:4914:8980":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:8503:7607":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"18:689:5912":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:7462:7452":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:15586:6790":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:8368:3199":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:40000:3530":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:506:5940":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:1594:7732":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:5196:9069":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:45150:9712":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:7113:5453":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:16019:6892":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:40084:3521":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:497:5636":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:41138:3360":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:8358:8425":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:3378:3498":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:10983:3378":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:2105:693":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:3446:3470":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:11114:6089":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:6462:23086":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"18:706:5915":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:45316:9714":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"16:6738:38996":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:6042:5422":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"22:3871:5544":{"crate_id":22,"path":["linux_raw_sys","general","vfs_ns_cap_data__bindgen_ty_1"],"kind":"struct"},"16:6680:7330":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"2:46386:8226":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:45122:9705":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:2950:7162":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:6159:7237":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:12045:8413":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:8801:3401":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:3569:3433":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"10:44:7744":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"22:4659:3837":{"crate_id":22,"path":["linux_raw_sys","general","stat"],"kind":"struct"},"2:3048:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"21:6685:5854":{"crate_id":21,"path":["rustix","fs","xattr","_","InternalBitFlags"],"kind":"struct"},"2:44901:8195":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:15136:6277":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"22:4164:5627":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_old_timespec"],"kind":"struct"},"5:3719:7731":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:43534:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:13547:6323":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"22:4228:5636":{"crate_id":22,"path":["linux_raw_sys","general","rusage"],"kind":"struct"},"21:6661:3834":{"crate_id":21,"path":["rustix","fs","xattr","XattrFlags"],"kind":"struct"},"17:13781:6362":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:46418:8228":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:10474:4140":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:1539:8786":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:5666:4130":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"9:328:8718":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:6489:5496":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:42722:4030":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:10700:5506":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"11:809:5442":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"21:5679:5854":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"2:40966:15726":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:1085:7465":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:15701:6811":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:30884:10431":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"21:4407:3831":{"crate_id":21,"path":["rustix","backend","fs","types","StatxFlags"],"kind":"struct"},"2:4696:7976":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:8473:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:3350:3472":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:12454:1348":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:7096:3565":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:7282:7429":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:14886:6580":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:5879:8396":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"22:4597:5761":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_range"],"kind":"struct"},"1:687:10386":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:2769:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"11:1888:5422":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"11:835:7717":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:11012:3133":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:6600:197":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:2142:1393":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"22:4780:5815":{"crate_id":22,"path":["linux_raw_sys","general","kernel_sigset_t"],"kind":"struct"},"17:15475:6772":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"21:4644:5854":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"1:9198:8458":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:4183:4030":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:14259:5480":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:13854:6380":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:42534:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"21:0:2648":{"crate_id":21,"path":["rustix"],"kind":"module"},"16:3587:7191":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"2:11246:5479":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"2:22189:8047":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:7777:3345":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:7586:9574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:9746:3377":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:5727:6069":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"21:1755:5846":{"crate_id":21,"path":["rustix","ioctl","patterns","NoArg"],"kind":"struct"},"11:364:5393":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"22:4742:5807":{"crate_id":22,"path":["linux_raw_sys","general","compat_statfs64"],"kind":"struct"},"2:8526:3553":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:2282:200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:10004:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:5036:9035":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:7612:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:1486:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"22:4634:5766":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_writeprotect"],"kind":"struct"},"2:46485:8236":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:13349:15662":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:3054:156":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:45130:9707":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:13100:8031":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"22:4363:5691":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"17:14599:6521":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6368:7115":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:40909:8103":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:6462:9294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:8223:2482":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:7016:7374":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:11787:4141":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"14:31:7705":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:7368:3837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:11985:6152":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:8891:3551":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:6207:3433":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:41110:3452":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:8213:3378":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:14821:6572":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:7765:3344":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:10565:4304":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:2467:7135":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"11:830:7732":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"14:160:7705":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"11:2545:8713":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:7560:5422":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:7518:9538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:44508:8017":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"21:5251:3923":{"crate_id":21,"path":["rustix","backend","io","types","ReadWriteFlags"],"kind":"struct"},"6:5622:9244":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:4780:10477":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:9397:9716":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:4702:10460":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"9:176:9770":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:984:7720":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:44390:3452":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:7548:9555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:42274:181":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"21:4814:3830":{"crate_id":21,"path":["rustix","backend","fs","types","StatVfsMountFlags"],"kind":"struct"},"6:1494:8764":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"11:842:10404":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:12402:8497":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:3057:271":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:4574:5429":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"22:4353:5688":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"2:4918:5467":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:7471:7455":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:13119:6293":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:904:4030":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:12418:9781":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:8635:8437":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4881:8962":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10696:5932":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:42829:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:47615:8335":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:8889:3405":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:7883:7277":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:7469:9502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:6852:7356":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12787:6259":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:4890:8967":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:11298:3386":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:11315:3835":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"16:7337:7434":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:47415:8327":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"21:3373:5854":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"2:41287:3574":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:973:10404":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:9229:8459":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:1507:8770":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:15981:6884":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:5533:9204":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:44786:15676":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:16642:7073":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"22:4342:5684":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"6:4990:9012":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:1414:7730":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:5179:9061":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:10557:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:32856:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:13890:6386":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:4576:7975":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:41374:3580":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:3308:7132":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:386:8372":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:23081:10583":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:9241:10497":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:12471:1875":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:8268:8424":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:5736:4131":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:10031:23143":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:896:7127":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:6064:7171":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:4528:3433":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:4694:7200":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"21:5448:3922":{"crate_id":21,"path":["rustix","backend","io","types","DupFlags"],"kind":"struct"},"6:559:8668":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"15:394:22188":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:43053:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:12749:6256":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:6437:9289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12149:6176":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:45324:175":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:8298:7570":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:1213:38841":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:8489:3479":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"22:4614:5763":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_copy"],"kind":"struct"},"1:11045:4111":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"11:102:8705":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:7372:7176":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:6434:8402":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:1530:8780":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:44990:8197":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:1521:8775":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:5195:10485":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:13014:6288":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:7259:7428":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:10569:4301":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:12038:35421":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:43997:8009":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:6749:7125":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:2367:9613":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"21:5641:3914":{"crate_id":21,"path":["rustix","backend","mount","types","MountFlags"],"kind":"struct"},"2:41046:8111":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"5:7570:5413":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:11733:23192":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"16:4844:7203":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"11:785:7716":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"5:5425:5436":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"6:523:8740":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"21:3328:3716":{"crate_id":21,"path":["rustix","backend","fs","types","OFlags"],"kind":"struct"},"6:5241:5610":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:45154:9713":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:4938:2910":{"crate_id":1,"path":["std","os","fd","raw","RawFd"],"kind":"type_alias"},"1:12461:760":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"1:11909:8386":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:16297:6985":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:3181:4324":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:41255:3571":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:2265:7817":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"22:4402:8655":{"crate_id":22,"path":["linux_raw_sys","general","sigevent"],"kind":"struct"},"17:12293:6194":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:12225:6184":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:5494:9198":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"16:7495:7456":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:14520:6510":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:6502:22195":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:6564:9345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:12736:6255":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"21:3158:5854":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"21:4615:3824":{"crate_id":21,"path":["rustix","backend","fs","types","FallocateFlags"],"kind":"struct"},"1:1635:7735":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:22171:10502":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:4588:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:12897:6273":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:4829:8928":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:12028:6157":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:23370:35504":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"13:229:8704":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:31152:4158":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:6111:7236":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"21:1841:27372":{"crate_id":21,"path":["rustix","ioctl","patterns","ReadOpcode"],"kind":"struct"},"22:4935:8679":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1"],"kind":"union"},"5:4998:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:14652:6528":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12673:6247":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:46777:8260":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:39:5399":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:11807:8015":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:7308:5668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:7223:7416":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:6625:7309":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:1538:7731":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"22:4884:28338":{"crate_id":22,"path":["linux_raw_sys","general","membarrier_cmd_flag"],"kind":"enum"},"21:2509:5855":{"crate_id":21,"path":["rustix","backend","fs","inotify","WatchFlags"],"kind":"struct"},"22:3972:8631":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_key_specifier"],"kind":"struct"},"11:1005:7465":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:38842:3513":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:42474:8389":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:34127:3501":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:4297:3433":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:45142:9710":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:5689:7224":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:3889:5973":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:12762:6257":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:15024:6607":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:15148:6623":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:15286:6629":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:40959:8107":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:4569:8392":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:14019:6407":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:13070:6090":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:45126:9706":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:4211:3420":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:8391:3555":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"1:7906:8414":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"10:0:3207":{"crate_id":10,"path":["adler"],"kind":"module"},"17:13451:6316":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:3307:10138":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"21:2920:3823":{"crate_id":21,"path":["rustix","backend","fs","types","AtFlags"],"kind":"struct"},"17:14750:6558":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:8507:3133":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:8897:3552":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:7706:10403":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:1643:8860":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:6917:9480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:47547:8331":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:10953:9717":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:10977:39003":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:22595:5358":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:22098:35863":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:8201:3377":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:44703:8107":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"22:4066:5592":{"crate_id":22,"path":["linux_raw_sys","general","inodes_stat_t"],"kind":"struct"},"6:4921:8984":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:5282:7217":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:4611:15635":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:14335:6482":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:281:5402":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:4119:10446":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:5311:9119":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:10516:155":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:43740:8143":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:9437:245":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:10408:8476":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:45387:8212":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:47460:8328":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:15010:6606":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:11527:6114":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11401:6100":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:8935:35788":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:41072:3341":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:41398:3567":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:8839:3403":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:11970:8388":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"18:0:3214":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:12450:1204":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:47635:8337":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:8626:7621":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:11886:8017":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:2403:5368":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:5019:9028":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:14140:6440":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:7401:38991":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:4341:10455":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"14:165:22159":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:11821:8412":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"22:4579:5755":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_5"],"kind":"struct"},"2:22726:3380":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"22:4799:28336":{"crate_id":22,"path":["linux_raw_sys","general","fsconfig_command"],"kind":"enum"},"1:5316:8395":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7716:38997":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"22:4091:5603":{"crate_id":22,"path":["linux_raw_sys","general","futex_waitv"],"kind":"struct"},"1:4333:10454":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:15315:6649":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"21:1460:3810":{"crate_id":21,"path":["rustix","fs","raw_dir","RawDirEntry"],"kind":"struct"},"2:11928:8020":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:16179:6955":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"11:2228:6160":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:679:8375":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:13095:6292":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:13958:6396":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:14460:6501":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:6421:7120":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:2506:2767":{"crate_id":1,"path":["std","fs","remove_dir_all"],"kind":"function"},"17:14640:6527":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:6623:9378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:963:7714":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:5107:9055":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:12237:5519":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:7801:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4842:8938":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"21:6436:3832":{"crate_id":21,"path":["rustix","fs","fd","Timestamps"],"kind":"struct"},"1:4997:3534":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:4267:7198":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"21:465:3808":{"crate_id":21,"path":["rustix","backend","fs","dir","Dir"],"kind":"struct"},"16:2704:7151":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:5507:9202":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:13329:8007":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:13209:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:23161:8048":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:6480:5730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"22:4336:8646":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5"],"kind":"struct"},"17:11878:6090":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:7058:7378":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:8260:8423":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:10657:4135":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:44201:8156":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:7695:3408":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:40249:8096":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13398:6313":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:2554:2457":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:5420:9155":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:7424:23091":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"23:176:29832":{"crate_id":23,"path":["bitflags","parser","ParseErrorKind"],"kind":"enum"},"16:2724:7152":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:4929:7206":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:13041:6291":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:10817:5507":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:8273:9590":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:6227:231":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:41339:3577":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:14152:6443":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:13719:6346":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:2748:7153":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:7316:3843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:5865:231":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:4241:7197":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"21:2724:3821":{"crate_id":21,"path":["rustix","backend","fs","types","Access"],"kind":"struct"},"17:11386:23171":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:11805:6139":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:6712:5422":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"11:1105:7728":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:5682:9269":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:23631:8085":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:881:3405":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:1117:7730":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"22:3994:8636":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_get_key_status_arg"],"kind":"struct"},"22:4685:5793":{"crate_id":22,"path":["linux_raw_sys","general","__old_kernel_stat"],"kind":"struct"},"16:7192:23090":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:15785:6833":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:8121:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:22573:10508":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:2648:3463":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:11603:3405":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"21:3937:151":{"crate_id":21,"path":["rustix","backend","fs","types","FileType"],"kind":"enum"},"16:8028:7550":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:1667:8877":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:40847:7973":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:42755:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:23565:8079":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:31525:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:8233:23095":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:11832:9728":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:32765:248":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:13361:6310":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:10630:5930":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:8723:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"11:1023:7724":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:9533:8005":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"2:10563:4303":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"21:5849:3913":{"crate_id":21,"path":["rustix","backend","mount","types","UnmountFlags"],"kind":"struct"},"6:5551:9210":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:8319:9602":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"22:4196:5630":{"crate_id":22,"path":["linux_raw_sys","general","timeval"],"kind":"struct"},"2:44219:8159":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"21:5875:5854":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"16:0:3212":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:6411:5705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:2172:7816":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"11:0:3208":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:11407:8493":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:13157:6295":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:11473:7794":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:23390:35502":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:23598:8082":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"5:3363:7738":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:16668:7079":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:14845:6575":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:22177:10505":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:10368:23153":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"22:4651:5769":{"crate_id":22,"path":["linux_raw_sys","general","linux_dirent64"],"kind":"struct"},"1:12474:1869":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"21:6073:5854":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"6:5586:9223":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:43787:8153":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"11:396:5395":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:33993:3499":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:8629:10458":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"21:5058:3916":{"crate_id":21,"path":["rustix","backend","io","types","FdFlags"],"kind":"struct"},"17:15919:6869":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:41547:3583":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"15:327:9757":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:5217:9081":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"11:2420:4030":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:5117:9056":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"22:4325:5680":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_4"],"kind":"struct"},"16:3126:22225":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:41747:3541":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:15106:6616":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:7212:7415":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:41235:3570":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:47710:8348":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:44696:8032":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"21:4040:5854":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"17:15665:6806":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:14284:6471":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:8296:9596":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:7883:5442":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:11886:5513":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:44454:8175":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:3668:31492":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:8255:9587":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:41098:3342":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:16701:7086":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:2859:146":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:4937:8987":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:7917:35911":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:8727:8441":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"2:22086:35855":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"14:0:3210":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:43492:9701":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:8199:5737":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:14099:6429":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:34579:3505":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"14:214:7709":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:8546:3451":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:14080:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:15036:6608":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:1001:3405":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:11465:6107":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"2:46439:8233":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"21:6465:5854":{"crate_id":21,"path":["rustix","fs","ioctl","_","InternalBitFlags"],"kind":"struct"},"18:726:5922":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:7448:9496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:10974:5379":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:908:5936":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"3:0:524":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"21:5081:5854":{"crate_id":21,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"9:422:22075":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:5571:15650":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:44210:8157":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13537:6277":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:22030:4005":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:11653:6122":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:7648:4030":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:44822:8190":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"21:4237:5854":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"22:3879:5545":{"crate_id":22,"path":["linux_raw_sys","general","f_owner_ex"],"kind":"struct"},"5:888:5405":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:9310:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:2966:7163":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:10548:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:10567:217":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:12869:6316":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:14859:6576":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:7107:5474":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:2215:7840":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:5334:9127":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:14692:6532":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:4207:7731":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:7123:5454":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:967:7717":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:2620:7147":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:5113:7211":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:6544:9329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:9212:8397":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"21:6045:3915":{"crate_id":21,"path":["rustix","backend","mount","types","MountPropagationFlags"],"kind":"struct"},"17:12191:6180":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:2496:3368":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:11446:3380":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11421:6103":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:10778:168":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:44276:3559":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:5410:36149":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"24:153:4510":{"crate_id":24,"path":["fastrand","Rng"],"kind":"struct"},"2:1898:15840":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"17:13028:6290":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:8112:4111":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:4909:827":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:9169:4136":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:45207:15996":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"22:3966:8628":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg"],"kind":"struct"},"2:47166:8291":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:11851:6142":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:3941:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:5341:9128":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:33721:3497":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:23620:8084":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:23354:8058":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"21:6267:5854":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"5:4329:3433":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:1514:8772":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"9:445:22073":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:8879:3404":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:3077:149":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"11:2323:7724":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:1623:4030":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12095:6172":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"11:430:38972":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:11691:6125":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:3403:3474":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:2498:3369":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:15852:6847":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:16632:7072":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:12941:6278":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:8585:7616":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:6930:5402":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11864:6143":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:8387:3556":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:12052:8413":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:5389:452":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"18:491:5879":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:4827:5788":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:2206:15898":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"9:500:7797":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:3693:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:11838:9729":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:1339:5945":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"22:4837:28337":{"crate_id":22,"path":["linux_raw_sys","general","membarrier_cmd"],"kind":"enum"},"5:1615:7714":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:3335:4521":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:7416:7441":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:472:5938":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:13169:6296":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:45379:8210":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:6084:7227":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:11261:4136":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:16264:6978":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:42618:8136":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:6839:4030":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:41005:8109":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:46456:8234":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:13988:3574":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"22:3807:5530":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_fd_set"],"kind":"struct"},"16:8612:7186":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:13662:6334":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"12:0:3209":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:3496:3458":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:11037:8440":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"17:11998:6153":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:11563:5511":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:11818:6140":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:6970:7168":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:3780:3525":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:2802:3992":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"2:4:1288":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:45346:218":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:42666:237":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:13948:8039":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:16728:7095":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:663:4321":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:788:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:13061:8029":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:15739:6824":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:14043:6411":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11281:6092":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:3441:7190":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"18:765:27353":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"18:481:5878":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8559:3453":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:16494:6347":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"5:3095:37725":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:11456:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:14872:6577":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:41083:15936":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:3061:270":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:10394:23154":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:6837:7354":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:2754:3455":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:7640:4030":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:7075:23089":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:14796:6568":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:11606:6090":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"21:1380:39061":{"crate_id":21,"path":["rustix","fs","ioctl","Ficlone"],"kind":"struct"},"16:4152:7195":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:1854:719":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:8049:5507":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:23532:8076":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:2331:3123":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:3576:154":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:23267:8050":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:7750:15936":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:3329:7737":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:1932:4107":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:9344:8467":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:16684:7084":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:6573:7303":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:45400:36714":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:2482:3364":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:12687:6251":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:11914:8019":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:16323:6994":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:2161:7815":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:6827:3959":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:8267:9589":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:16786:7108":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:12473:1887":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:9420:198":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"21:4001:3827":{"crate_id":21,"path":["rustix","backend","fs","types","MemfdFlags"],"kind":"struct"},"22:4959:8690":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1"],"kind":"union"},"2:42440:35524":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:6882:9455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:47083:8288":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:1220:5943":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:14312:6478":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"16:6389:7266":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:47725:8349":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:47195:8292":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"2:9570:8006":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"11:2539:8712":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:12469:911":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:5285:8395":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:4975:5468":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:630:10383":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:8736:10489":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:3337:7735":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:8906:3407":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:7531:5372":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:14053:35986":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:3042:5490":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:23214:8049":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:41296:3575":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:23484:3380":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:11333:173":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:15121:6620":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:8209:7172":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:13427:6314":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:8010:3380":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:14114:6435":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:12319:6199":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:12449:434":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:4928:4313":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:16008:6891":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:7397:5502":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:2792:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:5488:9196":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"16:6608:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:5428:9160":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:2840:7157":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:12018:6155":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:8200:3540":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:5357:9130":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"6:5593:9225":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:12484:15658":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:23439:8070":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"20:0:2646":{"crate_id":20,"path":["cfg_if"],"kind":"module"},"2:22:842":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:12056:6167":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:16822:6391":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:5230:9085":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:11272:35391":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"14:202:5520":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:2668:15889":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"5:3799:5402":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:44363:8172":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:6672:9396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:7332:3881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"22:4302:5677":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_1"],"kind":"struct"},"2:34194:3500":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:13491:6318":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:491:5653":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:44311:8166":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"22:4018:5571":{"crate_id":22,"path":["linux_raw_sys","general","file_clone_range"],"kind":"struct"},"6:5450:9176":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"22:4901:8664":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg__bindgen_ty_1"],"kind":"union"},"22:4266:5657":{"crate_id":22,"path":["linux_raw_sys","general","clone_args"],"kind":"struct"},"17:11788:6136":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:7851:3568":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:34261:3502":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:5366:9134":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5249:9089":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:14773:6567":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:5020:2907":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"11:2400:7731":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:41756:3543":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:40943:8106":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"22:4410:5702":{"crate_id":22,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"}},"external_crates":{"23":{"name":"bitflags","html_root_url":null},"20":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"linux_raw_sys","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"fastrand","html_root_url":null},"21":{"name":"rustix","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}