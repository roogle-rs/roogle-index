{"root":"0:0:1898","crate_version":"3.9.0","includes_private":false,"index":{"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[547,0],"end":[650,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2266:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:164:1048","0:165:2184","0:167:2239","0:169:2244"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2441-0:28:1897":{"id":"b:2:2441-0:28:1897","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:129:603":{"id":"0:129:603","crate_id":0,"name":"deref","span":{"filename":"src/file/mod.rs","begin":[389,4],"end":[391,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:332:2035":{"id":"0:332:2035","crate_id":0,"name":"make","span":{"filename":"src/lib.rs","begin":[654,4],"end":[659,5]},"visibility":"public","docs":"Attempts to create a temporary file (or file-like object) using the\nprovided closure. The closure is passed a temporary file path and\nreturns an [`std::io::Result`]. The path provided to the closure will be\ninside of [`std::env::temp_dir()`]. Use [`Builder::make_in`] to provide\na custom temporary directory. If the closure returns one of the\nfollowing errors, then another randomized file path is tried:\n - [`std::io::ErrorKind::AlreadyExists`]\n - [`std::io::ErrorKind::AddrInUse`]\n\nThis can be helpful for taking full control over the file creation, but\nleaving the temporary file path construction up to the library. This\nalso enables creating a temporary UNIX domain socket, since it is not\npossible to bind to a socket that already exists.\n\nNote that [`Builder::append`] is ignored when using [`Builder::make`].\n\n# Security\n\nThis has the same [security implications][security] as\n[`NamedTempFile`], but with additional caveats. Specifically, it is up\nto the closure to ensure that the file does not exist and that such a\ncheck is *atomic*. Otherwise, a [time-of-check to time-of-use\nbug][TOCTOU] could be introduced.\n\nFor example, the following is **not** secure:\n\n```\n# use std::io;\n# use std::fs::File;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n// This is NOT secure!\nlet tempfile = Builder::new().make(|path| {\n    if path.is_file() {\n        return Err(io::ErrorKind::AlreadyExists.into());\n    }\n\n    // Between the check above and the usage below, an attacker could\n    // have replaced `path` with another file, which would get truncated\n    // by `File::create`.\n\n    File::create(path)\n})?;\n# Ok(())\n# }\n```\nNote that simply using [`std::fs::File::create`] alone is not correct\nbecause it does not fail if the file already exists:\n```\n# use std::io;\n# use std::fs::File;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n// This could overwrite an existing file!\nlet tempfile = Builder::new().make(|path| File::create(path))?;\n# Ok(())\n# }\n```\nFor creating regular temporary files, use [`Builder::tempfile`] instead\nto avoid these problems. This function is meant to enable more exotic\nuse-cases.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `NamedTempFile`.\n\n# Errors\n\nIf the closure returns any error besides\n[`std::io::ErrorKind::AlreadyExists`] or\n[`std::io::ErrorKind::AddrInUse`], then `Err` is returned.\n\n# Examples\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n# #[cfg(unix)]\nuse std::os::unix::net::UnixListener;\n# #[cfg(unix)]\nlet tempsock = Builder::new().make(|path| UnixListener::bind(path))?;\n# Ok(())\n# }\n```\n\n[TOCTOU]: https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use\n[security]: struct.NamedTempFile.html#security\n[resource-leaking]: struct.NamedTempFile.html#resource-leaking","links":{"`NamedTempFile`":"0:134:1900","`std::io::ErrorKind::AlreadyExists`":"1:8101:2593","`Builder::make_in`":"0:335:2038","`Builder::tempfile`":"0:325:1898","`Builder::append`":"0:324:1913","`std::fs::File::create`":"1:2286:1991","`std::io::ErrorKind::AddrInUse`":"1:8093:2594","`std::io::Result`":"1:3010:233","`Builder::make`":"0:332:2035","`std::env::temp_dir()`":"1:1883:1966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3188:139","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12867:36579":{"id":"2:12867:36579","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[515,0],"end":[519,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:150:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:427":{"id":"0:427","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,27],"end":[194,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2504:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:430:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[128,0],"end":[132,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10000:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:109:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:321:1912":{"id":"0:321:1912","crate_id":0,"name":"suffix","span":{"filename":"src/lib.rs","begin":[345,4],"end":[348,5]},"visibility":"public","docs":"Set a custom filename suffix.\n\nPath separators are legal but not advisable.\nDefault: empty.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .suffix(\".txt\")\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["suffix",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"S"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2035:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:2520":{"id":"0:196:2520","crate_id":0,"name":"read_to_end","span":{"filename":"src/file/mod.rs","begin":[965,4],"end":[969,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"5:6994:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:2500":{"id":"0:185:2500","crate_id":0,"name":"into_parts","span":{"filename":"src/file/mod.rs","begin":[899,4],"end":[901,5]},"visibility":"public","docs":"Converts the named temporary file into its constituent parts.\n\nNote: When the path is dropped, the file is deleted but the file handle\nis still usable.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"generic":"F"},{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:725":{"id":"0:150:725","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[516,4],"end":[518,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:144:1902":{"id":"b:2:2441-0:144:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2443:2694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:205:2517":{"id":"0:205:2517","crate_id":0,"name":"read_vectored","span":{"filename":"src/file/mod.rs","begin":[989,4],"end":[993,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"io::IoSliceMut","id":"1:3512:2519","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:390:2539":{"id":"0:390:2539","crate_id":0,"name":"SpooledData","span":{"filename":"src/spooled.rs","begin":[7,0],"end":[10,1]},"visibility":"public","docs":"A wrapper for the two states of a `SpooledTempFile`.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:391:2540","0:394:2541"],"impls":[]}}},"0:223:2527":{"id":"0:223:2527","crate_id":0,"name":"write_fmt","span":{"filename":"src/file/mod.rs","begin":[1033,4],"end":[1037,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["fmt",{"resolved_path":{"name":"fmt::Arguments","id":"2:43416:2528","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:2265":{"id":"0:40:2265","crate_id":0,"name":"into_path","span":{"filename":"src/dir.rs","begin":[388,4],"end":[395,5]},"visibility":"public","docs":"Persist the temporary directory to disk, returning the [`PathBuf`] where it is located.\n\nThis consumes the [`TempDir`] without deleting directory on the filesystem, meaning that\nthe directory will no longer be automatically deleted.\n\n[`TempDir`]: struct.TempDir.html\n[`PathBuf`]: http://doc.rust-lang.org/std/path/struct.PathBuf.html\n\n# Examples\n\n```\nuse std::fs;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_dir = TempDir::new()?;\n\n// Persist the temporary directory to disk,\n// getting the path where it is.\nlet tmp_path = tmp_dir.into_path();\n\n// Delete the temporary directory ourselves.\nfs::remove_dir_all(tmp_path)?;\n# Ok(())\n# }\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"PathBuf","id":"1:5197:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330:1896":{"id":"0:330:1896","crate_id":0,"name":"tempdir_in","span":{"filename":"src/lib.rs","begin":[539,4],"end":[549,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `dir`.\nThe directory and everything inside it will be automatically\ndeleted once the returned `TempDir` is destroyed.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::Builder;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_dir = Builder::new().tempdir_in(\"./\")?;\n# Ok(())\n# }\n```\n\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:403:725":{"id":"0:403:725","crate_id":0,"name":"fmt","span":{"filename":"src/spooled.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:180:2370":{"id":"0:180:2370","crate_id":0,"name":"keep","span":{"filename":"src/file/mod.rs","begin":[859,4],"end":[868,5]},"visibility":"public","docs":"Keep the temporary file from being deleted. This function will turn the\ntemporary file into a non-temporary file without moving it.\n\n\n# Errors\n\nOn some platforms (e.g., Windows), we need to mark the file as\nnon-temporary. This operation could fail.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet (file, path) = file.keep()?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"F"},{"resolved_path":{"name":"PathBuf","id":"1:5197:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}},{"type":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:419:461":{"id":"0:419:461","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[194,16],"end":[194,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3558-0:112:1903":{"id":"b:2:3558-0:112:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12987:29738":{"id":"2:12987:29738","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:385:1901":{"id":"b:2:2444-0:385:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:28579"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5828-0:385:1901":{"id":"b:5:5828-0:385:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10000:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5826:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5830:1605"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12886:36584":{"id":"2:12886:36584","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12061:1548","crate::ops::IndexMut":"2:3220:2894","str::slice_unchecked":"2:12885:36583"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12913:3403":{"id":"2:12913:3403","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42354:198","prim@char":"1:12055:457","self::pattern":"2:12558:3142"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:14865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:28:1897":{"id":"b:2:2748-0:28:1897","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2441-0:399:1905":{"id":"b:2:2441-0:399:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:114":{"id":"0:114","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[150,0],"end":[372,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:115:2282","0:117:2353","0:119:2364","0:121:2370","0:122:2044"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:186:2043":{"id":"0:186:2043","crate_id":0,"name":"from_parts","span":{"filename":"src/file/mod.rs","begin":[907,4],"end":[909,5]},"visibility":"public","docs":"Creates a `NamedTempFile` from its constituent parts.\n\nThis can be used with [`NamedTempFile::into_parts`] to reconstruct the\n`NamedTempFile`.","links":{"`NamedTempFile::into_parts`":"0:185:2500"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["file",{"generic":"F"}],["path",{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32882:2973-0:405:1907":{"id":"a:2:32882:2973-0:405:1907","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12932:32093":{"id":"2:12932:32093","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:3142","str::rsplitn":"2:12935:32095"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44343:6746","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12898:36585":{"id":"2:12898:36585","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44503:6897","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12973:32102":{"id":"2:12973:32102","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:3142"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:14865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:112:1903":{"id":"b:2:2744-0:112:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2270"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:245:2531":{"id":"0:245:2531","crate_id":0,"name":"as_fd","span":{"filename":"src/file/mod.rs","begin":[1078,4],"end":[1080,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"BorrowedFd","id":"1:8413:2300","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3558-0:399:1905":{"id":"b:2:3558-0:399:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:48:641":{"id":"0:48:641","crate_id":0,"name":"drop","span":{"filename":"src/dir.rs","begin":[466,4],"end":[468,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:262:1904":{"id":"0:262:1904","crate_id":0,"name":"spooled_tempfile","span":{"filename":"src/spooled.rs","begin":[62,0],"end":[64,1]},"visibility":"public","docs":"Create a new spooled temporary file.\n\n# Security\n\nThis variant is secure/reliable in the presence of a pathological temporary\nfile cleaner.\n\n# Resource Leaking\n\nThe temporary file will be automatically removed by the OS when the last\nhandle to it is closed. This doesn't rely on Rust destructors being run, so\nwill (almost) never fail to clean up the temporary file.\n\n# Examples\n\n```\nuse tempfile::spooled_tempfile;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = spooled_tempfile(15);\n\nwriteln!(file, \"short line\")?;\nassert!(!file.is_rolled());\n\n// as a result of this write call, the size of the data will exceed\n// `max_size` (15), so it will be written to a temporary file on disk,\n// and the in-memory buffer will be dropped\nwriteln!(file, \"marvin gardens\")?;\nassert!(file.is_rolled());\n\n# Ok(())\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:399:1905":{"id":"b:2:2744-0:399:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2270"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:273:2521":{"id":"0:273:2521","crate_id":0,"name":"read_to_string","span":{"filename":"src/spooled.rs","begin":[140,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5573:29740":{"id":"5:5573:29740","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12990:29743"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125":{"id":"0:125","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[380,0],"end":[384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3181:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:126:641"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[500,0],"end":[505,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:143:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2966:253-0:399:1905":{"id":"a:2:2966:253-0:399:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2446:28579":{"id":"2:2446:28579","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:2184":{"id":"0:32:2184","crate_id":0,"name":"new_in","span":{"filename":"src/dir.rs","begin":[264,4],"end":[266,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `dir`.\nThe directory and everything inside it will be automatically\ndeleted once the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory\nlet tmp_dir = TempDir::new_in(\".\")?;\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12868:36580":{"id":"2:12868:36580","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12958:36592":{"id":"2:12958:36592","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:300-0:28:1897":{"id":"0:300-0:28:1897","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,42],"end":[187,49]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::dir::TempDir","name":"TempDir","id":"0:28:1897","glob":false}}},"b:2:2759-0:385:1901":{"id":"b:2:2759-0:385:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:307-0:112:1903":{"id":"0:307-0:112:1903","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,74],"end":[189,82]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::TempPath","name":"TempPath","id":"0:112:1903","glob":false}}},"0:107:752":{"id":"0:107:752","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[123,4],"end":[125,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2762:135":{"id":"2:2762:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32755:3517","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:32825:244-0:112:1903":{"id":"a:2:32825:244-0:112:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:124:725":{"id":"0:124:725","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[375,4],"end":[377,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:2364":{"id":"0:178:2364","crate_id":0,"name":"persist_noclobber","span":{"filename":"src/file/mod.rs","begin":[815,4],"end":[827,5]},"visibility":"public","docs":"Persist the temporary file at the target path if and only if no file exists there.\n\nIf a file exists at the target path, fail. If this method fails, it will\nreturn `self` in the resulting PersistError.\n\nNote: Temporary files cannot be persisted across filesystems. Also Note:\nThis method is not atomic. It can leave the original link to the\ntemporary file behind.\n\n# Security\n\nThis method persists the temporary file using its path and may not be\nsecure in all cases. Please read the security section on the top\nlevel documentation of this type for details.\n\n# Errors\n\nIf the file cannot be moved to the new location or a file already exists there,\n`Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\nlet mut persisted_file = file.persist_noclobber(\"./saved_file.txt\")?;\nwriteln!(persisted_file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5828-0:144:1902":{"id":"b:5:5828-0:144:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10000:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5826:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["5:5830:1605"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2966:253-0:28:1897":{"id":"a:2:2966:253-0:28:1897","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:430:668":{"id":"0:430:668","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[194,27],"end":[194,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:399:1905":{"id":"0:399:1905","crate_id":0,"name":"SpooledTempFile","span":{"filename":"src/spooled.rs","begin":[17,0],"end":[20,1]},"visibility":"public","docs":"An object that behaves like a regular temporary file, but keeps data in\nmemory until it reaches a configured size, at which point the data is\nwritten to a temporary file on disk, and further operations use the file\non disk.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:263","a:2:42477:9695-0:399:1905","a:2:2966:253-0:399:1905","a:2:32825:244-0:399:1905","a:2:32882:2973-0:399:1905","a:2:42476:9604-0:399:1905","b:2:2754-0:399:1905","b:2:2744-0:399:1905","b:2:2748-0:399:1905","b:2:2441-0:399:1905","b:2:2444-0:399:1905","b:2:3558-0:399:1905","b:2:2759-0:399:1905","0:279","0:275","0:402","0:269"]}}},"2:12900:32099":{"id":"2:12900:32099","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:3142"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42476:9604-0:144:1902":{"id":"a:2:42476:9604-0:144:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"File","id":"1:2266:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:9604","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:127":{"id":"0:127","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[386,0],"end":[392,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3157:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:128:255","0:129:603"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:140:725":{"id":"0:140:725","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[495,4],"end":[497,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12962:36594":{"id":"2:12962:36594","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:37290":{"id":"5:5555:37290","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2227","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2227","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/dir.rs","begin":[465,0],"end":[469,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3181:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:48:641"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2759-0:134:1900":{"id":"b:2:2759-0:134:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:1898":{"id":"0:0:1898","crate_id":0,"name":"tempfile","span":{"filename":"src/lib.rs","begin":[1,0],"end":[701,1]},"visibility":"public","docs":"Temporary files and directories.\n\n- Use the [`tempfile()`] function for temporary files\n- Use the [`tempdir()`] function for temporary directories.\n\n# Design\n\nThis crate provides several approaches to creating temporary files and directories.\n[`tempfile()`] relies on the OS to remove the temporary file once the last handle is closed.\n[`TempDir`] and [`NamedTempFile`] both rely on Rust destructors for cleanup.\n\nWhen choosing between the temporary file variants, prefer `tempfile`\nunless you either need to know the file's path or to be able to persist it.\n\n## Resource Leaking\n\n`tempfile` will (almost) never fail to cleanup temporary resources. However `TempDir` and `NamedTempFile` will\nfail if their destructors don't run. This is because `tempfile` relies on the OS to cleanup the\nunderlying file, while `TempDir` and `NamedTempFile` rely on rust destructors to do so.\nDestructors may fail to run if the process exits through an unhandled signal interrupt (like `SIGINT`),\nor if the instance is declared statically (like with [`lazy_static`]), among other possible\nreasons.\n\n## Security\n\nIn the presence of pathological temporary file cleaner, relying on file paths is unsafe because\na temporary file cleaner could delete the temporary file which an attacker could then replace.\n\n`tempfile` doesn't rely on file paths so this isn't an issue. However, `NamedTempFile` does\nrely on file paths for _some_ operations. See the security documentation on\nthe `NamedTempFile` type for more information.\n\n## Early drop pitfall\n\nBecause `TempDir` and `NamedTempFile` rely on their destructors for cleanup, this can lead\nto an unexpected early removal of the directory/file, usually when working with APIs which are\ngeneric over `AsRef<Path>`. Consider the following example:\n\n```no_run\n# use tempfile::tempdir;\n# use std::io;\n# use std::process::Command;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`.\nlet temp_dir = tempdir()?;\n\n// Spawn the `touch` command inside the temporary directory and collect the exit status\n// Note that `temp_dir` is **not** moved into `current_dir`, but passed as a reference\nlet exit_status = Command::new(\"touch\").arg(\"tmp\").current_dir(&temp_dir).status()?;\nassert!(exit_status.success());\n\n# Ok(())\n# }\n```\n\nThis works because a reference to `temp_dir` is passed to `current_dir`, resulting in the\ndestructor of `temp_dir` being run after the `Command` has finished execution. Moving the\n`TempDir` into the `current_dir` call would result in the `TempDir` being converted into\nan internal representation, with the original value being dropped and the directory thus\nbeing deleted, before the command can be executed.\n\nThe `touch` command would fail with an `No such file or directory` error.\n\n## Examples\n\nCreate a temporary file and write some data into it:\n\n```\nuse tempfile::tempfile;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a file inside of `std::env::temp_dir()`.\nlet mut file = tempfile()?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\nCreate a named temporary file and open an independent file handle:\n\n```\nuse tempfile::NamedTempFile;\nuse std::io::{self, Write, Read};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet text = \"Brian was here. Briefly.\";\n\n// Create a file inside of `std::env::temp_dir()`.\nlet mut file1 = NamedTempFile::new()?;\n\n// Re-open it.\nlet mut file2 = file1.reopen()?;\n\n// Write some test data to the first handle.\nfile1.write_all(text.as_bytes())?;\n\n// Read the test data using the second handle.\nlet mut buf = String::new();\nfile2.read_to_string(&mut buf)?;\nassert_eq!(buf, text);\n# Ok(())\n# }\n```\n\nCreate a temporary directory and add a file to it:\n\n```\nuse tempfile::tempdir;\nuse std::fs::File;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`.\nlet dir = tempdir()?;\n\nlet file_path = dir.path().join(\"my-temporary-note.txt\");\nlet mut file = File::create(file_path)?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\n// By closing the `TempDir` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the directory will still be deleted when `dir` goes out\n// of scope, but we won't know whether deleting the directory\n// succeeded.\ndrop(file);\ndir.close()?;\n# Ok(())\n# }\n```\n\n[`tempfile()`]: fn.tempfile.html\n[`tempdir()`]: fn.tempdir.html\n[`TempDir`]: struct.TempDir.html\n[`NamedTempFile`]: struct.NamedTempFile.html\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html\n[`lazy_static`]: https://github.com/rust-lang-nursery/lazy-static.rs/issues/62","links":{},"attrs":["#![doc(html_logo_url =\n\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\nhtml_favicon_url = \"https://www.rust-lang.org/favicon.ico\", html_root_url =\n\"https://docs.rs/tempfile/3.1.0\")]","#![deny(rust_2018_idioms)]","#![allow(clippy::redundant_field_names)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:298-0:25:1895","0:299-0:26:1896","0:300-0:28:1897","0:302-0:101:1898","0:303-0:102:1899","0:304-0:134:1900","0:305-0:385:1901","0:306-0:144:1902","0:307-0:112:1903","0:309-0:262:1904","0:310-0:399:1905","0:405:1907"],"is_stripped":false}}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[535,0],"end":[539,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10000:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:159:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:277:2524":{"id":"0:277:2524","crate_id":0,"name":"write_vectored","span":{"filename":"src/spooled.rs","begin":[172,4],"end":[185,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"io::IoSlice","id":"1:8221:2525","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271:2517":{"id":"0:271:2517","crate_id":0,"name":"read_vectored","span":{"filename":"src/spooled.rs","begin":[126,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"io::IoSliceMut","id":"1:3512:2519","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1012,0],"end":[1038,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"1:3551:2295","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","write_all_vectored","write_fmt","write_vectored","is_write_vectored","write_all"],"trait":{"name":"Write","id":"1:3551:2295","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:215:2289","0:217:2523","0:219:2524","0:221:2526","0:223:2527"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:211:2522":{"id":"0:211:2522","crate_id":0,"name":"read_exact","span":{"filename":"src/file/mod.rs","begin":[1007,4],"end":[1009,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[66,0],"end":[116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:264:1048","0:265:2564","0:266:2567","0:267:2572","0:268:2576"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:153:752":{"id":"0:153:752","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[523,4],"end":[525,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Error","id":"1:3012:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[494,0],"end":[498,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:140:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:268:2576":{"id":"0:268:2576","crate_id":0,"name":"into_inner","span":{"filename":"src/spooled.rs","begin":[113,4],"end":[115,5]},"visibility":"public","docs":"Consumes and returns the inner `SpooledData` type.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"SpooledData","id":"0:390:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314:60":{"id":"0:314:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[203,4],"end":[210,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:2515":{"id":"0:192:2515","crate_id":0,"name":"read","span":{"filename":"src/file/mod.rs","begin":[955,4],"end":[957,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:752":{"id":"0:156:752","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[530,4],"end":[532,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32825:244-0:144:1902":{"id":"a:2:32825:244-0:144:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:326:1899":{"id":"0:326:1899","crate_id":0,"name":"tempfile_in","span":{"filename":"src/lib.rs","begin":[470,4],"end":[478,5]},"visibility":"public","docs":"Create the named temporary file in the specified directory.\n\n# Security\n\nSee [the security][security] docs on `NamedTempFile`.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `NamedTempFile`.\n\n# Errors\n\nIf the file cannot be created, `Err` is returned.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet tempfile = Builder::new().tempfile_in(\"./\")?;\n# Ok(())\n# }\n```\n\n[security]: struct.NamedTempFile.html#security\n[resource-leaking]: struct.NamedTempFile.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:234:2527":{"id":"0:234:2527","crate_id":0,"name":"write_fmt","span":{"filename":"src/file/mod.rs","begin":[1059,4],"end":[1061,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["fmt",{"resolved_path":{"name":"fmt::Arguments","id":"2:43416:2528","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:405:1907":{"id":"b:2:2441-0:405:1907","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2443:2694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2444-0:405:1907":{"id":"b:2:2444-0:405:1907","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2446:28579"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2748-0:399:1905":{"id":"b:2:2748-0:399:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:246":{"id":"0:246","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1084,0],"end":[1089,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(any(unix, target_os = \"wasi\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRawFd","id":"1:4809:2299","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:4809:2299","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:248:2532"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:209:2521":{"id":"0:209:2521","crate_id":0,"name":"read_to_string","span":{"filename":"src/file/mod.rs","begin":[1001,4],"end":[1005,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146:1892":{"id":"0:146:1892","crate_id":0,"name":"error","span":{"filename":"src/file/mod.rs","begin":[510,4],"end":[510,24]},"visibility":"public","docs":"The underlying IO error.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"io::Error","id":"1:3012:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:2759-0:144:1902":{"id":"b:2:2759-0:144:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12990:29743":{"id":"2:12990:29743","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:248:2532":{"id":"0:248:2532","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/file/mod.rs","begin":[1086,4],"end":[1088,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RawFd","id":"1:4808:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32825:244-0:405:1907":{"id":"a:2:32825:244-0:405:1907","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32882:2973-0:385:1901":{"id":"a:2:32882:2973-0:385:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5574:29741":{"id":"5:5574:29741","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12991:29744"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:399:1905":{"id":"b:2:2759-0:399:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[196,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["rewind","stream_position","stream_len","seek_relative"],"trait":{"name":"Seek","id":"1:3569:2293","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:280:2529"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2754-0:134:1900":{"id":"b:2:2754-0:134:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:31:1048":{"id":"0:31:1048","crate_id":0,"name":"new","span":{"filename":"src/dir.rs","begin":[235,4],"end":[237,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `env::temp_dir()`.\n\nSee [`Builder`] for more configuration.\n\nThe directory and everything inside it will be automatically deleted\nonce the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`\nlet tmp_dir = TempDir::new()?;\n\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// `tmp_dir` goes out of scope, the directory as well as\n// `tmp_file` will be deleted here.\n# Ok(())\n# }\n```\n\n[`Builder`]: struct.Builder.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:264:1048":{"id":"0:264:1048","crate_id":0,"name":"new","span":{"filename":"src/spooled.rs","begin":[68,4],"end":[73,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:399:1905":{"id":"b:2:2444-0:399:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:28579"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:275":{"id":"0:275","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[155,0],"end":[194,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["by_ref","write_all_vectored","write_fmt","write_vectored","is_write_vectored","write_all"],"trait":{"name":"Write","id":"1:3551:2295","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:276:2289","0:277:2524","0:278:2523"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:200:2522":{"id":"0:200:2522","crate_id":0,"name":"read_exact","span":{"filename":"src/file/mod.rs","begin":[977,4],"end":[981,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42476:9604-0:28:1897":{"id":"a:2:42476:9604-0:28:1897","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:9604","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:172":{"id":"0:172","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[652,0],"end":[910,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:174:1151","0:175:2282","0:176:2353","0:178:2364","0:180:2370","0:181:2487","0:182:2489","0:183:2492","0:184:2496","0:185:2500","0:186:2043"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:298-0:25:1895":{"id":"0:298-0:25:1895","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,21],"end":[187,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::dir::tempdir","name":"tempdir","id":"0:25:1895","glob":false}}},"b:2:2759-0:405:1907":{"id":"b:2:2759-0:405:1907","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12885:36583":{"id":"2:12885:36583","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12061:1548","str::slice_mut_unchecked":"2:12886:36584","crate::ops::Index":"2:39955:2893"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:144:1902":{"id":"b:2:2744-0:144:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2747:2270"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:310-0:399:1905":{"id":"0:310-0:399:1905","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[191,43],"end":[191,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::spooled::SpooledTempFile","name":"SpooledTempFile","id":"0:399:1905","glob":false}}},"2:12988:31974":{"id":"2:12988:31974","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40309:31981","Self::is_ascii":"2:12987:29738"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40309:31981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:752":{"id":"0:105:752","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[116,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Error","id":"1:3012:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12881:32058":{"id":"2:12881:32058","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:345:1670":{"id":"0:345:1670","crate_id":0,"name":"unix","span":{"filename":"src/file/imp/unix.rs","begin":[1,0],"end":[149,1]},"visibility":{"restricted":{"parent":"0:100:2306","path":"::file::imp"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":true}}},"0:126:641":{"id":"0:126:641","crate_id":0,"name":"drop","span":{"filename":"src/file/mod.rs","begin":[381,4],"end":[383,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:121:2370":{"id":"0:121:2370","crate_id":0,"name":"keep","span":{"filename":"src/file/mod.rs","begin":[344,4],"end":[359,5]},"visibility":"public","docs":"Keep the temporary file from being deleted. This function will turn the\ntemporary file into a non-temporary file without moving it.\n\n\n# Errors\n\nOn some platforms (e.g., Windows), we need to mark the file as\nnon-temporary. This operation could fail.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet path = file.into_temp_path();\nlet path = path.keep()?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5197:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:2496":{"id":"0:184:2496","crate_id":0,"name":"into_temp_path","span":{"filename":"src/file/mod.rs","begin":[891,4],"end":[893,5]},"visibility":"public","docs":"Closes the file, leaving only the temporary file path.\n\nThis is useful when another process must be able to open the temporary\nfile.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:181:2487":{"id":"0:181:2487","crate_id":0,"name":"as_file","span":{"filename":"src/file/mod.rs","begin":[871,4],"end":[873,5]},"visibility":"public","docs":"Get a reference to the underlying file.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"F"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:1900":{"id":"0:134:1900","crate_id":0,"name":"NamedTempFile","span":{"filename":"src/file/mod.rs","begin":[489,0],"end":[492,1]},"visibility":"public","docs":"A named temporary file.\n\nThe default constructor, [`NamedTempFile::new()`], creates files in\nthe location returned by [`std::env::temp_dir()`], but `NamedTempFile`\ncan be configured to manage a temporary file in any location\nby constructing with [`NamedTempFile::new_in()`].\n\n# Security\n\nMost operating systems employ temporary file cleaners to delete old\ntemporary files. Unfortunately these temporary file cleaners don't always\nreliably _detect_ whether the temporary file is still being used.\n\nSpecifically, the following sequence of events can happen:\n\n1. A user creates a temporary file with `NamedTempFile::new()`.\n2. Time passes.\n3. The temporary file cleaner deletes (unlinks) the temporary file from the\n   filesystem.\n4. Some other program creates a new file to replace this deleted temporary\n   file.\n5. The user tries to re-open the temporary file (in the same program or in a\n   different program) by path. Unfortunately, they'll end up opening the\n   file created by the other program, not the original file.\n\n## Operating System Specific Concerns\n\nThe behavior of temporary files and temporary file cleaners differ by\noperating system.\n\n### Windows\n\nOn Windows, open files _can't_ be deleted. This removes most of the concerns\naround temporary file cleaners.\n\nFurthermore, temporary files are, by default, created in per-user temporary\nfile directories so only an application running as the same user would be\nable to interfere (which they could do anyways). However, an application\nrunning as the same user can still _accidentally_ re-create deleted\ntemporary files if the number of random bytes in the temporary file name is\ntoo small.\n\nSo, the only real concern on Windows is:\n\n1. Opening a named temporary file in a world-writable directory.\n2. Using the `into_temp_path()` and/or `into_parts()` APIs to close the file\n   handle without deleting the underlying file.\n3. Continuing to use the file by path.\n\n### UNIX\n\nUnlike on Windows, UNIX (and UNIX like) systems allow open files to be\n\"unlinked\" (deleted).\n\n#### MacOS\n\nLike on Windows, temporary files are created in per-user temporary file\ndirectories by default so calling `NamedTempFile::new()` should be\nrelatively safe.\n\n#### Linux\n\nUnfortunately, most _Linux_ distributions don't create per-user temporary\nfile directories. Worse, systemd's tmpfiles daemon (a common temporary file\ncleaner) will happily remove open temporary files if they haven't been\nmodified within the last 10 days.\n\n# Resource Leaking\n\nIf the program exits before the `NamedTempFile` destructor is\nrun, the temporary file will not be deleted. This can happen\nif the process exits using [`std::process::exit()`], a segfault occurs,\nreceiving an interrupt signal like `SIGINT` that is not handled, or by using\na statically declared `NamedTempFile` instance (like with [`lazy_static`]).\n\nUse the [`tempfile()`] function unless you need a named file path.\n\n[`tempfile()`]: fn.tempfile.html\n[`NamedTempFile::new()`]: #method.new\n[`NamedTempFile::new_in()`]: #method.new_in\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html\n[`std::process::exit()`]: http://doc.rust-lang.org/std/process/fn.exit.html\n[`lazy_static`]: https://github.com/rust-lang-nursery/lazy-static.rs/issues/62","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"std::fs::File","id":"1:2266:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:163","0:172","0:187","a:2:42477:9695-0:134:1900","a:2:2966:253-0:134:1900","a:2:32825:244-0:134:1900","a:2:32882:2973-0:134:1900","a:2:42476:9604-0:134:1900","b:2:2754-0:134:1900","b:2:2744-0:134:1900","b:2:2748-0:134:1900","b:2:2441-0:134:1900","b:2:2444-0:134:1900","b:2:3558-0:134:1900","b:2:2759-0:134:1900","0:246","0:154","0:243","0:138","0:202","0:141","0:213","0:225","0:240","0:236","0:190"]}}},"2:2443:2694":{"id":"2:2443:2694","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12956:36591":{"id":"2:12956:36591","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:272:2520":{"id":"0:272:2520","crate_id":0,"name":"read_to_end","span":{"filename":"src/spooled.rs","begin":[133,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"5:6994:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:144:1902":{"id":"b:2:2754-0:144:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:174:1151":{"id":"0:174:1151","crate_id":0,"name":"path","span":{"filename":"src/file/mod.rs","begin":[680,4],"end":[682,5]},"visibility":"public","docs":"Get the temporary file's path.\n\n# Security\n\nReferring to a temporary file's path may not be secure in all cases.\nPlease read the security section on the top level documentation of this\ntype for details.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), ::std::io::Error> {\nlet file = NamedTempFile::new()?;\n\nprintln!(\"{:?}\", file.path());\n# Ok(())\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:32089":{"id":"2:12920:32089","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:3142"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12374:6741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:28:1897":{"id":"b:2:2744-0:28:1897","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2270"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:228:2523":{"id":"0:228:2523","crate_id":0,"name":"flush","span":{"filename":"src/file/mod.rs","begin":[1045,4],"end":[1047,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:1896":{"id":"0:26:1896","crate_id":0,"name":"tempdir_in","span":{"filename":"src/dir.rs","begin":[114,0],"end":[116,1]},"visibility":"public","docs":"Create a new temporary directory in a specific directory.\n\nThe `tempdir_in` function creates a directory in the specified directory\nand returns a [`TempDir`].\nThe directory will be automatically deleted when the `TempDir`s\ndestructor is run.\n\n# Resource Leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempdir_in;\nuse std::fs::File;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory.\nlet tmp_dir = tempdir_in(\".\")?;\n\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// `tmp_dir` goes out of scope, the directory as well as\n// `tmp_file` will be deleted here.\ndrop(tmp_file);\ntmp_dir.close()?;\n# Ok(())\n# }\n```\n\n[`TempDir`]: struct.TempDir.html\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::path::Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:2239":{"id":"0:34:2239","crate_id":0,"name":"with_prefix","span":{"filename":"src/dir.rs","begin":[292,4],"end":[294,5]},"visibility":"public","docs":"Attempts to make a temporary directory with the specified prefix inside of\n`env::temp_dir()`. The directory and everything inside it will be automatically\ndeleted once the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory\nlet tmp_dir = TempDir::with_prefix(\"foo-\")?;\nlet tmp_name = tmp_dir.path().file_name().unwrap().to_str().unwrap();\nassert!(tmp_name.starts_with(\"foo-\"));\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2035:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:385:1901":{"id":"b:2:2441-0:385:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42477:9695-0:134:1900":{"id":"a:2:42477:9695-0:134:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42477:9695","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:9695","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:203:2515":{"id":"0:203:2515","crate_id":0,"name":"read","span":{"filename":"src/file/mod.rs","begin":[985,4],"end":[987,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3558-0:144:1902":{"id":"b:2:3558-0:144:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42476:9604-0:399:1905":{"id":"a:2:42476:9604-0:399:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:9604","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12876:32060":{"id":"2:12876:32060","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12072:1652"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5570:37293":{"id":"5:5570:37293","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:134:1900":{"id":"b:2:2748-0:134:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42476:9604-0:134:1900":{"id":"a:2:42476:9604-0:134:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42476:9604","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:9604","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:389:725":{"id":"0:389:725","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[106,9],"end":[106,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12888:32083":{"id":"2:12888:32083","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12887:32082","str::split_at_mut_checked":"2:12890:32087"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[121,0],"end":[126,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:164:1048":{"id":"0:164:1048","crate_id":0,"name":"new","span":{"filename":"src/file/mod.rs","begin":[605,4],"end":[607,5]},"visibility":"public","docs":"Create a new named temporary file.\n\nSee [`Builder`] for more configuration.\n\n# Security\n\nThis will create a temporary file in the default temporary file\ndirectory (platform dependent). This has security implications on many\nplatforms so please read the security section of this type's\ndocumentation.\n\nReasons to use this method:\n\n  1. The file has a short lifetime and your temporary file cleaner is\n     sane (doesn't delete recently accessed files).\n\n  2. You trust every user on your system (i.e. you are the only user).\n\n  3. You have disabled your system's temporary file cleaner or verified\n     that your system doesn't have a temporary file cleaner.\n\nReasons not to use this method:\n\n  1. You'll fix it later. No you won't.\n\n  2. You don't care about the security of the temporary file. If none of\n     the \"reasons to use this method\" apply, referring to a temporary\n     file by name may allow an attacker to create/overwrite your\n     non-temporary files. There are exceptions but if you don't already\n     know them, don't use this method.\n\n# Errors\n\nIf the file can not be created, `Err` is returned.\n\n# Examples\n\nCreate a named temporary file and write some data to it:\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), ::std::io::Error> {\nlet mut file = NamedTempFile::new()?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`Builder`]: struct.Builder.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:2514":{"id":"0:188:2514","crate_id":0,"name":"reopen","span":{"filename":"src/file/mod.rs","begin":[948,4],"end":[951,5]},"visibility":"public","docs":"Securely reopen the temporary file.\n\nThis function is useful when you need multiple independent handles to\nthe same file. It's perfectly fine to drop the original `NamedTempFile`\nwhile holding on to `File`s returned by this function; the `File`s will\nremain usable. However, they may not be nameable.\n\n# Errors\n\nIf the file cannot be reopened, `Err` is returned.\n\n# Security\n\nUnlike `File::open(my_temp_file.path())`, `NamedTempFile::reopen()`\nguarantees that the re-opened file is the _same_ file, even in the\npresence of pathological temporary file cleaners.\n\n# Examples\n\n```no_run\n# use std::io;\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\nlet another_handle = file.reopen()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"File","id":"1:2266:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:303-0:102:1899":{"id":"0:303-0:102:1899","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,14],"end":[189,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::tempfile_in","name":"tempfile_in","id":"0:102:1899","glob":false}}},"a:2:42476:9604-0:385:1901":{"id":"a:2:42476:9604-0:385:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:9604","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"5:690:3462":{"id":"5:690:3462","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12935:32095":{"id":"2:12935:32095","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12055:457","str::splitn":"2:12932:32093","self::pattern":"2:12558:3142"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44361:6747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:14865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:391:2540":{"id":"0:391:2540","crate_id":0,"name":"InMemory","span":{"filename":"src/spooled.rs","begin":[8,4],"end":[8,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:393:1764"]},"discriminant":null}}},"0:128:255":{"id":"0:128:255","crate_id":0,"name":"Target","span":{"filename":"src/file/mod.rs","begin":[387,4],"end":[387,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12967:36597":{"id":"2:12967:36597","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:3142"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:319:1911":{"id":"0:319:1911","crate_id":0,"name":"prefix","span":{"filename":"src/lib.rs","begin":[318,4],"end":[321,5]},"visibility":"public","docs":"Set a custom filename prefix.\n\nPath separators are legal but not advisable.\nDefault: `.tmp`.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .prefix(\"my-temporary-note\")\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["prefix",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"S"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2035:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3560:1643":{"id":"2:3560:1643","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40123:6808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:253-0:385:1901":{"id":"a:2:2966:253-0:385:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:119:2364":{"id":"0:119:2364","crate_id":0,"name":"persist_noclobber","span":{"filename":"src/file/mod.rs","begin":[293,4],"end":[311,5]},"visibility":"public","docs":"Persist the temporary file at the target path if and only if no file exists there.\n\nIf a file exists at the target path, fail. If this method fails, it will\nreturn `self` in the resulting [`PathPersistError`].\n\nNote: Temporary files cannot be persisted across filesystems. Also Note:\nThis method is not atomic. It can leave the original link to the\ntemporary file behind.\n\n# Security\n\nOnly use this method if you're positive that a temporary file cleaner\nwon't have deleted your file. Otherwise, you might end up persisting an\nattacker controlled file.\n\n# Errors\n\nIf the file cannot be moved to the new location or a file already exists\nthere, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet path = file.into_temp_path();\npath.persist_noclobber(\"./saved_file.txt\")?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:134:1900":{"id":"b:2:2444-0:134:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2446:28579"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:278:2523":{"id":"0:278:2523","crate_id":0,"name":"flush","span":{"filename":"src/spooled.rs","begin":[188,4],"end":[193,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:335:2038":{"id":"0:335:2038","crate_id":0,"name":"make_in","span":{"filename":"src/lib.rs","begin":[683,4],"end":[700,5]},"visibility":"public","docs":"This is the same as [`Builder::make`], except `dir` is used as the base\ndirectory for the temporary file path.\n\nSee [`Builder::make`] for more details and security implications.\n\n# Examples\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n# #[cfg(unix)]\nuse std::os::unix::net::UnixListener;\n# #[cfg(unix)]\nlet tempsock = Builder::new().make_in(\"./\", |path| UnixListener::bind(path))?;\n# Ok(())\n# }\n```","links":{"`Builder::make`":"0:332:2035"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3188:139","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32882:2973-0:144:1902":{"id":"a:2:32882:2973-0:144:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32882:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2754-0:405:1907":{"id":"b:2:2754-0:405:1907","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12976:36598":{"id":"2:12976:36598","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:3142"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:14865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:267:2572":{"id":"0:267:2572","crate_id":0,"name":"set_len","span":{"filename":"src/spooled.rs","begin":[98,4],"end":[109,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["size",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"io::Error","id":"1:3012:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:405:1907":{"id":"b:5:687-0:405:1907","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["5:689:3461","5:690:3462","5:691:3463"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[114,0],"end":[119,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"io::Error","id":"1:3012:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:105:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12897:28965":{"id":"2:12897:28965","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44493:2825","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2758:1630":{"id":"2:2758:1630","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1897":{"id":"0:28:1897","crate_id":0,"name":"TempDir","span":{"filename":"src/dir.rs","begin":[196,0],"end":[198,1]},"visibility":"public","docs":"A directory in the filesystem that is automatically deleted when\nit goes out of scope.\n\nThe [`TempDir`] type creates a directory on the file system that\nis deleted once it goes out of scope. At construction, the\n`TempDir` creates a new directory with a randomly generated name.\n\nThe default constructor, [`TempDir::new()`], creates directories in\nthe location returned by [`std::env::temp_dir()`], but `TempDir`\ncan be configured to manage a temporary directory in any location\nby constructing with a [`Builder`].\n\nAfter creating a `TempDir`, work with the file system by doing\nstandard [`std::fs`] file system operations on its [`Path`],\nwhich can be retrieved with [`TempDir::path()`]. Once the `TempDir`\nvalue is dropped, the directory at the path will be deleted, along\nwith any files and directories it contains. It is your responsibility\nto ensure that no further file system operations are attempted\ninside the temporary directory once it has been deleted.\n\n# Resource Leaking\n\nVarious platform-specific conditions may cause `TempDir` to fail\nto delete the underlying directory. It's important to ensure that\nhandles (like [`File`] and [`ReadDir`]) to files inside the\ndirectory are dropped before the `TempDir` goes out of scope. The\n`TempDir` destructor will silently ignore any errors in deleting\nthe directory; to instead handle errors call [`TempDir::close()`].\n\nNote that if the program exits before the `TempDir` destructor is\nrun, such as via [`std::process::exit()`], by segfaulting, or by\nreceiving a signal like `SIGINT`, then the temporary directory\nwill not be deleted.\n\n# Examples\n\nCreate a temporary directory with a generated name:\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`\nlet tmp_dir = TempDir::new()?;\n# Ok(())\n# }\n```\n\nCreate a temporary directory with a prefix in its name:\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::Builder;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`,\n// whose name will begin with 'example'.\nlet tmp_dir = Builder::new().prefix(\"example\").tempdir()?;\n# Ok(())\n# }\n```\n\n[`File`]: http://doc.rust-lang.org/std/fs/struct.File.html\n[`Path`]: http://doc.rust-lang.org/std/path/struct.Path.html\n[`ReadDir`]: http://doc.rust-lang.org/std/fs/struct.ReadDir.html\n[`Builder`]: struct.Builder.html\n[`TempDir::close()`]: struct.TempDir.html#method.close\n[`TempDir::new()`]: struct.TempDir.html#method.new\n[`TempDir::path()`]: struct.TempDir.html#method.path\n[`TempDir`]: struct.TempDir.html\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html\n[`std::fs`]: http://doc.rust-lang.org/std/fs/index.html\n[`std::process::exit()`]: http://doc.rust-lang.org/std/process/fn.exit.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:30","a:2:42477:9695-0:28:1897","a:2:2966:253-0:28:1897","a:2:32825:244-0:28:1897","a:2:32882:2973-0:28:1897","a:2:42476:9604-0:28:1897","b:2:2754-0:28:1897","b:2:2744-0:28:1897","b:2:2748-0:28:1897","b:2:2441-0:28:1897","b:2:2444-0:28:1897","b:2:3558-0:28:1897","b:2:2759-0:28:1897","0:43","0:45","0:47"]}}},"0:274:2522":{"id":"0:274:2522","crate_id":0,"name":"read_exact","span":{"filename":"src/spooled.rs","begin":[147,4],"end":[152,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12903:32100":{"id":"2:12903:32100","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:3142"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12964:36596":{"id":"2:12964:36596","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:3142"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12583:14864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:240":{"id":"0:240","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1070,0],"end":[1074,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["rewind","stream_position","stream_len","seek_relative"],"trait":{"name":"Seek","id":"1:3569:2293","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2266:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"items":["0:241:2529"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:416":{"id":"0:416","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,16],"end":[194,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:419:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:266:2567":{"id":"0:266:2567","crate_id":0,"name":"roll","span":{"filename":"src/spooled.rs","begin":[86,4],"end":[96,5]},"visibility":"public","docs":"Rolls over to a file on disk, regardless of current size. Does nothing\nif already rolled over.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:134:1900":{"id":"b:2:2744-0:134:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2747:2270"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3558-0:134:1900":{"id":"b:2:3558-0:134:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:302-0:101:1898":{"id":"0:302-0:101:1898","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,4],"end":[189,12]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::tempfile","name":"tempfile","id":"0:101:1898","glob":false}}},"2:12982:36600":{"id":"2:12982:36600","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:3142"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:14865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:424":{"id":"0:424","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,27],"end":[194,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32827:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2754-0:399:1905":{"id":"b:2:2754-0:399:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:315":{"id":"0:315","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[213,0],"end":[701,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:318:1048","0:319:1911","0:321:1912","0:323:1951","0:324:1913","0:325:1898","0:326:1899","0:329:1895","0:330:1896","0:332:2035","0:335:2038"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:169:2244":{"id":"0:169:2244","crate_id":0,"name":"with_prefix_in","span":{"filename":"src/file/mod.rs","begin":[644,4],"end":[649,5]},"visibility":"public","docs":"Create a new named temporary file with the specified filename prefix,\nin the specified directory.\n\nThis is equivalent to:\n\n```ignore\nBuilder::new().prefix(&prefix).tempfile_in(directory)\n```\n\nSee [`NamedTempFile::new()`] for details.\n\n[`NamedTempFile::new()`]: #method.new","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2035:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:253-0:405:1907":{"id":"a:2:2966:253-0:405:1907","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12873:28693":{"id":"2:12873:28693","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12106:14867"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12865:882":{"id":"2:12865:882","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12055:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:28:1897":{"id":"b:2:2444-0:28:1897","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:28579"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2748-0:144:1902":{"id":"b:2:2748-0:144:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2759-0:28:1897":{"id":"b:2:2759-0:28:1897","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12879:2573":{"id":"2:12879:2573","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42354:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12890:32087":{"id":"2:12890:32087","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12889:32086"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12963:36595":{"id":"2:12963:36595","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5562:37292":{"id":"5:5562:37292","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42477:9695-0:28:1897":{"id":"a:2:42477:9695-0:28:1897","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:9695","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32882:2973-0:399:1905":{"id":"a:2:32882:2973-0:399:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12947:36588":{"id":"2:12947:36588","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12558:3142","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::matches":"2:12944:2577"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44461:6896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:14865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12950:36589":{"id":"2:12950:36589","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12558:3142","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::rmatch_indices":"2:12953:36590"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44389:6893","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:2515":{"id":"0:270:2515","crate_id":0,"name":"read","span":{"filename":"src/spooled.rs","begin":[119,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2747:2270":{"id":"2:2747:2270","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2721:142"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12864":{"id":"2:12864","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12865:882","2:12866:3404","2:12867:36579","2:12868:36580","2:12870:36581","2:12873:28693","2:12874:36582","2:12875:339","2:12876:32060","2:12877:32057","2:12879:2573","2:12881:32058","2:12883:32059","2:12885:36583","2:12886:36584","2:12887:32082","2:12888:32083","2:12889:32086","2:12890:32087","2:12892:6762","2:12893:6908","2:12894:3847","2:12895:34046","2:12896:34044","2:12897:28965","2:12898:36585","2:12899:34026","2:12900:32099","2:12903:32100","2:12906:32101","2:12909:3442","2:12913:3403","2:12917:28964","2:12920:32089","2:12923:32091","2:12926:36586","2:12929:36587","2:12932:32093","2:12935:32095","2:12938:32097","2:12941:32098","2:12944:2577","2:12947:36588","2:12950:36589","2:12953:36590","2:12956:36591","2:12958:36592","2:12960:36593","2:12962:36594","2:12963:36595","2:12964:36596","2:12967:36597","2:12970:28710","2:12973:32102","2:12976:36598","2:12979:36599","2:12982:36600","2:12985:36601","2:12987:29738","2:12988:31974","2:12989:29742","2:12990:29743","2:12991:29744","2:12992:31977","2:12993:31978","2:12994:31979","2:12995:36602","2:12997:9596","2:12998:36603"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12944:2577":{"id":"2:12944:2577","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12558:3142","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::rmatches":"2:12947:36588"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44443:6895","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12994:31979":{"id":"2:12994:31979","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:38418"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:340":{"id":"0:143:340","crate_id":0,"name":"as_ref","span":{"filename":"src/file/mod.rs","begin":[502,4],"end":[504,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32825:244-0:385:1901":{"id":"a:2:32825:244-0:385:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2966:253-0:144:1902":{"id":"a:2:2966:253-0:144:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:309-0:262:1904":{"id":"0:309-0:262:1904","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[191,25],"end":[191,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::spooled::spooled_tempfile","name":"spooled_tempfile","id":"0:262:1904","glob":false}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[400,0],"end":[404,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2035:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:226:2289":{"id":"0:226:2289","crate_id":0,"name":"write","span":{"filename":"src/file/mod.rs","begin":[1041,4],"end":[1043,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:329:1895":{"id":"0:329:1895","crate_id":0,"name":"tempdir","span":{"filename":"src/lib.rs","begin":[508,4],"end":[510,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix, `prefix`. The directory and\neverything inside it will be automatically deleted once the\nreturned `TempDir` is destroyed.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::Builder;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_dir = Builder::new().tempdir()?;\n# Ok(())\n# }\n```\n\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:2353":{"id":"0:117:2353","crate_id":0,"name":"persist","span":{"filename":"src/file/mod.rs","begin":[234,4],"end":[249,5]},"visibility":"public","docs":"Persist the temporary file at the target path.\n\nIf a file exists at the target path, persist will atomically replace it.\nIf this method fails, it will return `self` in the resulting\n[`PathPersistError`].\n\nNote: Temporary files cannot be persisted across filesystems. Also\nneither the file contents nor the containing directory are\nsynchronized, so the update may not yet have reached the disk when\n`persist` returns.\n\n# Security\n\nOnly use this method if you're positive that a temporary file cleaner\nwon't have deleted your file. Otherwise, you might end up persisting an\nattacker controlled file.\n\n# Errors\n\nIf the file cannot be moved to the new location, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet path = file.into_temp_path();\npath.persist(\"./saved_file.txt\")?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:28:1897":{"id":"b:2:2754-0:28:1897","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:230:2524":{"id":"0:230:2524","crate_id":0,"name":"write_vectored","span":{"filename":"src/file/mod.rs","begin":[1049,4],"end":[1053,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"io::IoSlice","id":"1:8221:2525","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:241:2529":{"id":"0:241:2529","crate_id":0,"name":"seek","span":{"filename":"src/file/mod.rs","begin":[1071,4],"end":[1073,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"1:8233:2294","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:412":{"id":"0:412","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,9],"end":[194,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:415:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2763:1628":{"id":"2:2763:1628","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:236":{"id":"0:236","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1064,0],"end":[1068,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Seek","id":"1:3569:2293","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rewind","stream_position","stream_len","seek_relative"],"trait":{"name":"Seek","id":"1:3569:2293","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:238:2529"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:123":{"id":"0:123","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[374,0],"end":[378,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:124:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:159:725":{"id":"0:159:725","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[536,4],"end":[538,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12923:32091":{"id":"2:12923:32091","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12558:3142","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::split":"2:12917:28964"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44257:6744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:14865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:311":{"id":"0:311","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[202,0],"end":[211,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2795:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:314:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42477:9695-0:144:1902":{"id":"a:2:42477:9695-0:144:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"File","id":"1:2266:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:9695","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12893:6908":{"id":"2:12893:6908","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12055:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44215:6889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:340":{"id":"0:133:340","crate_id":0,"name":"as_ref","span":{"filename":"src/file/mod.rs","begin":[401,4],"end":[403,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OsStr","id":"1:2035:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:243":{"id":"0:243","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1077,0],"end":[1081,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(any(unix, target_os = \"wasi\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsFd","id":"1:4890:2298","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsFd","id":"1:4890:2298","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:245:2531"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2441-0:134:1900":{"id":"b:2:2441-0:134:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2443:2694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12909:3442":{"id":"2:12909:3442","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42354:198","prim@char":"1:12055:457","self::pattern":"2:12558:3142"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:393:1764":{"id":"0:393:1764","crate_id":0,"name":"0","span":{"filename":"src/spooled.rs","begin":[8,13],"end":[8,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"std::io::Cursor","id":"1:7998:2537","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:6994:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:219:2524":{"id":"0:219:2524","crate_id":0,"name":"write_vectored","span":{"filename":"src/file/mod.rs","begin":[1021,4],"end":[1025,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"io::IoSlice","id":"1:8221:2525","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12875:339":{"id":"2:12875:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12876:32060","`u8`":"1:12072:1652"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:381-0:345:1670":{"id":"0:381-0:345:1670","crate_id":0,"name":null,"span":{"filename":"src/file/imp/mod.rs","begin":[4,8],"end":[4,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::unix","name":"unix","id":"0:345:1670","glob":true}}},"0:44:340":{"id":"0:44:340","crate_id":0,"name":"as_ref","span":{"filename":"src/dir.rs","begin":[452,4],"end":[454,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[394,0],"end":[398,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:131:340":{"id":"0:131:340","crate_id":0,"name":"as_ref","span":{"filename":"src/file/mod.rs","begin":[395,4],"end":[397,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:2244":{"id":"0:36:2244","crate_id":0,"name":"with_prefix_in","span":{"filename":"src/dir.rs","begin":[320,4],"end":[325,5]},"visibility":"public","docs":"Attempts to make a temporary directory with the specified prefix inside\nthe specified directory. The directory and everything inside it will be\nautomatically deleted once the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory\nlet tmp_dir = TempDir::with_prefix_in(\"foo-\", \".\")?;\nlet tmp_name = tmp_dir.path().file_name().unwrap().to_str().unwrap();\nassert!(tmp_name.starts_with(\"foo-\"));\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2035:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[528,0],"end":[533,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:156:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:215:2289":{"id":"0:215:2289","crate_id":0,"name":"write","span":{"filename":"src/file/mod.rs","begin":[1013,4],"end":[1015,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325:1898":{"id":"0:325:1898","crate_id":0,"name":"tempfile","span":{"filename":"src/lib.rs","begin":[434,4],"end":[436,5]},"visibility":"public","docs":"Create the named temporary file.\n\n# Security\n\nSee [the security][security] docs on `NamedTempFile`.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `NamedTempFile`.\n\n# Errors\n\nIf the file cannot be created, `Err` is returned.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet tempfile = Builder::new().tempfile()?;\n# Ok(())\n# }\n```\n\n[security]: struct.NamedTempFile.html#security\n[resource-leaking]: struct.NamedTempFile.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:276:2289":{"id":"0:276:2289","crate_id":0,"name":"write","span":{"filename":"src/spooled.rs","begin":[156,4],"end":[170,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:402":{"id":"0:402","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:403:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:39:1151":{"id":"0:39:1151","crate_id":0,"name":"path","span":{"filename":"src/dir.rs","begin":[356,4],"end":[358,5]},"visibility":"public","docs":"Accesses the [`Path`] to the temporary directory.\n\n[`Path`]: http://doc.rust-lang.org/std/path/struct.Path.html\n\n# Examples\n\n```\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_path;\n\n{\n   let tmp_dir = TempDir::new()?;\n   tmp_path = tmp_dir.path().to_owned();\n\n   // Check that the temp directory actually exists.\n   assert!(tmp_path.exists());\n\n   // End of `tmp_dir` scope, directory will be deleted\n}\n\n// Temp directory should be deleted by now\nassert_eq!(tmp_path.exists(), false);\n# Ok(())\n# }\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"path::Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42477:9695-0:385:1901":{"id":"a:2:42477:9695-0:385:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:9695","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12992:31977":{"id":"2:12992:31977","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:38418"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5572:2852":{"id":"5:5572:2852","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:725":{"id":"0:46:725","crate_id":0,"name":"fmt","span":{"filename":"src/dir.rs","begin":[458,4],"end":[462,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[521,0],"end":[526,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"io::Error","id":"1:3012:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:153:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42477:9695-0:405:1907":{"id":"a:2:42477:9695-0:405:1907","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:9695","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:269":{"id":"0:269","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[118,0],"end":[153,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_exact","bytes","is_read_vectored","chain","read_to_end","read_vectored","read_buf","by_ref","take","read_to_string","read_buf_exact"],"trait":{"name":"Read","id":"1:3494:2292","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:270:2515","0:271:2517","0:272:2520","0:273:2521","0:274:2522"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2966:253-0:134:1900":{"id":"a:2:2966:253-0:134:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:265:2564":{"id":"0:265:2564","crate_id":0,"name":"is_rolled","span":{"filename":"src/spooled.rs","begin":[77,4],"end":[82,5]},"visibility":"public","docs":"Returns true if the file has been rolled over to disk.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160":{"id":"0:160","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[541,0],"end":[545,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["source","provide","cause","description","type_id"],"trait":{"name":"Error","id":"2:2806:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:162:2291"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:305-0:385:1901":{"id":"0:305-0:385:1901","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,42],"end":[189,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::PathPersistError","name":"PathPersistError","id":"0:385:1901","glob":false}}},"0:122:2044":{"id":"0:122:2044","crate_id":0,"name":"from_path","span":{"filename":"src/file/mod.rs","begin":[367,4],"end":[371,5]},"visibility":"public","docs":"Create a new TempPath from an existing path. This can be done even if no\nfile exists at the given path.\n\nThis is mostly useful for interacting with libraries and external\ncomponents that provide files to be consumed or expect a path with no\nexisting file to be given.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"impl_trait":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5197:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<PathBuf>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5197:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12998:36603":{"id":"2:12998:36603","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4736:36603"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44556:6818","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/dir.rs","begin":[451,0],"end":[455,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:44:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:386:1892":{"id":"0:386:1892","crate_id":0,"name":"error","span":{"filename":"src/file/mod.rs","begin":[109,4],"end":[109,24]},"visibility":"public","docs":"The underlying IO error.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"io::Error","id":"1:3012:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:198:2521":{"id":"0:198:2521","crate_id":0,"name":"read_to_string","span":{"filename":"src/file/mod.rs","begin":[971,4],"end":[975,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:175:2282":{"id":"0:175:2282","crate_id":0,"name":"close","span":{"filename":"src/file/mod.rs","begin":[715,4],"end":[718,5]},"visibility":"public","docs":"Close and remove the temporary file.\n\nUse this if you want to detect errors in deleting the file.\n\n# Errors\n\nIf the file cannot be deleted, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io;\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\n// By closing the `NamedTempFile` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the file will still be deleted when `file` goes out\n// of scope, but we won't know whether deleting the file\n// succeeded.\nfile.close()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32825:244-0:134:1900":{"id":"a:2:32825:244-0:134:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:232:2526":{"id":"0:232:2526","crate_id":0,"name":"write_all","span":{"filename":"src/file/mod.rs","begin":[1055,4],"end":[1057,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12870:36581":{"id":"2:12870:36581","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12868:36580"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12883:32059":{"id":"2:12883:32059","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:689:3461":{"id":"5:689:3461","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:2:2441-0:112:1903":{"id":"b:2:2441-0:112:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12997:9596":{"id":"2:12997:9596","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4739:9596"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44547:6702","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:36586":{"id":"2:12926:36586","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12558:3142","str::split":"2:12917:28964","prim@char":"1:12055:457","`DoubleEndedIterator`":"2:7942:128","str::rsplit_terminator":"2:12929:36587"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44289:6891","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324:1913":{"id":"0:324:1913","crate_id":0,"name":"append","span":{"filename":"src/lib.rs","begin":[397,4],"end":[400,5]},"visibility":"public","docs":"Set the file to be opened in append mode.\n\nDefault: `false`.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .append(true)\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["append",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:144:1902":{"id":"b:2:2444-0:144:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2446:28579"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32882:2973-0:28:1897":{"id":"a:2:32882:2973-0:28:1897","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2748-0:385:1901":{"id":"b:2:2748-0:385:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42477:9695-0:112:1903":{"id":"a:2:42477:9695-0:112:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:9695","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:306-0:144:1902":{"id":"0:306-0:144:1902","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,60],"end":[189,72]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::PersistError","name":"PersistError","id":"0:144:1902","glob":false}}},"2:12960:36593":{"id":"2:12960:36593","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:415:725":{"id":"0:415:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[194,9],"end":[194,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:318:1048":{"id":"0:318:1048","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[292,4],"end":[294,5]},"visibility":"public","docs":"Create a new `Builder`.\n\n# Examples\n\nCreate a named temporary file and write some data into it:\n\n```\n# use std::io;\n# use std::ffi::OsStr;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nuse tempfile::Builder;\n\nlet named_tempfile = Builder::new()\n    .prefix(\"my-temporary-note\")\n    .suffix(\".txt\")\n    .rand_bytes(5)\n    .tempfile()?;\n\nlet name = named_tempfile\n    .path()\n    .file_name().and_then(OsStr::to_str);\n\nif let Some(name) = name {\n    assert!(name.starts_with(\"my-temporary-note\"));\n    assert!(name.ends_with(\".txt\"));\n    assert_eq!(name.len(), \"my-temporary-note.txt\".len() + 5);\n}\n# Ok(())\n# }\n```\n\nCreate a temporary directory and add a file to it:\n\n```\n# use std::io::{self, Write};\n# use std::fs::File;\n# use std::ffi::OsStr;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nuse tempfile::Builder;\n\nlet dir = Builder::new()\n    .prefix(\"my-temporary-dir\")\n    .rand_bytes(5)\n    .tempdir()?;\n\nlet file_path = dir.path().join(\"my-temporary-note.txt\");\nlet mut file = File::create(file_path)?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\n// By closing the `TempDir` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the directory will still be deleted when `dir` goes out\n// of scope, but we won't know whether deleting the directory\n// succeeded.\ndrop(file);\ndir.close()?;\n# Ok(())\n# }\n```\n\nCreate a temporary directory with a chosen prefix under a chosen folder:\n\n```ignore\nlet dir = Builder::new()\n    .prefix(\"my-temporary-dir\")\n    .tempdir_in(\"folder-with-tempdirs\")?;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:396:1764":{"id":"0:396:1764","crate_id":0,"name":"0","span":{"filename":"src/spooled.rs","begin":[9,11],"end":[9,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"std::fs::File","id":"1:2266:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:3558-0:385:1901":{"id":"b:2:3558-0:385:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2744-0:405:1907":{"id":"b:2:2744-0:405:1907","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2747:2270"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12894:3847":{"id":"2:12894:3847","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44225:2828","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:405:1907":{"id":"b:2:2748-0:405:1907","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:385:1901":{"id":"0:385:1901","crate_id":0,"name":"PathPersistError","span":{"filename":"src/file/mod.rs","begin":[107,0],"end":[112,1]},"visibility":"public","docs":"Error returned when persisting a temporary file path fails.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:386:1892","0:387:1151"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:42477:9695-0:385:1901","a:2:2966:253-0:385:1901","a:2:32825:244-0:385:1901","a:2:32882:2973-0:385:1901","a:2:42476:9604-0:385:1901","b:2:2754-0:385:1901","b:2:2744-0:385:1901","b:2:2748-0:385:1901","b:2:2441-0:385:1901","b:2:2444-0:385:1901","b:2:3558-0:385:1901","b:2:2759-0:385:1901","b:5:5828-0:385:1901","0:110","0:388","0:104","0:108","0:106"]}}},"a:2:32882:2973-0:112:1903":{"id":"a:2:32882:2973-0:112:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:221:2526":{"id":"0:221:2526","crate_id":0,"name":"write_all","span":{"filename":"src/file/mod.rs","begin":[1027,4],"end":[1031,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12985:36601":{"id":"2:12985:36601","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12519:134","`FromStr`":"2:12518:2800"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12518:2800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12518:2800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1895":{"id":"0:25:1895","crate_id":0,"name":"tempdir","span":{"filename":"src/dir.rs","begin":[65,0],"end":[67,1]},"visibility":"public","docs":"Create a new temporary directory.\n\nThe `tempdir` function creates a directory in the file system\nand returns a [`TempDir`].\nThe directory will be automatically deleted when the `TempDir`s\ndestructor is run.\n\n# Resource Leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempdir;\nuse std::fs::File;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`\nlet tmp_dir = tempdir()?;\n\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// `tmp_dir` goes out of scope, the directory as well as\n// `tmp_file` will be deleted here.\ndrop(tmp_file);\ntmp_dir.close()?;\n# Ok(())\n# }\n```\n\n[`TempDir`]: struct.TempDir.html\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:34046":{"id":"2:12895:34046","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12896:34044"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44513:6898","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:323:1951":{"id":"0:323:1951","crate_id":0,"name":"rand_bytes","span":{"filename":"src/lib.rs","begin":[371,4],"end":[374,5]},"visibility":"public","docs":"Set the number of random bytes.\n\nDefault: `6`.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .rand_bytes(5)\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rand",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2757:135":{"id":"2:2757:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[134,0],"end":[138,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","provide","cause","description","type_id"],"trait":{"name":"Error","id":"2:2806:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:111:2291"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:112:1903":{"id":"0:112:1903","crate_id":0,"name":"TempPath","span":{"filename":"src/file/mod.rs","begin":[146,0],"end":[148,1]},"visibility":"public","docs":"A path to a named temporary file without an open file handle.\n\nThis is useful when the temporary file needs to be used by a child process,\nfor example.\n\nWhen dropped, the temporary file is deleted.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:114","a:2:42477:9695-0:112:1903","a:2:2966:253-0:112:1903","a:2:32825:244-0:112:1903","a:2:32882:2973-0:112:1903","a:2:42476:9604-0:112:1903","b:2:2754-0:112:1903","b:2:2744-0:112:1903","b:2:2748-0:112:1903","b:2:2441-0:112:1903","b:2:2444-0:112:1903","b:2:3558-0:112:1903","b:2:2759-0:112:1903","0:127","0:132","0:123","0:125","0:130","0:106"]}}},"0:238:2529":{"id":"0:238:2529","crate_id":0,"name":"seek","span":{"filename":"src/file/mod.rs","begin":[1065,4],"end":[1067,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"1:8233:2294","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12889:32086":{"id":"2:12889:32086","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12890:32087"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42476:9604-0:112:1903":{"id":"a:2:42476:9604-0:112:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:9604","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12993:31978":{"id":"2:12993:31978","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:38418"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:385:1901":{"id":"b:2:2744-0:385:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2270"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:207:2520":{"id":"0:207:2520","crate_id":0,"name":"read_to_end","span":{"filename":"src/file/mod.rs","begin":[995,4],"end":[999,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"5:6994:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12899:34026":{"id":"2:12899:34026","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44531:6761","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30":{"id":"0:30","crate_id":0,"name":null,"span":{"filename":"src/dir.rs","begin":[200,0],"end":[449,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:31:1048","0:32:2184","0:34:2239","0:36:2244","0:39:1151","0:40:2265","0:41:2282"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:187":{"id":"0:187","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[912,0],"end":[952,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2266:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:188:2514"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2966:253-0:112:1903":{"id":"a:2:2966:253-0:112:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:115:2282":{"id":"0:115:2282","crate_id":0,"name":"close","span":{"filename":"src/file/mod.rs","begin":[184,4],"end":[189,5]},"visibility":"public","docs":"Close and remove the temporary file.\n\nUse this if you want to detect errors in deleting the file.\n\n# Errors\n\nIf the file cannot be deleted, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io;\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\n// Close the file, but keep the path to it around.\nlet path = file.into_temp_path();\n\n// By closing the `TempPath` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly, the\n// file will still be deleted when `file` goes out of scope, but we\n// won't know whether deleting the file succeeded.\npath.close()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12989:29742":{"id":"2:12989:29742","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3558-0:405:1907":{"id":"b:2:3558-0:405:1907","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42477:9695-0:399:1905":{"id":"a:2:42477:9695-0:399:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:9695","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12906:32101":{"id":"2:12906:32101","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:3142"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:14865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12866:3404":{"id":"2:12866:3404","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:385:1901":{"id":"b:2:2754-0:385:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:387:1151":{"id":"0:387:1151","crate_id":0,"name":"path","span":{"filename":"src/file/mod.rs","begin":[111,4],"end":[111,22]},"visibility":"public","docs":"The temporary file path that couldn't be persisted.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:388":{"id":"0:388","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[106,9],"end":[106,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:389:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42476:9604-0:405:1907":{"id":"a:2:42476:9604-0:405:1907","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:9604","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:182:2489":{"id":"0:182:2489","crate_id":0,"name":"as_file_mut","span":{"filename":"src/file/mod.rs","begin":[876,4],"end":[878,5]},"visibility":"public","docs":"Get a mutable reference to the underlying file.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"F"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12887:32082":{"id":"2:12887:32082","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12889:32086","str::split_at_mut":"2:12888:32083"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12877:32057":{"id":"2:12877:32057","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42354:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32825:244-0:399:1905":{"id":"a:2:32825:244-0:399:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12896:34044":{"id":"2:12896:34044","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12895:34046"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44522:6899","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:2517":{"id":"0:194:2517","crate_id":0,"name":"read_vectored","span":{"filename":"src/file/mod.rs","begin":[959,4],"end":[963,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"io::IoSliceMut","id":"1:3512:2519","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165:2184":{"id":"0:165:2184","crate_id":0,"name":"new_in","span":{"filename":"src/file/mod.rs","begin":[620,4],"end":[622,5]},"visibility":"public","docs":"Create a new named temporary file in the specified directory.\n\nThis is equivalent to:\n\n```ignore\nBuilder::new().tempfile_in(dir)\n```\n\nSee [`NamedTempFile::new()`] for details.\n\n[`NamedTempFile::new()`]: #method.new","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:691:3463":{"id":"5:691:3463","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:112:1903":{"id":"b:2:2444-0:112:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:28579"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12979:36599":{"id":"2:12979:36599","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:3142"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:420":{"id":"0:420","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,23],"end":[194,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2509:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5559:37291":{"id":"5:5559:37291","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5571:37294":{"id":"5:5571:37294","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2227","`String`":"5:7571:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2227","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5830:1605":{"id":"5:5830:1605","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:394:2541":{"id":"0:394:2541","crate_id":0,"name":"OnDisk","span":{"filename":"src/spooled.rs","begin":[9,4],"end":[9,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:396:1764"]},"discriminant":null}}},"2:12917:28964":{"id":"2:12917:28964","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12558:3142","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::split_whitespace":"2:12895:34046","str::rsplit":"2:12923:32091"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44239:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41:2282":{"id":"0:41:2282","crate_id":0,"name":"close","span":{"filename":"src/dir.rs","begin":[437,4],"end":[448,5]},"visibility":"public","docs":"Closes and removes the temporary directory, returning a `Result`.\n\nAlthough `TempDir` removes the directory on drop, in the destructor\nany errors are ignored. To detect errors cleaning up the temporary\ndirectory, call `close` instead.\n\n# Errors\n\nThis function may return a variety of [`std::io::Error`]s that result from deleting\nthe files and directories contained with the temporary directory,\nas well as from deleting the temporary directory itself. These errors\nmay be platform specific.\n\n[`std::io::Error`]: http://doc.rust-lang.org/std/io/struct.Error.html\n\n# Examples\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`.\nlet tmp_dir = TempDir::new()?;\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// By closing the `TempDir` explicitly we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the directory will still be deleted when `tmp_dir` goes out\n// of scope, but we won't know whether deleting the directory\n// succeeded.\ndrop(tmp_file);\ntmp_dir.close()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:112:1903":{"id":"b:2:2748-0:112:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12941:32098":{"id":"2:12941:32098","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:14865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:36590":{"id":"2:12953:36590","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12558:3142","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::match_indices":"2:12950:36589"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44407:6894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:14865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12991:29744":{"id":"2:12991:29744","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:32097":{"id":"2:12938:32097","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5556:2268":{"id":"5:5556:2268","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:190":{"id":"0:190","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[954,0],"end":[982,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:3494:2292","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["read_exact","bytes","is_read_vectored","chain","read_to_end","read_vectored","read_buf","by_ref","take","read_to_string","read_buf_exact"],"trait":{"name":"Read","id":"1:3494:2292","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:192:2515","0:194:2517","0:196:2520","0:198:2521","0:200:2522"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12929:36587":{"id":"2:12929:36587","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12558:3142","str::split":"2:12917:28964","prim@char":"1:12055:457","str::split_terminator":"2:12926:36586"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44307:6892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:14865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/dir.rs","begin":[457,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:46:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:101:1898":{"id":"0:101:1898","crate_id":0,"name":"tempfile","span":{"filename":"src/file/mod.rs","begin":[60,0],"end":[62,1]},"visibility":"public","docs":"Create a new temporary file.\n\nThe file will be created in the location returned by [`std::env::temp_dir()`].\n\n# Security\n\nThis variant is secure/reliable in the presence of a pathological temporary file cleaner.\n\n# Resource Leaking\n\nThe temporary file will be automatically removed by the OS when the last handle to it is closed.\nThis doesn't rely on Rust destructors being run, so will (almost) never fail to clean up the temporary file.\n\n# Errors\n\nIf the file can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempfile;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a file inside of `std::env::temp_dir()`.\nlet mut file = tempfile()?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2266:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:112:1903":{"id":"b:2:2754-0:112:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:176:2353":{"id":"0:176:2353","crate_id":0,"name":"persist","span":{"filename":"src/file/mod.rs","begin":[762,4],"end":[774,5]},"visibility":"public","docs":"Persist the temporary file at the target path.\n\nIf a file exists at the target path, persist will atomically replace it.\nIf this method fails, it will return `self` in the resulting\n[`PersistError`].\n\nNote: Temporary files cannot be persisted across filesystems. Also\nneither the file contents nor the containing directory are\nsynchronized, so the update may not yet have reached the disk when\n`persist` returns.\n\n# Security\n\nThis method persists the temporary file using its path and may not be\nsecure in all cases. Please read the security section on the top\nlevel documentation of this type for details.\n\n# Errors\n\nIf the file cannot be moved to the new location, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\nlet mut persisted_file = file.persist(\"./saved_file.txt\")?;\nwriteln!(persisted_file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`PersistError`]: struct.PersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"PersistError","id":"0:144:1902","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202":{"id":"0:202","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[984,0],"end":[1010,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_exact","bytes","is_read_vectored","chain","read_to_end","read_vectored","read_buf","by_ref","take","read_to_string","read_buf_exact"],"trait":{"name":"Read","id":"1:3494:2292","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2266:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"items":["0:203:2515","0:205:2517","0:207:2520","0:209:2521","0:211:2522"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:102:1899":{"id":"0:102:1899","crate_id":0,"name":"tempfile_in","span":{"filename":"src/file/mod.rs","begin":[101,0],"end":[103,1]},"visibility":"public","docs":"Create a new temporary file in the specified directory.\n\n# Security\n\nThis variant is secure/reliable in the presence of a pathological temporary file cleaner.\nIf the temporary file isn't created in [`std::env::temp_dir()`] then temporary file cleaners aren't an issue.\n\n# Resource Leaking\n\nThe temporary file will be automatically removed by the OS when the last handle to it is closed.\nThis doesn't rely on Rust destructors being run, so will (almost) never fail to clean up the temporary file.\n\n# Errors\n\nIf the file can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempfile_in;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a file inside of the current working directory\nlet mut file = tempfile_in(\"./\")?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2266:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::path::Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:405:1907":{"id":"0:405:1907","crate_id":0,"name":"Builder","span":{"filename":"src/lib.rs","begin":[195,0],"end":[200,1]},"visibility":"public","docs":"Create a new temporary file or directory with custom parameters.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:315","a:2:42477:9695-0:405:1907","a:2:2966:253-0:405:1907","a:2:32825:244-0:405:1907","a:2:32882:2973-0:405:1907","a:2:42476:9604-0:405:1907","b:2:2754-0:405:1907","b:2:2744-0:405:1907","b:2:2748-0:405:1907","b:2:2441-0:405:1907","b:2:2444-0:405:1907","b:2:3558-0:405:1907","b:2:2759-0:405:1907","b:5:687-0:405:1907","0:311","0:420","0:416","0:427","0:424","0:412"]}}},"5:5554":{"id":"5:5554","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5555:37290","5:5556:2268","5:5559:37291","5:5562:37292","5:5570:37293","5:5571:37294","5:5572:2852","5:5573:29740","5:5574:29741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2750:752":{"id":"2:2750:752","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:725":{"id":"0:109:725","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[129,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32825:244-0:28:1897":{"id":"a:2:32825:244-0:28:1897","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:217:2523":{"id":"0:217:2523","crate_id":0,"name":"flush","span":{"filename":"src/file/mod.rs","begin":[1017,4],"end":[1019,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:718":{"id":"0:147:718","crate_id":0,"name":"file","span":{"filename":"src/file/mod.rs","begin":[512,4],"end":[512,30]},"visibility":"public","docs":"The temporary file that couldn't be persisted.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}},"0:304-0:134:1900":{"id":"0:304-0:134:1900","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,27],"end":[189,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::NamedTempFile","name":"NamedTempFile","id":"0:134:1900","glob":false}}},"0:144:1902":{"id":"0:144:1902","crate_id":0,"name":"PersistError","span":{"filename":"src/file/mod.rs","begin":[508,0],"end":[513,1]},"visibility":"public","docs":"Error returned when persisting a temporary file fails.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:146:1892","0:147:718"],"fields_stripped":false}},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"std::fs::File","id":"1:2266:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:42477:9695-0:144:1902","a:2:2966:253-0:144:1902","a:2:32825:244-0:144:1902","a:2:32882:2973-0:144:1902","a:2:42476:9604-0:144:1902","b:2:2754-0:144:1902","b:2:2744-0:144:1902","b:2:2748-0:144:1902","b:2:2441-0:144:1902","b:2:2444-0:144:1902","b:2:3558-0:144:1902","b:2:2759-0:144:1902","b:5:5828-0:144:1902","0:148","0:154","0:151","0:160","0:157"]}}},"0:111:2291":{"id":"0:111:2291","crate_id":0,"name":"source","span":{"filename":"src/file/mod.rs","begin":[135,4],"end":[137,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:2806:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12970:28710":{"id":"2:12970:28710","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:3142"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:6735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12995:36602":{"id":"2:12995:36602","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4738:36602"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44538:6819","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167:2239":{"id":"0:167:2239","crate_id":0,"name":"with_prefix","span":{"filename":"src/file/mod.rs","begin":[629,4],"end":[631,5]},"visibility":"public","docs":"Create a new named temporary file with the specified filename prefix.\n\nSee [`NamedTempFile::new()`] for details.\n\n[`NamedTempFile::new()`]: #method.new","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2035:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:112:1903":{"id":"b:2:2759-0:112:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12892:6762":{"id":"2:12892:6762","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12055:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44209:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:2492":{"id":"0:183:2492","crate_id":0,"name":"into_file","span":{"filename":"src/file/mod.rs","begin":[883,4],"end":[885,5]},"visibility":"public","docs":"Convert the temporary file into a `std::fs::File`.\n\nThe inner file will be deleted.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"F"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3558-0:28:1897":{"id":"b:2:3558-0:28:1897","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:299-0:26:1896":{"id":"0:299-0:26:1896","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,30],"end":[187,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::dir::tempdir_in","name":"tempdir_in","id":"0:26:1896","glob":false}}},"0:280:2529":{"id":"0:280:2529","crate_id":0,"name":"seek","span":{"filename":"src/spooled.rs","begin":[197,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"1:8233:2294","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12874:36582":{"id":"2:12874:36582","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:225":{"id":"0:225","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1040,0],"end":[1062,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["by_ref","write_all_vectored","write_fmt","write_vectored","is_write_vectored","write_all"],"trait":{"name":"Write","id":"1:3551:2295","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2266:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"items":["0:226:2289","0:228:2523","0:230:2524","0:232:2526","0:234:2527"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:162:2291":{"id":"0:162:2291","crate_id":0,"name":"source","span":{"filename":"src/file/mod.rs","begin":[542,4],"end":[544,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:2806:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32882:2973-0:134:1900":{"id":"a:2:32882:2973-0:134:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32882:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1900","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"5:3833:4134":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:2721:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:44289:6891":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:43416:2528":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:15822:5741":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:4049:3368":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:15608:5686":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:7946:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:12076:1648":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:12572:4664":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:46326:6941":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:4710:7920":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:3266:2847":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:13239:6768":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"21:2482:4602":{"crate_id":21,"path":["rustix","backend","fs","inotify","WatchFlags"],"kind":"struct"},"17:15273:5579":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:44307:6892":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"11:123:4087":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:10534:37406":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:10259:6737":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:14968:5510":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:4057:3082":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:4333:6706":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:16050:5106":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:15390:5611":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:6669:6155":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:5921:8141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5891:8131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"22:4588:4506":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_api"],"kind":"struct"},"2:7333:2948":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:7551:5907":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:12072:1652":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"21:6043:4601":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"2:2341:642":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:23797:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:8534:2792":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"22:4539:7482":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg"],"kind":"struct"},"16:6331:6091":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"22:3950:4311":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_policy_v2"],"kind":"struct"},"1:8354:7113":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:8599:2795":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:10155:4813":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:621:3717":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:11075:8520":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:914:6442":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"21:1745:4593":{"crate_id":21,"path":["rustix","ioctl","patterns","NoArg"],"kind":"struct"},"2:41082:2952":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:11567:4892":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:11493:4884":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:43816:6870":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:47153:6985":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:40910:2734":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:10399:2828":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:42487:3957":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:10720:37404":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6759:5909":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:7679:8411":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:1558:7656":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6012:8184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:6599:6141":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"22:4625:4513":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_zeropage"],"kind":"struct"},"11:1896:4134":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:46242:6938":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:5640:3512":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:2234:4702":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:4107:6460":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12887:5045":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:495:3162":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:42535:2795":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:7521:34022":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"9:446:20789":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:4814:7951":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:1496:6461":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"22:3825:4282":{"crate_id":22,"path":["linux_raw_sys","general","__user_cap_header_struct"],"kind":"struct"},"21:1803:26072":{"crate_id":21,"path":["rustix","ioctl","patterns","Updater"],"kind":"struct"},"2:6395:2965":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:4724:7921":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:6462:21802":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:880:6445":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:46196:6936":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11661:4909":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:9107:8522":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:12260:6755":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:10075:7151":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:11537:4888":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:7792:2581":{"crate_id":2,"path":["core","iter","sources","repeat_with","repeat_with"],"kind":"function"},"2:41105:2954":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:1939:3715":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:6737:6162":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:7619:2854":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:2492:1890":{"crate_id":1,"path":["std","io"],"kind":"module"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:4769:9683":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:2419:5877":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"21:2527:4601":{"crate_id":21,"path":["rustix","backend","fs","inotify","_","InternalBitFlags"],"kind":"struct"},"1:10746:28722":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:2641:5887":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:10661:4827":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:11056:3515":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:39955:2893":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:46995:6969":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:44239:2829":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:12150:4978":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:4380:7071":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:5298:21796":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"22:3852:4290":{"crate_id":22,"path":["linux_raw_sys","general","vfs_cap_data__bindgen_ty_1"],"kind":"struct"},"1:2584:2838":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:12621:5027":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"22:4968:7517":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"union"},"2:10651:246":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:10419:4686":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:7633:8402":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:5485:5899":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"21:2697:3197":{"crate_id":21,"path":["rustix","backend","fs","types","Access"],"kind":"struct"},"17:12030:4970":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:3230:9378":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:8097:6357":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:12264:4990":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:1440:6460":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:12053:407":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:6934:8379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"19:0:1142":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:7565:6284":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:14177:5285":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:5645:5974":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:4975:9681":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"11:687:6460":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:12070:805":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:2032:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:6431:5906":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:7482:6281":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:6169:8248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:2037:4695":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:11079:6746":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:12808:5041":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:43088:3686":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"18:659:4652":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"21:1905:19804":{"crate_id":21,"path":["rustix","ioctl","Ioctl"],"kind":"trait"},"18:589:4639":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:10317:4681":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:14012:5247":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:1591:7677":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11142:4829":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"21:3740:4601":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"9:423:20791":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:11773:4921":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:11318:4208":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:3856:5930":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:4811:2911":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:6086:8219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"22:4018:4320":{"crate_id":22,"path":["linux_raw_sys","general","file_clone_range"],"kind":"struct"},"17:12824:21872":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:1708:2810":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:596:7619":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"22:4134:4365":{"crate_id":22,"path":["linux_raw_sys","general","rand_pool_info"],"kind":"struct"},"2:32816:6802":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:40777:6816":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:11341:4874":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:48504:7039":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:16079:5807":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:11541:7067":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"11:2383:2795":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"5:1506:6442":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:2284:20911":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:12054:1044":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:2336:5868":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:5794:5992":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:7414:6277":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:12289:4992":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:830:4104":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:4581:3710":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:4787:5946":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:10769:37407":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:41135:2956":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:11788:4925":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:15116:5539":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:3556:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:4220:9651":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:4676:7917":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:15333:5595":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:8221:2525":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:13015:5010":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:11102:4851":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:33488:2869":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:4300:7070":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:22125:9706":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:3185:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:40066:223":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"21:6887:3202":{"crate_id":21,"path":["rustix","ugid","Gid"],"kind":"struct"},"2:22319:2770":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:15023:5522":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:15078:5534":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:13526:5151":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:5852:2953":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"21:1831:26075":{"crate_id":21,"path":["rustix","ioctl","patterns","ReadOpcode"],"kind":"struct"},"2:10006:3686":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:22388:9796":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:4449:7828":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:654:4382":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:10350:4682":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:4035:3185":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:3773:5928":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:14298:5305":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"22:4204:4380":{"crate_id":22,"path":["linux_raw_sys","general","itimerspec"],"kind":"struct"},"1:4984:9682":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:1795:641":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:12371:5048":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:15368:5606":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:15434:5621":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:44547:6702":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:12584:4830":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:10933:4205":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:22211:9790":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:41589:2925":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:5982:8161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:5555:5963":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:46375:6943":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:14912:5504":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:2504:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:14503:5341":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:3233:9379":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:6071:8217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4584:7892":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:10004:3678":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"22:4517:4495":{"crate_id":22,"path":["linux_raw_sys","general","termio"],"kind":"struct"},"2:47465:6991":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:44971:8516":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:12399:5006":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:3799:3408":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"22:4389:7471":{"crate_id":22,"path":["linux_raw_sys","general","siginfo"],"kind":"struct"},"2:43623:6868":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:42146:9640":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:14529:5343":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"18:573:4629":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:261:4685":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:4902:7993":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:22123:2770":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:6047:8205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:4170:6703":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4543:7870":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:12071:801":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:9054:7141":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:22975:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:2074:6546":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:41216:2946":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:12336:6760":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:32826:1946":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:7397:34410":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:42314:6729":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:4035:4118":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"22:3887:3260":{"crate_id":22,"path":["linux_raw_sys","general","flock"],"kind":"struct"},"1:11110:3211":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:2351:15087":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"5:3245:35958":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:24025:243":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:4595:7896":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13363:5118":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:11630:29699":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:13594:5171":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:939:6449":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:2439:5878":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:31574:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:3376:2897":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:62:15422":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:10718:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:41558:2919":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:8109:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:40008:219":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:22853:6794":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"10:44:6473":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:10845:2829":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"22:4634:4515":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_writeprotect"],"kind":"struct"},"11:2423:3408":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"22:4394:7472":{"crate_id":22,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"1:10054:3480":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"22:4228:4385":{"crate_id":22,"path":["linux_raw_sys","general","rusage"],"kind":"struct"},"17:16223:5842":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"16:4871:5949":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"9:0:2599":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"22:4924:7493":{"crate_id":22,"path":["linux_raw_sys","general","__sifields"],"kind":"union"},"22:3798:4276":{"crate_id":22,"path":["linux_raw_sys","general","__IncompleteArrayField"],"kind":"struct"},"2:47389:6989":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"11:1051:6455":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:15931:5078":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:46405:6944":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:47499:6992":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:7808:3489":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"5:2249:35925":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:574:4381":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:12572:4829":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:14111:5260":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:5910:8133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"23:175:4271":{"crate_id":23,"path":["bitflags","parser","ParseError"],"kind":"struct"},"1:903:4134":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:22256:9791":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:10431:4168":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:5897:8132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"22:3879:4294":{"crate_id":22,"path":["linux_raw_sys","general","f_owner_ex"],"kind":"struct"},"5:4381:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:6248:8274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:8051:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:7332:2947":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:3188:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:44959:8513":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:41176:2959":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:9445:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"5:5408:14854":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:3739:9641":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:15992:5792":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:11501:7066":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:2718:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:637:7055":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"22:3966:7450":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg"],"kind":"struct"},"2:41551:6721":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:2355:5874":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:7492:2730":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:1576:7665":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:5404:14853":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"21:4815:4601":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"5:3211:35954":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"22:4342:4433":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"17:14212:5296":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:13553:5160":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:15301:5587":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:2203:4699":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:39911:2903":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"5:2990:8418":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:9163:2776":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:6546:6128":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12089:4975":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:6292:6088":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:21976:9710":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"5:1287:6455":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:40:4095":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:12558:3142":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"14:187:20881":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:46427:6945":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:31100:34049":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"22:4283:4417":{"crate_id":22,"path":["linux_raw_sys","general","sigaction"],"kind":"struct"},"2:22747:6780":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:14246:5299":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:119:15476":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:16198:5836":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:6584:2944":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"11:2498:20864":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"11:2140:6453":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:6965:7145":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"11:2231:4895":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:13485:5141":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:1634:2162":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:12711:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:6961:8385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:40895:34022":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"22:4908:7487":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_key_specifier__bindgen_ty_1"],"kind":"union"},"11:844:9615":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:1913:16785":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:13146:5069":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:1098:4692":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:10211:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:44257:6744":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:44443:6895":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"11:1007:6191":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"14:31:6434":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"14:202:4271":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:34281:2879":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:10699:2768":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"5:7571:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:16121:5818":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:5309:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:7609:6286":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:7716:2770":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:7508:2733":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:44983:8519":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:2319:5866":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:6895:6185":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:16269:5127":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:4694:3081":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:2617:5886":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:3999:9645":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:2196:8417":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:26425:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:11674:4910":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"11:1160:6459":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:6268:5900":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:836:2795":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"11:811:4134":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:3597:4706":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:9150:6735":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:8908:7132":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:7823:3490":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:1487:6445":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:7702:8415":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:31043:34058":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:5859:4454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:45239:6931":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:1546:7647":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:2049:2537":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:5075:8071":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:4302:6705":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:1883:1966":{"crate_id":1,"path":["std","env","temp_dir"],"kind":"function"},"1:11093:2776":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"16:4968:5952":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:44686:6910":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:42426:3408":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:4535:7865":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:4666:7916":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:12318:4707":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"11:1891:4118":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:10641:2770":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:44407:6894":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:5515:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:1887:3486":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:4821:4712":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:7934:2765":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"21:5819:3292":{"crate_id":21,"path":["rustix","backend","mount","types","UnmountFlags"],"kind":"struct"},"1:10846:3490":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:2110:3955":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:533:7601":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:8289:7107":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:40026:222":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:16235:5845":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"4:0:2598":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:1115:36000":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13424:5128":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:42352:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:44123:6880":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:3227:9355":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:14066:5255":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:44084:6878":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:4808:2301":{"crate_id":1,"path":["std","os","fd","raw","RawFd"],"kind":"type_alias"},"16:536:5854":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:44035:6872":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"22:4318:7467":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_3"],"kind":"struct"},"23:51:9100":{"crate_id":23,"path":["bitflags","parser","AsDisplay"],"kind":"struct"},"17:0:2606":{"crate_id":17,"path":["object"],"kind":"module"},"17:15678:5711":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"22:4789:4566":{"crate_id":22,"path":["linux_raw_sys","general","kernel_sigaction"],"kind":"struct"},"2:39875:2906":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:4529:7862":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:2035:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:11228:7170":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:2688:2831":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:9654:34566":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:40123:6808":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:4093:2810":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:11051:4844":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:4809:2299":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:3392:2835":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:5829:3178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:7692:4302":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:3463:2810":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:32827:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:8022:21810":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:22806:34079":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:6666:3220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"22:4258:4405":{"crate_id":22,"path":["linux_raw_sys","general","rlimit64"],"kind":"struct"},"6:5085:8076":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:8511:2791":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:6366:227":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:40046:221":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:32914:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:3397:2899":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"22:4380:4447":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_7"],"kind":"struct"},"5:6893:4144":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:2689:5889":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:44823:6913":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:4560:9657":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:12038:28709":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:15769:5732":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:13252:5096":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"21:3909:137":{"crate_id":21,"path":["rustix","backend","fs","types","FileType"],"kind":"enum"},"1:9130:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:12388:5005":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:2175:21927":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:22295:9792":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:403:4687":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:4808:7949":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"11:710:6442":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:22722:6779":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:4884:7984":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:11557:4890":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:11038:6745":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:5955:8154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:10965:6743":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"22:4196:4379":{"crate_id":22,"path":["linux_raw_sys","general","timeval"],"kind":"struct"},"2:47075:6970":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"18:754:4676":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:47311:6988":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:42435:6848":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:4610:7903":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:43831:8510":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"22:0:3151":{"crate_id":22,"path":["linux_raw_sys"],"kind":"module"},"1:10854:3510":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:2157:4115":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:4698:7919":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:4227:2810":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:43353:6313":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:15092:5537":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:11313:4869":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:12074:1650":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"15:394:20903":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:2554:37377":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"11:1923:6467":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:1040:6191":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:22346:34237":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:11841:4214":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:7343:3221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"22:4363:4440":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"17:15176:5557":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:15222:5567":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:10229:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:11392:4877":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:42495:233":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:6868:8343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:7802:9602":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:15102:5538":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:6898:8360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:513:4690":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:21312:34625":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"22:4028:4325":{"crate_id":22,"path":["linux_raw_sys","general","fstrim_range"],"kind":"struct"},"21:5028:3295":{"crate_id":21,"path":["rustix","backend","io","types","FdFlags"],"kind":"struct"},"22:4410:4451":{"crate_id":22,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"1:3512:2519":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:15616:5689":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:11367:4849":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:42898:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"11:102:7566":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:42292:7069":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4989:8038":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:3596:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:6658:4417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:4844:5948":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"22:4562:4501":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"1:10665:8526":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"22:3833:4284":{"crate_id":22,"path":["linux_raw_sys","general","__user_cap_data_struct"],"kind":"struct"},"17:10997:4839":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:12027:9603":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:5974:8156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:7548:2732":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:13972:4943":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:4998:8044":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:48355:7031":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:3080:2882":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:42280:6846":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:4881:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"11:2369:6470":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:46274:6939":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"22:4605:4511":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_register"],"kind":"struct"},"17:13375:5121":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:4893:7987":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:46220:6937":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:212:4097":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:7869:6335":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:16249:5846":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"18:689:4661":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:42466:6850":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:21565:2770":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:8066:7101":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:10944:4206":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:2573:5884":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:23609:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:11634:4907":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:12362:5004":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:4649:5941":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:32883:3914":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:2859:5897":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:6320:6090":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:8849:3513":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:1809:665":{"crate_id":1,"path":["std","env"],"kind":"module"},"11:800:4118":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:12443:5012":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:45250:6472":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:14868:5474":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11841:4933":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:1063:6455":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:14599:5359":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:3569:2293":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:2399:5876":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"18:563:4638":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:4755:7929":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:32795:6243":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"16:3709:5926":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:11764:4920":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:3177:5865":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:6136:2810":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"11:1676:4093":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:12993:21873":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"9:329:7579":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:7907:2766":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"21:4180:3205":{"crate_id":21,"path":["rustix","backend","fs","types","SealFlags"],"kind":"struct"},"17:15342:5596":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:2418:2753":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:43576:6858":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:3260:5923":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:15313:5588":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:11256:4863":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:46941:6967":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:10170:4814":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:10440:2847":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:11396:7090":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"22:3871:4293":{"crate_id":22,"path":["linux_raw_sys","general","vfs_ns_cap_data__bindgen_ty_1"],"kind":"struct"},"17:9938:21867":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:6445:6104":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:45029:6923":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:3001:3910":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:5117:8096":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:3010:4717":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:5969:8155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:12056:1668":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:7383:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:14516:5342":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:2883:20937":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:11898:4938":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"22:3939:4310":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_key"],"kind":"struct"},"5:5020:2810":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:12518:2800":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:1517:6443":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:5521:5904":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:3545:5925":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:6713:4098":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:15418:5618":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:15324:5592":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:918:6443":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:10338:3513":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:7411:3408":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:6231:4192":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:10622:37408":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:4824:7957":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:13509:5143":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"7:78:20782":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:13986:5244":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:5464:3507":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:6943:8382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:7118:6848":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:46797:6963":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:945:6451":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:11583:4898":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:1686:4098":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:6100:8230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:4440:7823":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:2446:2762":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:12076:4974":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:12597:5026":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:4517:4157":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"18:481:4627":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:12629:14872":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:13064:5061":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:7645:8404":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:2438:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"14:160:6434":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:45223:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:14189:5287":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:44185:6885":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:13272:5106":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:928:9615":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"11:1887:3408":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:47229:6987":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:8922:7077":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"11:774:6444":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:6665:3341":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"11:700:3408":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:6718:3213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:6781:8296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:6134:6072":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:22833:8434":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"22:4310:7462":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_2"],"kind":"struct"},"1:10675:1889":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:6535:3340":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"22:4220:4382":{"crate_id":22,"path":["linux_raw_sys","general","timezone"],"kind":"struct"},"2:3386:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"22:3979:4314":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_provisioning_key_payload"],"kind":"struct"},"17:15376:5609":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:7227:2937":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:14575:5010":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:4549:7873":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:4107:3184":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:22402:15087":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"21:6015:3294":{"crate_id":21,"path":["rustix","backend","mount","types","MountPropagationFlags"],"kind":"struct"},"2:47997:7026":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:21586:6770":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:12683:5031":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:41044:2941":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"22:4901:7486":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg__bindgen_ty_1"],"kind":"union"},"5:2269:8421":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:33908:2874":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:3579:2820":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"22:4156:4374":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_old_timeval"],"kind":"struct"},"17:12863:5044":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:15734:5719":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:14235:5297":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:8201:2854":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:10759:4829":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:1682:7739":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"21:5441:4601":{"crate_id":21,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"2:12578:14865":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:11799:4926":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"18:735:26055":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:6099:6056":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:12563:6735":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:6059:8210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:47649:6993":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:2971:3713":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13899:5230":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:7452:21807":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:15944:5092":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:40749:34024":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:15206:5563":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"23:90:6313":{"crate_id":23,"path":["bitflags","traits","Flag"],"kind":"struct"},"1:2436:2759":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"11:1066:20868":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:15635:5695":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:8336:7069":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:41063:2950":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:8981:9700":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:4566:7883":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:39986:217":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:6724:6160":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:2353:15088":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:11647:4908":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:1914:8428":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:5151:7075":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:38662:2887":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:1691:7745":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:46304:6940":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:40866:6826":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:1072:6459":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:13785:5214":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:32802:6801":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:40956:2750":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11853:4934":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:3268:2848":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:4217:14837":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:48489:7038":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:12297:6758":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:15383:5610":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:12485:21995":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:1602:6466":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:9033:28715":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"21:3301:3090":{"crate_id":21,"path":["rustix","backend","fs","types","OFlags"],"kind":"struct"},"2:48583:7044":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:12374:6741":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:21684:2770":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:14260:5301":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:9452:2767":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:46972:6968":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"14:0:2603":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:46819:6964":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13455:5137":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:363:7052":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:266:4098":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:12251:4989":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11269:21899":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:10612:4826":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:7951:6344":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:13774:5211":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:6870:4132":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:2995:20939":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:588:7615":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:12055:457":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:1574:2795":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:3313:218":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:22334:9795":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:15010:5517":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:40923:2736":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"16:4813:5947":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:11158:8530":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:14560:5349":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:46605:6957":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:39959:2895":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:1570:7664":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"22:3761:7447":{"crate_id":22,"path":["linux_raw_sys","elf","Elf_auxv_t"],"kind":"struct"},"2:44963:8514":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:15521:5670":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"11:2304:6191":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:4647:7915":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:42543:6460":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:7152:6222":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:7491:6282":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:46482:6948":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"22:4293:4422":{"crate_id":22,"path":["linux_raw_sys","general","sigaltstack"],"kind":"struct"},"11:2151:6455":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:4841:7968":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"18:80:26044":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:2509:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:527:7598":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:1596:6465":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:1968:3716":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"22:4117:4359":{"crate_id":22,"path":["linux_raw_sys","general","inotify_event"],"kind":"struct"},"17:14587:5352":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:4867:2913":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"21:0:2047":{"crate_id":21,"path":["rustix"],"kind":"module"},"2:41144:2943":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:48458:7035":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:4473:7841":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:45161:234":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"22:4837:27056":{"crate_id":22,"path":["linux_raw_sys","general","membarrier_cmd"],"kind":"enum"},"2:32791:6800":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"11:1910:6465":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:4399:5934":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"11:2352:6455":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:1832:1199":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:14489:5338":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"14:214:6438":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:15799:5737":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:9145:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:849:6460":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:8549:2793":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:0:887":{"crate_id":6,"path":["libc"],"kind":"module"},"22:4101:4354":{"crate_id":22,"path":["linux_raw_sys","general","robust_list"],"kind":"struct"},"21:5845:4601":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"17:13089:5062":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"7:31:20775":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:13024:21874":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:2729:5891":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:2728:2841":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:10457:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"11:856:6449":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:9467:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"21:5418:3301":{"crate_id":21,"path":["rustix","backend","io","types","DupFlags"],"kind":"struct"},"11:328:7570":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:33967:2878":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:23425:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:1528:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:33302:2870":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:21324:34625":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:41157:2957":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:4426:2810":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:6056:227":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:42818:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:9916:21866":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:3170:2830":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"11:2536:7572":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:7651:8405":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:6408:6102":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"21:465:3181":{"crate_id":21,"path":["rustix","backend","fs","dir","Dir"],"kind":"struct"},"17:12213:4986":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:3266:6467":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:2709:5890":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"11:1883:2795":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:40847:14930":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:6152:6075":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:23985:6798":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:7294:6262":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"0:0:1898":{"crate_id":0,"path":["tempfile"],"kind":"module"},"16:6362:5918":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:44503:6897":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:41053:2949":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:6062:6040":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:14025:5248":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:1975:712":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:21341:34631":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:7717:7053":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:6804:8303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:13344:5117":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:4907:5950":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:13473:5138":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:482:4181":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:9181:7147":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:1718:7755":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:9135:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"11:875:6451":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"18:706:4664":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:8900:2795":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:6741:8295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:12530:5024":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:44110:2938":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:10671:37405":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:5992:8168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:23891:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:13855:5222":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"8:0:2045":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:11354:4875":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:33674:2872":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:2712:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:4968:8023":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:14311:5306":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:22864:9643":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:4704:4535":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:40309:31981":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"12:0:2602":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"11:364:4089":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:7103:37399":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:41123:2964":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:790:4101":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"22:4651:4518":{"crate_id":22,"path":["linux_raw_sys","general","linux_dirent64"],"kind":"struct"},"6:4977:8029":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:30979:2267":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:4:1125":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:4686:7918":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:3039:2890":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:1514:7631":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:41192:2960":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:7867:2935":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:14855:5467":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:2847:3720":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"6:4375:7779":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:15814:5738":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:11419:4829":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:8362:7107":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:1664:7732":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:4890:2298":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:4444:228":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"22:4266:4406":{"crate_id":22,"path":["linux_raw_sys","general","clone_args"],"kind":"struct"},"2:10448:4169":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:44987:8520":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:48185:7028":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"21:1100:3083":{"crate_id":21,"path":["rustix","fs","abs","unlink"],"kind":"function"},"2:46150:6934":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:48107:7027":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:44812:14879":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:597:4691":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:13214:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:13406:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:11637:7091":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"21:1761:4596":{"crate_id":21,"path":["rustix","ioctl","patterns","Getter"],"kind":"struct"},"21:6237:4601":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"2:44215:6889":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:2457:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:14977:5514":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"21:6657:4601":{"crate_id":21,"path":["rustix","fs","xattr","_","InternalBitFlags"],"kind":"struct"},"17:15289:5581":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:3027:2871":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:4249:9654":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:9807:21853":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"18:670:4658":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:8300:9639":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:4228:9652":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"22:4372:4444":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_6"],"kind":"struct"},"1:2266:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:3494:2292":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:40986:2769":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:7913:2934":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:5042:1151":{"crate_id":1,"path":["std","path"],"kind":"module"},"1:2242:1888":{"crate_id":1,"path":["std","fs"],"kind":"module"},"21:4415:4601":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"10:0:2600":{"crate_id":10,"path":["adler"],"kind":"module"},"1:533:4182":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:6679:3342":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:8879:3515":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:4538:9656":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:2529:5882":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:13606:5174":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:6139:4188":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:5104:8090":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:6711:8294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"21:2312:4601":{"crate_id":21,"path":["rustix","backend","fs","inotify","_","InternalBitFlags"],"kind":"struct"},"1:909:6461":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:7863:2936":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:42551:3408":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:7536:2731":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:43369:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:15190:5560":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:6348:5901":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:1862:3480":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:13497:5142":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:4364:7771":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:30749:9642":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:4518:5938":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:14147:5266":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:12900:5047":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:10927:6742":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:44538:6819":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"22:3909:4302":{"crate_id":22,"path":["linux_raw_sys","general","open_how"],"kind":"struct"},"1:7917:1889":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:7706:21809":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:2977:4187":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:42779:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"22:4461:4479":{"crate_id":22,"path":["linux_raw_sys","general","termios"],"kind":"struct"},"17:12201:4985":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:8951:9699":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:16105:5813":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:34454:2880":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:2459:5879":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:44640:6901":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:3993:5931":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:14325:5309":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:6713:240":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:44073:6877":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:48449:7034":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:11639:6751":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:13187:34856":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:6201:5898":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:5146:8105":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"18:635:4651":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:2749:5892":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:8589:2794":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:8966:9698":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:6813:8306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:501:4402":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:3551:2295":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:23245:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:5006:5953":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"22:3898:4301":{"crate_id":22,"path":["linux_raw_sys","general","flock64"],"kind":"struct"},"22:3985:7455":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_remove_key_arg"],"kind":"struct"},"1:1581:4118":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11128:4804":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"23:67:28554":{"crate_id":23,"path":["bitflags","parser","ParseHex"],"kind":"trait"},"16:2509:5881":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:40738:6812":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:1650:7721":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"11:787:6445":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"11:837:6446":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:6370:9798":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:22448:9786":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:4396:4125":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7914:6339":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:15456:5626":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:6011:3327":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:6116:6062":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"11:1582:6462":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"21:3973:3203":{"crate_id":21,"path":["rustix","backend","fs","types","MemfdFlags"],"kind":"struct"},"2:7942:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"11:2326:6453":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:3264:4703":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:6045:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:2304:20936":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:7365:8391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:11189:4857":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:3199:2795":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"22:3749:7443":{"crate_id":22,"path":["linux_raw_sys","elf","Elf_Dyn"],"kind":"struct"},"17:15463:5628":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:9995:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:48568:7043":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:4197:2810":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:11128:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:11382:7088":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:7556:4486":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:6682:3260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:34026:2876":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"22:3994:7458":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_get_key_status_arg"],"kind":"struct"},"22:4702:3220":{"crate_id":22,"path":["linux_raw_sys","general","statfs"],"kind":"struct"},"6:4870:7979":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:12075:1651":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:5346:5957":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:1537:7641":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:9020:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:10950:4207":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:38717:2888":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:40798:6818":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"11:2403:6460":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:44669:6909":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:4908:7995":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"11:2548:7574":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:4236:14905":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:12342:4999":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:3206:6465":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:5662:21798":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"22:3816:4281":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_fsid_t"],"kind":"struct"},"2:11093:6747":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:7584:6567":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:3240:6464":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:41073:2951":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:9015:7134":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:7679:2920":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:6798:8301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:11413:8535":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:6941:21805":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"3:0:484":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:44136:6881":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"22:4336:7468":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5"],"kind":"struct"},"2:44655:6906":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:10010:213":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:2979:5920":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:5815:3329":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:6745:5908":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:15039:5525":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"18:623:37412":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:32809:3709":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:2675:2770":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"21:1853:26077":{"crate_id":21,"path":["rustix","ioctl","patterns","ReadWriteOpcode"],"kind":"struct"},"17:1207:4694":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:4800:4359":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:1302:6453":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:10018:21849":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:5033:9687":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:588:9595":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"21:1864:26078":{"crate_id":21,"path":["rustix","ioctl","patterns","NoneOpcode"],"kind":"struct"},"16:7306:6263":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:7477:9614":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"21:3715:3116":{"crate_id":21,"path":["rustix","backend","fs","types","RenameFlags"],"kind":"struct"},"2:23515:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:6631:3408":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"11:742:6443":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"22:4077:4345":{"crate_id":22,"path":["linux_raw_sys","general","fsxattr"],"kind":"struct"},"17:16151:5826":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:7449:2917":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:12077:857":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:14545:5345":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"23:11:2795":{"crate_id":23,"path":["bitflags","iter","Iter"],"kind":"struct"},"17:10092:21870":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:42174:8501":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:3665:4118":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:39971:220":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:1826:3470":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:11825:4931":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:6880:9702":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:7507:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:7657:8406":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:14475:5337":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:11680:14861":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:21358:34636":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:44734:6911":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:3406:5924":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:9949:4607":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"23:25:28550":{"crate_id":23,"path":["bitflags","iter","IterNames"],"kind":"struct"},"22:4555:4499":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"16:7595:5905":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:2435:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:11618:7171":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:7962:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:23155:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:13568:5166":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:1790:4134":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:8283:2825":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:9799:3677":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:1697:4304":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"9:237:2791":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:43613:2791":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"21:2723:4601":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"16:6882:6182":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:5238:5955":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:4453:6708":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:1674:7738":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:48606:7045":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:6849:6178":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:5044:8061":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:7311:3408":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:13946:5236":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:34144:2877":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:5896:4118":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:7619:21808":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:7990:2840":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:1478:6444":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:41022:2826":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:22433:2770":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:13814:5218":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:1596:7679":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:12066:701":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:10486:4204":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:9755:21845":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:8391:3213":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:11026:21882":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"9:177:8729":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:40966:2749":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:13832:5219":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:11293:21900":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:11478:4210":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:44225:2828":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:7889:6336":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"24:143:3898":{"crate_id":24,"path":["fastrand","Rng"],"kind":"struct"},"6:4628:7914":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:9284:3485":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:10877:4831":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:46464:6947":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:6773:6164":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:2593:5885":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"15:306:20894":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:12090:6752":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:48645:7046":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"18:96:26045":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:7932:6341":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:2819:5895":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"14:220:6440":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:7912:2767":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:7194:37400":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:11166:4856":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:11341:3520":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"24:0:2046":{"crate_id":24,"path":["fastrand"],"kind":"module"},"17:11743:4916":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"3:234:233":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:6646:6154":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:22771:34012":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:4792:725":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:13165:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:14788:5412":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:6837:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:2444:2161":{"crate_id":1,"path":["std","fs","remove_dir_all"],"kind":"function"},"1:9140:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:8363:2931":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:5822:3330":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12189:4984":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"21:5221:3302":{"crate_id":21,"path":["rustix","backend","io","types","ReadWriteFlags"],"kind":"struct"},"17:12768:21850":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:11688:4911":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:46174:6935":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:9970:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:8071:7102":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:11605:4903":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:42560:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:1446:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:3347:2845":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:569:7490":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:6927:8376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:41341:2827":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"9:501:6526":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:12508:5020":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:13367:4179":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:44343:6746":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:12175:4980":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:8407:34569":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:8413:2300":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:12851:5043":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:15400:5614":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:2167:6547":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"22:4148:4371":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_itimerspec"],"kind":"struct"},"17:12043:4971":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"22:4037:4327":{"crate_id":22,"path":["linux_raw_sys","general","file_dedupe_range_info"],"kind":"struct"},"16:8055:6243":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:7984:6348":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:12062:1633":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:15836:5744":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11115:4853":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:7900:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:21573:9707":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:4491:5937":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:5015:8049":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:15214:5565":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:3416:34287":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:9951:233":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:11214:4859":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:12695:5032":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:7355:6275":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"22:4164:4376":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_old_timespec"],"kind":"struct"},"2:4182:6704":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"22:4571:4503":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_4"],"kind":"struct"},"2:43324:3676":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:9457:3181":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:42976:3328":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"22:4475:4486":{"crate_id":22,"path":["linux_raw_sys","general","termios2"],"kind":"struct"},"2:40086:2896":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:4813:2912":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:14341:5311":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:42662:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:8866:3514":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:12006:7177":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:12278:4991":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:44951:8511":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:12080:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"15:327:8716":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:6141:37397":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:12073:1649":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"5:2998:35823":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"18:718:4668":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:2987:3461":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:15596:5683":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:5980:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:45151:226":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11242:4861":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:21370:34634":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"5:7419:3408":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:7386:5914":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:15701:5712":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:14131:5261":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:5759:5990":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:5377:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:42258:34076":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:16093:5811":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:22683:8431":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:504:4115":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:48515:7040":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:12516:5022":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:40993:2938":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:13877:5229":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:903:2795":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"14:40:5093":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:44979:8518":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:7560:4130":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"22:4180:4378":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_sock_timeval"],"kind":"struct"},"17:13116:5065":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:12022:8740":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:4783:7942":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"21:4207:4601":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"2:44493:2825":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"22:4091:4352":{"crate_id":22,"path":["linux_raw_sys","general","futex_waitv"],"kind":"struct"},"2:10014:3685":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:10439:4815":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:1990:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:4947:8008":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:3310:2850":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:12074:15160":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:16032:5096":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:922:6446":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:36676:2884":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:4966:425":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"21:6845:15158":{"crate_id":21,"path":["rustix","ioctl","Direction"],"kind":"enum"},"17:11227:4860":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:3741:5927":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:5123:8099":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:6222:8259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11621:4905":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:7684:6298":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:14414:5323":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"21:1842:26076":{"crate_id":21,"path":["rustix","ioctl","patterns","WriteOpcode"],"kind":"struct"},"17:16176:5834":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"6:5033:8055":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:1639:7713":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:8369:2932":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:10524:4825":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:11043:3514":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:4351:7762":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:3468:2905":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:15748:5726":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:5111:8093":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:9039:6734":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:7225:21806":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:6318:4193":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:11510:4886":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:5669:4132":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:25:665":{"crate_id":2,"path":["core","env"],"kind":"macro"},"6:4488:7846":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:5023:8054":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"22:3755:7445":{"crate_id":22,"path":["linux_raw_sys","elf","Elf_Dyn_Union"],"kind":"union"},"2:48478:7037":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:42477:9695":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:1824:3469":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:42857:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:16187:5835":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:15058:5526":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:46575:6956":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:1507:7628":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:5568:5968":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:893:4118":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:6120:8235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:44556:6818":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"11:299:7567":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:2806:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:1607:6467":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:7613:7174":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"22:4799:27055":{"crate_id":22,"path":["linux_raw_sys","general","fsconfig_command"],"kind":"enum"},"1:8387:7116":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:563:7607":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:11368:7087":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:4496:7848":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:7672:4201":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:7444:6280":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:4545:5939":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"21:4585:3200":{"crate_id":21,"path":["rustix","backend","fs","types","FallocateFlags"],"kind":"struct"},"2:7904:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:41013:2939":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:10073:7152":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:12671:5030":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"11:434:37382":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:6499:3333":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:16069:5806":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:6803:6167":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:46130:6933":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:281:2227":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:7176:37401":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"22:4597:4510":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_range"],"kind":"struct"},"1:3560:28904":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:44044:6873":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:4628:3711":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:3609:2795":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:4448:6707":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:1528:7636":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"23:126:28532":{"crate_id":23,"path":["bitflags","traits","Bits"],"kind":"trait"},"17:15281:5580":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"21:4984:3201":{"crate_id":21,"path":["rustix","backend","fs","types","FlockOperation"],"kind":"enum"},"17:16138:5820":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:6228:8260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:0:539":{"crate_id":2,"path":["core"],"kind":"module"},"2:12320:6759":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:12065:699":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:7995:2933":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:13738:5202":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:4706:4537":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:16212:5840":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:6079:8218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"22:4212:4381":{"crate_id":22,"path":["linux_raw_sys","general","itimerval"],"kind":"struct"},"6:7668:8410":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:2487:8422":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:22791:34045":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"24:27:4082":{"crate_id":24,"path":["fastrand","global_rng","RestoreOnDrop"],"kind":"struct"},"1:3349:2846":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:2835:5896":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:4527:3709":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:7351:6562":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:9781:21863":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:5708:7076":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:2917:20938":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:4452:7072":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"22:4402:7477":{"crate_id":22,"path":["linux_raw_sys","general","sigevent"],"kind":"struct"},"5:3753:2537":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:21356:34629":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:43601:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:8605:2796":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:9472:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:7971:6345":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:3473:4705":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:8076:2592":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:10246:28847":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"5:7361:35923":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:12225:4987":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:21695:6770":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"22:4250:4402":{"crate_id":22,"path":["linux_raw_sys","general","rlimit"],"kind":"struct"},"2:3431:2904":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:11288:6523":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:1578:3408":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:42410:2795":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:7302:3935":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:8370:7115":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"18:680:4659":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:44155:6883":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"22:4959:7512":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1"],"kind":"union"},"16:7366:5913":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:7341:4109":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:6263:7082":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"18:643:4629":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:14386:5318":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:4283:5932":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:6929:6190":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:41206:2961":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:4789:7945":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:21339:34635":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:5360:4098":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"18:0:2607":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:10365:4166":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:8939:7133":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:13356:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:10820:6460":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:13999:5245":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:11405:4878":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:1054:6453":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:15197:5562":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:6159:8246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:3435:2855":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:22562:6771":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:5009:4405":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:7998:2537":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:3308:2849":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12328:4994":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:13797:5215":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:22482:9785":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:7639:8403":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:44967:8515":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"22:4762:4557":{"crate_id":22,"path":["linux_raw_sys","general","user_desc"],"kind":"struct"},"21:5013:3091":{"crate_id":21,"path":["rustix","backend","io","errno","Errno"],"kind":"struct"},"5:1131:35822":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:2966:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:7788:9601":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:7760:4204":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:4572:4158":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"21:6414:3291":{"crate_id":21,"path":["rustix","fs","ioctl","IFlags"],"kind":"struct"},"6:5885:8128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:42092:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:5959:20910":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"21:378:9219":{"crate_id":21,"path":["rustix","backend","reg","ArgReg"],"kind":"struct"},"2:22668:6773":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"22:4491:4489":{"crate_id":22,"path":["linux_raw_sys","general","ktermios"],"kind":"struct"},"17:12478:5015":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:10381:4203":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"11:1025:6453":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:5484:3508":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:9984:21868":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:45148:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:7924:2768":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:12454:5013":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"15:288:20893":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:6128:8237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:9074:7145":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:9087:28719":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:1710:7751":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:4860:7976":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:47435:6990":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:15151:5549":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:14356:5315":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:3804:7067":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:12107:4829":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"22:4951:7509":{"crate_id":22,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1"],"kind":"union"},"21:2893:3199":{"crate_id":21,"path":["rustix","backend","fs","types","AtFlags"],"kind":"struct"},"5:7466:2798":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:45210:6928":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:9659:8738":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:32755:3517":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:5776:2810":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"13:226:7565":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:23065:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"23:0:3152":{"crate_id":23,"path":["bitflags"],"kind":"module"},"22:4048:4332":{"crate_id":22,"path":["linux_raw_sys","general","file_dedupe_range"],"kind":"struct"},"22:4935:7501":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1"],"kind":"union"},"1:2271:2515":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:48530:7041":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:21302:3383":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:6136:8240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:13753:5207":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:4738:2910":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:12792:4780":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:43074:3678":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:10254:9633":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:44389:6893":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:11547:4760":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:5140:8103":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"11:1087:37386":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:1923:6570":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"21:3515:3204":{"crate_id":21,"path":["rustix","backend","fs","types","ResolveFlags"],"kind":"struct"},"1:11644:7091":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:5066:863":{"crate_id":2,"path":["core","iter"],"kind":"module"},"9:481:20788":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:12543:5025":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:5694:227":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"21:2288:4600":{"crate_id":21,"path":["rustix","backend","fs","inotify","CreateFlags"],"kind":"struct"},"2:10463:4174":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"11:832:6461":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:4733:5944":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:44955:8512":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"21:6437:4601":{"crate_id":21,"path":["rustix","fs","ioctl","_","InternalBitFlags"],"kind":"struct"},"2:40821:14929":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:13844:5221":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:14986:5515":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"11:673:2795":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:11562:7068":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:31032:3676":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:12058:1162":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:44361:6747":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:48469:7036":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:44209:6754":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"21:3345:4601":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"17:4986:4714":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:11574:4895":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:2275:2521":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:10573:37409":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:4674:5942":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:13674:5176":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:2652:2839":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:13387:5122":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12969:5050":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:1316:6459":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:437:4689":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:22699:6774":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:44145:6882":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:40840:6822":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"21:1825:26074":{"crate_id":21,"path":["rustix","ioctl","patterns","BadOpcode"],"kind":"struct"},"21:5649:4601":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"22:4066:4341":{"crate_id":22,"path":["linux_raw_sys","general","inodes_stat_t"],"kind":"struct"},"18:608:4646":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"11:1917:6466":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"9:52:8719":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"14:7:6434":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:6503:4118":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"21:5611:3293":{"crate_id":21,"path":["rustix","backend","mount","types","MountFlags"],"kind":"struct"},"6:4616:7905":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:6700:8292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:6188:6077":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:46751:6961":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:14752:5381":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:6903:4145":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:5681:2810":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:45040:15199":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:44531:6761":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:8343:8521":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:3139:2902":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:4459:4125":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:7391:6563":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:7653:4134":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:5004:8047":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:12583:14864":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:12724:21871":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:21512:2770":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:2546:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:6691:4301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:14463:5336":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:6595:4164":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:15646:5696":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:7345:6274":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:12949:4707":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:10155:3519":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:45202:6926":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"22:4188:3162":{"crate_id":22,"path":["linux_raw_sys","general","timespec"],"kind":"struct"},"6:4847:7971":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:2728:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:5849:3331":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"22:4579:4504":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_5"],"kind":"struct"},"1:859:3408":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:8855:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:42476:9604":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:7602:4691":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:15778:5734":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:6609:3336":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:5713:5982":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13046:5058":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:47855:7025":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:951:6452":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:7973:7099":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:5316:4813":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:48309:7030":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:580:7610":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:43395:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:14994:5516":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:44975:8517":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:7335:5912":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:8616:2797":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:42701:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:40787:6817":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:6394:6100":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"22:4722:4555":{"crate_id":22,"path":["linux_raw_sys","general","statfs64"],"kind":"struct"},"2:42130:6728":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"22:4008:4315":{"crate_id":22,"path":["linux_raw_sys","general","mount_attr"],"kind":"struct"},"6:4401:7799":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:11107:6748":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:12353:5003":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"18:521:26057":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:43314:8502":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:42401:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:10443:2849":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:48431:7033":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:41351:2962":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:4572:5940":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:4065:4098":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:10218:4678":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:14038:5250":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:10869:28721":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"22:4427:3178":{"crate_id":22,"path":["linux_raw_sys","general","statx"],"kind":"struct"},"17:10818:4830":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"23:101:28533":{"crate_id":23,"path":["bitflags","traits","Flags"],"kind":"trait"},"2:1802:3536":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:22001:3948":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"18:531:4633":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:15760:5728":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:5500:3509":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:483:7595":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11524:4887":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:22840:6793":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"11:396:4091":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:38552:2885":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:14847:5464":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:44165:6884":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:10887:37411":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:2489:5880":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:4355:5933":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:11000:6744":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:14723:5361":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:8446:9691":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:7375:3408":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"11:1603:6463":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:2769:5893":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:3358:4134":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:7376:6276":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:12079:1258":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:4878:7983":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:13412:5127":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:6495:2921":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:47199:6986":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:3157:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"11:2469:4134":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:2718:8425":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:3403:2901":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:10982:21881":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:1734:7477":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:634:6539":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:1024:4098":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12929:5048":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:22013:34637":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:9002:3332":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:13308:5111":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:15569:5671":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:11915:21969":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:15410:5617":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:14933:5509":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:3012:2868":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:867:6444":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"18:613:37414":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:149:4085":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"11:2443:4118":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:31017:3541":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:2665:5888":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"18:765:26056":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"15:0:2604":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:5966:2942":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:9858:21864":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:40833:6821":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:12707:5033":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:41565:2921":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"22:4172:4377":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_old_itimerval"],"kind":"struct"},"2:3008:3912":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"22:4685:4542":{"crate_id":22,"path":["linux_raw_sys","general","__old_kernel_stat"],"kind":"struct"},"1:8233:2294":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"11:2569:2798":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:2063:6545":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"22:3807:4279":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_fd_set"],"kind":"struct"},"11:351:37378":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"22:4125:4363":{"crate_id":22,"path":["linux_raw_sys","general","pollfd"],"kind":"struct"},"21:1457:3183":{"crate_id":21,"path":["rustix","fs","raw_dir","RawDirEntry"],"kind":"struct"},"2:40764:6815":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:11075:4849":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:41580:2855":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:46344:6942":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:38607:2886":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:41365:2963":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:15138:5543":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:6819:8307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:8270:2828":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:6422:4086":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:9952:2295":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:11042:4842":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:542:4496":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:40116:2898":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5867:8115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:10954:21880":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:10002:3679":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"5:3702:4098":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:42418:6460":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:6221:6080":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:13173:5077":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:555:4490":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:43341:34074":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:23703:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:41114:2955":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:9737:21847":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:4461:7832":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:7968:7064":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:4922:7998":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:14271:5302":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:14284:5304":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"22:4918:7490":{"crate_id":22,"path":["linux_raw_sys","general","sigval"],"kind":"union"},"1:7735:1907":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:46675:6959":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"11:883:6452":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:13211:5092":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:3801:7066":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:12238:4988":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:1521:7633":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:41035:2940":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:3768:6545":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:8263:2827":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:3181:2285":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"21:6633:3210":{"crate_id":21,"path":["rustix","fs","xattr","XattrFlags"],"kind":"struct"},"2:44833:6917":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:6612:3337":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"22:4507:4490":{"crate_id":22,"path":["linux_raw_sys","general","winsize"],"kind":"struct"},"2:2540:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:11606:6750":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"16:6692:6156":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:13581:5170":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"18:598:37415":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:4506:7854":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"13:0:2597":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:9061:7142":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:4702:5943":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:10737:28717":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:14402:5321":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:3191:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"23:180:28555":{"crate_id":23,"path":["bitflags","parser","ParseErrorKind"],"kind":"enum"},"2:40884:2735":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:4523:7860":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:15720:5717":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:15582:5677":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:4236:9653":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:1585:4134":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:5197:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:44461:6896":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:12408:5007":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:4119:3370":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:44063:6876":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"22:4531:4496":{"crate_id":22,"path":["linux_raw_sys","general","iovec"],"kind":"struct"},"2:44761:6764":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:7669:4138":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:15445:5625":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:4480:7845":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:5025:2857":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"22:3926:4306":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_policy_v1"],"kind":"struct"},"17:11089:4850":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:7616:8397":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:4194:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:3906:7068":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:4063:3081":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:6077:6042":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:4556:7876":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:6913:8367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:1151:35998":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:5170:3327":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:5580:5903":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:43631:6869":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:10137:21846":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:44864:6765":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:41607:2928":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:4603:7901":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:2434:2758":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:5825:5851":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"22:4780:4564":{"crate_id":22,"path":["linux_raw_sys","general","kernel_sigset_t"],"kind":"struct"},"17:15655:5698":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"13:110:37387":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:2715:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:11812:4929":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:1496:7623":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:8916:3408":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:21971:2770":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"16:5878:5856":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:16259:5122":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:13235:5093":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:5928:4479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"18:507:4629":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:11067:28707":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"22:4614:4512":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_copy"],"kind":"struct"},"5:2994:35825":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:45169:214":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:2375:5875":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:4516:7857":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:7653:4199":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:42478:15152":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:3391:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:5894:3339":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:3830:5929":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:7400:5915":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:5068:8068":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:2553:5883":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:6966:4197":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:645:9598":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:15473:5633":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:12647:5028":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:6032:15396":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:14876:5475":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:4376:3708":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:6858:6181":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:10915:37410":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:6994:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:1456:3408":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:1537:6544":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:10796:2795":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:40721:6702":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:4745:7922":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7324:6271":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:6114:8232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:7594:6568":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:6426:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:34627:2881":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:13959:5239":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:14436:5334":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:31205:34025":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:6764:4555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:1885:3485":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"22:4108:4355":{"crate_id":22,"path":["linux_raw_sys","general","robust_list_head"],"kind":"struct"},"1:8210:2856":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:12300:21993":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:507:4385":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:15624:5690":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:2428:2756":{"crate_id":1,"path":["std","fs","hard_link"],"kind":"function"},"1:6040:4193":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:0:2605":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:11121:6749":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:2988:35820":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:5865:6005":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:10044:21869":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"21:2281:2751":{"crate_id":21,"path":["rustix","backend","fs","dir","DirEntry"],"kind":"struct"},"16:5499:5902":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:13325:5113":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:8348:9655":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:5919:21800":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:4932:8003":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"22:4418:4454":{"crate_id":22,"path":["linux_raw_sys","general","statx_timestamp"],"kind":"struct"},"1:5637:3511":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:123:15477":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:6788:37398":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:13461:9616":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:6811:21804":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"21:1377:37425":{"crate_id":21,"path":["rustix","fs","ioctl","Ficlone"],"kind":"struct"},"1:12067:806":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:4433:5935":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:13723:5198":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:12127:4977":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:13187:5078":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:8276:2829":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:15126:5540":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:5052:8063":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:12056:4973":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:12464:21994":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:9066:7143":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:7038:4150":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:10000:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:10728:2525":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"5:5826:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:4198:31532":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:3220:2894":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:21567:9704":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:22615:6772":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"23:64:28553":{"crate_id":23,"path":["bitflags","parser","WriteHex"],"kind":"trait"},"1:557:7054":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:6555:6129":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:6215:6079":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:357:7051":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:4854:7973":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:10670:8528":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"21:3094:3187":{"crate_id":21,"path":["rustix","backend","fs","types","Mode"],"kind":"struct"},"21:4010:4601":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"2:43095:3687":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:41574:2923":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:6215:4179":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"9:391:20790":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:14079:5256":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:9220:29658":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:15:2289":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:16165:5829":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:7063:4153":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:6590:8430":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:3600:4722":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:45262:6932":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:10886:3516":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"21:4614:4601":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"6:7610:8396":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:11877:4936":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:5569:3510":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:23335:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:12433:5010":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:7056:9106":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:2268:2751":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:6107:8231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:6244:21801":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"18:651:4629":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"0:405:1907":{"crate_id":0,"path":["tempfile","Builder"],"kind":"struct"},"5:6549:4098":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:15356:5603":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:40136:6810":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:10284:4680":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:5130:8102":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:7604:8395":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:7099:4198":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:3170:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:46627:6958":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:4005:9644":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:5941:8143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11497:4885":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:21514:9708":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:8463:2790":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:12659:5029":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"9:356:20804":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:43592:6861":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"22:4302:4426":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_1"],"kind":"struct"},"2:46843:6965":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:5601:21797":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:0:1540":{"crate_id":1,"path":["std"],"kind":"module"},"17:15957:5762":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:9671:21848":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11715:4913":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:15168:5554":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:4764:7934":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:10446:2845":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"16:5331:4814":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:2676:14934":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"22:3860:4291":{"crate_id":22,"path":["linux_raw_sys","general","vfs_ns_cap_data"],"kind":"struct"},"5:7331:4118":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:1900:15097":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:44619:14878":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"21:1095:2755":{"crate_id":21,"path":["rustix","fs","abs","rename"],"kind":"function"},"21:1954:26080":{"crate_id":21,"path":["rustix","path","arg","Arg"],"kind":"trait"},"2:46773:6962":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:4388:7789":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:10012:3684":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:40806:6702":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:34085:2875":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"11:1107:6457":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:41599:2926":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:15426:5620":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"11:2562:7576":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:22733:34021":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"14:165:20874":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:6230:6081":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:5541:5959":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"21:6406:3208":{"crate_id":21,"path":["rustix","fs","fd","Timestamps"],"kind":"struct"},"16:6908:6188":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:12557:4849":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:43378:3676":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:12494:5017":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"21:3943:3198":{"crate_id":21,"path":["rustix","backend","fs","types","Advice"],"kind":"enum"},"6:5152:8108":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:40814:6819":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:3049:2892":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:640:7057":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:44053:6875":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:14091:5257":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10251:4679":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"21:3545:4601":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"17:14372:5316":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"21:6871:3209":{"crate_id":21,"path":["rustix","ugid","Uid"],"kind":"struct"},"22:4325:4429":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_4"],"kind":"struct"},"2:32912:3913":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:42332:6731":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:256:4684":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:8253:2826":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:10646:7160":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"5:4267:2795":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:5726:5983":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:45005:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:11702:4912":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:7523:5916":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:12059:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:1501:7625":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:48553:7042":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:7209:31535":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"21:1823:26073":{"crate_id":21,"path":["rustix","ioctl","patterns","CompileTimeOpcode"],"kind":"trait"},"16:5846:5998":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:5120:7075":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:48247:7029":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"18:538:4636":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"21:4377:3207":{"crate_id":21,"path":["rustix","backend","fs","types","StatxFlags"],"kind":"struct"},"17:13538:5154":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"18:581:3383":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:42937:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"21:2924:4601":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"1:8892:3516":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"22:3918:4304":{"crate_id":22,"path":["linux_raw_sys","general","epoll_event"],"kind":"struct"},"16:5696:5977":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:2789:5894":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:40879:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"22:4057:4337":{"crate_id":22,"path":["linux_raw_sys","general","files_stat_struct"],"kind":"struct"},"17:15249:5571":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:548:4363":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:44198:6888":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:4772:9656":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:9886:21865":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:8360:2799":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:11335:7084":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:1903:6464":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:4578:7889":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:5897:21799":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:22755:6781":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:44513:6898":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"21:6606:2294":{"crate_id":21,"path":["rustix","fs","seek_from","SeekFrom"],"kind":"enum"},"21:5051:4601":{"crate_id":21,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"2:43835:6738":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4455:7829":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:41091:6829":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:4097:3186":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"10:36:7578":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:475:7590":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:41167:2958":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:44798:6912":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:11865:4935":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4939:1112":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"11:1142:6458":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"22:4140:4368":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_timespec"],"kind":"struct"},"17:11153:4830":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:32882:2973":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:12061:1548":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:13292:5107":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:10888:6741":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:12068:803":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:46721:6960":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:3012:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"22:4659:3213":{"crate_id":22,"path":["linux_raw_sys","general","stat"],"kind":"struct"},"22:4884:27057":{"crate_id":22,"path":["linux_raw_sys","general","membarrier_cmd_flag"],"kind":"enum"},"17:13766:5209":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:15266:5578":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:6610:6142":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:10068:21852":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:3622:6460":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:5450:3506":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:1425:2795":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:5630:5972":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:10219:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:46445:6946":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:44846:6921":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"11:1566:20869":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4776:7941":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:7622:8398":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:10688:7162":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:6282:6087":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:11016:4841":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"7:0:1697":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:4761:5945":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:22477:9787":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:7270:6009":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"11:430:37381":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:12060:1515":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:11730:4915":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"21:6213:4621":{"crate_id":21,"path":["rustix","backend","mount","types","InternalMountFlags"],"kind":"struct"},"2:2961:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:1590:6464":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:4937:5951":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"21:4784:3206":{"crate_id":21,"path":["rustix","backend","fs","types","StatVfsMountFlags"],"kind":"struct"},"1:7453:31686":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:1703:7748":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:3017:2873":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:12422:5008":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:22348:15087":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:4638:9674":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:1388:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"21:1782:4598":{"crate_id":21,"path":["rustix","ioctl","patterns","Setter"],"kind":"struct"},"1:11407:8534":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:6376:6092":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:8012:6350":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"20:0:2045":{"crate_id":20,"path":["cfg_if"],"kind":"module"},"2:42114:6726":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:2420:2754":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:7982:7100":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:2724:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:10828:37403":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:42623:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:10709:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"16:7653:6294":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:489:4379":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"18:113:26046":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"21:3131:4601":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"2:34800:2883":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"18:491:4628":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6254:6084":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:7598:8394":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"11:2124:6191":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:7371:4406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:13399:5125":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:4601:3365":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:6579:21803":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:32825:244":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:4987:34946":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:13437:5129":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4830:7960":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:3010:233":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"5:886:4106":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"11:0:2601":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"22:4642:4516":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_continue"],"kind":"struct"},"2:43081:3679":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:14449:5335":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:10710:4828":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:7319:6561":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"22:4742:4556":{"crate_id":22,"path":["linux_raw_sys","general","compat_statfs64"],"kind":"struct"},"21:6826:4595":{"crate_id":21,"path":["rustix","ioctl","Opcode"],"kind":"struct"},"17:11755:4919":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:12078:1707":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:8295:7109":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11467:4883":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11595:4902":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:7998:5919":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"22:3972:7453":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_key_specifier"],"kind":"struct"},"17:11324:4871":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:6030:6035":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4434:7821":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:2959:3909":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:22:739":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:7740:7092":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:5038:5954":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"22:3842:4288":{"crate_id":22,"path":["linux_raw_sys","general","vfs_cap_data"],"kind":"struct"},"2:46529:6949":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"11:2542:7573":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"22:4353:4437":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"2:12789:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:4708:4539":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:11063:4847":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:10185:4677":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:5616:5969":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:5701:4193":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:4462:5936":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:44522:6899":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:1929:1892":{"crate_id":1,"path":["std","error"],"kind":"module"},"2:40727:6811":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:4914:4320":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:4805:14923":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"18:726:4671":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:12106:14867":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:5278:5956":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:14051:5252":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:42740:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"22:3766:4277":{"crate_id":22,"path":["linux_raw_sys","general","__BindgenBitfieldUnit"],"kind":"struct"},"21:5248:4601":{"crate_id":21,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"6:1604:7684":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:4111:3369":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:3044:2891":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:39296:2889":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"22:4944:7507":{"crate_id":22,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1"],"kind":"union"},"2:31011:3540":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:9026:7137":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:7537:5917":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:43584:6860":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"22:4548:7484":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:48393:7032":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:3232:6466":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:2666:4169":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:7388:8393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:6889:8357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"18:515:4626":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:12069:804":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:7429:37396":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:4428:4380":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:46894:6966":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:1632:7709":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11443:4882":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"18:698:4662":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:10008:3687":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:42584:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:21693:9705":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:13922:5235":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:43984:6871":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:31601:3383":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:1271:6191":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:10905:4832":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:4955:8013":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:9198:7148":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"6:6263:8285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:2795:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"}},"external_crates":{"23":{"name":"bitflags","html_root_url":null},"20":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"linux_raw_sys","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"fastrand","html_root_url":null},"21":{"name":"rustix","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}