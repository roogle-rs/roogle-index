{"root":"0:0:1878","crate_version":"3.8.1","includes_private":false,"index":{"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[547,0],"end":[650,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2201:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:164:1029","0:165:2166","0:167:2221","0:169:2226"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:393:1744":{"id":"0:393:1744","crate_id":0,"name":"0","span":{"filename":"src/spooled.rs","begin":[8,13],"end":[8,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"std::io::Cursor","id":"1:7932:2519","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:6949:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}}}}},"b:2:2616-0:399:1885":{"id":"b:2:2616-0:399:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2619:134","2:2620:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:101:1878":{"id":"0:101:1878","crate_id":0,"name":"tempfile","span":{"filename":"src/file/mod.rs","begin":[60,0],"end":[62,1]},"visibility":"public","docs":"Create a new temporary file.\n\nThe file will be created in the location returned by [`std::env::temp_dir()`].\n\n# Security\n\nThis variant is secure/reliable in the presence of a pathological temporary file cleaner.\n\n# Resource Leaking\n\nThe temporary file will be automatically removed by the OS when the last handle to it is closed.\nThis doesn't rely on Rust destructors being run, so will (almost) never fail to clean up the temporary file.\n\n# Errors\n\nIf the file can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempfile;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a file inside of `std::env::temp_dir()`.\nlet mut file = tempfile()?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2201:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12743:7206":{"id":"2:12743:7206","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12034:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43821:7198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2815:243-0:385:1881":{"id":"a:2:2815:243-0:385:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2300-0:385:1881":{"id":"b:2:2300-0:385:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2302:2676"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[128,0],"end":[132,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9841:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:109:712"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[515,0],"end":[519,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9836:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:150:712"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:427":{"id":"0:427","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,27],"end":[194,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2825:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:385:1881":{"id":"0:385:1881","crate_id":0,"name":"PathPersistError","span":{"filename":"src/file/mod.rs","begin":[107,0],"end":[112,1]},"visibility":"public","docs":"Error returned when persisting a temporary file path fails.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:386:1872","0:387:1131"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:8878:9479-0:385:1881","a:2:8879:9570-0:385:1881","a:2:2872:2949-0:385:1881","a:2:2832:253-0:385:1881","a:2:2815:243-0:385:1881","b:2:2300-0:385:1881","b:2:2616-0:385:1881","b:2:2606-0:385:1881","b:2:3450-0:385:1881","b:2:2610-0:385:1881","b:2:2621-0:385:1881","b:2:2303-0:385:1881","b:5:5799-0:385:1881","0:110","0:108","0:106","0:388","0:104"]}}},"2:12814:35616":{"id":"2:12814:35616","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:36282":{"id":"5:5526:36282","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2209","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2209","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:217:2505":{"id":"0:217:2505","crate_id":0,"name":"flush","span":{"filename":"src/file/mod.rs","begin":[1017,4],"end":[1019,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1879":{"id":"0:102:1879","crate_id":0,"name":"tempfile_in","span":{"filename":"src/file/mod.rs","begin":[101,0],"end":[103,1]},"visibility":"public","docs":"Create a new temporary file in the specified directory.\n\n# Security\n\nThis variant is secure/reliable in the presence of a pathological temporary file cleaner.\nIf the temporary file isn't created in [`std::env::temp_dir()`] then temporary file cleaners aren't an issue.\n\n# Resource Leaking\n\nThe temporary file will be automatically removed by the OS when the last handle to it is closed.\nThis doesn't rely on Rust destructors being run, so will (almost) never fail to clean up the temporary file.\n\n# Errors\n\nIf the file can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempfile_in;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a file inside of the current working directory\nlet mut file = tempfile_in(\"./\")?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2201:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::path::Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3452:1625":{"id":"2:3452:1625","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39691:4350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2606-0:28:1877":{"id":"b:2:2606-0:28:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:2252"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2832:253-0:112:1883":{"id":"a:2:2832:253-0:112:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2606-0:144:1882":{"id":"b:2:2606-0:144:1882","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2609:2252"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2606-0:399:1885":{"id":"b:2:2606-0:399:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:2252"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8878:9479-0:134:1880":{"id":"a:2:8878:9479-0:134:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8878:9479","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8878:9479","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12804:35611":{"id":"2:12804:35611","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12415:3118","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::match_indices":"2:12801:35610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44019:7335","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12771:28686":{"id":"2:12771:28686","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3118"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12231:7185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273:2503":{"id":"0:273:2503","crate_id":0,"name":"read_to_string","span":{"filename":"src/spooled.rs","begin":[140,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:36284":{"id":"5:5533:36284","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:332:2015":{"id":"0:332:2015","crate_id":0,"name":"make","span":{"filename":"src/lib.rs","begin":[654,4],"end":[659,5]},"visibility":"public","docs":"Attempts to create a temporary file (or file-like object) using the\nprovided closure. The closure is passed a temporary file path and\nreturns an [`std::io::Result`]. The path provided to the closure will be\ninside of [`std::env::temp_dir()`]. Use [`Builder::make_in`] to provide\na custom temporary directory. If the closure returns one of the\nfollowing errors, then another randomized file path is tried:\n - [`std::io::ErrorKind::AlreadyExists`]\n - [`std::io::ErrorKind::AddrInUse`]\n\nThis can be helpful for taking full control over the file creation, but\nleaving the temporary file path construction up to the library. This\nalso enables creating a temporary UNIX domain socket, since it is not\npossible to bind to a socket that already exists.\n\nNote that [`Builder::append`] is ignored when using [`Builder::make`].\n\n# Security\n\nThis has the same [security implications][security] as\n[`NamedTempFile`], but with additional caveats. Specifically, it is up\nto the closure to ensure that the file does not exist and that such a\ncheck is *atomic*. Otherwise, a [time-of-check to time-of-use\nbug][TOCTOU] could be introduced.\n\nFor example, the following is **not** secure:\n\n```\n# use std::io;\n# use std::fs::File;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n// This is NOT secure!\nlet tempfile = Builder::new().make(|path| {\n    if path.is_file() {\n        return Err(io::ErrorKind::AlreadyExists.into());\n    }\n\n    // Between the check above and the usage below, an attacker could\n    // have replaced `path` with another file, which would get truncated\n    // by `File::create`.\n\n    File::create(path)\n})?;\n# Ok(())\n# }\n```\nNote that simply using [`std::fs::File::create`] alone is not correct\nbecause it does not fail if the file already exists:\n```\n# use std::io;\n# use std::fs::File;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n// This could overwrite an existing file!\nlet tempfile = Builder::new().make(|path| File::create(path))?;\n# Ok(())\n# }\n```\nFor creating regular temporary files, use [`Builder::tempfile`] instead\nto avoid these problems. This function is meant to enable more exotic\nuse-cases.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `NamedTempFile`.\n\n# Errors\n\nIf the closure returns any error besides\n[`std::io::ErrorKind::AlreadyExists`] or\n[`std::io::ErrorKind::AddrInUse`], then `Err` is returned.\n\n# Examples\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n# #[cfg(unix)]\nuse std::os::unix::net::UnixListener;\n# #[cfg(unix)]\nlet tempsock = Builder::new().make(|path| UnixListener::bind(path))?;\n# Ok(())\n# }\n```\n\n[TOCTOU]: https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use\n[security]: struct.NamedTempFile.html#security\n[resource-leaking]: struct.NamedTempFile.html#resource-leaking","links":{"`NamedTempFile`":"0:134:1880","`std::io::ErrorKind::AlreadyExists`":"1:8037:2575","`Builder::make_in`":"0:335:2018","`Builder::tempfile`":"0:325:1878","`Builder::append`":"0:324:1893","`std::fs::File::create`":"1:2221:1971","`std::io::ErrorKind::AddrInUse`":"1:8029:2576","`std::io::Result`":"1:2946:232","`Builder::make`":"0:332:2015","`std::env::temp_dir()`":"1:1818:1946"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3080:138","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12730:28653":{"id":"2:12730:28653","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12051:1634"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2625:1610":{"id":"2:2625:1610","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42074:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2606-0:385:1881":{"id":"b:2:2606-0:385:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:2252"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:685:3435":{"id":"5:685:3435","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2872:2949-0:399:1885":{"id":"a:2:2872:2949-0:399:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2872:2949","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5527:2250":{"id":"5:5527:2250","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114":{"id":"0:114","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[150,0],"end":[372,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:115:2264","0:117:2335","0:119:2346","0:121:2352","0:122:2024"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:271:2499":{"id":"0:271:2499","crate_id":0,"name":"read_vectored","span":{"filename":"src/spooled.rs","begin":[126,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"io::IoSliceMut","id":"1:3445:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12746:33680":{"id":"2:12746:33680","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12747:33697"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44125:7339","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:267:2554":{"id":"0:267:2554","crate_id":0,"name":"set_len","span":{"filename":"src/spooled.rs","begin":[98,4],"end":[109,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["size",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Result","id":"2:42074:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"io::Error","id":"1:2948:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:345:1652":{"id":"0:345:1652","crate_id":0,"name":"unix","span":{"filename":"src/file/imp/unix.rs","begin":[1,0],"end":[149,1]},"visibility":{"restricted":{"parent":"0:100:2288","path":"::file::imp"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":true}}},"b:2:2606-0:112:1883":{"id":"b:2:2606-0:112:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:2252"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12795:2559":{"id":"2:12795:2559","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12415:3118","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::rmatches":"2:12798:35609"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44055:7336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238:2511":{"id":"0:238:2511","crate_id":0,"name":"seek","span":{"filename":"src/file/mod.rs","begin":[1065,4],"end":[1067,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"1:8170:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12801:35610":{"id":"2:12801:35610","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12415:3118","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::rmatch_indices":"2:12804:35611"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44001:7334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8879:9570-0:112:1883":{"id":"a:2:8879:9570-0:112:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8879:9570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:25:1875":{"id":"0:25:1875","crate_id":0,"name":"tempdir","span":{"filename":"src/dir.rs","begin":[65,0],"end":[67,1]},"visibility":"public","docs":"Create a new temporary directory.\n\nThe `tempdir` function creates a directory in the file system\nand returns a [`TempDir`].\nThe directory will be automatically deleted when the `TempDir`s\ndestructor is run.\n\n# Resource Leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempdir;\nuse std::fs::File;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`\nlet tmp_dir = tempdir()?;\n\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// `tmp_dir` goes out of scope, the directory as well as\n// `tmp_file` will be deleted here.\ndrop(tmp_file);\ntmp_dir.close()?;\n# Ok(())\n# }\n```\n\n[`TempDir`]: struct.TempDir.html\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3450-0:385:1881":{"id":"b:2:3450-0:385:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3452:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:125":{"id":"0:125","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[380,0],"end":[384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3073:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:126:629"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:194:2499":{"id":"0:194:2499","crate_id":0,"name":"read_vectored","span":{"filename":"src/file/mod.rs","begin":[959,4],"end":[963,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"io::IoSliceMut","id":"1:3445:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[500,0],"end":[505,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:143:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2300-0:144:1882":{"id":"b:2:2300-0:144:1882","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2302:2676"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:264:1029":{"id":"0:264:1029","crate_id":0,"name":"new","span":{"filename":"src/spooled.rs","begin":[68,4],"end":[73,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:306-0:144:1882":{"id":"0:306-0:144:1882","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,60],"end":[189,72]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::PersistError","name":"PersistError","id":"0:144:1882","glob":false}}},"a:2:2815:243-0:405:1887":{"id":"a:2:2815:243-0:405:1887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2300-0:405:1887":{"id":"b:2:2300-0:405:1887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2302:2676"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:682-0:405:1887":{"id":"b:5:682-0:405:1887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2316:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["5:684:3434","5:685:3435","5:686:3436"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:266:2549":{"id":"0:266:2549","crate_id":0,"name":"roll","span":{"filename":"src/spooled.rs","begin":[86,4],"end":[96,5]},"visibility":"public","docs":"Rolls over to a file on disk, regardless of current size. Does nothing\nif already rolled over.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:180:2352":{"id":"0:180:2352","crate_id":0,"name":"keep","span":{"filename":"src/file/mod.rs","begin":[859,4],"end":[868,5]},"visibility":"public","docs":"Keep the temporary file from being deleted. This function will turn the\ntemporary file into a non-temporary file without moving it.\n\n\n# Errors\n\nOn some platforms (e.g., Windows), we need to mark the file as\nnon-temporary. This operation could fail.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet (file, path) = file.keep()?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42074:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"F"},{"resolved_path":{"name":"PathBuf","id":"1:5130:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}},{"type":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:277:2506":{"id":"0:277:2506","crate_id":0,"name":"write_vectored","span":{"filename":"src/spooled.rs","begin":[172,4],"end":[185,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"io::IoSlice","id":"1:8158:2507","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12731:28650":{"id":"2:12731:28650","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41931:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12739:35604":{"id":"2:12739:35604","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12040:1529","str::slice_mut_unchecked":"2:12740:35605","crate::ops::Index":"2:3112:2870"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12786:28692":{"id":"2:12786:28692","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12034:448","str::splitn":"2:12783:28690","self::pattern":"2:12415:3118"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43973:7191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:1880":{"id":"0:134:1880","crate_id":0,"name":"NamedTempFile","span":{"filename":"src/file/mod.rs","begin":[489,0],"end":[492,1]},"visibility":"public","docs":"A named temporary file.\n\nThe default constructor, [`NamedTempFile::new()`], creates files in\nthe location returned by [`std::env::temp_dir()`], but `NamedTempFile`\ncan be configured to manage a temporary file in any location\nby constructing with [`NamedTempFile::new_in()`].\n\n# Security\n\nMost operating systems employ temporary file cleaners to delete old\ntemporary files. Unfortunately these temporary file cleaners don't always\nreliably _detect_ whether the temporary file is still being used.\n\nSpecifically, the following sequence of events can happen:\n\n1. A user creates a temporary file with `NamedTempFile::new()`.\n2. Time passes.\n3. The temporary file cleaner deletes (unlinks) the temporary file from the\n   filesystem.\n4. Some other program creates a new file to replace this deleted temporary\n   file.\n5. The user tries to re-open the temporary file (in the same program or in a\n   different program) by path. Unfortunately, they'll end up opening the\n   file created by the other program, not the original file.\n\n## Operating System Specific Concerns\n\nThe behavior of temporary files and temporary file cleaners differ by\noperating system.\n\n### Windows\n\nOn Windows, open files _can't_ be deleted. This removes most of the concerns\naround temporary file cleaners.\n\nFurthermore, temporary files are, by default, created in per-user temporary\nfile directories so only an application running as the same user would be\nable to interfere (which they could do anyways). However, an application\nrunning as the same user can still _accidentally_ re-create deleted\ntemporary files if the number of random bytes in the temporary file name is\ntoo small.\n\nSo, the only real concern on Windows is:\n\n1. Opening a named temporary file in a world-writable directory.\n2. Using the `into_temp_path()` and/or `into_parts()` APIs to close the file\n   handle without deleting the underlying file.\n3. Continuing to use the file by path.\n\n### UNIX\n\nUnlike on Windows, UNIX (and UNIX like) systems allow open files to be\n\"unlinked\" (deleted).\n\n#### MacOS\n\nLike on Windows, temporary files are created in per-user temporary file\ndirectories by default so calling `NamedTempFile::new()` should be\nrelatively safe.\n\n#### Linux\n\nUnfortunately, most _Linux_ distributions don't create per-user temporary\nfile directories. Worse, systemd's tmpfiles daemon (a common temporary file\ncleaner) will happily remove open temporary files if they haven't been\nmodified within the last 10 days.\n\n# Resource Leaking\n\nIf the program exits before the `NamedTempFile` destructor is\nrun, the temporary file will not be deleted. This can happen\nif the process exits using [`std::process::exit()`], a segfault occurs,\nreceiving an interrupt signal like `SIGINT` that is not handled, or by using\na statically declared `NamedTempFile` instance (like with [`lazy_static`]).\n\nUse the [`tempfile()`] function unless you need a named file path.\n\n[`tempfile()`]: fn.tempfile.html\n[`NamedTempFile::new()`]: #method.new\n[`NamedTempFile::new_in()`]: #method.new_in\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html\n[`std::process::exit()`]: http://doc.rust-lang.org/std/process/fn.exit.html\n[`lazy_static`]: https://github.com/rust-lang-nursery/lazy-static.rs/issues/62","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"std::fs::File","id":"1:2201:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:163","0:172","0:187","a:2:8878:9479-0:134:1880","a:2:8879:9570-0:134:1880","a:2:2872:2949-0:134:1880","a:2:2832:253-0:134:1880","a:2:2815:243-0:134:1880","b:2:2300-0:134:1880","b:2:2616-0:134:1880","b:2:2606-0:134:1880","b:2:3450-0:134:1880","b:2:2610-0:134:1880","b:2:2621-0:134:1880","b:2:2303-0:134:1880","0:240","0:202","0:236","0:154","0:138","0:225","0:213","0:190","0:243","0:246","0:141"]}}},"0:423":{"id":"0:423","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,23],"end":[194,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2369:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2303-0:144:1882":{"id":"b:2:2303-0:144:1882","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2305:28227"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:270:2497":{"id":"0:270:2497","crate_id":0,"name":"read","span":{"filename":"src/spooled.rs","begin":[119,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:419:452":{"id":"0:419:452","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[194,16],"end":[194,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12824:28697":{"id":"2:12824:28697","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3118"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2303-0:112:1883":{"id":"b:2:2303-0:112:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2305:28227"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2612:739":{"id":"2:2612:739","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127":{"id":"0:127","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[386,0],"end":[392,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3049:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:128:255","0:129:591"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8878:9479-0:112:1883":{"id":"a:2:8878:9479-0:112:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8878:9479","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3450-0:399:1885":{"id":"b:2:3450-0:399:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3452:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:405:1887":{"id":"0:405:1887","crate_id":0,"name":"Builder","span":{"filename":"src/lib.rs","begin":[195,0],"end":[200,1]},"visibility":"public","docs":"Create a new temporary file or directory with custom parameters.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:315","a:2:8878:9479-0:405:1887","a:2:8879:9570-0:405:1887","a:2:2872:2949-0:405:1887","a:2:2832:253-0:405:1887","a:2:2815:243-0:405:1887","b:2:2300-0:405:1887","b:2:2616-0:405:1887","b:2:2606-0:405:1887","b:2:3450-0:405:1887","b:2:2610-0:405:1887","b:2:2621-0:405:1887","b:2:2303-0:405:1887","b:5:682-0:405:1887","0:311","0:427","0:416","0:430","0:423","0:420","0:412"]}}},"a:2:2815:243-0:28:1877":{"id":"a:2:2815:243-0:28:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:48:629":{"id":"0:48:629","crate_id":0,"name":"drop","span":{"filename":"src/dir.rs","begin":[466,4],"end":[468,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/dir.rs","begin":[465,0],"end":[469,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3073:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:48:629"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2616-0:385:1881":{"id":"b:2:2616-0:385:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2619:134","2:2620:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:207:2502":{"id":"0:207:2502","crate_id":0,"name":"read_to_end","span":{"filename":"src/file/mod.rs","begin":[995,4],"end":[999,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"5:6949:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[535,0],"end":[539,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9841:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:159:712"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12719:867":{"id":"2:12719:867","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12034:448"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1012,0],"end":[1038,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"1:3484:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_fmt","write_vectored","write_all_vectored","write_all","is_write_vectored","by_ref"],"trait":{"name":"Write","id":"1:3484:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:215:2271","0:217:2505","0:219:2506","0:221:2508","0:223:2509"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12733:2555":{"id":"2:12733:2555","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41931:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:686:3436":{"id":"5:686:3436","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12818:35618":{"id":"2:12818:35618","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3118"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[66,0],"end":[116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:264:1029","0:265:2546","0:266:2549","0:267:2554","0:268:2558"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:403:712":{"id":"0:403:712","crate_id":0,"name":"fmt","span":{"filename":"src/spooled.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9811:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9792:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12747:33697":{"id":"2:12747:33697","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12746:33680"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44134:7340","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12768:28684":{"id":"2:12768:28684","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12415:3118","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::split_whitespace":"2:12746:33680","str::rsplit":"2:12774:28688"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43851:2810","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[494,0],"end":[498,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9836:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:140:712"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12777:35607":{"id":"2:12777:35607","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12415:3118","str::split":"2:12768:28684","prim@char":"1:12034:448","`DoubleEndedIterator`":"2:7785:127","str::rsplit_terminator":"2:12780:35608"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43901:7332","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12839:29840":{"id":"2:12839:29840","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39878:28602","Self::is_ascii":"2:12838:29839"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39878:28602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314:60":{"id":"0:314:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[203,4],"end":[210,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3450-0:134:1880":{"id":"b:2:3450-0:134:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3452:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2610-0:399:1885":{"id":"b:2:2610-0:399:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:41:2264":{"id":"0:41:2264","crate_id":0,"name":"close","span":{"filename":"src/dir.rs","begin":[437,4],"end":[448,5]},"visibility":"public","docs":"Closes and removes the temporary directory, returning a `Result`.\n\nAlthough `TempDir` removes the directory on drop, in the destructor\nany errors are ignored. To detect errors cleaning up the temporary\ndirectory, call `close` instead.\n\n# Errors\n\nThis function may return a variety of [`std::io::Error`]s that result from deleting\nthe files and directories contained with the temporary directory,\nas well as from deleting the temporary directory itself. These errors\nmay be platform specific.\n\n[`std::io::Error`]: http://doc.rust-lang.org/std/io/struct.Error.html\n\n# Examples\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`.\nlet tmp_dir = TempDir::new()?;\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// By closing the `TempDir` explicitly we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the directory will still be deleted when `tmp_dir` goes out\n// of scope, but we won't know whether deleting the directory\n// succeeded.\ndrop(tmp_file);\ntmp_dir.close()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1029":{"id":"0:31:1029","crate_id":0,"name":"new","span":{"filename":"src/dir.rs","begin":[235,4],"end":[237,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `env::temp_dir()`.\n\nSee [`Builder`] for more configuration.\n\nThe directory and everything inside it will be automatically deleted\nonce the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`\nlet tmp_dir = TempDir::new()?;\n\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// `tmp_dir` goes out of scope, the directory as well as\n// `tmp_file` will be deleted here.\n# Ok(())\n# }\n```\n\n[`Builder`]: struct.Builder.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164:1029":{"id":"0:164:1029","crate_id":0,"name":"new","span":{"filename":"src/file/mod.rs","begin":[605,4],"end":[607,5]},"visibility":"public","docs":"Create a new named temporary file.\n\nSee [`Builder`] for more configuration.\n\n# Security\n\nThis will create a temporary file in the default temporary file\ndirectory (platform dependent). This has security implications on many\nplatforms so please read the security section of this type's\ndocumentation.\n\nReasons to use this method:\n\n  1. The file has a short lifetime and your temporary file cleaner is\n     sane (doesn't delete recently accessed files).\n\n  2. You trust every user on your system (i.e. you are the only user).\n\n  3. You have disabled your system's temporary file cleaner or verified\n     that your system doesn't have a temporary file cleaner.\n\nReasons not to use this method:\n\n  1. You'll fix it later. No you won't.\n\n  2. You don't care about the security of the temporary file. If none of\n     the \"reasons to use this method\" apply, referring to a temporary\n     file by name may allow an attacker to create/overwrite your\n     non-temporary files. There are exceptions but if you don't already\n     know them, don't use this method.\n\n# Errors\n\nIf the file can not be created, `Err` is returned.\n\n# Examples\n\nCreate a named temporary file and write some data to it:\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), ::std::io::Error> {\nlet mut file = NamedTempFile::new()?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`Builder`]: struct.Builder.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2610-0:134:1880":{"id":"b:2:2610-0:134:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2610-0:144:1882":{"id":"b:2:2610-0:144:1882","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:246":{"id":"0:246","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1084,0],"end":[1089,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(any(unix, target_os = \"wasi\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRawFd","id":"1:4742:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:4742:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:248:2514"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2621-0:144:1882":{"id":"b:2:2621-0:144:1882","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2624:134","2:2625:1610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2832:253-0:144:1882":{"id":"a:2:2832:253-0:144:1882","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:262:1884":{"id":"0:262:1884","crate_id":0,"name":"spooled_tempfile","span":{"filename":"src/spooled.rs","begin":[62,0],"end":[64,1]},"visibility":"public","docs":"Create a new spooled temporary file.\n\n# Security\n\nThis variant is secure/reliable in the presence of a pathological temporary\nfile cleaner.\n\n# Resource Leaking\n\nThe temporary file will be automatically removed by the OS when the last\nhandle to it is closed. This doesn't rely on Rust destructors being run, so\nwill (almost) never fail to clean up the temporary file.\n\n# Examples\n\n```\nuse tempfile::spooled_tempfile;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = spooled_tempfile(15);\n\nwriteln!(file, \"short line\")?;\nassert!(!file.is_rolled());\n\n// as a result of this write call, the size of the data will exceed\n// `max_size` (15), so it will be written to a temporary file on disk,\n// and the in-memory buffer will be dropped\nwriteln!(file, \"marvin gardens\")?;\nassert!(file.is_rolled());\n\n# Ok(())\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:2497":{"id":"0:192:2497","crate_id":0,"name":"read","span":{"filename":"src/file/mod.rs","begin":[955,4],"end":[957,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5801:1587":{"id":"5:5801:1587","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2610-0:28:1877":{"id":"b:2:2610-0:28:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8878:9479-0:28:1877":{"id":"a:2:8878:9479-0:28:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8878:9479","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2303-0:399:1885":{"id":"b:2:2303-0:399:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2305:28227"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:280:2511":{"id":"0:280:2511","crate_id":0,"name":"seek","span":{"filename":"src/spooled.rs","begin":[197,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"1:8170:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[196,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["seek_relative","rewind","stream_position","stream_len"],"trait":{"name":"Seek","id":"1:3502:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:280:2511"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2624:134":{"id":"2:2624:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32351:3490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:275":{"id":"0:275","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[155,0],"end":[194,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_fmt","write_vectored","write_all_vectored","write_all","is_write_vectored","by_ref"],"trait":{"name":"Write","id":"1:3484:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:276:2271","0:277:2506","0:278:2505"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12742:28677":{"id":"2:12742:28677","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12741:28676"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:399:1885":{"id":"0:399:1885","crate_id":0,"name":"SpooledTempFile","span":{"filename":"src/spooled.rs","begin":[17,0],"end":[20,1]},"visibility":"public","docs":"An object that behaves like a regular temporary file, but keeps data in\nmemory until it reaches a configured size, at which point the data is\nwritten to a temporary file on disk, and further operations use the file\non disk.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:263","a:2:8878:9479-0:399:1885","a:2:8879:9570-0:399:1885","a:2:2872:2949-0:399:1885","a:2:2832:253-0:399:1885","a:2:2815:243-0:399:1885","b:2:2300-0:399:1885","b:2:2616-0:399:1885","b:2:2606-0:399:1885","b:2:3450-0:399:1885","b:2:2610-0:399:1885","b:2:2621-0:399:1885","b:2:2303-0:399:1885","0:402","0:275","0:269","0:279"]}}},"0:219:2506":{"id":"0:219:2506","crate_id":0,"name":"write_vectored","span":{"filename":"src/file/mod.rs","begin":[1021,4],"end":[1025,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"io::IoSlice","id":"1:8158:2507","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2300-0:399:1885":{"id":"b:2:2300-0:399:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2302:2676"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2832:253-0:28:1877":{"id":"a:2:2832:253-0:28:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:326:1879":{"id":"0:326:1879","crate_id":0,"name":"tempfile_in","span":{"filename":"src/lib.rs","begin":[470,4],"end":[478,5]},"visibility":"public","docs":"Create the named temporary file in the specified directory.\n\n# Security\n\nSee [the security][security] docs on `NamedTempFile`.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `NamedTempFile`.\n\n# Errors\n\nIf the file cannot be created, `Err` is returned.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet tempfile = Builder::new().tempfile_in(\"./\")?;\n# Ok(())\n# }\n```\n\n[security]: struct.NamedTempFile.html#security\n[resource-leaking]: struct.NamedTempFile.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172":{"id":"0:172","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[652,0],"end":[910,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:174:1131","0:175:2264","0:176:2335","0:178:2346","0:180:2352","0:181:2469","0:182:2471","0:183:2474","0:184:2478","0:185:2482","0:186:2023"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:325:1878":{"id":"0:325:1878","crate_id":0,"name":"tempfile","span":{"filename":"src/lib.rs","begin":[434,4],"end":[436,5]},"visibility":"public","docs":"Create the named temporary file.\n\n# Security\n\nSee [the security][security] docs on `NamedTempFile`.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `NamedTempFile`.\n\n# Errors\n\nIf the file cannot be created, `Err` is returned.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet tempfile = Builder::new().tempfile()?;\n# Ok(())\n# }\n```\n\n[security]: struct.NamedTempFile.html#security\n[resource-leaking]: struct.NamedTempFile.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12815:35617":{"id":"2:12815:35617","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3118"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12440:14739","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:268:2558":{"id":"0:268:2558","crate_id":0,"name":"into_inner","span":{"filename":"src/spooled.rs","begin":[113,4],"end":[115,5]},"visibility":"public","docs":"Consumes and returns the inner `SpooledData` type.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"SpooledData","id":"0:390:2521","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:299-0:26:1876":{"id":"0:299-0:26:1876","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,30],"end":[187,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::dir::tempdir_in","name":"tempdir_in","id":"0:26:1876","glob":false}}},"0:186:2023":{"id":"0:186:2023","crate_id":0,"name":"from_parts","span":{"filename":"src/file/mod.rs","begin":[907,4],"end":[909,5]},"visibility":"public","docs":"Creates a `NamedTempFile` from its constituent parts.\n\nThis can be used with [`NamedTempFile::into_parts`] to reconstruct the\n`NamedTempFile`.","links":{"`NamedTempFile::into_parts`":"0:185:2482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["file",{"generic":"F"}],["path",{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:739":{"id":"0:153:739","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[523,4],"end":[525,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Error","id":"1:2948:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12838:29839":{"id":"2:12838:29839","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:2166":{"id":"0:32:2166","crate_id":0,"name":"new_in","span":{"filename":"src/dir.rs","begin":[264,4],"end":[266,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `dir`.\nThe directory and everything inside it will be automatically\ndeleted once the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory\nlet tmp_dir = TempDir::new_in(\".\")?;\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2616-0:28:1877":{"id":"b:2:2616-0:28:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2619:134","2:2620:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:234:2509":{"id":"0:234:2509","crate_id":0,"name":"write_fmt","span":{"filename":"src/file/mod.rs","begin":[1059,4],"end":[1061,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["fmt",{"resolved_path":{"name":"fmt::Arguments","id":"2:43026:2510","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:2482":{"id":"0:185:2482","crate_id":0,"name":"into_parts","span":{"filename":"src/file/mod.rs","begin":[899,4],"end":[901,5]},"visibility":"public","docs":"Converts the named temporary file into its constituent parts.\n\nNote: When the path is dropped, the file is deleted but the file handle\nis still usable.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"generic":"F"},{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:591":{"id":"0:129:591","crate_id":0,"name":"deref","span":{"filename":"src/file/mod.rs","begin":[389,4],"end":[391,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:319:1891":{"id":"0:319:1891","crate_id":0,"name":"prefix","span":{"filename":"src/lib.rs","begin":[318,4],"end":[321,5]},"visibility":"public","docs":"Set a custom filename prefix.\n\nPath separators are legal but not advisable.\nDefault: `.tmp`.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .prefix(\"my-temporary-note\")\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["prefix",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"S"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:1970:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12760:3415":{"id":"2:12760:3415","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41931:197","prim@char":"1:12034:448","self::pattern":"2:12415:3118"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12843:35623":{"id":"2:12843:35623","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4615:35623"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44150:7260","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:739":{"id":"0:105:739","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[116,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Error","id":"1:2948:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2303-0:134:1880":{"id":"b:2:2303-0:134:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2305:28227"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8878:9479-0:399:1885":{"id":"a:2:8878:9479-0:399:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8878:9479","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12809:35613":{"id":"2:12809:35613","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:2474":{"id":"0:183:2474","crate_id":0,"name":"into_file","span":{"filename":"src/file/mod.rs","begin":[883,4],"end":[885,5]},"visibility":"public","docs":"Convert the temporary file into a `std::fs::File`.\n\nThe inner file will be deleted.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"F"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12780:35608":{"id":"2:12780:35608","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12415:3118","str::split":"2:12768:28684","prim@char":"1:12034:448","str::split_terminator":"2:12777:35607"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43919:7333","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12841:29843":{"id":"2:12841:29843","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525":{"id":"5:5525","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5526:36282","5:5527:2250","5:5530:36283","5:5533:36284","5:5541:36285","5:5542:36286","5:5543:2833","5:5544:29974","5:5545:29975"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8878:9479-0:405:1887":{"id":"a:2:8878:9479-0:405:1887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8878:9479","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:122:2024":{"id":"0:122:2024","crate_id":0,"name":"from_path","span":{"filename":"src/file/mod.rs","begin":[367,4],"end":[371,5]},"visibility":"public","docs":"Create a new TempPath from an existing path. This can be done even if no\nfile exists at the given path.\n\nThis is mostly useful for interacting with libraries and external\ncomponents that provide files to be consumed or expect a path with no\nexisting file to be given.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"impl_trait":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5130:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<PathBuf>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5130:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12783:28690":{"id":"2:12783:28690","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3118","str::rsplitn":"2:12786:28692"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43955:7190","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8879:9570-0:405:1887":{"id":"a:2:8879:9570-0:405:1887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8879:9570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:241:2511":{"id":"0:241:2511","crate_id":0,"name":"seek","span":{"filename":"src/file/mod.rs","begin":[1071,4],"end":[1073,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"1:8170:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:310-0:399:1885":{"id":"0:310-0:399:1885","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[191,43],"end":[191,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::spooled::SpooledTempFile","name":"SpooledTempFile","id":"0:399:1885","glob":false}}},"a:2:8878:9479-0:144:1882":{"id":"a:2:8878:9479-0:144:1882","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"File","id":"1:2201:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8878:9479","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2610-0:405:1887":{"id":"b:2:2610-0:405:1887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12722:35601":{"id":"2:12722:35601","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167:2221":{"id":"0:167:2221","crate_id":0,"name":"with_prefix","span":{"filename":"src/file/mod.rs","begin":[629,4],"end":[631,5]},"visibility":"public","docs":"Create a new named temporary file with the specified filename prefix.\n\nSee [`NamedTempFile::new()`] for details.\n\n[`NamedTempFile::new()`]: #method.new","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:1970:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:387:1131":{"id":"0:387:1131","crate_id":0,"name":"path","span":{"filename":"src/file/mod.rs","begin":[111,4],"end":[111,22]},"visibility":"public","docs":"The temporary file path that couldn't be persisted.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[121,0],"end":[126,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:739"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:230:2506":{"id":"0:230:2506","crate_id":0,"name":"write_vectored","span":{"filename":"src/file/mod.rs","begin":[1049,4],"end":[1053,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"io::IoSlice","id":"1:8158:2507","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:121:2352":{"id":"0:121:2352","crate_id":0,"name":"keep","span":{"filename":"src/file/mod.rs","begin":[344,4],"end":[359,5]},"visibility":"public","docs":"Keep the temporary file from being deleted. This function will turn the\ntemporary file into a non-temporary file without moving it.\n\n\n# Errors\n\nOn some platforms (e.g., Windows), we need to mark the file as\nnon-temporary. This operation could fail.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet path = file.into_temp_path();\nlet path = path.keep()?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42074:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5130:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:390:2521":{"id":"0:390:2521","crate_id":0,"name":"SpooledData","span":{"filename":"src/spooled.rs","begin":[7,0],"end":[10,1]},"visibility":"public","docs":"A wrapper for the two states of a `SpooledTempFile`.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:391:2522","0:394:2523"],"impls":[]}}},"0:184:2478":{"id":"0:184:2478","crate_id":0,"name":"into_temp_path","span":{"filename":"src/file/mod.rs","begin":[891,4],"end":[893,5]},"visibility":"public","docs":"Closes the file, leaving only the temporary file path.\n\nThis is useful when another process must be able to open the temporary\nfile.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298-0:25:1875":{"id":"0:298-0:25:1875","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,21],"end":[187,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::dir::tempdir","name":"tempdir","id":"0:25:1875","glob":false}}},"2:12721:35600":{"id":"2:12721:35600","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5799-0:144:1882":{"id":"b:5:5799-0:144:1882","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9841:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5797:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["5:5801:1587"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:128:255":{"id":"0:128:255","crate_id":0,"name":"Target","span":{"filename":"src/file/mod.rs","begin":[387,4],"end":[387,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:274:2504":{"id":"0:274:2504","crate_id":0,"name":"read_exact","span":{"filename":"src/spooled.rs","begin":[147,4],"end":[152,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:272:2502":{"id":"0:272:2502","crate_id":0,"name":"read_to_end","span":{"filename":"src/spooled.rs","begin":[133,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"5:6949:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:228:2505":{"id":"0:228:2505","crate_id":0,"name":"flush","span":{"filename":"src/file/mod.rs","begin":[1045,4],"end":[1047,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12745:3820":{"id":"2:12745:3820","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43837:2809","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:2833":{"id":"5:5543:2833","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:300-0:28:1877":{"id":"0:300-0:28:1877","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,42],"end":[187,49]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::dir::TempDir","name":"TempDir","id":"0:28:1877","glob":false}}},"0:221:2508":{"id":"0:221:2508","crate_id":0,"name":"write_all","span":{"filename":"src/file/mod.rs","begin":[1027,4],"end":[1031,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[114,0],"end":[119,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"io::Error","id":"1:2948:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:105:739"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2303-0:385:1881":{"id":"b:2:2303-0:385:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2305:28227"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12827:35619":{"id":"2:12827:35619","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3118"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2621-0:399:1885":{"id":"b:2:2621-0:399:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:134","2:2625:1610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2300-0:28:1877":{"id":"b:2:2300-0:28:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2302:2676"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5530:36283":{"id":"5:5530:36283","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3450-0:144:1882":{"id":"b:2:3450-0:144:1882","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3452:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:303-0:102:1879":{"id":"0:303-0:102:1879","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,14],"end":[189,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::tempfile_in","name":"tempfile_in","id":"0:102:1879","glob":false}}},"2:12727:28603":{"id":"2:12727:28603","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11970:14742"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:240":{"id":"0:240","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1070,0],"end":[1074,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["seek_relative","rewind","stream_position","stream_len"],"trait":{"name":"Seek","id":"1:3502:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2201:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"items":["0:241:2511"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12792:28695":{"id":"2:12792:28695","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2606-0:405:1887":{"id":"b:2:2606-0:405:1887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2609:2252"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:215:2271":{"id":"0:215:2271","crate_id":0,"name":"write","span":{"filename":"src/file/mod.rs","begin":[1013,4],"end":[1015,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3450-0:28:1877":{"id":"b:2:3450-0:28:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3452:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:386:1872":{"id":"0:386:1872","crate_id":0,"name":"error","span":{"filename":"src/file/mod.rs","begin":[109,4],"end":[109,24]},"visibility":"public","docs":"The underlying IO error.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"io::Error","id":"1:2948:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:416":{"id":"0:416","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,16],"end":[194,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2316:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:419:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:389:712":{"id":"0:389:712","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[106,9],"end":[106,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9811:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9792:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:2346":{"id":"0:119:2346","crate_id":0,"name":"persist_noclobber","span":{"filename":"src/file/mod.rs","begin":[293,4],"end":[311,5]},"visibility":"public","docs":"Persist the temporary file at the target path if and only if no file exists there.\n\nIf a file exists at the target path, fail. If this method fails, it will\nreturn `self` in the resulting [`PathPersistError`].\n\nNote: Temporary files cannot be persisted across filesystems. Also Note:\nThis method is not atomic. It can leave the original link to the\ntemporary file behind.\n\n# Security\n\nOnly use this method if you're positive that a temporary file cleaner\nwon't have deleted your file. Otherwise, you might end up persisting an\nattacker controlled file.\n\n# Errors\n\nIf the file cannot be moved to the new location or a file already exists\nthere, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet path = file.into_temp_path();\npath.persist_noclobber(\"./saved_file.txt\")?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:42074:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:335:2018":{"id":"0:335:2018","crate_id":0,"name":"make_in","span":{"filename":"src/lib.rs","begin":[683,4],"end":[700,5]},"visibility":"public","docs":"This is the same as [`Builder::make`], except `dir` is used as the base\ndirectory for the temporary file path.\n\nSee [`Builder::make`] for more details and security implications.\n\n# Examples\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\n# #[cfg(unix)]\nuse std::os::unix::net::UnixListener;\n# #[cfg(unix)]\nlet tempsock = Builder::new().make_in(\"./\", |path| UnixListener::bind(path))?;\n# Ok(())\n# }\n```","links":{"`Builder::make`":"0:332:2015"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3080:138","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2610-0:385:1881":{"id":"b:2:2610-0:385:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:315":{"id":"0:315","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[213,0],"end":[701,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:318:1029","0:319:1891","0:321:1892","0:323:1931","0:324:1893","0:325:1878","0:326:1879","0:329:1875","0:330:1876","0:332:2015","0:335:2018"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12807:35612":{"id":"2:12807:35612","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:2503":{"id":"0:198:2503","crate_id":0,"name":"read_to_string","span":{"filename":"src/file/mod.rs","begin":[971,4],"end":[975,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8879:9570-0:385:1881":{"id":"a:2:8879:9570-0:385:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8879:9570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2621-0:405:1887":{"id":"b:2:2621-0:405:1887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2624:134","2:2625:1610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12774:28688":{"id":"2:12774:28688","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12415:3118","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::split":"2:12768:28684"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43869:7188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:1883":{"id":"0:112:1883","crate_id":0,"name":"TempPath","span":{"filename":"src/file/mod.rs","begin":[146,0],"end":[148,1]},"visibility":"public","docs":"A path to a named temporary file without an open file handle.\n\nThis is useful when the temporary file needs to be used by a child process,\nfor example.\n\nWhen dropped, the temporary file is deleted.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:114","a:2:8878:9479-0:112:1883","a:2:8879:9570-0:112:1883","a:2:2872:2949-0:112:1883","a:2:2832:253-0:112:1883","a:2:2815:243-0:112:1883","b:2:2300-0:112:1883","b:2:2616-0:112:1883","b:2:2606-0:112:1883","b:2:3450-0:112:1883","b:2:2610-0:112:1883","b:2:2621-0:112:1883","b:2:2303-0:112:1883","0:132","0:127","0:123","0:106","0:125","0:130"]}}},"2:12728:35603":{"id":"2:12728:35603","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:253-0:385:1881":{"id":"a:2:2832:253-0:385:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2872:2949-0:28:1877":{"id":"a:2:2872:2949-0:28:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2872:2949","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:324:1893":{"id":"0:324:1893","crate_id":0,"name":"append","span":{"filename":"src/lib.rs","begin":[397,4],"end":[400,5]},"visibility":"public","docs":"Set the file to be opened in append mode.\n\nDefault: `false`.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .append(true)\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["append",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:2221":{"id":"0:34:2221","crate_id":0,"name":"with_prefix","span":{"filename":"src/dir.rs","begin":[292,4],"end":[294,5]},"visibility":"public","docs":"Attempts to make a temporary directory with the specified prefix inside of\n`env::temp_dir()`. The directory and everything inside it will be automatically\ndeleted once the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory\nlet tmp_dir = TempDir::with_prefix(\"foo-\")?;\nlet tmp_name = tmp_dir.path().file_name().unwrap().to_str().unwrap();\nassert!(tmp_name.starts_with(\"foo-\"));\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:1970:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12735:28651":{"id":"2:12735:28651","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:302-0:101:1878":{"id":"0:302-0:101:1878","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,4],"end":[189,12]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::tempfile","name":"tempfile","id":"0:101:1878","glob":false}}},"0:321:1892":{"id":"0:321:1892","crate_id":0,"name":"suffix","span":{"filename":"src/lib.rs","begin":[345,4],"end":[348,5]},"visibility":"public","docs":"Set a custom filename suffix.\n\nPath separators are legal but not advisable.\nDefault: empty.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .suffix(\".txt\")\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["suffix",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"S"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:1970:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:2499":{"id":"0:205:2499","crate_id":0,"name":"read_vectored","span":{"filename":"src/file/mod.rs","begin":[989,4],"end":[993,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"io::IoSliceMut","id":"1:3445:2501","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:340":{"id":"0:143:340","crate_id":0,"name":"as_ref","span":{"filename":"src/file/mod.rs","begin":[502,4],"end":[504,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:1876":{"id":"0:26:1876","crate_id":0,"name":"tempdir_in","span":{"filename":"src/dir.rs","begin":[114,0],"end":[116,1]},"visibility":"public","docs":"Create a new temporary directory in a specific directory.\n\nThe `tempdir_in` function creates a directory in the specified directory\nand returns a [`TempDir`].\nThe directory will be automatically deleted when the `TempDir`s\ndestructor is run.\n\n# Resource Leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse tempfile::tempdir_in;\nuse std::fs::File;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory.\nlet tmp_dir = tempdir_in(\".\")?;\n\nlet file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\nlet mut tmp_file = File::create(file_path)?;\nwriteln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n// `tmp_dir` goes out of scope, the directory as well as\n// `tmp_file` will be deleted here.\ndrop(tmp_file);\ntmp_dir.close()?;\n# Ok(())\n# }\n```\n\n[`TempDir`]: struct.TempDir.html\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::path::Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[400,0],"end":[404,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:1970:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:209:2503":{"id":"0:209:2503","crate_id":0,"name":"read_to_string","span":{"filename":"src/file/mod.rs","begin":[1001,4],"end":[1005,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:415:712":{"id":"0:415:712","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[194,9],"end":[194,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9811:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9792:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12754:28245":{"id":"2:12754:28245","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3118"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12836:35622":{"id":"2:12836:35622","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12376:133","`FromStr`":"2:12375:2781"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42074:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12375:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12375:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:2273":{"id":"0:111:2273","crate_id":0,"name":"source","span":{"filename":"src/file/mod.rs","begin":[135,4],"end":[137,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:2668:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:739":{"id":"0:107:739","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[123,4],"end":[125,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:253-0:405:1887":{"id":"a:2:2832:253-0:405:1887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:412":{"id":"0:412","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,9],"end":[194,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9836:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:415:712"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12840:29842":{"id":"2:12840:29842","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:236":{"id":"0:236","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1064,0],"end":[1068,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Seek","id":"1:3502:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["seek_relative","rewind","stream_position","stream_len"],"trait":{"name":"Seek","id":"1:3502:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:238:2511"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:123":{"id":"0:123","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[374,0],"end":[378,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9836:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:124:712"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:126:629":{"id":"0:126:629","crate_id":0,"name":"drop","span":{"filename":"src/file/mod.rs","begin":[381,4],"end":[383,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12764:3376":{"id":"2:12764:3376","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41931:197","prim@char":"1:12034:448","self::pattern":"2:12415:3118"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:311":{"id":"0:311","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[202,0],"end":[211,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2657:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:314:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12720:3377":{"id":"2:12720:3377","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2621-0:385:1881":{"id":"b:2:2621-0:385:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:134","2:2625:1610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2872:2949-0:385:1881":{"id":"a:2:2872:2949-0:385:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2872:2949","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2872:2949-0:112:1883":{"id":"a:2:2872:2949-0:112:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2872:2949","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:133:340":{"id":"0:133:340","crate_id":0,"name":"as_ref","span":{"filename":"src/file/mod.rs","begin":[401,4],"end":[403,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OsStr","id":"1:1970:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:2346":{"id":"0:178:2346","crate_id":0,"name":"persist_noclobber","span":{"filename":"src/file/mod.rs","begin":[815,4],"end":[827,5]},"visibility":"public","docs":"Persist the temporary file at the target path if and only if no file exists there.\n\nIf a file exists at the target path, fail. If this method fails, it will\nreturn `self` in the resulting PersistError.\n\nNote: Temporary files cannot be persisted across filesystems. Also Note:\nThis method is not atomic. It can leave the original link to the\ntemporary file behind.\n\n# Security\n\nThis method persists the temporary file using its path and may not be\nsecure in all cases. Please read the security section on the top\nlevel documentation of this type for details.\n\n# Errors\n\nIf the file cannot be moved to the new location or a file already exists there,\n`Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\nlet mut persisted_file = file.persist_noclobber(\"./saved_file.txt\")?;\nwriteln!(persisted_file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:42074:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:243":{"id":"0:243","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1077,0],"end":[1081,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(any(unix, target_os = \"wasi\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsFd","id":"1:4823:2280","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsFd","id":"1:4823:2280","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:245:2513"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:318:1029":{"id":"0:318:1029","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[292,4],"end":[294,5]},"visibility":"public","docs":"Create a new `Builder`.\n\n# Examples\n\nCreate a named temporary file and write some data into it:\n\n```\n# use std::io;\n# use std::ffi::OsStr;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nuse tempfile::Builder;\n\nlet named_tempfile = Builder::new()\n    .prefix(\"my-temporary-note\")\n    .suffix(\".txt\")\n    .rand_bytes(5)\n    .tempfile()?;\n\nlet name = named_tempfile\n    .path()\n    .file_name().and_then(OsStr::to_str);\n\nif let Some(name) = name {\n    assert!(name.starts_with(\"my-temporary-note\"));\n    assert!(name.ends_with(\".txt\"));\n    assert_eq!(name.len(), \"my-temporary-note.txt\".len() + 5);\n}\n# Ok(())\n# }\n```\n\nCreate a temporary directory and add a file to it:\n\n```\n# use std::io::{self, Write};\n# use std::fs::File;\n# use std::ffi::OsStr;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nuse tempfile::Builder;\n\nlet dir = Builder::new()\n    .prefix(\"my-temporary-dir\")\n    .rand_bytes(5)\n    .tempdir()?;\n\nlet file_path = dir.path().join(\"my-temporary-note.txt\");\nlet mut file = File::create(file_path)?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\n// By closing the `TempDir` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the directory will still be deleted when `dir` goes out\n// of scope, but we won't know whether deleting the directory\n// succeeded.\ndrop(file);\ndir.close()?;\n# Ok(())\n# }\n```\n\nCreate a temporary directory with a chosen prefix under a chosen folder:\n\n```ignore\nlet dir = Builder::new()\n    .prefix(\"my-temporary-dir\")\n    .tempdir_in(\"folder-with-tempdirs\")?;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8879:9570-0:144:1882":{"id":"a:2:8879:9570-0:144:1882","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"File","id":"1:2201:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8879:9570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:36:2226":{"id":"0:36:2226","crate_id":0,"name":"with_prefix_in","span":{"filename":"src/dir.rs","begin":[320,4],"end":[325,5]},"visibility":"public","docs":"Attempts to make a temporary directory with the specified prefix inside\nthe specified directory. The directory and everything inside it will be\nautomatically deleted once the returned `TempDir` is destroyed.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of the current directory\nlet tmp_dir = TempDir::with_prefix_in(\"foo-\", \".\")?;\nlet tmp_name = tmp_dir.path().file_name().unwrap().to_str().unwrap();\nassert!(tmp_name.starts_with(\"foo-\"));\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:1970:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12811:35614":{"id":"2:12811:35614","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:276:2271":{"id":"0:276:2271","crate_id":0,"name":"write","span":{"filename":"src/spooled.rs","begin":[156,4],"end":[170,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12813:35615":{"id":"2:12813:35615","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:712":{"id":"0:46:712","crate_id":0,"name":"fmt","span":{"filename":"src/dir.rs","begin":[458,4],"end":[462,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9811:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9792:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:340":{"id":"0:44:340","crate_id":0,"name":"as_ref","span":{"filename":"src/dir.rs","begin":[452,4],"end":[454,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:705":{"id":"0:147:705","crate_id":0,"name":"file","span":{"filename":"src/file/mod.rs","begin":[512,4],"end":[512,30]},"visibility":"public","docs":"The temporary file that couldn't be persisted.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[394,0],"end":[398,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2303-0:28:1877":{"id":"b:2:2303-0:28:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2305:28227"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:131:340":{"id":"0:131:340","crate_id":0,"name":"as_ref","span":{"filename":"src/file/mod.rs","begin":[395,4],"end":[397,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2300-0:112:1883":{"id":"b:2:2300-0:112:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2302:2676"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8879:9570-0:28:1877":{"id":"a:2:8879:9570-0:28:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8879:9570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2606-0:134:1880":{"id":"b:2:2606-0:134:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2609:2252"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[528,0],"end":[533,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:156:739"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3450-0:112:1883":{"id":"b:2:3450-0:112:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3452:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2621-0:112:1883":{"id":"b:2:2621-0:112:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:134","2:2625:1610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:40:2247":{"id":"0:40:2247","crate_id":0,"name":"into_path","span":{"filename":"src/dir.rs","begin":[388,4],"end":[395,5]},"visibility":"public","docs":"Persist the temporary directory to disk, returning the [`PathBuf`] where it is located.\n\nThis consumes the [`TempDir`] without deleting directory on the filesystem, meaning that\nthe directory will no longer be automatically deleted.\n\n[`TempDir`]: struct.TempDir.html\n[`PathBuf`]: http://doc.rust-lang.org/std/path/struct.PathBuf.html\n\n# Examples\n\n```\nuse std::fs;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_dir = TempDir::new()?;\n\n// Persist the temporary directory to disk,\n// getting the path where it is.\nlet tmp_path = tmp_dir.into_path();\n\n// Delete the temporary directory ourselves.\nfs::remove_dir_all(tmp_path)?;\n# Ok(())\n# }\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"PathBuf","id":"1:5130:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165:2166":{"id":"0:165:2166","crate_id":0,"name":"new_in","span":{"filename":"src/file/mod.rs","begin":[620,4],"end":[622,5]},"visibility":"public","docs":"Create a new named temporary file in the specified directory.\n\nThis is equivalent to:\n\n```ignore\nBuilder::new().tempfile_in(dir)\n```\n\nSee [`NamedTempFile::new()`] for details.\n\n[`NamedTempFile::new()`]: #method.new","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2609:2252":{"id":"2:2609:2252","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2583:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2815:243-0:112:1883":{"id":"a:2:2815:243-0:112:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:232:2508":{"id":"0:232:2508","crate_id":0,"name":"write_all","span":{"filename":"src/file/mod.rs","begin":[1055,4],"end":[1057,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:2502":{"id":"0:196:2502","crate_id":0,"name":"read_to_end","span":{"filename":"src/file/mod.rs","begin":[965,4],"end":[969,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"5:6949:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2815:243-0:144:1882":{"id":"a:2:2815:243-0:144:1882","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2815:243-0:399:1885":{"id":"a:2:2815:243-0:399:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:159:712":{"id":"0:159:712","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[536,4],"end":[538,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9811:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9792:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[521,0],"end":[526,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"io::Error","id":"1:2948:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:153:739"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:402":{"id":"0:402","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9836:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:403:712"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:203:2497":{"id":"0:203:2497","crate_id":0,"name":"read","span":{"filename":"src/file/mod.rs","begin":[985,4],"end":[987,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12729:339":{"id":"2:12729:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12730:28653","`u8`":"1:12051:1634"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:253-0:134:1880":{"id":"a:2:2832:253-0:134:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:269":{"id":"0:269","crate_id":0,"name":null,"span":{"filename":"src/spooled.rs","begin":[118,0],"end":[153,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["chain","by_ref","read_buf","read_to_string","take","read_buf_exact","read_exact","bytes","is_read_vectored","read_to_end","read_vectored"],"trait":{"name":"Read","id":"1:3427:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:270:2497","0:271:2499","0:272:2502","0:273:2503","0:274:2504"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:394:2523":{"id":"0:394:2523","crate_id":0,"name":"OnDisk","span":{"filename":"src/spooled.rs","begin":[9,4],"end":[9,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:396:1744"]},"discriminant":null}}},"a:2:2872:2949-0:144:1882":{"id":"a:2:2872:2949-0:144:1882","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2872:2949","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2872:2949","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2621-0:28:1877":{"id":"b:2:2621-0:28:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:134","2:2625:1610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12737:28652":{"id":"2:12737:28652","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:176:2335":{"id":"0:176:2335","crate_id":0,"name":"persist","span":{"filename":"src/file/mod.rs","begin":[762,4],"end":[774,5]},"visibility":"public","docs":"Persist the temporary file at the target path.\n\nIf a file exists at the target path, persist will atomically replace it.\nIf this method fails, it will return `self` in the resulting\n[`PersistError`].\n\nNote: Temporary files cannot be persisted across filesystems. Also\nneither the file contents nor the containing directory are\nsynchronized, so the update may not yet have reached the disk when\n`persist` returns.\n\n# Security\n\nThis method persists the temporary file using its path and may not be\nsecure in all cases. Please read the security section on the top\nlevel documentation of this type for details.\n\n# Errors\n\nIf the file cannot be moved to the new location, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\nlet mut persisted_file = file.persist(\"./saved_file.txt\")?;\nwriteln!(persisted_file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\n[`PersistError`]: struct.PersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:42074:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:712":{"id":"0:140:712","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[495,4],"end":[497,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9811:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9792:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:712":{"id":"0:124:712","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[375,4],"end":[377,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9811:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9792:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160":{"id":"0:160","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[541,0],"end":[545,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["cause","provide","source","type_id","description"],"trait":{"name":"Error","id":"2:2668:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:162:2273"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:396:1744":{"id":"0:396:1744","crate_id":0,"name":"0","span":{"filename":"src/spooled.rs","begin":[9,11],"end":[9,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"std::fs::File","id":"1:2201:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:304-0:134:1880":{"id":"0:304-0:134:1880","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,27],"end":[189,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::NamedTempFile","name":"NamedTempFile","id":"0:134:1880","glob":false}}},"2:12789:28694":{"id":"2:12789:28694","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/dir.rs","begin":[451,0],"end":[455,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:44:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:245:2513":{"id":"0:245:2513","crate_id":0,"name":"as_fd","span":{"filename":"src/file/mod.rs","begin":[1078,4],"end":[1080,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"BorrowedFd","id":"1:8353:2282","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146:1872":{"id":"0:146:1872","crate_id":0,"name":"error","span":{"filename":"src/file/mod.rs","begin":[510,4],"end":[510,24]},"visibility":"public","docs":"The underlying IO error.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"io::Error","id":"1:2948:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:12724:35602":{"id":"2:12724:35602","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12722:35601"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:253-0:399:1885":{"id":"a:2:2832:253-0:399:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12750:34003":{"id":"2:12750:34003","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44143:7205","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:391:2522":{"id":"0:391:2522","crate_id":0,"name":"InMemory","span":{"filename":"src/spooled.rs","begin":[8,4],"end":[8,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:393:1744"]},"discriminant":null}}},"2:12846:35624":{"id":"2:12846:35624","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4613:35624"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44168:7259","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:712":{"id":"0:109:712","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[129,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9811:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9792:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12749:35606":{"id":"2:12749:35606","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44115:7338","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5544:29974":{"id":"5:5544:29974","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12841:29843"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278:2505":{"id":"0:278:2505","crate_id":0,"name":"flush","span":{"filename":"src/spooled.rs","begin":[188,4],"end":[193,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:2273":{"id":"0:162:2273","crate_id":0,"name":"source","span":{"filename":"src/file/mod.rs","begin":[542,4],"end":[544,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:2668:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:2496":{"id":"0:188:2496","crate_id":0,"name":"reopen","span":{"filename":"src/file/mod.rs","begin":[948,4],"end":[951,5]},"visibility":"public","docs":"Securely reopen the temporary file.\n\nThis function is useful when you need multiple independent handles to\nthe same file. It's perfectly fine to drop the original `NamedTempFile`\nwhile holding on to `File`s returned by this function; the `File`s will\nremain usable. However, they may not be nameable.\n\n# Errors\n\nIf the file cannot be reopened, `Err` is returned.\n\n# Security\n\nUnlike `File::open(my_temp_file.path())`, `NamedTempFile::reopen()`\nguarantees that the re-opened file is the _same_ file, even in the\npresence of pathological temporary file cleaners.\n\n# Examples\n\n```no_run\n# use std::io;\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\nlet another_handle = file.reopen()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"File","id":"1:2201:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2621-0:134:1880":{"id":"b:2:2621-0:134:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2624:134","2:2625:1610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:1878":{"id":"0:0:1878","crate_id":0,"name":"tempfile","span":{"filename":"src/lib.rs","begin":[1,0],"end":[701,1]},"visibility":"public","docs":"Temporary files and directories.\n\n- Use the [`tempfile()`] function for temporary files\n- Use the [`tempdir()`] function for temporary directories.\n\n# Design\n\nThis crate provides several approaches to creating temporary files and directories.\n[`tempfile()`] relies on the OS to remove the temporary file once the last handle is closed.\n[`TempDir`] and [`NamedTempFile`] both rely on Rust destructors for cleanup.\n\nWhen choosing between the temporary file variants, prefer `tempfile`\nunless you either need to know the file's path or to be able to persist it.\n\n## Resource Leaking\n\n`tempfile` will (almost) never fail to cleanup temporary resources. However `TempDir` and `NamedTempFile` will\nfail if their destructors don't run. This is because `tempfile` relies on the OS to cleanup the\nunderlying file, while `TempDir` and `NamedTempFile` rely on rust destructors to do so.\nDestructors may fail to run if the process exits through an unhandled signal interrupt (like `SIGINT`),\nor if the instance is declared statically (like with [`lazy_static`]), among other possible\nreasons.\n\n## Security\n\nIn the presence of pathological temporary file cleaner, relying on file paths is unsafe because\na temporary file cleaner could delete the temporary file which an attacker could then replace.\n\n`tempfile` doesn't rely on file paths so this isn't an issue. However, `NamedTempFile` does\nrely on file paths for _some_ operations. See the security documentation on\nthe `NamedTempFile` type for more information.\n\n## Early drop pitfall\n\nBecause `TempDir` and `NamedTempFile` rely on their destructors for cleanup, this can lead\nto an unexpected early removal of the directory/file, usually when working with APIs which are\ngeneric over `AsRef<Path>`. Consider the following example:\n\n```no_run\n# use tempfile::tempdir;\n# use std::io;\n# use std::process::Command;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`.\nlet temp_dir = tempdir()?;\n\n// Spawn the `touch` command inside the temporary directory and collect the exit status\n// Note that `temp_dir` is **not** moved into `current_dir`, but passed as a reference\nlet exit_status = Command::new(\"touch\").arg(\"tmp\").current_dir(&temp_dir).status()?;\nassert!(exit_status.success());\n\n# Ok(())\n# }\n```\n\nThis works because a reference to `temp_dir` is passed to `current_dir`, resulting in the\ndestructor of `temp_dir` being run after the `Command` has finished execution. Moving the\n`TempDir` into the `current_dir` call would result in the `TempDir` being converted into\nan internal representation, with the original value being dropped and the directory thus\nbeing deleted, before the command can be executed.\n\nThe `touch` command would fail with an `No such file or directory` error.\n\n## Examples\n\nCreate a temporary file and write some data into it:\n\n```\nuse tempfile::tempfile;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a file inside of `std::env::temp_dir()`.\nlet mut file = tempfile()?;\n\nwriteln!(file, \"Brian was here. Briefly.\")?;\n# Ok(())\n# }\n```\n\nCreate a named temporary file and open an independent file handle:\n\n```\nuse tempfile::NamedTempFile;\nuse std::io::{self, Write, Read};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet text = \"Brian was here. Briefly.\";\n\n// Create a file inside of `std::env::temp_dir()`.\nlet mut file1 = NamedTempFile::new()?;\n\n// Re-open it.\nlet mut file2 = file1.reopen()?;\n\n// Write some test data to the first handle.\nfile1.write_all(text.as_bytes())?;\n\n// Read the test data using the second handle.\nlet mut buf = String::new();\nfile2.read_to_string(&mut buf)?;\nassert_eq!(buf, text);\n# Ok(())\n# }\n```\n\nCreate a temporary directory and add a file to it:\n\n```\nuse tempfile::tempdir;\nuse std::fs::File;\nuse std::io::{self, Write};\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`.\nlet dir = tempdir()?;\n\nlet file_path = dir.path().join(\"my-temporary-note.txt\");\nlet mut file = File::create(file_path)?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\n// By closing the `TempDir` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the directory will still be deleted when `dir` goes out\n// of scope, but we won't know whether deleting the directory\n// succeeded.\ndrop(file);\ndir.close()?;\n# Ok(())\n# }\n```\n\n[`tempfile()`]: fn.tempfile.html\n[`tempdir()`]: fn.tempdir.html\n[`TempDir`]: struct.TempDir.html\n[`NamedTempFile`]: struct.NamedTempFile.html\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html\n[`lazy_static`]: https://github.com/rust-lang-nursery/lazy-static.rs/issues/62","links":{},"attrs":["#![doc(html_logo_url =\n\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\nhtml_favicon_url = \"https://www.rust-lang.org/favicon.ico\", html_root_url =\n\"https://docs.rs/tempfile/3.1.0\")]","#![deny(rust_2018_idioms)]","#![allow(clippy :: redundant_field_names)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:298-0:25:1875","0:299-0:26:1876","0:300-0:28:1877","0:302-0:101:1878","0:303-0:102:1879","0:304-0:134:1880","0:305-0:385:1881","0:306-0:144:1882","0:307-0:112:1883","0:309-0:262:1884","0:310-0:399:1885","0:405:1887"],"is_stripped":false}}},"0:305-0:385:1881":{"id":"0:305-0:385:1881","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,42],"end":[189,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::PathPersistError","name":"PathPersistError","id":"0:385:1881","glob":false}}},"0:381-0:345:1652":{"id":"0:381-0:345:1652","crate_id":0,"name":null,"span":{"filename":"src/file/imp/mod.rs","begin":[4,8],"end":[4,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::unix","name":"unix","id":"0:345:1652","glob":true}}},"5:5541:36285":{"id":"5:5541:36285","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12744:7349":{"id":"2:12744:7349","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12034:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43827:7330","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:265:2546":{"id":"0:265:2546","crate_id":0,"name":"is_rolled","span":{"filename":"src/spooled.rs","begin":[77,4],"end":[82,5]},"visibility":"public","docs":"Returns true if the file has been rolled over to disk.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2619:134":{"id":"2:2619:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12718":{"id":"2:12718","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12719:867","2:12720:3377","2:12721:35600","2:12722:35601","2:12724:35602","2:12727:28603","2:12728:35603","2:12729:339","2:12730:28653","2:12731:28650","2:12733:2555","2:12735:28651","2:12737:28652","2:12739:35604","2:12740:35605","2:12741:28676","2:12742:28677","2:12743:7206","2:12744:7349","2:12745:3820","2:12746:33680","2:12747:33697","2:12748:30606","2:12749:35606","2:12750:34003","2:12751:28696","2:12754:28245","2:12757:28247","2:12760:3415","2:12764:3376","2:12768:28684","2:12771:28686","2:12774:28688","2:12777:35607","2:12780:35608","2:12783:28690","2:12786:28692","2:12789:28694","2:12792:28695","2:12795:2559","2:12798:35609","2:12801:35610","2:12804:35611","2:12807:35612","2:12809:35613","2:12811:35614","2:12813:35615","2:12814:35616","2:12815:35617","2:12818:35618","2:12821:28243","2:12824:28697","2:12827:35619","2:12830:35620","2:12833:35621","2:12836:35622","2:12838:29839","2:12839:29840","2:12840:29842","2:12841:29843","2:12842:29844","2:12843:35623","2:12845:9471","2:12846:35624"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2620:1612":{"id":"2:2620:1612","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42074:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:182:2471":{"id":"0:182:2471","crate_id":0,"name":"as_file_mut","span":{"filename":"src/file/mod.rs","begin":[876,4],"end":[878,5]},"visibility":"public","docs":"Get a mutable reference to the underlying file.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"F"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:1131":{"id":"0:39:1131","crate_id":0,"name":"path","span":{"filename":"src/dir.rs","begin":[356,4],"end":[358,5]},"visibility":"public","docs":"Accesses the [`Path`] to the temporary directory.\n\n[`Path`]: http://doc.rust-lang.org/std/path/struct.Path.html\n\n# Examples\n\n```\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_path;\n\n{\n   let tmp_dir = TempDir::new()?;\n   tmp_path = tmp_dir.path().to_owned();\n\n   // Check that the temp directory actually exists.\n   assert!(tmp_path.exists());\n\n   // End of `tmp_dir` scope, directory will be deleted\n}\n\n// Temp directory should be deleted by now\nassert_eq!(tmp_path.exists(), false);\n# Ok(())\n# }\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"path::Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:175:2264":{"id":"0:175:2264","crate_id":0,"name":"close","span":{"filename":"src/file/mod.rs","begin":[715,4],"end":[718,5]},"visibility":"public","docs":"Close and remove the temporary file.\n\nUse this if you want to detect errors in deleting the file.\n\n# Errors\n\nIf the file cannot be deleted, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io;\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\n// By closing the `NamedTempFile` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly,\n// the file will still be deleted when `file` goes out\n// of scope, but we won't know whether deleting the file\n// succeeded.\nfile.close()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2872:2949-0:405:1887":{"id":"a:2:2872:2949-0:405:1887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2872:2949","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:433:656":{"id":"0:433:656","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[194,27],"end":[194,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2610-0:112:1883":{"id":"b:2:2610-0:112:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:330:1876":{"id":"0:330:1876","crate_id":0,"name":"tempdir_in","span":{"filename":"src/lib.rs","begin":[539,4],"end":[549,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `dir`.\nThe directory and everything inside it will be automatically\ndeleted once the returned `TempDir` is destroyed.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::{self, File};\nuse std::io::Write;\nuse tempfile::Builder;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_dir = Builder::new().tempdir_in(\"./\")?;\n# Ok(())\n# }\n```\n\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:223:2509":{"id":"0:223:2509","crate_id":0,"name":"write_fmt","span":{"filename":"src/file/mod.rs","begin":[1033,4],"end":[1037,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["fmt",{"resolved_path":{"name":"fmt::Arguments","id":"2:43026:2510","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:430":{"id":"0:430","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,27],"end":[194,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2364:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["0:433:656"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12748:30606":{"id":"2:12748:30606","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44105:2806","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[134,0],"end":[138,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","provide","source","type_id","description"],"trait":{"name":"Error","id":"2:2668:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:111:2273"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2616-0:112:1883":{"id":"b:2:2616-0:112:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TempPath","id":"0:112:1883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2619:134","2:2620:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12833:35621":{"id":"2:12833:35621","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3118"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:309-0:262:1884":{"id":"0:309-0:262:1884","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[191,25],"end":[191,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::spooled::spooled_tempfile","name":"spooled_tempfile","id":"0:262:1884","glob":false}}},"0:211:2504":{"id":"0:211:2504","crate_id":0,"name":"read_exact","span":{"filename":"src/file/mod.rs","begin":[1007,4],"end":[1009,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1877":{"id":"0:28:1877","crate_id":0,"name":"TempDir","span":{"filename":"src/dir.rs","begin":[196,0],"end":[198,1]},"visibility":"public","docs":"A directory in the filesystem that is automatically deleted when\nit goes out of scope.\n\nThe [`TempDir`] type creates a directory on the file system that\nis deleted once it goes out of scope. At construction, the\n`TempDir` creates a new directory with a randomly generated name.\n\nThe default constructor, [`TempDir::new()`], creates directories in\nthe location returned by [`std::env::temp_dir()`], but `TempDir`\ncan be configured to manage a temporary directory in any location\nby constructing with a [`Builder`].\n\nAfter creating a `TempDir`, work with the file system by doing\nstandard [`std::fs`] file system operations on its [`Path`],\nwhich can be retrieved with [`TempDir::path()`]. Once the `TempDir`\nvalue is dropped, the directory at the path will be deleted, along\nwith any files and directories it contains. It is your responsibility\nto ensure that no further file system operations are attempted\ninside the temporary directory once it has been deleted.\n\n# Resource Leaking\n\nVarious platform-specific conditions may cause `TempDir` to fail\nto delete the underlying directory. It's important to ensure that\nhandles (like [`File`] and [`ReadDir`]) to files inside the\ndirectory are dropped before the `TempDir` goes out of scope. The\n`TempDir` destructor will silently ignore any errors in deleting\nthe directory; to instead handle errors call [`TempDir::close()`].\n\nNote that if the program exits before the `TempDir` destructor is\nrun, such as via [`std::process::exit()`], by segfaulting, or by\nreceiving a signal like `SIGINT`, then the temporary directory\nwill not be deleted.\n\n# Examples\n\nCreate a temporary directory with a generated name:\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::TempDir;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`\nlet tmp_dir = TempDir::new()?;\n# Ok(())\n# }\n```\n\nCreate a temporary directory with a prefix in its name:\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::Builder;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\n// Create a directory inside of `std::env::temp_dir()`,\n// whose name will begin with 'example'.\nlet tmp_dir = Builder::new().prefix(\"example\").tempdir()?;\n# Ok(())\n# }\n```\n\n[`File`]: http://doc.rust-lang.org/std/fs/struct.File.html\n[`Path`]: http://doc.rust-lang.org/std/path/struct.Path.html\n[`ReadDir`]: http://doc.rust-lang.org/std/fs/struct.ReadDir.html\n[`Builder`]: struct.Builder.html\n[`TempDir::close()`]: struct.TempDir.html#method.close\n[`TempDir::new()`]: struct.TempDir.html#method.new\n[`TempDir::path()`]: struct.TempDir.html#method.path\n[`TempDir`]: struct.TempDir.html\n[`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html\n[`std::fs`]: http://doc.rust-lang.org/std/fs/index.html\n[`std::process::exit()`]: http://doc.rust-lang.org/std/process/fn.exit.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:30","a:2:8878:9479-0:28:1877","a:2:8879:9570-0:28:1877","a:2:2872:2949-0:28:1877","a:2:2832:253-0:28:1877","a:2:2815:243-0:28:1877","b:2:2300-0:28:1877","b:2:2616-0:28:1877","b:2:2606-0:28:1877","b:2:3450-0:28:1877","b:2:2610-0:28:1877","b:2:2621-0:28:1877","b:2:2303-0:28:1877","0:47","0:45","0:43"]}}},"0:174:1131":{"id":"0:174:1131","crate_id":0,"name":"path","span":{"filename":"src/file/mod.rs","begin":[680,4],"end":[682,5]},"visibility":"public","docs":"Get the temporary file's path.\n\n# Security\n\nReferring to a temporary file's path may not be secure in all cases.\nPlease read the security section on the top level documentation of this\ntype for details.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), ::std::io::Error> {\nlet file = NamedTempFile::new()?;\n\nprintln!(\"{:?}\", file.path());\n# Ok(())\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12757:28247":{"id":"2:12757:28247","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3118"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2616-0:134:1880":{"id":"b:2:2616-0:134:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2619:134","2:2620:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3450-0:405:1887":{"id":"b:2:3450-0:405:1887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:3452:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:30":{"id":"0:30","crate_id":0,"name":null,"span":{"filename":"src/dir.rs","begin":[200,0],"end":[449,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:31:1029","0:32:2166","0:34:2221","0:36:2226","0:39:1131","0:40:2247","0:41:2264"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:187":{"id":"0:187","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[912,0],"end":[952,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2201:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:188:2496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2305:28227":{"id":"2:2305:28227","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2303-0:405:1887":{"id":"b:2:2303-0:405:1887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2305:28227"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5799-0:385:1881":{"id":"b:5:5799-0:385:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9841:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5797:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5801:1587"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8878:9479-0:385:1881":{"id":"a:2:8878:9479-0:385:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8878:9479","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:248:2514":{"id":"0:248:2514","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/file/mod.rs","begin":[1086,4],"end":[1088,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RawFd","id":"1:4741:2283","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2616-0:405:1887":{"id":"b:2:2616-0:405:1887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":["2:2619:134","2:2620:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:388":{"id":"0:388","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[106,9],"end":[106,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9836:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:389:712"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12741:28676":{"id":"2:12741:28676","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12742:28677"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2302:2676":{"id":"2:2302:2676","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:307-0:112:1883":{"id":"0:307-0:112:1883","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,74],"end":[189,82]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::file::TempPath","name":"TempPath","id":"0:112:1883","glob":false}}},"0:150:712":{"id":"0:150:712","crate_id":0,"name":"fmt","span":{"filename":"src/file/mod.rs","begin":[516,4],"end":[518,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9811:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9792:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200:2504":{"id":"0:200:2504","crate_id":0,"name":"read_exact","span":{"filename":"src/file/mod.rs","begin":[977,4],"end":[981,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:739":{"id":"0:156:739","crate_id":0,"name":"from","span":{"filename":"src/file/mod.rs","begin":[530,4],"end":[532,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2815:243-0:134:1880":{"id":"a:2:2815:243-0:134:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:144:1882":{"id":"0:144:1882","crate_id":0,"name":"PersistError","span":{"filename":"src/file/mod.rs","begin":[508,0],"end":[513,1]},"visibility":"public","docs":"Error returned when persisting a temporary file fails.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:146:1872","0:147:705"],"fields_stripped":false}},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"std::fs::File","id":"1:2201:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:8878:9479-0:144:1882","a:2:8879:9570-0:144:1882","a:2:2872:2949-0:144:1882","a:2:2832:253-0:144:1882","a:2:2815:243-0:144:1882","b:2:2300-0:144:1882","b:2:2616-0:144:1882","b:2:2606-0:144:1882","b:2:3450-0:144:1882","b:2:2610-0:144:1882","b:2:2621-0:144:1882","b:2:2303-0:144:1882","b:5:5799-0:144:1882","0:157","0:154","0:148","0:160","0:151"]}}},"0:420":{"id":"0:420","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[194,23],"end":[194,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2826:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:405:1887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2872:2949-0:134:1880":{"id":"a:2:2872:2949-0:134:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2872:2949","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2872:2949","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12845:9471":{"id":"2:12845:9471","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4616:9471"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44159:7147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:323:1931":{"id":"0:323:1931","crate_id":0,"name":"rand_bytes","span":{"filename":"src/lib.rs","begin":[371,4],"end":[374,5]},"visibility":"public","docs":"Set the number of random bytes.\n\nDefault: `6`.\n\n# Examples\n\n```\n# use std::io;\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\n# use tempfile::Builder;\nlet named_tempfile = Builder::new()\n    .rand_bytes(5)\n    .tempfile()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rand",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5545:29975":{"id":"5:5545:29975","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12842:29844"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12842:29844":{"id":"2:12842:29844","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:190":{"id":"0:190","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[954,0],"end":[982,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:3427:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["chain","by_ref","read_buf","read_to_string","take","read_buf_exact","read_exact","bytes","is_read_vectored","read_to_end","read_vectored"],"trait":{"name":"Read","id":"1:3427:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:192:2497","0:194:2499","0:196:2502","0:198:2503","0:200:2504"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2300-0:134:1880":{"id":"b:2:2300-0:134:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2302:2676"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/dir.rs","begin":[457,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9836:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:46:712"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:117:2335":{"id":"0:117:2335","crate_id":0,"name":"persist","span":{"filename":"src/file/mod.rs","begin":[234,4],"end":[249,5]},"visibility":"public","docs":"Persist the temporary file at the target path.\n\nIf a file exists at the target path, persist will atomically replace it.\nIf this method fails, it will return `self` in the resulting\n[`PathPersistError`].\n\nNote: Temporary files cannot be persisted across filesystems. Also\nneither the file contents nor the containing directory are\nsynchronized, so the update may not yet have reached the disk when\n`persist` returns.\n\n# Security\n\nOnly use this method if you're positive that a temporary file cleaner\nwon't have deleted your file. Otherwise, you might end up persisting an\nattacker controlled file.\n\n# Errors\n\nIf the file cannot be moved to the new location, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io::{self, Write};\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet mut file = NamedTempFile::new()?;\nwriteln!(file, \"Brian was here. Briefly.\")?;\n\nlet path = file.into_temp_path();\npath.persist(\"./saved_file.txt\")?;\n# Ok(())\n# }\n```\n\n[`PathPersistError`]: struct.PathPersistError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new_path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:42074:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"PathPersistError","id":"0:385:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:3434":{"id":"5:684:3434","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:115:2264":{"id":"0:115:2264","crate_id":0,"name":"close","span":{"filename":"src/file/mod.rs","begin":[184,4],"end":[189,5]},"visibility":"public","docs":"Close and remove the temporary file.\n\nUse this if you want to detect errors in deleting the file.\n\n# Errors\n\nIf the file cannot be deleted, `Err` is returned.\n\n# Examples\n\n```no_run\n# use std::io;\nuse tempfile::NamedTempFile;\n\n# fn main() {\n#     if let Err(_) = run() {\n#         ::std::process::exit(1);\n#     }\n# }\n# fn run() -> Result<(), io::Error> {\nlet file = NamedTempFile::new()?;\n\n// Close the file, but keep the path to it around.\nlet path = file.into_temp_path();\n\n// By closing the `TempPath` explicitly, we can check that it has\n// been deleted successfully. If we don't close it explicitly, the\n// file will still be deleted when `file` goes out of scope, but we\n// won't know whether deleting the file succeeded.\npath.close()?;\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202":{"id":"0:202","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[984,0],"end":[1010,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["chain","by_ref","read_buf","read_to_string","take","read_buf_exact","read_exact","bytes","is_read_vectored","read_to_end","read_vectored"],"trait":{"name":"Read","id":"1:3427:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2201:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"items":["0:203:2497","0:205:2499","0:207:2502","0:209:2503","0:211:2504"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12830:35620":{"id":"2:12830:35620","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3118"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:329:1875":{"id":"0:329:1875","crate_id":0,"name":"tempdir","span":{"filename":"src/lib.rs","begin":[508,4],"end":[510,5]},"visibility":"public","docs":"Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix, `prefix`. The directory and\neverything inside it will be automatically deleted once the\nreturned `TempDir` is destroyed.\n\n# Resource leaking\n\nSee [the resource leaking][resource-leaking] docs on `TempDir`.\n\n# Errors\n\nIf the directory can not be created, `Err` is returned.\n\n# Examples\n\n```\nuse std::fs::File;\nuse std::io::Write;\nuse tempfile::Builder;\n\n# use std::io;\n# fn run() -> Result<(), io::Error> {\nlet tmp_dir = Builder::new().tempdir()?;\n# Ok(())\n# }\n```\n\n[resource-leaking]: struct.TempDir.html#resource-leaking","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TempDir","id":"0:28:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:181:2469":{"id":"0:181:2469","crate_id":0,"name":"as_file","span":{"filename":"src/file/mod.rs","begin":[871,4],"end":[873,5]},"visibility":"public","docs":"Get a reference to the underlying file.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"F"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12798:35609":{"id":"2:12798:35609","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12415:3118","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::matches":"2:12795:2559"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44073:7337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8879:9570-0:399:1885":{"id":"a:2:8879:9570-0:399:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8879:9570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SpooledTempFile","id":"0:399:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8879:9570-0:134:1880":{"id":"a:2:8879:9570-0:134:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8879:9570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8879:9570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12821:28243":{"id":"2:12821:28243","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3118"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5542:36286":{"id":"5:5542:36286","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2209","`String`":"5:7524:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2209","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:226:2271":{"id":"0:226:2271","crate_id":0,"name":"write","span":{"filename":"src/file/mod.rs","begin":[1041,4],"end":[1043,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12740:35605":{"id":"2:12740:35605","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12040:1529","crate::ops::IndexMut":"2:3116:2871","str::slice_unchecked":"2:12739:35604"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12751:28696":{"id":"2:12751:28696","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3118"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2616-0:144:1882":{"id":"b:2:2616-0:144:1882","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PersistError","id":"0:144:1882","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2619:134","2:2620:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:225":{"id":"0:225","crate_id":0,"name":null,"span":{"filename":"src/file/mod.rs","begin":[1040,0],"end":[1062,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_fmt","write_vectored","write_all_vectored","write_all","is_write_vectored","by_ref"],"trait":{"name":"Write","id":"1:3484:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::fs::File","id":"1:2201:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"items":["0:226:2271","0:228:2505","0:230:2506","0:232:2508","0:234:2509"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:169:2226":{"id":"0:169:2226","crate_id":0,"name":"with_prefix_in","span":{"filename":"src/file/mod.rs","begin":[644,4],"end":[649,5]},"visibility":"public","docs":"Create a new named temporary file with the specified filename prefix,\nin the specified directory.\n\nThis is equivalent to:\n\n```ignore\nBuilder::new().prefix(&prefix).tempfile_in(directory)\n```\n\nSee [`NamedTempFile::new()`] for details.\n\n[`NamedTempFile::new()`]: #method.new","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["prefix",{"generic":"S"}],["dir",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2946:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NamedTempFile","id":"0:134:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:1970:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2574:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:2363:2738":{"crate_id":1,"path":["std","fs","hard_link"],"kind":"function"},"17:12474:5758":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:14449:6273":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:5075:8331":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:22:726":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:41853:7287":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:2201:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:7487:2713":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:42481:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"21:2520:5168":{"crate_id":21,"path":["rustix","backend","fs","inotify","_","InternalBitFlags"],"kind":"struct"},"2:39608:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"7:31:20643":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:42986:3649":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:6228:8520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:11199:2758":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"23:126:28180":{"crate_id":23,"path":["bitflags","traits","Bits"],"kind":"trait"},"1:2210:2503":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:12429:5231":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:31167:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:14146:6172":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8275:7509":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:7388:8653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:8829:3488":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:1563:6918":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4870:8239":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:5715:2929":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:4746:2888":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:3179:2776":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"11:2383:2776":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:11174:21859":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:622:3690":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:7635:2563":{"crate_id":2,"path":["core","iter","sources","repeat_with","repeat_with"],"kind":"function"},"2:43223:2772":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:13668:6057":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:40557:2914":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"11:883:6904":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:4789:8205":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11138:5548":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"21:465:3157":{"crate_id":21,"path":["rustix","backend","fs","dir","Dir"],"kind":"struct"},"17:10198:5429":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:14283:6224":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:3441:5272":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:9855:3658":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:12099:5672":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:4364:8031":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"22:4158:4941":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_old_timeval"],"kind":"struct"},"17:10241:5407":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:11317:5570":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:22524:7217":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"22:3818:4848":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_fsid_t"],"kind":"struct"},"1:6646:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:23228:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:22471:7216":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:44436:7354":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:2967:3434":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:6159:8506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:4744:2887":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:12045:688":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:12231:7185":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:8797:3486":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:1528:7896":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:10037:5414":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:5782:3304":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:8201:2808":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:574:4948":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:12038:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:5641:7515":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"13:0:2579":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:46786:7411":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:8851:2776":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:1507:7888":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:47566:7466":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:40599:2916":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"22:3981:4881":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_provisioning_key_payload"],"kind":"struct"},"17:14347:6243":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:22151:9667":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:7894:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:5085:8336":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"15:0:2586":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:8974:7571":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:3808:4706":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:40520:2732":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"22:4764:5124":{"crate_id":22,"path":["linux_raw_sys","general","user_desc"],"kind":"struct"},"2:4864:35118":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:11587:5594":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:23042:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:9481:3157":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"11:787:6897":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:6222:8519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12847:5813":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:2339:6320":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:46193:7389":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:45861:7375":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:9575:37010":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:12238:5701":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:946:6903":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"11:2569:2779":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:3150:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:42074:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"11:1917:6918":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:3203:2829":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:42206:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:41683:7170":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:1784:4706":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"21:5442:3274":{"crate_id":21,"path":["rustix","backend","io","types","DupFlags"],"kind":"struct"},"2:42014:7289":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:4939:1092":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:10931:7190":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:5502:3483":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:43673:7317":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6332:6350":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"21:4019:5168":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"1:4627:3057":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:8239:6695":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:2537:2752":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:11390:8794":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:6879:6612":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:7613:6732":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:42688:3652":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:44777:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"11:434:36986":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:7328:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:10981:5387":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:9004:21735":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:11245:5595":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:2766:6343":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:41700:7172":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"23:11:2776":{"crate_id":23,"path":["bitflags","iter","Iter"],"kind":"struct"},"14:31:6886":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"18:96:25692":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:3996:3057":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:2472:6331":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"18:599:37022":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:39684:2875":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"21:3301:3066":{"crate_id":21,"path":["rustix","backend","fs","types","OFlags"],"kind":"struct"},"5:785:4673":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:46910:7427":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:13950:6118":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:495:3138":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:3112:2870":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:42362:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"22:4304:4993":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_1"],"kind":"struct"},"17:504:5257":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"18:0:2589":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:40530:2731":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:9306:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:8002:3944":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:5573:3485":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"11:811:4706":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:42702:3660":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:6226:6508":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:8546:2776":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:11532:14736":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:915:6894":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:5111:8353":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"22:4252:4969":{"crate_id":22,"path":["linux_raw_sys","general","rlimit"],"kind":"struct"},"2:41142:2899":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:10298:4738":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:47818:7468":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:1874:3688":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:6927:8636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:7597:37001":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:12514:5765":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:11342:7526":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:14435:6266":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:5104:8350":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:1651:3509":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:6898:4764":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:14174:6180":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"22:3889:3236":{"crate_id":22,"path":["linux_raw_sys","general","flock"],"kind":"struct"},"6:4461:8092":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:261:5252":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:44231:14753":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:44870:6924":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:6944:37000":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:4535:8125":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:7102:21673":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:1546:4706":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:8012:2574":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"22:4704:3196":{"crate_id":22,"path":["linux_raw_sys","general","statfs"],"kind":"struct"},"2:10890:7189":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:5989:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:6851:4716":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"21:2271:2733":{"crate_id":21,"path":["rustix","backend","fs","dir","DirEntry"],"kind":"struct"},"6:5052:8323":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:7176:2924":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:7391:21674":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:3600:6377":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:9197:8786":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"21:5002:3177":{"crate_id":21,"path":["rustix","backend","fs","types","FlockOperation"],"kind":"enum"},"5:7500:2714":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:9493:35287":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:3565:5273":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:48160:7475":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:9129:2758":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:1644:629":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:5068:8328":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:5637:2791":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:2982:2868":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:9868:5397":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:42323:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:40627:2926":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"18:671:5225":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:46037:7382":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:13025:5856":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13759:6073":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:7306:36755":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:475:7849":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:12052:1631":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:22698:8694":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:1650:7981":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:5727:6424":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:22592:33937":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:6949:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:46940:7428":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:44347:7352":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:4943:848":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:10904:5528":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:6943:8642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:44598:8779":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:43202:7302":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:43955:7190":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:10340:32697":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:357:7492":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:48356:7487":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:4478:3338":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"15:327:9003":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:13260:5896":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:5322:6407":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:9187:30849":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"18:652:5196":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:13891:6107":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:14014:6135":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:1522:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:2823:3882":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"21:6440:3184":{"crate_id":21,"path":["rustix","fs","fd","Timestamps"],"kind":"struct"},"1:482:4750":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:40933:2939":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:11956:7196":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:7907:7538":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"21:3719:3092":{"crate_id":21,"path":["rustix","backend","fs","types","RenameFlags"],"kind":"struct"},"11:2443:4690":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:39691:4350":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:4543:8130":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"22:3974:7712":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_key_specifier"],"kind":"struct"},"22:4616:5079":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_copy"],"kind":"struct"},"16:5363:6408":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:3839:7508":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:6696:6581":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:9027:7580":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:10648:2776":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:4131:32491":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:43720:2914":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"9:486:20656":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:10060:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:31195:3356":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:4401:2791":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:4488:8106":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:6676:4670":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:14270:6218":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:13102:5868":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:44858:7372":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4628:8174":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:44582:8775":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:10457:5456":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:4698:8179":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:1576:7925":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"11:687:6912":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13686:6062":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:40730:2934":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:9311:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:41866:7509":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"21:1092:2737":{"crate_id":21,"path":["rustix","fs","abs","rename"],"kind":"function"},"1:4571:9549":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:6666:3196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"21:3092:3163":{"crate_id":21,"path":["rustix","backend","fs","types","Mode"],"kind":"struct"},"17:9946:5407":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:3186:6917":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:8595:21714":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:3049:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:11359:21861":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:9052:21713":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:9022:7579":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:3502:2275":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:4862:6398":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:940:6901":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:8181:6371":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:3990:3058":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"22:4949:7766":{"crate_id":22,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1"],"kind":"union"},"17:12751:5799":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"21:4832:5168":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"21:1735:5160":{"crate_id":21,"path":["rustix","ioctl","patterns","NoArg"],"kind":"struct"},"2:8201:2780":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:4480:8105":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:4455:8089":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11911:5639":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:2548:6334":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:21551:7214":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:7343:3197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:4242:2776":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:1632:7969":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12699:5792":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:2869:3883":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:6268:37004":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"11:2151:6907":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:1718:8015":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:44159:7147":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:7471:33929":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:7598:8654":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:4428:4947":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:6439:2920":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:13222:4748":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:4082:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:48169:7476":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:41167:2902":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:9811:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:1967:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:11063:5542":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:6445:8690":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"22:4964:7771":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1"],"kind":"union"},"2:30797:33934":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:12415:3118":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:8979:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:10293:5387":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:6682:3236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:11743:5605":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:10431:5448":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:9110:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:4356:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:41175:2904":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:10973:7193":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"21:4389:3183":{"crate_id":21,"path":["rustix","backend","fs","types","StatxFlags"],"kind":"struct"},"17:11873:5624":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:12033:1025":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:13982:6127":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:8208:2809":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:9791:37013":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:2177:1868":{"crate_id":1,"path":["std","fs"],"kind":"module"},"2:10313:4743":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"9:393:20658":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:7266:3381":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:42520:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11408:21736":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:9469:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:7462:2835":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:6079:8478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:8293:7550":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"22:4463:5046":{"crate_id":22,"path":["linux_raw_sys","general","termios"],"kind":"struct"},"2:40646:2928":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:11474:5342":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:3938:9519":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:8873:7516":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"21:5048:3268":{"crate_id":21,"path":["rustix","backend","io","types","FdFlags"],"kind":"struct"},"2:43809:7329":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:7733:9477":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:2364:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"11:1883:2776":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:2618:6337":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:3368:2836":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"5:261:4670":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:13039:35177":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12544:5768":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:6742:6593":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"21:5637:3266":{"crate_id":21,"path":["rustix","backend","mount","types","MountFlags"],"kind":"struct"},"2:42167:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"22:4744:5123":{"crate_id":22,"path":["linux_raw_sys","general","compat_statfs64"],"kind":"struct"},"1:4169:9528":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:2369:2740":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:13011:5853":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:5384:21664":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:6017:21667":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:10127:5421":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"11:774:6896":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:2284:20779":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:10988:3489":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:14325:6237":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:12532:5766":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:929:9490":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:4584:8152":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:2580:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"18:736:25702":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:8301:7544":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"21:3745:5168":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"1:2623:2812":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:7457:2715":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:724:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:6542:3309":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:6071:8477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:5588:6354":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:10534:2828":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:9532:37009":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:3287:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:641:7498":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:48189:7478":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:3734:4354":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:4471:9531":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:14479:6281":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:6376:21669":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:45985:7380":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:40577:2915":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:8992:30272":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:4053:6383":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:6468:3313":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"21:3517:3180":{"crate_id":21,"path":["rustix","backend","fs","types","ResolveFlags"],"kind":"struct"},"2:46706:7410":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:9853:21747":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"18:582:3356":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:2884:2848":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:12646:5783":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:6251:4760":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"22:4940:7760":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1"],"kind":"union"},"1:6164:4759":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:7896:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:8552:2777":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:10323:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:10500:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:9851:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:3282:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:44658:15067":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:22632:33935":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:4044:3342":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:3797:6379":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:14222:6217":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:44282:7350":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:687:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:11315:3493":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:13072:5863":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:46055:7383":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:23197:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:1481:2144":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:46338:7399":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:5383:3479":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:2968:36972":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:11328:5571":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"21:3130:5168":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"2:40909:2808":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:46286:7397":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:1744:653":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:7694:6368":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"22:4590:5073":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_api"],"kind":"struct"},"2:42931:3649":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"21:2889:3175":{"crate_id":21,"path":["rustix","backend","fs","types","AtFlags"],"kind":"struct"},"9:177:9016":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:40487:2718":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:12209:5690":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:42440:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:4401:8059":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:8386:9566":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:4449:8088":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:9100:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:11112:5546":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:14043:6143":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:4878:8243":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"22:4564:5068":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"6:1591:7937":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:3201:2828":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12253:5707":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:6898:8620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:7534:6365":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:12120:7199":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"18:727:5238":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:12791:5804":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:9824:21746":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:7866:2747":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:12306:5721":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:10479:5461":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:5130:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:2837:3686":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:9763:37011":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:44001:7334":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:588:9470":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:7240:33764":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:43869:7188":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"22:4477:5053":{"crate_id":22,"path":["linux_raw_sys","general","termios2"],"kind":"struct"},"11:673:2776":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:48215:7480":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:14084:6157":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:2827:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"5:5144:3300":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"9:52:9006":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:3325:2816":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:8072:6788":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"18:660:5219":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:2427:1870":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:1961:4532":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"22:4420:5021":{"crate_id":22,"path":["linux_raw_sys","general","statx_timestamp"],"kind":"struct"},"21:4218:5168":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"1:4161:9527":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"22:4010:4882":{"crate_id":22,"path":["linux_raw_sys","general","mount_attr"],"kind":"struct"},"22:4509:5057":{"crate_id":22,"path":["linux_raw_sys","general","winsize"],"kind":"struct"},"1:4385:4355":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:46086:7384":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:8477:2773":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"21:2921:5168":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"2:42117:2776":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:14034:6142":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:9793:2277":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:4040:3160":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"11:299:7826":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:30633:33942":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"11:1566:20737":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"22:4840:26703":{"crate_id":22,"path":["linux_raw_sys","general","membarrier_cmd"],"kind":"enum"},"14:215:6890":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:7679:8671":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:13827:6087":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:6059:8470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:14077:6156":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:42005:3381":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:40586:2807":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:0:528":{"crate_id":2,"path":["core"],"kind":"module"},"21:2474:5169":{"crate_id":21,"path":["rustix","backend","fs","inotify","WatchFlags"],"kind":"struct"},"2:47022:7429":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"21:1821:25722":{"crate_id":21,"path":["rustix","ioctl","patterns","ReadOpcode"],"kind":"struct"},"22:4059:4904":{"crate_id":22,"path":["linux_raw_sys","general","files_stat_struct"],"kind":"struct"},"6:4755:8189":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"22:3968:7709":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg"],"kind":"struct"},"6:5004:8307":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"22:3800:4843":{"crate_id":22,"path":["linux_raw_sys","general","__IncompleteArrayField"],"kind":"struct"},"2:40322:7256":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:952:6904":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"21:6475:3186":{"crate_id":21,"path":["rustix","fs","xattr","XattrFlags"],"kind":"struct"},"22:4174:4944":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_old_itimerval"],"kind":"struct"},"17:13056:5862":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:5755:3303":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:22190:9670":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:4977:8289":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:4473:8101":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:10751:5494":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"22:4320:7726":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_3"],"kind":"struct"},"2:43765:7324":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:1913:16653":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:12877:5832":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"18:707:5231":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:13779:6081":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:22607:7224":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:43441:8770":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:7284:7289":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:7756:2910":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:9243:5248":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:923:6898":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:48104:7473":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:10673:5484":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"10:44:6925":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:5140:8363":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:3080:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"22:3920:4871":{"crate_id":22,"path":["linux_raw_sys","general","epoll_event"],"kind":"struct"},"1:5417:3481":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"11:1025:6905":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"22:4573:5070":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_4"],"kind":"struct"},"2:46156:7387":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:9035:7582":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"22:3911:4869":{"crate_id":22,"path":["linux_raw_sys","general","open_how"],"kind":"struct"},"22:4929:7752":{"crate_id":22,"path":["linux_raw_sys","general","__sifields"],"kind":"union"},"2:2369:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:10341:5441":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:6753:6594":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:9913:5400":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:2583:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:7856:2750":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"21:1447:3159":{"crate_id":21,"path":["rustix","fs","raw_dir","RawDirEntry"],"kind":"struct"},"16:8281:6809":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:13923:6114":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"18:636:5218":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:7924:2821":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:8921:9573":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"24:27:4654":{"crate_id":24,"path":["fastrand","global_rng","RestoreOnDrop"],"kind":"struct"},"5:4202:2791":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:13091:7212":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:21981:9581":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:10469:5460":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"21:1843:25724":{"crate_id":21,"path":["rustix","ioctl","patterns","ReadWriteOpcode"],"kind":"struct"},"2:2964:2864":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:11972:5653":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:7708:6369":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:13136:5881":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"18:564:5205":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:6929:6616":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:14317:6236":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:46432:7401":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:7581:4766":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13869:6101":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:6985:9126":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:21168:34952":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:9049:30139":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"11:1142:6910":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:12779:5803":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:4070:7149":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:881:4678":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:11818:4781":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:5951:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"21:5243:3275":{"crate_id":21,"path":["rustix","backend","io","types","ReadWriteFlags"],"kind":"struct"},"1:7644:2752":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:7412:2779":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:4884:8244":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:2832:6346":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"9:330:7838":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:13299:5906":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:11662:5597":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:9446:5383":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:9476:2749":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:12831:5808":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:4738:2886":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:46240:7390":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:40366:7147":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:8795:21728":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:3576:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:10540:2826":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:7657:8666":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:2359:6326":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:10589:5471":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:10085:5417":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:10013:5387":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:41148:2836":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:3280:2826":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"21:1815:25721":{"crate_id":21,"path":["rustix","ioctl","patterns","BadOpcode"],"kind":"struct"},"6:527:7857":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:2872:2949":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:3512:2801":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:3968:3161":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"22:4050:4899":{"crate_id":22,"path":["linux_raw_sys","general","file_dedupe_range"],"kind":"struct"},"17:14421:6264":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:43211:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:7474:6715":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:43645:7313":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13216:5889":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:3241:2830":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:2877:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"22:3928:4873":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_policy_v1"],"kind":"struct"},"16:5995:6308":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"22:4068:4908":{"crate_id":22,"path":["linux_raw_sys","general","inodes_stat_t"],"kind":"struct"},"5:1481:6897":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:40285:7252":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:11688:21739":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:6837:8577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:0:1521":{"crate_id":1,"path":["std"],"kind":"module"},"1:11053:4774":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:10521:5466":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:7624:4710":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:6253:2941":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:8843:3489":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:9973:5409":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:6961:8645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:43851:2810":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"21:5271:5168":{"crate_id":21,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"17:1075:5259":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:12016:30842":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:43194:7301":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:13612:6051":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"11:2554:36981":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:1472:6896":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"18:590:5206":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:11236:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"2:2316:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:8147:2837":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:40617:2925":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:1703:8008":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:2043:2519":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:11711:5568":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:13260:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:6499:6370":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:10804:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:11539:7508":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:5542:2791":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:2958:2863":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:4179:7150":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:1490:6913":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:11508:21738":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:4172:2791":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:5627:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:22304:9661":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:2696:6340":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:11307:5568":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:12935:5844":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:4434:4697":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:6764:5122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:363:7493":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:48180:7477":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:41830:33925":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:14470:6279":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:3220:6916":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:43594:7312":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"22:3862:4858":{"crate_id":22,"path":["linux_raw_sys","general","vfs_ns_cap_data"],"kind":"struct"},"17:14135:6168":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:40445:2717":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7544:6728":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"22:4636:5082":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_writeprotect"],"kind":"struct"},"2:46484:7403":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:13114:5870":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"21:5032:3067":{"crate_id":21,"path":["rustix","backend","io","errno","Errno"],"kind":"struct"},"17:13817:6086":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:4404:3682":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:2969:20806":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:9934:5405":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:542:5063":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:6721:21671":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:12960:5848":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:10187:5427":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:13086:5865":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:42949:34517":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:5828:2918":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:1419:2776":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:13017:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:5905:6444":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:7523:6727":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:44570:8772":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:39427:2883":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:47896:7469":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:7718:9476":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:10508:5465":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:7541:7610":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:4344:6384":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:40720:2933":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11152:5549":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"11:2469:4706":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:6341:9673":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:44646:7364":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:2371:2741":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:5885:8388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:4843:417":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:40678:2931":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"11:1903:6916":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:40407:14804":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:9276:3458":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:6128:8497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:2321:6318":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"22:4093:4919":{"crate_id":22,"path":["linux_raw_sys","general","futex_waitv"],"kind":"struct"},"6:6819:8567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"22:4295:4989":{"crate_id":22,"path":["linux_raw_sys","general","sigaltstack"],"kind":"struct"},"2:2899:2849":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:10789:21835":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"24:0:2026":{"crate_id":24,"path":["fastrand"],"kind":"module"},"16:4921:6400":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:8233:7546":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:10384:5444":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:5798:6429":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:8687:21725":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:23104:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:44883:7373":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:12374:5723":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:5121:6406":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:10371:5443":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:8536:2775":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:40294:7253":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:7692:4869":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:30691:33924":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:4613:6391":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"21:6500:5168":{"crate_id":21,"path":["rustix","fs","xattr","_","InternalBitFlags"],"kind":"struct"},"1:7137:32497":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:2297:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:9489:37012":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:23073:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:39513:2872":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:4917:9557":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:10537:2830":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"22:4190:3138":{"crate_id":22,"path":["linux_raw_sys","general","timespec"],"kind":"struct"},"2:32351:3490":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:12048:791":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:10970:30844":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:22204:14956":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:6691:4868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:12063:5665":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:7849:1869":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:12686:5791":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:40374:7260":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:4719:6393":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:5648:6415":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:8134:6796":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:40698:2932":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:10157:7590":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:22669:33948":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:4595:8156":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:43775:7325":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:1558:2791":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:44820:7367":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:43919:7333":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"22:4365:5007":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"1:7530:5258":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:8454:2772":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"18:515:5193":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:4986:6402":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"14:7:6886":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:48066:7472":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:5859:5021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:8859:7569":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:850:6912":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:4783:8202":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:43821:7198":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"15:288:20761":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"22:4020:4887":{"crate_id":22,"path":["linux_raw_sys","general","file_clone_range"],"kind":"struct"},"17:14379:6258":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:894:4690":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:12423:5745":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:9071:5373":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:7556:5053":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"11:710:6894":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:8896:21731":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"22:4214:4948":{"crate_id":22,"path":["linux_raw_sys","general","itimerval"],"kind":"struct"},"21:2278:5167":{"crate_id":21,"path":["rustix","backend","fs","inotify","CreateFlags"],"kind":"struct"},"17:13488:5959":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:11816:5612":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:6012:8444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:41157:2901":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:4493:9532":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:3162:9361":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:13315:9491":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:4351:8022":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:11236:5562":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:40358:7259":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:12112:5674":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4914:4887":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:10697:2810":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:5816:6434":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:2913:3941":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:6598:3314":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:6041:21668":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:9391:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:521:25704":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:6346:6531":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:26168:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:3165:9384":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:4556:8136":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:44411:7353":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:10769:1869":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:781:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:3282:2827":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:1539:3381":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"10:36:7837":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:44143:7205":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:898:2776":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:10166:21766":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:3364:2882":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:6798:8561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:10113:5419":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"22:4687:5109":{"crate_id":22,"path":["linux_raw_sys","general","__old_kernel_stat"],"kind":"struct"},"2:2970:2865":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:2825:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:21214:34957":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:149:4657":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"23:175:4838":{"crate_id":23,"path":["bitflags","parser","ParseError"],"kind":"struct"},"2:2936:2862":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"11:2423:3381":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:2943:2859":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:44767:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:12137:5676":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:4527:6388":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:41133:2897":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:6513:6544":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:5673:6355":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:4549:8133":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:12294:5718":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:4440:8083":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:41717:9515":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:6594:3381":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"9:450:20657":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:11217:3187":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:6832:4704":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:4823:2280":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:2864:6347":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:7651:6733":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"22:4136:4932":{"crate_id":22,"path":["linux_raw_sys","general","rand_pool_info"],"kind":"struct"},"1:1055:6905":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:12044:686":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:41929:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:25:653":{"crate_id":2,"path":["core","env"],"kind":"macro"},"1:1910:699":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:4:1105":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:6968:21672":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:48226:7481":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:12622:5782":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:11983:7613":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:4860:8236":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:6569:6358":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:10266:5435":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:48279:7484":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:12034:448":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:6169:8508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12008:5658":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:5827:3312":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:46530:7405":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:1064:6907":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"21:4190:3181":{"crate_id":21,"path":["rustix","backend","fs","types","SealFlags"],"kind":"struct"},"21:1097:3059":{"crate_id":21,"path":["rustix","fs","abs","unlink"],"kind":"function"},"2:4058:7148":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:10824:2507":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:1514:7891":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:1407:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:5982:3300":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"22:3761:7706":{"crate_id":22,"path":["linux_raw_sys","elf","Elf_auxv_t"],"kind":"struct"},"7:78:20650":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"11:837:6898":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:9847:3659":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:12041:1615":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:39542:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:43755:7323":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:12672:5501":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:12485:5761":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:13740:6072":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:6318:6529":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:7067:6640":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:47176:7432":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"22:3809:4846":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_fd_set"],"kind":"struct"},"5:5640:4704":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"22:3844:4855":{"crate_id":22,"path":["linux_raw_sys","general","vfs_cap_data"],"kind":"struct"},"2:44115:7338":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:4030:3162":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:1749:14966":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"20:0:2025":{"crate_id":20,"path":["cfg_if"],"kind":"module"},"22:4230:4952":{"crate_id":22,"path":["linux_raw_sys","general","rusage"],"kind":"struct"},"2:43683:7318":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:548:4930":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:2150:21793":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:44479:7209":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:40919:2938":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"22:3827:4849":{"crate_id":22,"path":["linux_raw_sys","general","__user_cap_header_struct"],"kind":"struct"},"2:21423:9579":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:6934:8639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:35:4667":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:12057:1689":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:13803:6085":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:8238:9514":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"23:0:3128":{"crate_id":23,"path":["bitflags"],"kind":"module"},"2:32391:6695":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:12725:5795":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:7492:6723":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:40755:2936":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:41980:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:582:5258":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:21212:34950":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"23:67:28202":{"crate_id":23,"path":["bitflags","parser","ParseHex"],"kind":"trait"},"1:10432:3486":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:5891:8391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:2927:2855":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:2907:6349":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:9702:5388":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:21857:4527":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:6993:4718":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:7828:6746":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:22258:14956":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"21:2691:3173":{"crate_id":21,"path":["rustix","backend","fs","types","Access"],"kind":"struct"},"17:12712:5794":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:9973:5174":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:32405:3682":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:5634:6411":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:12281:5717":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:9351:5253":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"21:1895:19672":{"crate_id":21,"path":["rustix","ioctl","Ioctl"],"kind":"trait"},"5:2978:36850":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:7381:31085":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:2670:6339":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:6813:8566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"22:4396:7731":{"crate_id":22,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:43004:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:2948:2860":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:42133:3381":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:6844:6608":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:8494:2774":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:10740:7185":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:10215:4734":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:11491:7195":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:40346:7258":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:4955:8273":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:1511:6895":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:3484:2277":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"9:426:20659":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"11:351:36982":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:10490:2752":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:7318:6674":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:1680:4670":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:12466:5756":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:12075:5668":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:8248:35285":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:11372:7529":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:6136:8500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:46605:7407":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:3602:6912":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:7568:6367":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"14:187:20749":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:42125:6912":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:10495:5463":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:45885:7376":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:2668:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:12197:5689":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:12435:14740":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:588:7874":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:48264:7483":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:21832:9585":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:507:4952":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:10024:5388":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:5696:21665":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:7320:3381":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:919:6895":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:5982:6457":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4516:8117":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"14:0:2585":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:3062:2811":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:6047:8465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:123:15345":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:4742:2281":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:1434:6912":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:4458:3683":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"22:4391:7730":{"crate_id":22,"path":["linux_raw_sys","general","siginfo"],"kind":"struct"},"6:555:5057":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:13423:5908":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:22244:9671":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:5378:14728":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:2974:2866":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:2577:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"22:4956:7768":{"crate_id":22,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1"],"kind":"union"},"17:9712:37015":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:10672:6912":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:41989:2776":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:13694:6063":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:7336:7011":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:40739:2935":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:5797:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:22338:9660":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:44374:7208":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:868:6896":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:4585:6390":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:2294:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:10317:5440":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:8867:3381":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:11180:8780":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:5866:6442":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:10779:7186":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:6425:6540":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:2355:2736":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:5117:8356":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:13852:6096":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:3327:2881":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:12056:842":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:10740:4062":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"21:378:9225":{"crate_id":21,"path":["rustix","backend","reg","ArgReg"],"kind":"struct"},"2:12196:7204":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:12946:5846":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:5830:6435":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:42695:3659":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:14025:6139":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:6818:6607":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:2210:14956":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"5:4082:6912":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12971:5849":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:3986:2791":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:3243:2831":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:9015:7578":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:13547:6011":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:904:4706":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:5310:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:12049:792":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:48294:7485":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:7792:21676":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:7503:6364":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:2788:6344":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:4800:4926":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:501:4969":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:9087:5374":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:1450:3381":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"21:6734:3178":{"crate_id":21,"path":["rustix","ugid","Gid"],"kind":"struct"},"2:44602:8780":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:44594:8778":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:13004:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:39705:7251":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:4893:8247":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:44268:7347":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:2698:8685":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"12:0:2584":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:6456:6542":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:7365:8651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:7090:6642":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:12053:1632":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:7357:3381":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:5088:6405":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:2744:6342":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"18:538:5203":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:10662:5483":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:4745:6394":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:2379:2143":{"crate_id":1,"path":["std","fs","remove_dir_all"],"kind":"function"},"18:644:5196":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:21180:34952":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:13452:5928":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:23290:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:46683:7409":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"18:690:5228":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"22:4150:4938":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_itimerspec"],"kind":"struct"},"16:5963:6450":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:10833:33015":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:10782:7599":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:2970:8678":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:2526:6333":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"22:0:3127":{"crate_id":22,"path":["linux_raw_sys"],"kind":"module"},"6:4676:8177":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"22:4541:7741":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg"],"kind":"struct"},"17:14309:6233":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:8309:7552":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:9208:5247":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:1639:7973":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"21:1813:25720":{"crate_id":21,"path":["rustix","ioctl","patterns","CompileTimeOpcode"],"kind":"trait"},"11:856:6901":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8282:8781":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"9:0:2581":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"0:405:1887":{"crate_id":0,"path":["tempfile","Builder"],"kind":"struct"},"2:21195:34960":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"21:3950:3174":{"crate_id":21,"path":["rustix","backend","fs","types","Advice"],"kind":"enum"},"2:11970:14742":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"21:6074:5168":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"2:44586:8776":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:9278:5249":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:837:2776":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:5242:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:7645:8664":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:11458:7194":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:6243:6514":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:3209:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:2139:4687":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:12055:1630":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:3743:6995":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:2178:8677":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"21:6045:3267":{"crate_id":21,"path":["rustix","backend","mount","types","MountPropagationFlags"],"kind":"struct"},"17:14157:6173":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:9792:232":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:11146:3487":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:23135:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:43973:7191":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:8892:7570":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:11789:5609":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:13677:6061":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:11172:33013":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:10052:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:42961:6765":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:5921:8401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:22540:8691":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:14164:6175":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"22:4599:5077":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_range"],"kind":"struct"},"9:357:20672":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:12037:1142":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:40637:2927":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:7513:4702":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:7710:2911":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"22:4119:4926":{"crate_id":22,"path":["linux_raw_sys","general","inotify_event"],"kind":"struct"},"5:1146:36848":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:2057:6995":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"18:719:5235":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"22:4557:5066":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"22:4923:7749":{"crate_id":22,"path":["linux_raw_sys","general","sigval"],"kind":"union"},"2:7292:2893":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:11536:5590":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:6915:6361":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"22:4039:4894":{"crate_id":22,"path":["linux_raw_sys","general","file_dedupe_range_info"],"kind":"struct"},"6:6741:8555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:4610:8163":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:6813:9577":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:5941:8403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:9841:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:10686:5487":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"23:51:9120":{"crate_id":23,"path":["bitflags","parser","AsDisplay"],"kind":"struct"},"2:47100:7430":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:10963:5533":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:21827:2752":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:40473:2716":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"11:2124:6643":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:43795:7326":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"21:4629:5168":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"2:8210:2908":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:21421:2752":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:12375:2781":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:2931:2857":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:11992:5654":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:39586:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:629:6990":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13149:5882":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:14119:6165":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:40608:2917":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"22:4973:7776":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"union"},"2:46508:7404":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:4641:5106":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:10279:5436":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11163:5550":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:6450:4732":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:7610:8656":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"22:4801:26702":{"crate_id":22,"path":["linux_raw_sys","general","fsconfig_command"],"kind":"enum"},"2:2400:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:44253:7342":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:1763:8688":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:8880:7178":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"14:165:20742":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:4321:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"11:1891:4690":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:12046:793":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:43733:7321":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:4153:9526":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"22:3835:4851":{"crate_id":22,"path":["linux_raw_sys","general","__user_cap_data_struct"],"kind":"struct"},"11:1051:6907":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4776:8201":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:42142:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:44459:7362":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:42066:4534":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:7639:8663":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:4902:2838":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:13839:6090":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:11125:5547":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:9999:5364":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"22:4268:4973":{"crate_id":22,"path":["linux_raw_sys","general","clone_args"],"kind":"struct"},"17:11382:5578":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"21:1854:25725":{"crate_id":21,"path":["rustix","ioctl","patterns","NoneOpcode"],"kind":"struct"},"1:5748:3302":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"22:4182:4945":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_sock_timeval"],"kind":"struct"},"16:2574:6335":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"11:1887:3381":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:43827:7330":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:7879:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:4052:3343":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:7669:7531":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"22:4222:4949":{"crate_id":22,"path":["linux_raw_sys","general","timezone"],"kind":"struct"},"2:47210:7433":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:10917:5529":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"11:1107:6909":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"11:2403:6912":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:13915:6112":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:8660:21712":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:6960:6619":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:32499:3888":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:5049:6404":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:5403:5373":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:4641:6392":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"22:3941:4877":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_key"],"kind":"struct"},"2:21869:34955":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:4497:6387":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:7664:1887":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"22:3873:4860":{"crate_id":22,"path":["linux_raw_sys","general","vfs_ns_cap_data__bindgen_ty_1"],"kind":"struct"},"2:9836:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:5015:8309":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:8191:2807":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"4:0:2580":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:1797:3453":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"15:306:20762":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:11607:32585":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"21:6670:5162":{"crate_id":21,"path":["rustix","ioctl","Opcode"],"kind":"struct"},"21:4800:3182":{"crate_id":21,"path":["rustix","backend","fs","types","StatVfsMountFlags"],"kind":"struct"},"6:4908:8255":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:7604:8655":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"11:1923:6919":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:12738:5797":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:41126:2895":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:10727:5492":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:1596:7939":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:10097:7589":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:39566:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"21:3915:136":{"crate_id":21,"path":["rustix","backend","fs","types","FileType"],"kind":"enum"},"2:22705:7237":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"11:2140:6905":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:2450:6330":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:10548:5468":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:12058:1238":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:4806:6396":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:4841:8228":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"11:2536:7831":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"21:1944:25727":{"crate_id":21,"path":["rustix","path","arg","Arg"],"kind":"trait"},"2:44785:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:10647:5479":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:4902:8253":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:6086:8479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"11:1007:6643":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:5829:3154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:6120:8495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:6560:4658":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:10576:5470":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:14111:6164":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:11394:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:47146:7431":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"3:0:473":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:2923:2856":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:41889:7173":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"7:0:1679":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:7839:2748":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"22:4382:5014":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_7"],"kind":"struct"},"15:394:20771":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:10228:5433":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:1019:4670":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:5419:5374":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:11384:8793":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:5634:4760":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"22:4030:4892":{"crate_id":22,"path":["linux_raw_sys","general","fstrim_range"],"kind":"struct"},"16:5017:6403":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:4578:8149":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:11940:15028":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:6359:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:2538:14808":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:7622:8658":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:30621:3649":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:46175:7388":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:5982:8421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:8563:2778":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:7621:21675":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:1281:6907":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:7015:6633":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:5928:5046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:7722:6359":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11935:5640":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:11075:5543":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"22:4493:5056":{"crate_id":22,"path":["linux_raw_sys","general","ktermios"],"kind":"struct"},"17:10535:5467":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:5992:8428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:0:2583":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:12811:5807":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:12766:5802":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:14101:6161":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:48200:7479":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:42977:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:46554:7406":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"11:844:9490":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:1382:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:1310:6911":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:13211:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:3888:6381":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"22:4550:7743":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"6:62:15290":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4932:8263":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:13189:5885":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:1820:3458":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"21:1793:25719":{"crate_id":21,"path":["rustix","ioctl","patterns","Updater"],"kind":"struct"},"17:9456:37014":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:8205:21678":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:6520:4670":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:5612:6356":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:22067:9665":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"11:1896:4706":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:39652:2873":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:8154:6797":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:6861:4717":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:2504:6332":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:22556:7218":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:42681:3651":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:4975:1131":{"crate_id":1,"path":["std","path"],"kind":"module"},"2:23166:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:39526:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:8287:9530":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"11:1087:36985":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:12577:5776":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13175:5884":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:7371:4973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"11:1910:6917":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:2919:2858":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:5123:8359":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"22:4355:5004":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"16:5743:6426":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:3830:6380":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:6204:6494":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:7739:3462":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:5897:8392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:2881:6348":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:40687:2940":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:8353:2282":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:21540:2752":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"13:110:36991":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:8960:3305":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:7755:3463":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:4603:8161":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:6428:2897":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:1691:8005":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:7296:4681":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:21370:9583":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:40707:2919":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:6148:4748":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:5969:8415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:2596:6336":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:489:4946":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:9651:5387":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:11202:5552":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:4647:8175":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:6711:8554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"11:328:7829":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"22:3755:7704":{"crate_id":22,"path":["linux_raw_sys","elf","Elf_Dyn_Union"],"kind":"union"},"5:4767:712":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:48317:7486":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:12155:5684":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:4947:8268":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:12059:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:10441:5450":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:8826:21729":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:536:6306":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:44590:8777":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:2880:3887":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"5:7286:4690":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:7702:8675":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:4800:2889":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:1296:6905":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:4505:3684":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:13633:6056":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:2644:6338":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:10950:5532":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:1697:4871":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:10699:5489":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:9845:3651":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:1546:7907":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:39466:2880":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"5:3728:2519":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:10398:5445":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:6545:3310":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"22:4533:5063":{"crate_id":22,"path":["linux_raw_sys","general","iovec"],"kind":"struct"},"11:2542:7832":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"22:4344:5000":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:22112:9666":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:557:7495":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:1818:1946":{"crate_id":1,"path":["std","env","temp_dir"],"kind":"function"},"2:43746:7322":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:4210:7151":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:2889:2853":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:12226:5698":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:1265:6643":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"22:4906:7745":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg__bindgen_ty_1"],"kind":"union"},"17:13898:6109":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:48142:7474":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:43445:7182":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:32412:7245":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:13967:6125":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:6545:6554":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:12420:7179":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"21:1772:5165":{"crate_id":21,"path":["rustix","ioctl","patterns","Setter"],"kind":"struct"},"2:4449:4726":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"22:4079:4912":{"crate_id":22,"path":["linux_raw_sys","general","fsxattr"],"kind":"struct"},"17:10930:5531":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:7070:2913":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:9922:5402":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:10817:7187":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:119:15344":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:42245:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:46462:7402":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:40393:7262":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13275:5568":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:11352:5573":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:4774:6395":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"21:0:2027":{"crate_id":21,"path":["rustix"],"kind":"module"},"14:40:5640":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6352:6532":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:3232:5270":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:825:4676":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:9173:5246":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12659:5786":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:11762:5608":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:654:4949":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:0:2588":{"crate_id":17,"path":["object"],"kind":"module"},"5:3589:2776":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:7054:6637":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:13066:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:5712:6421":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:2587:2820":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"21:1751:5163":{"crate_id":21,"path":["rustix","ioctl","patterns","Getter"],"kind":"struct"},"17:12497:5762":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:11548:5591":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"23:180:28203":{"crate_id":23,"path":["bitflags","parser","ParseErrorKind"],"kind":"enum"},"17:9618:37008":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:5574:6351":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"22:4285:4984":{"crate_id":22,"path":["linux_raw_sys","general","sigaction"],"kind":"struct"},"17:14091:6158":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:13711:6064":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:40306:33932":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:9103:5244":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:12050:788":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:7862:6750":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11087:5544":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:14537:6291":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:5435:6409":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:1557:6917":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:8158:2507":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:10617:5474":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:3764:6378":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:6889:8617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:21368:2752":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:44446:7358":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"21:3981:3179":{"crate_id":21,"path":["rustix","backend","fs","types","MemfdFlags"],"kind":"struct"},"17:2178:5266":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:11720:21740":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:44019:7335":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:6100:8490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:12180:7203":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"22:3749:7702":{"crate_id":22,"path":["linux_raw_sys","elf","Elf_Dyn"],"kind":"struct"},"21:6447:2276":{"crate_id":21,"path":["rustix","fs","seek_from","SeekFrom"],"kind":"enum"},"2:3448:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:4616:8165":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:6386:6536":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:10772:5496":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:3191:36905":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:44150:7260":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"11:2369:6922":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"22:3766:4844":{"crate_id":22,"path":["linux_raw_sys","general","__BindgenBitfieldUnit"],"kind":"struct"},"2:9849:3660":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:22615:7225":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:4417:6385":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"21:1373:37107":{"crate_id":21,"path":["rustix","fs","ioctl","Ficlone"],"kind":"struct"},"1:3427:2274":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:7582:6729":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"22:4312:7721":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_2"],"kind":"struct"},"17:11192:5274":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:13163:5883":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:7257:3908":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:23011:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"23:25:28198":{"crate_id":23,"path":["bitflags","iter","IterNames"],"kind":"struct"},"2:40550:2751":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"16:8050:6787":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:504:4687":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"18:755:5243":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:5397:3480":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:11216:5557":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:1041:6643":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:6261:6524":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:8954:21733":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"11:1160:6911":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:46864:7426":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:3396:2791":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"22:4627:5080":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_zeropage"],"kind":"struct"},"6:5009:4972":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:8227:7544":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:2149:6996":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:3031:2879":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:12453:5754":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:45841:7374":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:42559:3301":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:22731:9518":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"22:4607:5078":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_register"],"kind":"struct"},"17:14002:6134":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:11518:7507":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:13287:5899":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"22:4103:4921":{"crate_id":22,"path":["linux_raw_sys","general","robust_list"],"kind":"struct"},"1:1542:4690":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:13907:6110":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"19:0:1122":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:1110:36847":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:4745:8182":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:7838:2909":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:10580:4771":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:11846:5616":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:11296:5566":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:41997:6912":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:12268:5713":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:46316:7398":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:30565:2249":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:30599:3513":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:10739:5493":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:5084:7514":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4764:8194":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:3692:3381":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"22:4429:3154":{"crate_id":22,"path":["linux_raw_sys","general","statx"],"kind":"struct"},"2:10100:7181":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:42047:7291":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"11:1676:4665":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"0:0:1878":{"crate_id":0,"path":["tempfile"],"kind":"module"},"2:40655:7270":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4968:8283":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:4105:14712":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"11:700:3381":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:21226:34958":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"5:4040:4670":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:7645:7494":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:6792:6606":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:4922:8258":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12599:5777":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:44841:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:9138:5245":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"21:3548:5168":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"2:43663:7316":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:4330:7153":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:400:5254":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:11024:5536":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"11:1066:20736":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:2953:2861":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:11282:5565":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"8:0:2025":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:4998:8304":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"11:1582:6914":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:7768:6357":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"21:2303:5168":{"crate_id":21,"path":["rustix","backend","fs","inotify","_","InternalBitFlags"],"kind":"struct"},"2:30605:3514":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:12087:5669":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:4710:8180":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:21979:2752":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:569:7749":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"18:507:5196":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:7360:37003":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:2911:2851":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:11887:5625":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:3032:6372":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:8204:2907":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:14461:6275":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:2722:6341":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:4375:8039":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:7274:7010":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:12185:5688":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:0:872":{"crate_id":6,"path":["libc"],"kind":"module"},"1:9105:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:9638:3650":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"14:160:6886":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:8115:6793":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:7633:8662":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:10955:3483":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:2574:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"21:3346:5168":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"17:10367:5442":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"11:2498:20732":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:3982:3341":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:1570:7924":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:10814:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:6003:15264":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:1558:7916":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:2231:36752":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"11:800:4690":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:1761:3443":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:14336:6242":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:3493:32866":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:10759:8790":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:3246:6919":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:3677:4670":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:6893:6614":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:9070:8782":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:12032:399":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:596:7879":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:3049:20807":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"11:430:36990":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:7782:6738":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:10764:8792":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:40381:14803":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:4686:8178":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:44055:7336":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:5033:8315":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:2353:2735":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:3932:9520":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:10842:33017":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"21:1832:25723":{"crate_id":21,"path":["rustix","ioctl","patterns","WriteOpcode"],"kind":"struct"},"22:4791:5133":{"crate_id":22,"path":["linux_raw_sys","general","kernel_sigaction"],"kind":"struct"},"2:12646:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:45907:7377":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:5044:8321":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:5448:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:9986:5411":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:7538:7015":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:3672:9516":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:43186:7299":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:2875:3885":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:40279:7147":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:13245:5892":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:5973:4760":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:7524:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:13974:6126":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:4394:4725":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:10095:9508":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:47708:7467":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:1500:6894":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"23:101:28181":{"crate_id":23,"path":["bitflags","traits","Flags"],"kind":"trait"},"22:3881:4861":{"crate_id":22,"path":["linux_raw_sys","general","f_owner_ex"],"kind":"struct"},"1:4639:5104":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:43694:7319":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:22418:7215":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:11099:5545":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:10945:7191":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4814:8211":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:6600:21670":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:41660:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:32387:4349":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:8905:9574":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"22:4581:5071":{"crate_id":22,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_5"],"kind":"struct"},"6:6804:8563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:2832:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:11952:5643":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:12039:1496":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"22:4127:4930":{"crate_id":22,"path":["linux_raw_sys","general","pollfd"],"kind":"struct"},"2:22202:34011":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:6248:8534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:6083:20778":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"11:2231:5453":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:1551:6916":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:4889:6399":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:2974:36851":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:11160:3488":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:1496:7883":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:6401:6352":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:40400:7263":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:2905:2852":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:6531:6552":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"22:4338:7727":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5"],"kind":"struct"},"2:44828:7369":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:2406:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"21:5072:5168":{"crate_id":21,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"1:4313:7511":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:4741:2283":{"crate_id":1,"path":["std","os","fd","raw","RawFd"],"kind":"type_alias"},"2:45931:7378":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:2815:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:3915:6382":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:7424:9489":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:8214:2810":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:8878:9479":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"22:4888:26704":{"crate_id":22,"path":["linux_raw_sys","general","membarrier_cmd_flag"],"kind":"enum"},"6:4529:8122":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10098:5418":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:43837:2809":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:10215:5432":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:22653:33950":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"21:5466:5168":{"crate_id":21,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"16:4949:6401":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:42401:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:9661:37007":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:1682:7999":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:6299:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:7651:8665":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:4388:8049":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:6781:8556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"22:3854:4857":{"crate_id":22,"path":["linux_raw_sys","general","vfs_cap_data__bindgen_ty_1"],"kind":"struct"},"17:11491:5588":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:8979:21734":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:14127:6167":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:9853:3657":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:11309:7523":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:3225:36904":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"22:4782:5131":{"crate_id":22,"path":["linux_raw_sys","general","kernel_sigset_t"],"kind":"struct"},"16:2380:6327":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:1531:6994":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"13:226:7824":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:3737:7507":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:14515:6285":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:11595:7607":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:7462:6714":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:2206:2497":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:7668:8670":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:1664:7992":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:6263:8545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"22:3987:7714":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_remove_key_arg"],"kind":"struct"},"16:6279:6527":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:9329:2809":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:4325:7152":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:8803:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:4523:8120":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:6583:6556":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:7436:6461":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:48020:7471":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:7736:6736":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:46652:7408":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:4682:14797":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:46116:7385":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:5130:8362":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:14523:6288":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:11357:7527":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:8331:3189":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:22175:2752":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"9:507:6977":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:5382:14729":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"11:2352:6907":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:11001:5535":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:21197:34947":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:11478:4354":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:276:2209":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:2978:2867":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:678:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:3168:9385":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:3315:6375":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"22:3996:7717":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_get_key_status_arg"],"kind":"struct"},"1:5570:3484":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"18:624:37021":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:1073:6911":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:4010:4690":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4506:8114":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:6474:4690":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:40769:2937":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:4253:3681":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:13877:6104":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"18:113:25693":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:12173:5685":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:10249:3492":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"21:6245:5188":{"crate_id":21,"path":["rustix","backend","mount","types","InternalMountFlags"],"kind":"struct"},"16:6415:6539":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:12035:1650":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:3077:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:43901:7332":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:6361:6533":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:7554:6366":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:5867:4690":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"18:80:25691":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:8097:6791":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:44299:7351":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:5910:8393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:8985:7574":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:6107:2791":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:3212:6918":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:6612:3315":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:4434:8081":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:11574:5592":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:3338:4706":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:1759:3442":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:6687:6580":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:6913:8627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:12040:1529":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:434:5256":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:9781:5390":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:11292:4775":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:12005:9478":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:7916:7539":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:5053:7514":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:9095:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:3293:2876":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"21:6717:3185":{"crate_id":21,"path":["rustix","ugid","Uid"],"kind":"struct"},"1:2519:2819":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:21442:7214":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:12051:1634":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:7365:3381":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:4724:8181":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:10411:5446":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:10281:4737":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:11047:4773":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:12984:5851":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:9897:21748":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"18:531:5200":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:8991:7179":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"11:364:4661":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"18:609:5213":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:12047:790":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"21:6270:5168":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"1:8327:7553":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:42057:15020":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:44168:7259":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"22:4206:4947":{"crate_id":22,"path":["linux_raw_sys","general","itimerspec"],"kind":"struct"},"2:44566:8771":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:14356:6245":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:12889:5834":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:13203:5888":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:10078:3453":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:8766:21727":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:646:9473":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:46015:7381":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:4830:8220":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:3232:6317":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:7608:4706":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:13555:6014":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:9960:5408":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:11390:5580":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"14:202:4838":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:14069:6153":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:11455:4777":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:8937:9575":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13990:6128":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:12044:5664":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:23321:7242":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"22:4412:5018":{"crate_id":22,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"17:10448:5453":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"22:4644:5083":{"crate_id":22,"path":["linux_raw_sys","general","uffdio_continue"],"kind":"struct"},"6:533:7860":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:6196:7521":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:7660:6734":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:4566:8143":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:1681:1179":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:483:7854":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11449:21737":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:6658:4984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:8170:2276":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:11640:5274":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:14297:6230":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:10715:5491":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:8879:9570":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:3116:2871":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:3655:5286":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"21:4599:3176":{"crate_id":21,"path":["rustix","backend","fs","types","FallocateFlags"],"kind":"struct"},"2:2590:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:5146:8365":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:44125:7339":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:22289:2752":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:4994:2791":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:1184:5261":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:13793:6084":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:15:2271":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:5760:21666":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:44073:7337":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:8007:3945":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"22:3900:4868":{"crate_id":22,"path":["linux_raw_sys","general","flock64"],"kind":"struct"},"2:3312:34897":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:12440:14739":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:46386:7400":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:14500:6284":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:12157:7202":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:43426:7311":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:4666:8176":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"11:2548:7833":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:9165:7585":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"5:7549:7016":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:12555:5769":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"22:4166:4943":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_old_timespec"],"kind":"struct"},"1:1864:1872":{"crate_id":1,"path":["std","error"],"kind":"module"},"2:22580:7223":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:1535:2776":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:10475:4770":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"18:491:5195":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:6072:4755":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:3083:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:10959:7192":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:10140:21765":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:12912:5843":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:2406:6328":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:1568:6919":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"11:102:7825":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:41908:7175":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:2822:1926":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"10:0:2582":{"crate_id":10,"path":["adler"],"kind":"module"},"2:3073:2267":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:3461:6376":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:8927:21732":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:1710:8011":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:8849:21730":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:4835:6397":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:10604:5473":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:44105:2806":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"18:481:5194":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:8167:6800":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:1772:4332":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:23766:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:2209:5269":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"11:742:6895":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:1521:7893":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:21429:9582":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"22:4724:5122":{"crate_id":22,"path":["linux_raw_sys","general","statfs64"],"kind":"struct"},"2:3557:4690":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:40669:2930":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:3065:5281":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:9608:5386":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:7006:6630":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"22:4327:4996":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_4"],"kind":"struct"},"17:2012:5262":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:1903:3689":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:2381:2744":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:9565:5385":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:7128:7582":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:1970:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:3299:2878":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"22:4142:4935":{"crate_id":22,"path":["linux_raw_sys","general","__kernel_timespec"],"kind":"struct"},"6:580:7869":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:7785:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:9522:5384":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:7844:2749":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:12025:5660":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:42921:8762":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:4462:6386":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:10638:5478":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"18:699:5229":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:8221:2806":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"11:2326:6905":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:21158:3356":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"21:6690:15026":{"crate_id":21,"path":["rustix","ioctl","Direction"],"kind":"enum"},"2:2826:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:44574:8773":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:40336:7257":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:9498:9025":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:40426:7267":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:2915:2854":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"21:5874:5168":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"2:43241:7310":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:4702:9558":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:8714:21726":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:10060:5415":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:7600:4768":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:2948:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:12998:5852":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"9:237:2772":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:207:4669":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:21549:9580":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:13568:6021":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"22:4661:3189":{"crate_id":22,"path":["linux_raw_sys","general","stat"],"kind":"struct"},"16:2933:20805":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:6868:8603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:6189:6492":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:9148:7584":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:638:7496":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:2212:14957":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:8195:6802":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:7902:7505":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:5023:8314":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:11614:7530":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"22:4198:4946":{"crate_id":22,"path":["linux_raw_sys","general","timeval"],"kind":"struct"},"6:5955:8414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"21:4428:5168":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"17:11338:21860":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:43233:7309":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:8815:3487":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:2946:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:11618:5595":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"11:396:4663":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"23:64:28201":{"crate_id":23,"path":["bitflags","parser","WriteHex"],"kind":"trait"},"16:5939:6303":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:8138:2835":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:910:6913":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:45953:7379":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:9373:5375":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:13576:6022":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:10946:4154":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"22:4260:4972":{"crate_id":22,"path":["linux_raw_sys","general","rlimit64"],"kind":"struct"},"6:4808:8209":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:1840:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:3445:2501":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:44425:14754":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:10794:2750":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:2657:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:10562:5469":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:6700:8552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:881:6897":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:1126:36907":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:10421:5322":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"21:5847:3265":{"crate_id":21,"path":["rustix","backend","mount","types","UnmountFlags"],"kind":"struct"},"2:3272:2874":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"11:832:6913":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:9887:5399":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:2601:4738":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:5334:4670":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:4371:4697":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"21:5676:5168":{"crate_id":21,"path":["rustix","backend","mount","types","_","InternalBitFlags"],"kind":"struct"},"2:41119:7165":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:11262:5563":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:0:2587":{"crate_id":16,"path":["gimli"],"kind":"module"},"21:2718:5168":{"crate_id":21,"path":["rustix","backend","fs","types","_","InternalBitFlags"],"kind":"struct"},"2:44621:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:5433:3482":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:40779:2922":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:563:7866":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:41746:8761":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:7028:4765":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:2894:2850":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:6901:6360":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"11:2562:7835":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:22333:9662":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:6467:6543":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"24:143:3871":{"crate_id":24,"path":["fastrand","Rng"],"kind":"struct"},"2:44134:7340":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:10942:3463":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:43026:2510":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:2203:2733":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:7041:6634":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:4557:6389":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:13041:5858":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:7018:4721":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:5974:8416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:10629:5477":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:4182:9529":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:30338:9517":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:9753:5389":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:860:3381":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:13229:5890":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:12000:9027":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12124:5675":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:12054:1633":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:2586:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"22:3952:4878":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_policy_v2"],"kind":"struct"},"16:2428:6329":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11049:5538":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:6114:8492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4496:8108":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:10852:7188":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"22:4519:5062":{"crate_id":22,"path":["linux_raw_sys","general","termio"],"kind":"struct"},"6:5867:8375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:48241:7482":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:1734:7736":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:4637:5102":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:5152:8368":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:2709:3693":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"22:4913:7746":{"crate_id":22,"path":["linux_raw_sys","general","fscrypt_key_specifier__bindgen_ty_1"],"kind":"union"},"2:22719:7238":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:14057:6150":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:1822:3459":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:6718:3189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:4908:9556":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:7747:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:2305:20804":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"18:614:37019":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12438:5749":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:40440:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:8404:2771":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:2987:2869":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:6432:3306":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:7522:2896":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:6485:6353":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:39630:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:39878:28602":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"18:574:5196":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"22:4404:7736":{"crate_id":22,"path":["linux_raw_sys","general","sigevent"],"kind":"struct"},"16:7513:6726":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:11227:5561":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:7884:21677":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"11:2304:6643":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:4854:8233":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:46138:7386":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:2469:8682":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:40457:33929":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:7616:8657":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:1537:7901":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:6156:6487":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"18:766:25703":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:2251:8681":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:4855:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:13724:6069":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:1604:7944":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:2200:630":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:7743:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:12486:14747":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:4705:9531":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:43654:7314":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:11368:5575":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:533:4751":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"18:681:5226":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:10099:7588":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"11:123:4659":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"23:90:6765":{"crate_id":23,"path":["bitflags","traits","Flag"],"kind":"struct"},"1:7932:2519":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:22980:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:7440:2712":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:1501:7885":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:7342:37002":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:44578:8774":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:1674:7998":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:7269:37005":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:14402:6259":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:4824:8217":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:6107:8491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:256:5251":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:4989:8298":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:4233:7510":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11273:5564":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:9843:3652":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:5661:6420":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:2663:2822":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:7706:2912":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:11036:4772":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"22:4374:5011":{"crate_id":22,"path":["linux_raw_sys","general","__sifields__bindgen_ty_6"],"kind":"struct"},"1:4966:9562":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:23259:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:2810:6345":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:42284:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"11:875:6903":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"11:1603:6915":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:47958:7470":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"14:221:6892":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:32398:7244":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:4847:8231":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:11621:7530":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"22:4653:5085":{"crate_id":22,"path":["linux_raw_sys","general","linux_dirent64"],"kind":"struct"},"2:47360:7434":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"22:4110:4922":{"crate_id":22,"path":["linux_raw_sys","general","robust_list_head"],"kind":"struct"},"1:7690:4771":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"}},"external_crates":{"23":{"name":"bitflags","html_root_url":null},"20":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"linux_raw_sys","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"fastrand","html_root_url":null},"21":{"name":"rustix","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}