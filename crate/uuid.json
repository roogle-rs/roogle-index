{"root":"0:0:2255","crate_version":"1.6.1","includes_private":false,"index":{"0:485":{"id":"0:485","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:9806:2834","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:486:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:120":{"id":"0:120","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[22,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:121:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:192":{"id":"0:192","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[682,0],"end":[830,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:193:2181","0:194:2883","0:195:2913","0:197:2921","0:199:2676","0:200:2278"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:543:714":{"id":"0:543:714","crate_id":0,"name":"fmt","span":{"filename":"src/timestamp.rs","begin":[361,13],"end":[361,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209:3041":{"id":"0:209:3041","crate_id":0,"name":"from_unix","span":{"filename":"src/timestamp.rs","begin":[102,4],"end":[119,5]},"visibility":"public","docs":"Construct a `Timestamp` from a Unix timestamp, as used in version 7 UUIDs.\n\n# Overflow\n\nIf conversion from RFC4122 ticks to the internal timestamp format would overflow\nit will wrap.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["context",{"impl_trait":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:226:1902","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u16"}}}}]}}},"generic_params":[],"modifier":"none"}}]}],["seconds",{"primitive":"u64"}],["nanos",{"primitive":"u32"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl ClockSequence<Output = u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:226:1902","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u16"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:527:714":{"id":"0:527:714","crate_id":0,"name":"fmt","span":{"filename":"src/timestamp.rs","begin":[40,9],"end":[40,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5804-0:296:134":{"id":"b:5:5804-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5802:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5806:1589"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:380":{"id":"0:380","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,42],"end":[68,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10011:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:381:778"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:374:714":{"id":"0:374:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[68,22],"end":[68,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2605-0:291:1920":{"id":"b:1:2605-0:291:1920","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1920","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:295:714":{"id":"0:295:714","crate_id":0,"name":"fmt","span":{"filename":"src/builder.rs","begin":[46,9],"end":[46,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2590-0:367:2839":{"id":"b:1:2590-0:367:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:2389"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:503":{"id":"0:503","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2558:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:504:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:199:2676":{"id":"0:199:2676","crate_id":0,"name":"as_uuid","span":{"filename":"src/fmt.rs","begin":[813,4],"end":[815,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet urn = Uuid::nil().urn();\nassert_eq!(*urn.as_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:440:452":{"id":"0:440:452","crate_id":0,"name":"clone","span":{"filename":"src/fmt.rs","begin":[86,9],"end":[86,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:575:1945":{"id":"0:575:1945","crate_id":0,"name":"Custom","span":{"filename":"src/lib.rs","begin":[319,4],"end":[319,14]},"visibility":"default","docs":"Version 8: Custom.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"8","value":"8"}}}},"0:400":{"id":"0:400","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,38],"end":[74,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2810:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:167:2883":{"id":"0:167:2883","crate_id":0,"name":"from_uuid","span":{"filename":"src/fmt.rs","begin":[259,4],"end":[261,5]},"visibility":"public","docs":"Creates a [`Hyphenated`] from a [`Uuid`].\n\n[`Uuid`]: ../struct.Uuid.html\n[`Hyphenated`]: struct.Hyphenated.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:2280":{"id":"0:16:2280","crate_id":0,"name":"max","span":{"filename":"src/builder.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"The 'max UUID' (all ones).\n\nThe max UUID is a special form of UUID that is specified to have all\n128 bits set to one.\n\n# References\n\n* [Max UUID in Draft RFC: New UUID Formats, Version 4](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04#section-5.4)\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet uuid = Uuid::max();\n\nassert_eq!(\n    \"ffffffff-ffff-ffff-ffff-ffffffffffff\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2599":{"id":"0:27:2599","crate_id":0,"name":"from_slice_le","span":{"filename":"src/builder.rs","begin":[379,4],"end":[387,5]},"visibility":"public","docs":"Creates a UUID using the supplied bytes in little endian order.\n\nThe individual fields encoded in the buffer will be flipped.\n\n# Errors\n\nThis function will return an error if `b` has any length other than 16.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_slice_le(&bytes)?;\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\"\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42018:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138:2855":{"id":"0:138:2855","crate_id":0,"name":"as_urn","span":{"filename":"src/fmt.rs","begin":[125,4],"end":[128,5]},"visibility":"public","docs":"Get a borrowed [`Urn`] formatter.","links":{"`Urn`":"0:413:2180"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:610":{"id":"0:610","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,9],"end":[437,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:611:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:684:3301":{"id":"5:684:3301","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:459":{"id":"0:459","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:460:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12691:26433":{"id":"1:12691:26433","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12692:26421"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44045:3752","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12713:31149":{"id":"1:12713:31149","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12360:3322","`DoubleEndedIterator`":"1:7752:127","prim@char":"4:12032:448","str::split_whitespace":"1:12691:26433","str::rsplit":"1:12719:31152"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43771:3766","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12734:31158":{"id":"1:12734:31158","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:2921":{"id":"0:170:2921","crate_id":0,"name":"encode_upper","span":{"filename":"src/fmt.rs","begin":[361,4],"end":[363,5]},"visibility":"public","docs":"Writes the [`Uuid`] as an upper-case hyphenated string to\n`buffer`, and returns the subslice of the buffer that contains the\nencoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936da01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.hyphenated()\n            .encode_upper(&mut Uuid::encode_buffer()),\n        \"936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 40];\n    uuid.hyphenated().encode_upper(&mut buf);\n    assert_eq!(\n        &buf as &[_],\n        b\"936DA01F-9ABD-4D9D-80C7-02AF85C822A8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2856:3331-0:390:2842":{"id":"a:1:2856:3331-0:390:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:3331","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:409":{"id":"0:409","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,53],"end":[74,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2350:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:410:658"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:522:2833":{"id":"0:522:2833","crate_id":0,"name":"borrow","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282":{"id":"0:282","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[928,0],"end":[933,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2641:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:283:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5531:34792":{"id":"5:5531:34792","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:3315","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:3315","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:2913":{"id":"0:168:2913","crate_id":0,"name":"encode_lower","span":{"filename":"src/fmt.rs","begin":[310,4],"end":[312,5]},"visibility":"public","docs":"Writes the [`Uuid`] as a lower-case hyphenated string to\n`buffer`, and returns the subslice of the buffer that contains the\nencoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936DA01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.hyphenated()\n            .encode_lower(&mut Uuid::encode_buffer()),\n        \"936da01f-9abd-4d9d-80c7-02af85c822a8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 40];\n    uuid.hyphenated().encode_lower(&mut buf);\n    assert_eq!(\n        &buf as &[_],\n        b\"936da01f-9abd-4d9d-80c7-02af85c822a8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12669:34098":{"id":"1:12669:34098","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12667:34097"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:2634":{"id":"0:40:2634","crate_id":0,"name":"from_sorted_rfc4122_timestamp","span":{"filename":"src/builder.rs","begin":[602,4],"end":[610,5]},"visibility":"public","docs":"Creates a `Builder` for a version 6 UUID using the supplied timestamp and node ID.\n\nThis method will encode the ticks, counter, and node ID in a sortable UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ticks",{"primitive":"u64"}],["counter",{"primitive":"u16"}],["node_id",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"6"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:390:2842":{"id":"b:1:3433-0:390:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2608:134":{"id":"1:2608:134","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32295:3296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:38:2625":{"id":"0:38:2625","crate_id":0,"name":"from_random_bytes","span":{"filename":"src/builder.rs","begin":[583,4],"end":[587,5]},"visibility":"public","docs":"Creates a `Builder` for a version 4 UUID using the supplied random bytes.\n\nThis method assumes the bytes are already sufficiently random, it will only\nset the appropriate bits for the UUID version and variant.\n\n# Examples\n\n```\n# use uuid::{Builder, Variant, Version};\n# let rng = || [\n#     70, 235, 208, 238, 14, 109, 67, 201, 185, 13, 204, 195, 90,\n# 145, 63, 62,\n# ];\nlet random_bytes = rng();\nlet uuid = Builder::from_random_bytes(random_bytes).into_uuid();\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["random_bytes",{"resolved_path":{"name":"Bytes","id":"0:254:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:310":{"id":"0:310","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,33],"end":[4,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2350:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:311:658"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:604":{"id":"0:604","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,29],"end":[329,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2809:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12696:2405":{"id":"1:12696:2405","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291:1920":{"id":"0:291:1920","crate_id":0,"name":"Builder","span":{"filename":"src/builder.rs","begin":[47,0],"end":[47,25]},"visibility":"public","docs":"A builder for creating a UUID.\n\nThis type is useful if you need to mutate individual fields of a [`Uuid`]\nwhile constructing it. Since the [`Uuid`] type is `Copy`, it doesn't offer\nany methods to mutate in place. They live on the `Builder` instead.\n\nThe `Builder` type also always exposes APIs to construct [`Uuid`]s for any\nversion without needing crate features or additional dependencies. It's a\nlower-level API than the methods on [`Uuid`].\n\n# Examples\n\nCreating a version 4 UUID from externally generated random bytes:\n\n```\n# use uuid::{Builder, Version, Variant};\n# let rng = || [\n#     70, 235, 208, 238, 14, 109, 67, 201, 185, 13, 204, 195, 90,\n# 145, 63, 62,\n# ];\nlet random_bytes = rng();\n\nlet uuid = Builder::from_random_bytes(random_bytes).into_uuid();\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n```","links":{"`Uuid`":"0:607:2003"},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:32","a:1:8846:3484-0:291:1920","a:1:2799:243-0:291:1920","a:1:2816:253-0:291:1920","a:1:2856:3331-0:291:1920","a:1:8845:3485-0:291:1920","b:1:2290-0:291:1920","b:1:2605-0:291:1920","b:1:2600-0:291:1920","b:1:2590-0:291:1920","b:1:2594-0:291:1920","b:1:3433-0:291:1920","b:1:2287-0:291:1920","0:294"]}}},"a:1:2816:253-0:367:2839":{"id":"a:1:2816:253-0:367:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:394:452":{"id":"0:394:452","crate_id":0,"name":"clone","span":{"filename":"src/fmt.rs","begin":[74,9],"end":[74,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:420:714":{"id":"0:420:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[80,22],"end":[80,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:418":{"id":"0:418","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,16],"end":[80,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:446":{"id":"0:446","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,38],"end":[86,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2810:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:484:714":{"id":"0:484:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:2357":{"id":"0:22:2357","crate_id":0,"name":"from_u128","span":{"filename":"src/builder.rs","begin":[206,4],"end":[225,5]},"visibility":"public","docs":"Creates a UUID from a 128bit value.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n\nlet uuid = Uuid::from_u128(v);\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"primitive":"u128"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:453:459":{"id":"0:453:459","crate_id":0,"name":"cmp","span":{"filename":"src/fmt.rs","begin":[86,48],"end":[86,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31111:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2287-0:367:2839":{"id":"b:1:2287-0:367:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:2833"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5804-0:367:2839":{"id":"b:5:5804-0:367:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5802:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5806:1589"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2290-0:436:2847":{"id":"b:1:2290-0:436:2847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:267:2101":{"id":"0:267:2101","crate_id":0,"name":"to_fields_le","span":{"filename":"src/lib.rs","begin":[668,4],"end":[680,5]},"visibility":"public","docs":"Returns the four field values of the UUID in little-endian order.\n\nThe bytes in the returned integer fields will be converted from\nbig-endian order. This is based on the endianness of the UUID,\nrather than the target environment so bytes will be flipped on both\nbig and little endian machines.\n\n# Examples\n\n```\nuse uuid::Uuid;\n\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.to_fields_le(),\n    (\n        0xa4a3a2a1,\n        0xb2b1,\n        0xc2c1,\n        &[0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8],\n    )\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u32"},{"primitive":"u16"},{"primitive":"u16"},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:403":{"id":"0:403","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,42],"end":[74,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10011:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:404:778"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:128":{"id":"0:128","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[53,0],"end":[57,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:9806:2834","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:129:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:508:741":{"id":"0:508:741","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12666:34096":{"id":"1:12666:34096","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2290-0:523:1903":{"id":"b:1:2290-0:523:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:166:2181":{"id":"0:166:2181","crate_id":0,"name":"LENGTH","span":{"filename":"src/fmt.rs","begin":[253,4],"end":[253,33]},"visibility":"public","docs":"The length of a hyphenated [`Uuid`] string.\n\n[`Uuid`]: ../struct.Uuid.html","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"primitive":"usize"},"default":"36"}}},"0:518:741":{"id":"0:518:741","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2816:253-0:589:1951":{"id":"a:1:2816:253-0:589:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2605-0:296:134":{"id":"b:1:2605-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:444":{"id":"0:444","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,29],"end":[86,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2641:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:445:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2287-0:390:2842":{"id":"b:1:2287-0:390:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:2833"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:617:778":{"id":"0:617:778","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[437,26],"end":[437,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10019:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12766:30003":{"id":"1:12766:30003","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3322"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:495":{"id":"0:495","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2558:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:496:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:300:452":{"id":"0:300:452","crate_id":0,"name":"clone","span":{"filename":"src/error.rs","begin":[4,9],"end":[4,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8846:3484-0:296:134":{"id":"a:1:8846:3484-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3484","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2590-0:291:1920":{"id":"b:1:2590-0:291:1920","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1920","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:2389"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:260:2028":{"id":"0:260:2028","crate_id":0,"name":"NAMESPACE_X500","span":{"filename":"src/lib.rs","begin":[473,4],"end":[476,7]},"visibility":"public","docs":"UUID namespace for X.500 Distinguished Names (DNs).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"b:1:2590-0:413:2180":{"id":"b:1:2590-0:413:2180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:2389"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[22,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"1:12320:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:82:133","0:83:2730"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:135:2302":{"id":"0:135:2302","crate_id":0,"name":"simple","span":{"filename":"src/fmt.rs","begin":[106,4],"end":[108,5]},"visibility":"public","docs":"Get a [`Simple`] formatter.","links":{"`Simple`":"0:390:2842"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:545:452":{"id":"0:545:452","crate_id":0,"name":"clone","span":{"filename":"src/timestamp.rs","begin":[361,20],"end":[361,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:529:452":{"id":"0:529:452","crate_id":0,"name":"clone","span":{"filename":"src/timestamp.rs","begin":[40,16],"end":[40,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[394,0],"end":[537,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:175:2181","0:176:2883","0:177:2913","0:179:2921","0:181:2676","0:182:2278"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:478:714":{"id":"0:478:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:452":{"id":"0:452","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,48],"end":[86,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"1:2386:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:453:459"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5804-0:607:2003":{"id":"b:5:5804-0:607:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5802:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5806:1589"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:686:26192":{"id":"5:686:26192","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2290-0:296:134":{"id":"b:1:2290-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:54:2664":{"id":"0:54:2664","crate_id":0,"name":"set_variant","span":{"filename":"src/builder.rs","begin":[834,4],"end":[837,5]},"visibility":"public","docs":"Specifies the variant of the UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["v",{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:387:658":{"id":"0:387:658","crate_id":0,"name":"eq","span":{"filename":"src/fmt.rs","begin":[68,53],"end":[68,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2290-0:390:2842":{"id":"b:1:2290-0:390:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:504:340":{"id":"0:504:340","crate_id":0,"name":"as_ref","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:441":{"id":"0:441","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,16],"end":[86,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2594-0:540:1901":{"id":"b:1:2594-0:540:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2590-0:523:1903":{"id":"b:1:2590-0:523:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:2389"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12754:34109":{"id":"1:12754:34109","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8846:3484-0:607:2003":{"id":"a:1:8846:3484-0:607:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3484","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2856:3331-0:296:134":{"id":"a:1:2856:3331-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:3331","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:435:1129":{"id":"0:435:1129","crate_id":0,"name":"partial_cmp","span":{"filename":"src/fmt.rs","begin":[80,64],"end":[80,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31111:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278:2179":{"id":"0:278:2179","crate_id":0,"name":"encode_buffer","span":{"filename":"src/lib.rs","begin":[875,4],"end":[877,5]},"visibility":"public","docs":"A buffer that can be used for `encode_...` calls, that is\nguaranteed to be long enough for any of the format adapters.\n\n# Examples\n\n```\n# use uuid::Uuid;\nlet uuid = Uuid::nil();\n\nassert_eq!(\n    uuid.simple().encode_lower(&mut Uuid::encode_buffer()),\n    \"00000000000000000000000000000000\"\n);\n\nassert_eq!(\n    uuid.hyphenated()\n        .encode_lower(&mut Uuid::encode_buffer()),\n    \"00000000-0000-0000-0000-000000000000\"\n);\n\nassert_eq!(\n    uuid.urn().encode_lower(&mut Uuid::encode_buffer()),\n    \"urn:uuid:00000000-0000-0000-0000-000000000000\"\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"array":{"type":{"primitive":"u8"},"len":"45"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:611:452":{"id":"0:611:452","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[437,9],"end":[437,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410:658":{"id":"0:410:658","crate_id":0,"name":"eq","span":{"filename":"src/fmt.rs","begin":[74,53],"end":[74,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:465:714":{"id":"0:465:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:447":{"id":"0:447","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,38],"end":[86,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2355:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12759:34112":{"id":"1:12759:34112","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:1612":{"id":"0:86:1612","crate_id":0,"name":"try_from","span":{"filename":"src/parser.rs","begin":[33,4],"end":[35,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid_str",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42018:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:2574:263","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8846:3484-0:390:2842":{"id":"a:1:8846:3484-0:390:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3484","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12693:32957":{"id":"1:12693:32957","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44025:3759","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:603:714":{"id":"0:603:714","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[329,22],"end":[329,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2600-0:550:1927":{"id":"b:1:2600-0:550:1927","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:498:2833":{"id":"0:498:2833","crate_id":0,"name":"borrow","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:586":{"id":"0:586","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,29],"end":[298,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2809:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:491":{"id":"0:491","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:492:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2605-0:390:2842":{"id":"b:1:2605-0:390:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12694:34102":{"id":"1:12694:34102","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44035:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2856:3331-0:589:1951":{"id":"a:1:2856:3331-0:589:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:3331","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8845:3485-0:390:2842":{"id":"a:1:8845:3485-0:390:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:259:2026":{"id":"0:259:2026","crate_id":0,"name":"NAMESPACE_URL","span":{"filename":"src/lib.rs","begin":[467,4],"end":[470,7]},"visibility":"public","docs":"UUID namespace for Uniform Resource Locators (URLs).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"b:1:2590-0:540:1901":{"id":"b:1:2590-0:540:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:2389"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:581":{"id":"0:581","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,9],"end":[298,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:582:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8845:3485-0:523:1903":{"id":"a:1:8845:3485-0:523:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:431":{"id":"0:431","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,53],"end":[80,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2809:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:600:452":{"id":"0:600:452","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[329,9],"end":[329,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/builder.rs","begin":[49,0],"end":[492,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:2207","0:16:2280","0:18:2333","0:20:2339","0:22:2357","0:23:2360","0:24:2366","0:25:2208","0:27:2599","0:29:2227","0:30:2398","0:31:2606"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:283:60":{"id":"0:283:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[930,4],"end":[932,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84":{"id":"0:84","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[30,0],"end":[36,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:85:134","0:86:1612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12719:31152":{"id":"1:12719:31152","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12360:3322","`DoubleEndedIterator`":"1:7752:127","prim@char":"4:12032:448","str::split":"1:12713:31149"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43789:3765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12790:31072":{"id":"1:12790:31072","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:896:9485"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:584":{"id":"0:584","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,22],"end":[298,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:585:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2594-0:607:2003":{"id":"b:1:2594-0:607:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:123:714":{"id":"0:123:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[30,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2605-0:540:1901":{"id":"b:1:2605-0:540:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:483":{"id":"0:483","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:484:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:23:2360":{"id":"0:23:2360","crate_id":0,"name":"from_u128_le","span":{"filename":"src/builder.rs","begin":[249,4],"end":[268,5]},"visibility":"public","docs":"Creates a UUID from a 128bit value in little-endian order.\n\nThe entire value will be flipped to convert into big-endian order.\nThis is based on the endianness of the UUID, rather than the target\nenvironment so bytes will be flipped on both big and little endian\nmachines.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n\nlet uuid = Uuid::from_u128_le(v);\n\nassert_eq!(\n    \"d8d7d6d5-d4d3-d2d1-c2c1-b2b1a4a3a2a1\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"primitive":"u128"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2799:243-0:291:1920":{"id":"a:1:2799:243-0:291:1920","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1920","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:398":{"id":"0:398","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,29],"end":[74,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2641:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:399:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:421":{"id":"0:421","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,29],"end":[80,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2641:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:422:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:299":{"id":"0:299","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,9],"end":[4,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:300:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2816:253-0:291:1920":{"id":"a:1:2816:253-0:291:1920","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1920","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[171,4],"end":[171,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","provide","description","cause","type_id"],"trait":{"name":"Error","id":"1:2652:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:496:340":{"id":"0:496:340","crate_id":0,"name":"as_ref","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:228:3033":{"id":"0:228:3033","crate_id":0,"name":"generate_sequence","span":{"filename":"src/timestamp.rs","begin":[340,4],"end":[340,81]},"visibility":"default","docs":"Get the next value in the sequence to feed into a timestamp.\n\nThis method will be called each time a [`Timestamp`] is constructed.","links":{"`Timestamp`":"0:523:1903"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["seconds",{"primitive":"u64"}],["subsec_nanos",{"primitive":"u32"}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:226:1902","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2594-0:436:2847":{"id":"b:1:2594-0:436:2847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:511":{"id":"0:511","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2558:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:512:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:3435:1627":{"id":"1:3435:1627","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39635:7767","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8846:3484-0:523:1903":{"id":"a:1:8846:3484-0:523:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3484","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:274:2148":{"id":"0:274:2148","crate_id":0,"name":"into_bytes","span":{"filename":"src/lib.rs","begin":[804,4],"end":[806,5]},"visibility":"public","docs":"Consumes self and returns the underlying byte value of the UUID.\n\n# Examples\n\n```\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\nlet uuid = Uuid::from_bytes(bytes);\nassert_eq!(bytes, uuid.into_bytes());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Bytes","id":"0:254:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5546:34795":{"id":"5:5546:34795","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2600-0:436:2847":{"id":"b:1:2600-0:436:2847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12675:2874":{"id":"1:12675:2874","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12049:1636"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:413:2180":{"id":"0:413:2180","crate_id":0,"name":"Urn","span":{"filename":"src/fmt.rs","begin":[82,0],"end":[82,21]},"visibility":"public","docs":"Format a [`Uuid`] as a URN string, like\n`urn:uuid:67e55044-10b1-426f-9247-bb680e5fe0c8`.","links":{"`Uuid`":"0:607:2003"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:192","a:1:8846:3484-0:413:2180","a:1:2799:243-0:413:2180","a:1:2816:253-0:413:2180","a:1:2856:3331-0:413:2180","a:1:8845:3485-0:413:2180","b:1:2290-0:413:2180","b:1:2605-0:413:2180","b:1:2600-0:413:2180","b:1:2590-0:413:2180","b:1:2594-0:413:2180","b:1:3433-0:413:2180","b:1:2287-0:413:2180","b:5:5804-0:413:2180","b:5:682-0:413:2180","0:511","0:429","0:434","0:480","0:432","0:424","0:477","0:419","0:416","0:475","0:509","0:423","0:418","0:426","0:513","0:507","0:431","0:421"]}}},"b:1:2600-0:523:1903":{"id":"b:1:2600-0:523:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8845:3485-0:607:2003":{"id":"a:1:8845:3485-0:607:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2594-0:589:1951":{"id":"b:1:2594-0:589:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2605-0:607:2003":{"id":"b:1:2605-0:607:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2290-0:291:1920":{"id":"b:1:2290-0:291:1920","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1920","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:433:658":{"id":"0:433:658","crate_id":0,"name":"eq","span":{"filename":"src/fmt.rs","begin":[80,53],"end":[80,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:427:778":{"id":"0:427:778","crate_id":0,"name":"hash","span":{"filename":"src/fmt.rs","begin":[80,42],"end":[80,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10019:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2799:243-0:589:1951":{"id":"a:1:2799:243-0:589:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:578:1947":{"id":"0:578:1947","crate_id":0,"name":"Max","span":{"filename":"src/lib.rs","begin":[321,4],"end":[321,14]},"visibility":"default","docs":"The \"max\" (all ones) UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0xff","value":"255"}}}},"0:285:340":{"id":"0:285:340","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[937,4],"end":[939,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:602":{"id":"0:602","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,22],"end":[329,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:603:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:413:2180":{"id":"b:5:682-0:413:2180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3301","5:685:26191","5:686:26192"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2292:26186":{"id":"1:2292:26186","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:523:1903":{"id":"b:1:3433-0:523:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:422:60":{"id":"0:422:60","crate_id":0,"name":"default","span":{"filename":"src/fmt.rs","begin":[80,29],"end":[80,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:296:134":{"id":"b:1:3433-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:233:3033":{"id":"0:233:3033","crate_id":0,"name":"generate_sequence","span":{"filename":"src/timestamp.rs","begin":[345,4],"end":[347,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["seconds",{"primitive":"u64"}],["subsec_nanos",{"primitive":"u32"}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:226:1902","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:470:714":{"id":"0:470:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:416":{"id":"0:416","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,9],"end":[80,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:417:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2590-0:589:1951":{"id":"b:1:2590-0:589:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:2389"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:563:1937":{"id":"0:563:1937","crate_id":0,"name":"Random","span":{"filename":"src/lib.rs","begin":[311,4],"end":[311,14]},"visibility":"default","docs":"Version 4: Random.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"4","value":"4"}}}},"1:2289:2833":{"id":"1:2289:2833","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:393":{"id":"0:393","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,9],"end":[74,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:394:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:590:1953":{"id":"0:590:1953","crate_id":0,"name":"NCS","span":{"filename":"src/lib.rs","begin":[334,4],"end":[334,13]},"visibility":"default","docs":"Reserved by the NCS for backward compatibility.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0u8","value":"0"}}}},"0:424":{"id":"0:424","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,38],"end":[80,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2355:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:500:741":{"id":"0:500:741","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:528":{"id":"0:528","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,16],"end":[40,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:529:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12687:31142":{"id":"1:12687:31142","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12686:31141"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12688:2225":{"id":"1:12688:2225","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12032:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43741:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12749:34107":{"id":"1:12749:34107","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12360:3322","`DoubleEndedIterator`":"1:7752:127","prim@char":"4:12032:448","str::match_indices":"1:12746:34106"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43939:3762","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:390:2842":{"id":"b:5:682-0:390:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3301","5:685:26191","5:686:26192"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:411":{"id":"0:411","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,64],"end":[74,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","le","lt","ge"],"trait":{"name":"PartialOrd","id":"1:2392:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:412:1129"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:616":{"id":"0:616","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,26],"end":[437,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10011:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:617:778"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3433-0:607:2003":{"id":"b:1:3433-0:607:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:46:2599":{"id":"0:46:2599","crate_id":0,"name":"from_slice_le","span":{"filename":"src/builder.rs","begin":[720,4],"end":[722,5]},"visibility":"public","docs":"Creates a `Builder` using the supplied bytes in little endian order.\n\nThe individual fields encoded in the buffer will be flipped.\n\n# Errors\n\nThis function will return an error if `b` has any length other than 16.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\n# fn main() -> Result<(), uuid::Error> {\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Builder::from_slice_le(&bytes)?.into_uuid();\n\nassert_eq!(\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42018:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:514:2833":{"id":"0:514:2833","crate_id":0,"name":"borrow","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:460:714":{"id":"0:460:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:426":{"id":"0:426","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,42],"end":[80,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10011:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:427:778"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12772:34115":{"id":"1:12772:34115","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3322"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12702:31160":{"id":"1:12702:31160","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:2606":{"id":"0:31:2606","crate_id":0,"name":"from_bytes_ref","span":{"filename":"src/builder.rs","begin":[484,4],"end":[487,5]},"visibility":"public","docs":"Creates a reference to a UUID from a reference to the supplied bytes.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_bytes_ref(&bytes);\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"\n);\n\nassert!(std::ptr::eq(\n    uuid as *const Uuid as *const u8,\n    &bytes as *const [u8; 16] as *const u8,\n));\n# Ok(())\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:254:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12684:34100":{"id":"1:12684:34100","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12038:1531","str::slice_mut_unchecked":"1:12685:34101","crate::ops::Index":"1:3095:3311"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:2609:1612":{"id":"1:2609:1612","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42018:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:291:1920":{"id":"b:1:3433-0:291:1920","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1920","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:454":{"id":"0:454","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,53],"end":[86,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2809:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5538:34794":{"id":"5:5538:34794","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[90,0],"end":[142,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:2257","0:134:2835","0:135:2302","0:136:2852","0:137:2312","0:138:2855","0:139:2828","0:140:2858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12785:9473":{"id":"1:12785:9473","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:242-0:523:1903":{"id":"0:242-0:523:1903","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,55],"end":[238,64]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"timestamp::Timestamp","name":"Timestamp","id":"0:523:1903","glob":false}}},"b:5:5804-0:413:2180":{"id":"b:5:5804-0:413:2180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5802:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5806:1589"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:614":{"id":"0:614","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,22],"end":[437,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2355:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:548:60":{"id":"0:548:60","crate_id":0,"name":"default","span":{"filename":"src/timestamp.rs","begin":[361,33],"end":[361,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:2921":{"id":"0:188:2921","crate_id":0,"name":"encode_upper","span":{"filename":"src/fmt.rs","begin":[649,4],"end":[651,5]},"visibility":"public","docs":"Writes the [`Uuid`] as an upper-case simple string to `buffer`,\nand returns the subslice of the buffer that contains the encoded UUID.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936da01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.simple().encode_upper(&mut Uuid::encode_buffer()),\n        \"936DA01F9ABD4D9D80C702AF85C822A8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 36];\n    assert_eq!(\n        uuid.simple().encode_upper(&mut buf),\n        \"936DA01F9ABD4D9D80C702AF85C822A8\"\n    );\n    assert_eq!(\n        &buf as &[_],\n        b\"936DA01F9ABD4D9D80C702AF85C822A8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:404:778":{"id":"0:404:778","crate_id":0,"name":"hash","span":{"filename":"src/fmt.rs","begin":[74,42],"end":[74,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10019:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:408":{"id":"0:408","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,53],"end":[74,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2809:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:461":{"id":"0:461","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:9806:2834","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:462:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:540:1901":{"id":"b:5:682-0:540:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3301","5:685:26191","5:686:26192"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:257:2005":{"id":"0:257:2005","crate_id":0,"name":"NAMESPACE_DNS","span":{"filename":"src/lib.rs","begin":[455,4],"end":[458,7]},"visibility":"public","docs":"UUID namespace for Domain Name System (DNS).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:186:2913":{"id":"0:186:2913","crate_id":0,"name":"encode_lower","span":{"filename":"src/fmt.rs","begin":[601,4],"end":[603,5]},"visibility":"public","docs":"Writes the [`Uuid`] as a lower-case simple string to `buffer`,\nand returns the subslice of the buffer that contains the encoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936DA01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.simple().encode_lower(&mut Uuid::encode_buffer()),\n        \"936da01f9abd4d9d80c702af85c822a8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 36];\n    assert_eq!(\n        uuid.simple().encode_lower(&mut buf),\n        \"936da01f9abd4d9d80c702af85c822a8\"\n    );\n    assert_eq!(\n        &buf as &[_],\n        b\"936da01f9abd4d9d80c702af85c822a8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:557:1933":{"id":"0:557:1933","crate_id":0,"name":"Dce","span":{"filename":"src/lib.rs","begin":[307,4],"end":[307,11]},"visibility":"default","docs":"Version 2: DCE Security.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"1:12672:2039":{"id":"1:12672:2039","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11915:2703"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2590-0:550:1927":{"id":"b:1:2590-0:550:1927","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:2389"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:49:2339":{"id":"0:49:2339","crate_id":0,"name":"from_fields_le","span":{"filename":"src/builder.rs","begin":[768,4],"end":[770,5]},"visibility":"public","docs":"Creates a `Builder` from four field values.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet d1 = 0xa1a2a3a4;\nlet d2 = 0xb1b2;\nlet d3 = 0xc1c2;\nlet d4 = [0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8];\n\nlet uuid = Builder::from_fields_le(d1, d2, d3, &d4).into_uuid();\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\"\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d1",{"primitive":"u32"}],["d2",{"primitive":"u16"}],["d3",{"primitive":"u16"}],["d4",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:589:1951":{"id":"b:5:682-0:589:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3301","5:685:26191","5:686:26192"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:588:658":{"id":"0:588:658","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[298,29],"end":[298,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126":{"id":"0:126","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[42,0],"end":[51,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:127:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:121:714":{"id":"0:121:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:612":{"id":"0:612","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,16],"end":[437,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:287:741":{"id":"0:287:741","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[944,4],"end":[946,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12665:3558":{"id":"1:12665:3558","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:540:1901":{"id":"0:540:1901","crate_id":0,"name":"NoContext","span":{"filename":"src/timestamp.rs","begin":[362,4],"end":[362,25]},"visibility":"public","docs":"An empty counter that will always return the value `0`.\n\nThis type should be used when constructing timestamps for version 7 UUIDs,\nsince they don't need a counter for uniqueness.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:1:8846:3484-0:540:1901","a:1:2799:243-0:540:1901","a:1:2816:253-0:540:1901","a:1:2856:3331-0:540:1901","a:1:8845:3485-0:540:1901","b:1:2290-0:540:1901","b:1:2605-0:540:1901","b:1:2600-0:540:1901","b:1:2590-0:540:1901","b:1:2594-0:540:1901","b:1:3433-0:540:1901","b:1:2287-0:540:1901","b:5:682-0:540:1901","0:236","0:544","0:542","0:546","0:547"]}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[59,0],"end":[64,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:9808:2836","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8846:3484-0:589:1951":{"id":"a:1:8846:3484-0:589:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3484","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8845:3485-0:550:1927":{"id":"a:1:8845:3485-0:550:1927","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:227:205":{"id":"0:227:205","crate_id":0,"name":"Output","span":{"filename":"src/timestamp.rs","begin":[335,4],"end":[335,16]},"visibility":"default","docs":"The type of sequence returned by this counter.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"b:1:2290-0:367:2839":{"id":"b:1:2290-0:367:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:492:741":{"id":"0:492:741","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197:2921":{"id":"0:197:2921","crate_id":0,"name":"encode_upper","span":{"filename":"src/fmt.rs","begin":[799,4],"end":[801,5]},"visibility":"public","docs":"Writes the [`Uuid`] as an upper-case URN string to\n`buffer`, and returns the subslice of the buffer that contains the\nencoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936da01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.urn().encode_upper(&mut Uuid::encode_buffer()),\n        \"urn:uuid:936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 49];\n    assert_eq!(\n        uuid.urn().encode_upper(&mut buf),\n        \"urn:uuid:936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"\n    );\n    assert_eq!(\n        &buf as &[_],\n        b\"urn:uuid:936DA01F-9ABD-4D9D-80C7-02AF85C822A8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2816:253-0:540:1901":{"id":"a:1:2816:253-0:540:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:296:134":{"id":"0:296:134","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[5,0],"end":[5,39]},"visibility":"public","docs":"A general error that can occur when working with UUIDs.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8846:3484-0:296:134","a:1:2799:243-0:296:134","a:1:2816:253-0:296:134","a:1:2856:3331-0:296:134","a:1:8845:3485-0:296:134","b:1:2290-0:296:134","b:1:2605-0:296:134","b:1:2600-0:296:134","b:1:2590-0:296:134","b:1:2594-0:296:134","b:1:3433-0:296:134","b:1:2287-0:296:134","b:5:5804-0:296:134","b:5:682-0:296:134","0:299","0:73","0:301","0:303","0:309","0:68","0:310","0:304","0:306"]}}},"b:1:3433-0:589:1951":{"id":"b:1:3433-0:589:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:526":{"id":"0:526","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,9],"end":[40,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:527:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:546":{"id":"0:546","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[361,27],"end":[361,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12716:26428":{"id":"1:12716:26428","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12176:3751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2600-0:413:2180":{"id":"b:1:2600-0:413:2180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2816:253-0:296:134":{"id":"a:1:2816:253-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,29],"end":[68,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2641:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:376:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3433-0:540:1901":{"id":"b:1:3433-0:540:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:281:2195":{"id":"0:281:2195","crate_id":0,"name":"get_timestamp","span":{"filename":"src/lib.rs","begin":[898,4],"end":[925,5]},"visibility":"public","docs":"If the UUID is the correct version (v1, v6, or v7) this will return\nthe timestamp and counter portion parsed from a V1 UUID.\n\nReturns `None` if the supplied UUID is not V1.\n\nThe V1 timestamp format defined in RFC4122 specifies a 60-bit\ninteger representing the number of 100-nanosecond intervals\nsince 00:00:00.00, 15 Oct 1582.\n\n[`Timestamp`] offers several options for converting the raw RFC4122\nvalue into more commonly-used formats, such as a unix timestamp.\n\n# Roundtripping\n\nThis method is unlikely to roundtrip a timestamp in a UUID due to the way\nUUIDs encode timestamps. The timestamp returned from this method will be truncated to\n100ns precision for version 1 and 6 UUIDs, and to millisecond precision for version 7 UUIDs.\n\n[`Timestamp`]: v1/struct.Timestamp.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12763:34114":{"id":"1:12763:34114","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3322"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2287-0:413:2180":{"id":"b:1:2287-0:413:2180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:2833"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2799:243-0:367:2839":{"id":"a:1:2799:243-0:367:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:455":{"id":"0:455","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,53],"end":[86,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2350:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:456:658"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:18:2333":{"id":"0:18:2333","crate_id":0,"name":"from_fields","span":{"filename":"src/builder.rs","begin":[122,4],"end":[141,5]},"visibility":"public","docs":"Creates a UUID from four field values.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet d1 = 0xa1a2a3a4;\nlet d2 = 0xb1b2;\nlet d3 = 0xc1c2;\nlet d4 = [0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8];\n\nlet uuid = Uuid::from_fields(d1, d2, d3, &d4);\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d1",{"primitive":"u32"}],["d2",{"primitive":"u16"}],["d3",{"primitive":"u16"}],["d4",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:262:2046":{"id":"0:262:2046","crate_id":0,"name":"get_version_num","span":{"filename":"src/lib.rs","begin":[536,4],"end":[538,5]},"visibility":"public","docs":"Returns the version number of the UUID.\n\nThis represents the algorithm used to generate the value.\nThis method is the future-proof alternative to [`Uuid::get_version`].\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"02f09a3f-1624-3b1d-8409-44eff7708208\")?;\n\nassert_eq!(3, my_uuid.get_version_num());\n# Ok(())\n# }\n```\n\n# References\n\n* [Version in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3)","links":{"`Uuid::get_version`":"0:263:2055"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:544":{"id":"0:544","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[361,20],"end":[361,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:545:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8846:3484-0:291:1920":{"id":"a:1:8846:3484-0:291:1920","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3484","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1920","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:203:1899":{"id":"0:203:1899","crate_id":0,"name":"timestamp","span":{"filename":"src/timestamp.rs","begin":[1,0],"end":[468,1]},"visibility":"public","docs":"Generating UUIDs from timestamps.\n\nTimestamps are used in a few UUID versions as a source of decentralized\nuniqueness (as in versions 1 and 6), and as a way to enable sorting (as\nin versions 6 and 7). Timestamps aren't encoded the same way by all UUID\nversions so this module provides a single [`Timestamp`] type that can\nconvert between them.\n\n# Timestamp representations in UUIDs\n\nVersions 1 and 6 UUIDs use a bespoke timestamp that consists of the\nnumber of 100ns ticks since `1582-10-15 00:00:00`, along with\na counter value to avoid duplicates.\n\nVersion 7 UUIDs use a more standard timestamp that consists of the\nnumber of millisecond ticks since the Unix epoch (`1970-01-01 00:00:00`).\n\n# References\n\n* [Timestamp in RFC4122](https://www.rfc-editor.org/rfc/rfc4122#section-4.1.4)\n* [Timestamp in Draft RFC: New UUID Formats, Version 4](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04#section-6.1)","links":{"`Timestamp`":"0:523:1903"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:234:1900","0:205:3022","0:523:1903","0:226:1902"],"is_stripped":false}}},"b:5:682-0:523:1903":{"id":"b:5:682-0:523:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3301","5:685:26191","5:686:26192"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:289:134":{"id":"0:289:134","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[951,4],"end":[951,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:1:2590-0:296:134":{"id":"b:1:2590-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:2389"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:449":{"id":"0:449","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,42],"end":[86,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10011:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:450:778"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:35:2614":{"id":"0:35:2614","crate_id":0,"name":"from_rfc4122_timestamp","span":{"filename":"src/builder.rs","begin":[553,4],"end":[555,5]},"visibility":"public","docs":"Creates a `Builder` for a version 1 UUID using the supplied timestamp and node ID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ticks",{"primitive":"u64"}],["counter",{"primitive":"u16"}],["node_id",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"6"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32":{"id":"0:32","crate_id":0,"name":null,"span":{"filename":"src/builder.rs","begin":[494,0],"end":[903,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Builder","id":"0:291:1920","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:33:2227","0:34:2398","0:35:2614","0:37:2618","0:38:2625","0:39:2630","0:40:2634","0:42:2647","0:44:2651","0:45:2208","0:46:2599","0:47:2333","0:49:2339","0:51:2357","0:52:2360","0:53:2207","0:54:2664","0:55:2620","0:56:2670","0:57:2277","0:58:2676","0:59:2278"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:122":{"id":"0:122","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[29,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:123:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12760:34113":{"id":"1:12760:34113","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3322"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12385:3743","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2600-0:540:1901":{"id":"b:1:2600-0:540:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:271:2118":{"id":"0:271:2118","crate_id":0,"name":"to_u128_le","span":{"filename":"src/lib.rs","begin":[729,4],"end":[731,5]},"visibility":"public","docs":"Returns a 128bit little-endian value containing the value.\n\nThe bytes in the `u128` will be flipped to convert into big-endian\norder. This is based on the endianness of the UUID, rather than the\ntarget environment so bytes will be flipped on both big and little\nendian machines.\n\nNote that this will produce a different result than\n[`Uuid::to_fields_le`], because the entire UUID is reversed, rather\nthan reversing the individual fields in-place.\n\n# Examples\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.to_u128_le(),\n    0xd8d7d6d5d4d3d2d1c2c1b2b1a4a3a2a1,\n);\n# Ok(())\n# }\n```","links":{"`Uuid::to_fields_le`":"0:267:2101"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:523:1903":{"id":"0:523:1903","crate_id":0,"name":"Timestamp","span":{"filename":"src/timestamp.rs","begin":[41,0],"end":[46,1]},"visibility":"public","docs":"A timestamp that can be encoded into a UUID.\n\nThis type abstracts the specific encoding, so versions 1, 6, and 7\nUUIDs can both be supported through the same type, even\nthough they have a different representation of a timestamp.\n\n# References\n\n* [Timestamp in RFC4122](https://www.rfc-editor.org/rfc/rfc4122#section-4.1.4)\n* [Timestamp in Draft RFC: New UUID Formats, Version 4](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04#section-6.1)\n* [Clock Sequence in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.5)","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:206","a:1:8846:3484-0:523:1903","a:1:2799:243-0:523:1903","a:1:2816:253-0:523:1903","a:1:2856:3331-0:523:1903","a:1:8845:3485-0:523:1903","b:1:2290-0:523:1903","b:1:2605-0:523:1903","b:1:2600-0:523:1903","b:1:2590-0:523:1903","b:1:2594-0:523:1903","b:1:3433-0:523:1903","b:1:2287-0:523:1903","b:5:682-0:523:1903","0:526","0:535","0:530","0:534","0:532","0:528","0:531","0:537"]}}},"1:12673:34099":{"id":"1:12673:34099","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12784:9469":{"id":"1:12784:9469","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39822:26364","Self::is_ascii":"1:12783:9468"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39822:26364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12756:34110":{"id":"1:12756:34110","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:2257":{"id":"0:133:2257","crate_id":0,"name":"hyphenated","span":{"filename":"src/fmt.rs","begin":[93,4],"end":[95,5]},"visibility":"public","docs":"Get a [`Hyphenated`] formatter.","links":{"`Hyphenated`":"0:367:2839"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2799:243-0:550:1927":{"id":"a:1:2799:243-0:550:1927","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:457":{"id":"0:457","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,64],"end":[86,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","le","lt","ge"],"trait":{"name":"PartialOrd","id":"1:2392:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:458:1129"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:302:714":{"id":"0:302:714","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[4,16],"end":[4,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:2647":{"id":"0:42:2647","crate_id":0,"name":"from_unix_timestamp_millis","span":{"filename":"src/builder.rs","begin":[639,4],"end":[644,5]},"visibility":"public","docs":"Creates a `Builder` for a version 7 UUID using the supplied Unix timestamp and random bytes.\n\nThis method assumes the bytes are already sufficiently random.\n\n# Examples\n\nCreating a UUID using the current system timestamp:\n\n```\n# use std::convert::TryInto;\nuse std::time::{Duration, SystemTime};\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\n# use uuid::{Builder, Uuid, Variant, Version, Timestamp, NoContext};\n# let rng = || [\n#     70, 235, 208, 238, 14, 109, 67, 201, 185, 13\n# ];\nlet ts = SystemTime::now().duration_since(SystemTime::UNIX_EPOCH)?;\n\nlet random_bytes = rng();\n\nlet uuid = Builder::from_unix_timestamp_millis(ts.as_millis().try_into()?, &random_bytes).into_uuid();\n\nassert_eq!(Some(Version::SortRand), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["millis",{"primitive":"u64"}],["random_bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"10"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:506:2833":{"id":"0:506:2833","crate_id":0,"name":"borrow","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:2852":{"id":"0:136:2852","crate_id":0,"name":"as_simple","span":{"filename":"src/fmt.rs","begin":[112,4],"end":[115,5]},"visibility":"public","docs":"Get a borrowed [`Simple`] formatter.","links":{"`Simple`":"0:390:2842"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2287-0:291:1920":{"id":"b:1:2287-0:291:1920","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1920","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:2833"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:378":{"id":"0:378","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,38],"end":[68,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2355:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:254:1924":{"id":"0:254:1924","crate_id":0,"name":"Bytes","span":{"filename":"src/lib.rs","begin":[291,0],"end":[291,26]},"visibility":"public","docs":"A 128-bit (16 byte) buffer containing the UUID.\n\n# ABI\n\nThe `Bytes` type is always guaranteed to be have the same ABI as [`Uuid`].","links":{"`Uuid`":"0:607:2003"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"array":{"type":{"primitive":"u8"},"len":"16"}},"generics":{"params":[],"where_predicates":[]}}}},"0:595:1957":{"id":"0:595:1957","crate_id":0,"name":"Microsoft","span":{"filename":"src/lib.rs","begin":[338,4],"end":[338,13]},"visibility":"default","docs":"Reserved by Microsoft for backward compatibility.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:207:3032":{"id":"0:207:3032","crate_id":0,"name":"now","span":{"filename":"src/timestamp.rs","begin":[57,4],"end":[71,5]},"visibility":"public","docs":"Get a timestamp representing the current system time.\n\nThis method defers to the standard library's `SystemTime` type.\n\n# Panics\n\nThis method will panic if calculating the elapsed time since the Unix epoch fails.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["context",{"impl_trait":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:226:1902","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u16"}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl ClockSequence<Output = u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:226:1902","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u16"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:593:1955":{"id":"0:593:1955","crate_id":0,"name":"RFC4122","span":{"filename":"src/lib.rs","begin":[336,4],"end":[336,11]},"visibility":"default","docs":"As described in the RFC4122 Specification (default).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:29:2227":{"id":"0:29:2227","crate_id":0,"name":"from_bytes","span":{"filename":"src/builder.rs","begin":[415,4],"end":[417,5]},"visibility":"public","docs":"Creates a UUID using the supplied bytes.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_bytes(bytes);\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"\n);\n# Ok(())\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["bytes",{"resolved_path":{"name":"Bytes","id":"0:254:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:2106":{"id":"0:270:2106","crate_id":0,"name":"as_u128","span":{"filename":"src/lib.rs","begin":[700,4],"end":[702,5]},"visibility":"public","docs":"Returns a 128bit value containing the value.\n\nThe bytes in the UUID will be packed directly into a `u128`.\n\n# Examples\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.as_u128(),\n    0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8,\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:623:658":{"id":"0:623:658","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[437,37],"end":[437,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8846:3484-0:413:2180":{"id":"a:1:8846:3484-0:413:2180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3484","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:59:2278":{"id":"0:59:2278","crate_id":0,"name":"into_uuid","span":{"filename":"src/builder.rs","begin":[900,4],"end":[902,5]},"visibility":"public","docs":"Convert the builder into a [`Uuid`].\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet uuid = Builder::nil().into_uuid();\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"00000000-0000-0000-0000-000000000000\"\n);\n```","links":{"`Uuid`":"0:607:2003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:509":{"id":"0:509","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:510:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:179:2921":{"id":"0:179:2921","crate_id":0,"name":"encode_upper","span":{"filename":"src/fmt.rs","begin":[506,4],"end":[508,5]},"visibility":"public","docs":"Writes the [`Uuid`] as an upper-case hyphenated string surrounded by\nbraces to `buffer`, and returns the subslice of the buffer that contains\nthe encoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936da01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.braced()\n            .encode_upper(&mut Uuid::encode_buffer()),\n        \"{936DA01F-9ABD-4D9D-80C7-02AF85C822A8}\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 40];\n    uuid.braced().encode_upper(&mut buf);\n    assert_eq!(\n        &buf as &[_],\n        b\"{936DA01F-9ABD-4D9D-80C7-02AF85C822A8}!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:458:1129":{"id":"0:458:1129","crate_id":0,"name":"partial_cmp","span":{"filename":"src/fmt.rs","begin":[86,64],"end":[86,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31111:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:2398":{"id":"0:30:2398","crate_id":0,"name":"from_bytes_le","span":{"filename":"src/builder.rs","begin":[446,4],"end":[451,5]},"visibility":"public","docs":"Creates a UUID using the supplied bytes in little endian order.\n\nThe individual fields encoded in the buffer will be flipped.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_bytes_le(bytes);\n\nassert_eq!(\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"resolved_path":{"name":"Bytes","id":"0:254:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[131,0],"end":[164,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:296:134":{"id":"b:5:682-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3301","5:685:26191","5:686:26192"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3433-0:413:2180":{"id":"b:1:3433-0:413:2180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:554:1931":{"id":"0:554:1931","crate_id":0,"name":"Mac","span":{"filename":"src/lib.rs","begin":[305,4],"end":[305,11]},"visibility":"default","docs":"Version 1: Timestamp and node ID.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[950,0],"end":[956,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:6954:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:289:134","0:290:1612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12789:31071":{"id":"1:12789:31071","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:896:9485"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530":{"id":"5:5530","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5531:34792","5:5532:3844","5:5535:34793","5:5538:34794","5:5546:34795","5:5547:34796","5:5548:9823","5:5549:9470","5:5550:9471"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12705:3597":{"id":"1:12705:3597","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41875:197","prim@char":"4:12032:448","self::pattern":"1:12360:3322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:256":{"id":"0:256","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[453,0],"end":[926,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:257:2005","0:258:2023","0:259:2026","0:260:2028","0:261:2038","0:262:2046","0:263:2055","0:264:2085","0:267:2101","0:270:2106","0:271:2118","0:272:2126","0:273:2039","0:274:2148","0:275:2158","0:276:2056","0:277:2168","0:278:2179","0:281:2195"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:240-0:540:1901":{"id":"0:240-0:540:1901","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,20],"end":[238,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"timestamp::context::NoContext","name":"NoContext","id":"0:540:1901","glob":false}}},"b:1:2590-0:436:2847":{"id":"b:1:2590-0:436:2847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:2389"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:499":{"id":"0:499","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:500:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:205:3022":{"id":"0:205:3022","crate_id":0,"name":"UUID_TICKS_BETWEEN_EPOCHS","span":{"filename":"src/timestamp.rs","begin":[27,0],"end":[27,65]},"visibility":"public","docs":"The number of 100 nanosecond ticks between the RFC4122 epoch\n(`1582-10-15 00:00:00`) and the Unix epoch (`1970-01-01 00:00:00`).","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u64"},"expr":"0x01B2_1DD2_1381_4000","value":"122_192_928_000_000_000u64","is_literal":true}}},"b:1:2605-0:523:1903":{"id":"b:1:2605-0:523:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12778:34117":{"id":"1:12778:34117","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3322"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2816:253-0:523:1903":{"id":"a:1:2816:253-0:523:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:210:3047":{"id":"0:210:3047","crate_id":0,"name":"to_unix","span":{"filename":"src/timestamp.rs","begin":[142,4],"end":[144,5]},"visibility":"public","docs":"Get the value of the timestamp as a Unix timestamp, as used in version 7 UUIDs.\n\n# Overflow\n\nIf conversion from RFC4122 ticks to the internal timestamp format would overflow\nit will wrap.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u64"},{"primitive":"u32"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:234:1900":{"id":"0:234:1900","crate_id":0,"name":"context","span":{"filename":"src/timestamp.rs","begin":[351,0],"end":[351,15]},"visibility":"public","docs":"Default implementations for the [`ClockSequence`] trait.","links":{"`ClockSequence`":"0:226:1902"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:540:1901"],"is_stripped":false}}},"b:1:2594-0:367:2839":{"id":"b:1:2594-0:367:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:430:459":{"id":"0:430:459","crate_id":0,"name":"cmp","span":{"filename":"src/fmt.rs","begin":[80,48],"end":[80,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31111:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238:3033":{"id":"0:238:3033","crate_id":0,"name":"generate_sequence","span":{"filename":"src/timestamp.rs","begin":[367,8],"end":[369,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_seconds",{"primitive":"u64"}],["_nanos",{"primitive":"u32"}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:226:1902","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:2742":{"id":"0:89:2742","crate_id":0,"name":"try_parse","span":{"filename":"src/parser.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"Parses a `Uuid` from a string of hexadecimal digits with optional\nhyphens.\n\nThis function is similar to [`parse_str`], in fact `parse_str` shares\nthe same underlying parser. The difference is that if `try_parse`\nfails, it won't generate very useful error messages. The `parse_str`\nfunction will eventually be deprecated in favor or `try_parse`.\n\nTo parse a UUID from a byte stream instead of a UTF8 string, see\n[`try_parse_ascii`].\n\n# Examples\n\nParse a hyphenated UUID:\n\n```\n# use uuid::{Uuid, Version, Variant};\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::try_parse(\"550e8400-e29b-41d4-a716-446655440000\")?;\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n# Ok(())\n# }\n```\n\n[`parse_str`]: #method.parse_str\n[`try_parse_ascii`]: #method.try_parse_ascii","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42018:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2593:2389":{"id":"1:2593:2389","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2567:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:497":{"id":"0:497","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:498:2833"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2604:1614":{"id":"1:2604:1614","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42018:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2290-0:413:2180":{"id":"b:1:2290-0:413:2180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:24:2366":{"id":"0:24:2366","crate_id":0,"name":"from_u64_pair","span":{"filename":"src/builder.rs","begin":[288,4],"end":[307,5]},"visibility":"public","docs":"Creates a UUID from two 64bit values.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet hi = 0xa1a2a3a4b1b2c1c2u64;\nlet lo = 0xd1d2d3d4d5d6d7d8u64;\n\nlet uuid = Uuid::from_u64_pair(hi, lo);\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["high_bits",{"primitive":"u64"}],["low_bits",{"primitive":"u64"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:306":{"id":"0:306","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,27],"end":[4,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10011:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:307:778"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5532:3844":{"id":"5:5532:3844","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:583":{"id":"0:583","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,16],"end":[298,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:125:741":{"id":"0:125:741","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[37,4],"end":[39,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2600-0:296:134":{"id":"b:1:2600-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:226:1902":{"id":"0:226:1902","crate_id":0,"name":"ClockSequence","span":{"filename":"src/timestamp.rs","begin":[333,0],"end":[341,1]},"visibility":"public","docs":"A counter that can be used by version 1 and version 6 UUIDs to support\nthe uniqueness of timestamps.\n\n# References\n\n* [Clock Sequence in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.5)","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:227:205","0:228:3033"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:236","0:229"]}}},"0:34:2398":{"id":"0:34:2398","crate_id":0,"name":"from_bytes_le","span":{"filename":"src/builder.rs","begin":[548,4],"end":[550,5]},"visibility":"public","docs":"Creates a `Builder` using the supplied bytes in little endian order.\n\nThe individual fields encoded in the buffer will be flipped.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::{Builder, Uuid};\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Builder::from_bytes_le(bytes).into_uuid();\n\nassert_eq!(\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"resolved_path":{"name":"Bytes","id":"0:254:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:134":{"id":"0:85:134","crate_id":0,"name":"Error","span":{"filename":"src/parser.rs","begin":[31,4],"end":[31,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:273:2039":{"id":"0:273:2039","crate_id":0,"name":"as_bytes","span":{"filename":"src/lib.rs","begin":[784,4],"end":[786,5]},"visibility":"public","docs":"Returns a slice of 16 octets containing the value.\n\nThis method borrows the underlying byte value of the UUID.\n\n# Examples\n\n```\n# use uuid::Uuid;\nlet bytes1 = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\nlet uuid1 = Uuid::from_bytes_ref(&bytes1);\n\nlet bytes2 = uuid1.as_bytes();\nlet uuid2 = Uuid::from_bytes_ref(bytes2);\n\nassert_eq!(uuid1, uuid2);\n\nassert!(std::ptr::eq(\n    uuid2 as *const Uuid as *const u8,\n    &bytes1 as *const [u8; 16] as *const u8,\n));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:254:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:395":{"id":"0:395","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,16],"end":[74,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:129:714":{"id":"0:129:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[54,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176:2883":{"id":"0:176:2883","crate_id":0,"name":"from_uuid","span":{"filename":"src/fmt.rs","begin":[404,4],"end":[406,5]},"visibility":"public","docs":"Creates a [`Braced`] from a [`Uuid`].\n\n[`Uuid`]: ../struct.Uuid.html\n[`Braced`]: struct.Braced.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2620":{"id":"0:55:2620","crate_id":0,"name":"with_variant","span":{"filename":"src/builder.rs","begin":[840,4],"end":[851,5]},"visibility":"public","docs":"Specifies the variant of the UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["v",{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:462:714":{"id":"0:462:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:436:2847":{"id":"b:1:3433-0:436:2847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2290-0:540:1901":{"id":"b:1:2290-0:540:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2590-0:607:2003":{"id":"b:1:2590-0:607:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:2389"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:468:714":{"id":"0:468:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5547:34796":{"id":"5:5547:34796","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:3315","`String`":"5:7529:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:3315","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2856:3331-0:523:1903":{"id":"a:1:2856:3331-0:523:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:3331","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:304":{"id":"0:304","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,23],"end":[4,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2355:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:513":{"id":"0:513","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:514:2833"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:33:2227":{"id":"0:33:2227","crate_id":0,"name":"from_bytes","span":{"filename":"src/builder.rs","begin":[517,4],"end":[519,5]},"visibility":"public","docs":"Creates a `Builder` using the supplied bytes.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Builder::from_bytes(bytes).into_uuid();\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"resolved_path":{"name":"Bytes","id":"0:254:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:309":{"id":"0:309","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,33],"end":[4,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2809:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:607:2003":{"id":"b:5:682-0:607:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3301","5:685:26191","5:686:26192"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:494:741":{"id":"0:494:741","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2290-0:607:2003":{"id":"b:1:2290-0:607:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:625:1129":{"id":"0:625:1129","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[437,48],"end":[437,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31111:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:439":{"id":"0:439","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,9],"end":[86,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:440:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12676:9379":{"id":"1:12676:9379","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41875:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2856:3331-0:367:2839":{"id":"a:1:2856:3331-0:367:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:3331","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2799:243-0:540:1901":{"id":"a:1:2799:243-0:540:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:69:714":{"id":"0:69:714","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[132,4],"end":[163,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:417:452":{"id":"0:417:452","crate_id":0,"name":"clone","span":{"filename":"src/fmt.rs","begin":[80,9],"end":[80,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2590-0:390:2842":{"id":"b:1:2590-0:390:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:2389"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5804-0:436:2847":{"id":"b:5:5804-0:436:2847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5802:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5806:1589"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2290-0:550:1927":{"id":"b:1:2290-0:550:1927","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:467":{"id":"0:467","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:468:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:569:1941":{"id":"0:569:1941","crate_id":0,"name":"SortMac","span":{"filename":"src/lib.rs","begin":[315,4],"end":[315,15]},"visibility":"default","docs":"Version 6: Sortable Timestamp and node ID.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"6","value":"6"}}}},"0:139:2828":{"id":"0:139:2828","crate_id":0,"name":"braced","span":{"filename":"src/fmt.rs","begin":[132,4],"end":[134,5]},"visibility":"public","docs":"Get a [`Braced`] formatter.","links":{"`Braced`":"0:436:2847"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:512:340":{"id":"0:512:340","crate_id":0,"name":"as_ref","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:621":{"id":"0:621","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,37],"end":[437,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2809:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12731:31156":{"id":"1:12731:31156","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12032:448","str::splitn":"1:12728:31154","self::pattern":"1:12360:3322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43893:3767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:34793":{"id":"5:5535:34793","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:516:741":{"id":"0:516:741","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2290-0:589:1951":{"id":"b:1:2290-0:589:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:381:778":{"id":"0:381:778","crate_id":0,"name":"hash","span":{"filename":"src/fmt.rs","begin":[68,42],"end":[68,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10019:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2600-0:589:1951":{"id":"b:1:2600-0:589:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:47:2333":{"id":"0:47:2333","crate_id":0,"name":"from_fields","span":{"filename":"src/builder.rs","begin":[744,4],"end":[746,5]},"visibility":"public","docs":"Creates a `Builder` from four field values.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet d1 = 0xa1a2a3a4;\nlet d2 = 0xb1b2;\nlet d3 = 0xc1c2;\nlet d4 = [0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8];\n\nlet uuid = Builder::from_fields(d1, d2, d3, &d4).into_uuid();\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d1",{"primitive":"u32"}],["d2",{"primitive":"u16"}],["d3",{"primitive":"u16"}],["d4",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:384:459":{"id":"0:384:459","crate_id":0,"name":"cmp","span":{"filename":"src/fmt.rs","begin":[68,48],"end":[68,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31111:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:423":{"id":"0:423","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,38],"end":[80,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2810:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12709:3557":{"id":"1:12709:3557","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41875:197","prim@char":"4:12032:448","self::pattern":"1:12360:3322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12728:31154":{"id":"1:12728:31154","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3322","str::rsplitn":"1:12731:31156"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43875:3768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:2676":{"id":"0:58:2676","crate_id":0,"name":"as_uuid","span":{"filename":"src/builder.rs","begin":[881,4],"end":[883,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet builder = Builder::nil();\n\nlet uuid1 = builder.as_uuid();\nlet uuid2 = builder.as_uuid();\n\nassert_eq!(uuid1, uuid2);\n```","links":{"`Uuid`":"0:607:2003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:2676":{"id":"0:172:2676","crate_id":0,"name":"as_uuid","span":{"filename":"src/fmt.rs","begin":[375,4],"end":[377,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet hyphenated = Uuid::nil().hyphenated();\nassert_eq!(*hyphenated.as_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:537":{"id":"0:537","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,44],"end":[40,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10011:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:538:778"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8846:3484-0:540:1901":{"id":"a:1:8846:3484-0:540:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3484","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:241-0:226:1902":{"id":"0:241-0:226:1902","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,40],"end":[238,53]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"timestamp::ClockSequence","name":"ClockSequence","id":"0:226:1902","glob":false}}},"0:613":{"id":"0:613","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,22],"end":[437,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2810:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:432":{"id":"0:432","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,53],"end":[80,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2350:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:433:658"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2816:253-0:436:2847":{"id":"a:1:2816:253-0:436:2847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12682:9382":{"id":"1:12682:9382","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12674:339":{"id":"1:12674:339","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12675:2874","`u8`":"4:12049:1636"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:390:2842":{"id":"0:390:2842","crate_id":0,"name":"Simple","span":{"filename":"src/fmt.rs","begin":[76,0],"end":[76,24]},"visibility":"public","docs":"Format a [`Uuid`] as a simple string, like\n`67e5504410b1426f9247bb680e5fe0c8`.","links":{"`Uuid`":"0:607:2003"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:183","a:1:8846:3484-0:390:2842","a:1:2799:243-0:390:2842","a:1:2816:253-0:390:2842","a:1:2856:3331-0:390:2842","a:1:8845:3485-0:390:2842","b:1:2290-0:390:2842","b:1:2605-0:390:2842","b:1:2600-0:390:2842","b:1:2590-0:390:2842","b:1:2594-0:390:2842","b:1:3433-0:390:2842","b:1:2287-0:390:2842","b:5:5804-0:390:2842","b:5:682-0:390:2842","0:408","0:472","0:505","0:501","0:395","0:411","0:398","0:400","0:409","0:396","0:499","0:406","0:403","0:467","0:401","0:503","0:469","0:393"]}}},"0:193:2181":{"id":"0:193:2181","crate_id":0,"name":"LENGTH","span":{"filename":"src/fmt.rs","begin":[686,4],"end":[686,33]},"visibility":"public","docs":"The length of a URN [`Uuid`] string.\n\n[`Uuid`]: ../struct.Uuid.html","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"primitive":"usize"},"default":"45"}}},"0:277:2168":{"id":"0:277:2168","crate_id":0,"name":"is_max","span":{"filename":"src/lib.rs","begin":[846,4],"end":[848,5]},"visibility":"public","docs":"Tests if the UUID is max (all ones).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5806:1589":{"id":"5:5806:1589","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:2670":{"id":"0:56:2670","crate_id":0,"name":"set_version","span":{"filename":"src/builder.rs","begin":[854,4],"end":[857,5]},"visibility":"public","docs":"Specifies the version number of the UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["v",{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:624":{"id":"0:624","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,48],"end":[437,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","le","lt","ge"],"trait":{"name":"PartialOrd","id":"1:2392:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:625:1129"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:464":{"id":"0:464","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:9808:2836","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:465:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:521":{"id":"0:521","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:522:2833"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:450:778":{"id":"0:450:778","crate_id":0,"name":"hash","span":{"filename":"src/fmt.rs","begin":[86,42],"end":[86,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10019:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12783:9468":{"id":"1:12783:9468","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2799:243-0:607:2003":{"id":"a:1:2799:243-0:607:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12667:34097":{"id":"1:12667:34097","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2799:243-0:413:2180":{"id":"a:1:2799:243-0:413:2180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2605-0:589:1951":{"id":"b:1:2605-0:589:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:83:2730":{"id":"0:83:2730","crate_id":0,"name":"from_str","span":{"filename":"src/parser.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid_str",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42018:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:12320:2729","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:538:778":{"id":"0:538:778","crate_id":0,"name":"hash","span":{"filename":"src/timestamp.rs","begin":[40,44],"end":[40,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10019:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:258:2023":{"id":"0:258:2023","crate_id":0,"name":"NAMESPACE_OID","span":{"filename":"src/lib.rs","begin":[461,4],"end":[464,7]},"visibility":"public","docs":"UUID namespace for ISO Object Identifiers (OIDs).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[539,0],"end":[680,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:2181","0:185:2883","0:186:2913","0:188:2921","0:190:2676","0:191:2278"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:685:26191":{"id":"5:685:26191","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[36,0],"end":[40,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::std::string::String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:125:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:177:2913":{"id":"0:177:2913","crate_id":0,"name":"encode_lower","span":{"filename":"src/fmt.rs","begin":[455,4],"end":[457,5]},"visibility":"public","docs":"Writes the [`Uuid`] as a lower-case hyphenated string surrounded by\nbraces to `buffer`, and returns the subslice of the buffer that contains\nthe encoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936DA01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.braced()\n            .encode_lower(&mut Uuid::encode_buffer()),\n        \"{936da01f-9abd-4d9d-80c7-02af85c822a8}\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 40];\n    uuid.braced().encode_lower(&mut buf);\n    assert_eq!(\n        &buf as &[_],\n        b\"{936da01f-9abd-4d9d-80c7-02af85c822a8}!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2287-0:296:134":{"id":"b:1:2287-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:2833"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:520:340":{"id":"0:520:340","crate_id":0,"name":"as_ref","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[935,0],"end":[940,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2558:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:285:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12663":{"id":"1:12663","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12664:869","1:12665:3558","1:12666:34096","1:12667:34097","1:12669:34098","1:12672:2039","1:12673:34099","1:12674:339","1:12675:2874","1:12676:9379","1:12678:9380","1:12680:9381","1:12682:9382","1:12684:34100","1:12685:34101","1:12686:31141","1:12687:31142","1:12688:2225","1:12689:2713","1:12690:2086","1:12691:26433","1:12692:26421","1:12693:32957","1:12694:34102","1:12695:26425","1:12696:2405","1:12699:2313","1:12702:31160","1:12705:3597","1:12709:3557","1:12713:31149","1:12716:26428","1:12719:31152","1:12722:34103","1:12725:34104","1:12728:31154","1:12731:31156","1:12734:31158","1:12737:31159","1:12740:2714","1:12743:34105","1:12746:34106","1:12749:34107","1:12752:34108","1:12754:34109","1:12756:34110","1:12758:34111","1:12759:34112","1:12760:34113","1:12763:34114","1:12766:30003","1:12769:31161","1:12772:34115","1:12775:34116","1:12778:34117","1:12781:34118","1:12783:9468","1:12784:9469","1:12785:9473","1:12786:9474","1:12787:9475","1:12788:31070","1:12789:31071","1:12790:31072","1:12791:34119","1:12793:9758","1:12794:34120"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:475":{"id":"0:475","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:476:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12678:9380":{"id":"1:12678:9380","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41875:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12740:2714":{"id":"1:12740:2714","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12360:3322","`DoubleEndedIterator`":"1:7752:127","prim@char":"4:12032:448","str::rmatches":"1:12743:34105"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43975:3763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,16],"end":[68,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2856:3331-0:413:2180":{"id":"a:1:2856:3331-0:413:2180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:3331","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2600-0:367:2839":{"id":"b:1:2600-0:367:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:551:1929":{"id":"0:551:1929","crate_id":0,"name":"Nil","span":{"filename":"src/lib.rs","begin":[303,4],"end":[303,13]},"visibility":"default","docs":"The \"nil\" (all zeros) UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0u8","value":"0"}}}},"1:12664:869":{"id":"1:12664:869","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12032:448"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:488":{"id":"0:488","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:9808:2836","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:489:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,38],"end":[68,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2810:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:88:2291":{"id":"0:88:2291","crate_id":0,"name":"parse_str","span":{"filename":"src/parser.rs","begin":[64,4],"end":[68,5]},"visibility":"public","docs":"Parses a `Uuid` from a string of hexadecimal digits with optional\nhyphens.\n\nAny of the formats generated by this module (simple, hyphenated, urn,\nMicrosoft GUID) are supported by this parsing function.\n\nPrefer [`try_parse`] unless you need detailed user-facing diagnostics.\nThis method will be eventually deprecated in favor of `try_parse`.\n\n# Examples\n\nParse a hyphenated UUID:\n\n```\n# use uuid::{Uuid, Version, Variant};\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"550e8400-e29b-41d4-a716-446655440000\")?;\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n# Ok(())\n# }\n```\n\n[`try_parse`]: #method.try_parse","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42018:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:133":{"id":"0:82:133","crate_id":0,"name":"Err","span":{"filename":"src/parser.rs","begin":[23,4],"end":[23,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:175:2181":{"id":"0:175:2181","crate_id":0,"name":"LENGTH","span":{"filename":"src/fmt.rs","begin":[398,4],"end":[398,33]},"visibility":"public","docs":"The length of a braced [`Uuid`] string.\n\n[`Uuid`]: ../struct.Uuid.html","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"primitive":"usize"},"default":"38"}}},"b:1:2594-0:296:134":{"id":"b:1:2594-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2596:741":{"id":"1:2596:741","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2605-0:367:2839":{"id":"b:1:2605-0:367:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[249,0],"end":[392,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:166:2181","0:167:2883","0:168:2913","0:170:2921","0:172:2676","0:173:2278"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,9],"end":[68,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:371:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:252-0:291:1920":{"id":"0:252-0:291:1920","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[284,16],"end":[284,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::builder::Builder","name":"Builder","id":"0:291:1920","glob":false}}},"0:53:2207":{"id":"0:53:2207","crate_id":0,"name":"nil","span":{"filename":"src/builder.rs","begin":[829,4],"end":[831,5]},"visibility":"public","docs":"Creates a `Builder` with an initial [`Uuid::nil`].\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet uuid = Builder::nil().into_uuid();\n\nassert_eq!(\n    \"00000000-0000-0000-0000-000000000000\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{"`Uuid::nil`":"0:14:2207"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2605-0:413:2180":{"id":"b:1:2605-0:413:2180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12786:9474":{"id":"1:12786:9474","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2816:253-0:390:2842":{"id":"a:1:2816:253-0:390:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:501":{"id":"0:501","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:502:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:290:1612":{"id":"0:290:1612","crate_id":0,"name":"try_from","span":{"filename":"src/lib.rs","begin":[953,4],"end":[955,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"resolved_path":{"name":"std::vec::Vec","id":"5:6954:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42018:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:2574:263","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:385":{"id":"0:385","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,53],"end":[68,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2809:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:190:2676":{"id":"0:190:2676","crate_id":0,"name":"as_uuid","span":{"filename":"src/fmt.rs","begin":[663,4],"end":[665,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet simple = Uuid::nil().simple();\nassert_eq!(*simple.as_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:443:714":{"id":"0:443:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[86,22],"end":[86,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:550:1927":{"id":"b:1:2594-0:550:1927","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:14:2207":{"id":"0:14:2207","crate_id":0,"name":"nil","span":{"filename":"src/builder.rs","begin":[72,4],"end":[74,5]},"visibility":"public","docs":"The 'nil UUID' (all zeros).\n\nThe nil UUID is a special form of UUID that is specified to have all\n128 bits set to zero.\n\n# References\n\n* [Nil UUID in RFC4122](https://tools.ietf.org/html/rfc4122.html#section-4.1.7)\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet uuid = Uuid::nil();\n\nassert_eq!(\n    \"00000000-0000-0000-0000-000000000000\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2605-0:550:1927":{"id":"b:1:2605-0:550:1927","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:620:459":{"id":"0:620:459","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[437,32],"end":[437,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31111:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:407:459":{"id":"0:407:459","crate_id":0,"name":"cmp","span":{"filename":"src/fmt.rs","begin":[74,48],"end":[74,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31111:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:436:2847":{"id":"0:436:2847","crate_id":0,"name":"Braced","span":{"filename":"src/fmt.rs","begin":[88,0],"end":[88,24]},"visibility":"public","docs":"Format a [`Uuid`] as a braced hyphenated string, like\n`{67e55044-10b1-426f-9247-bb680e5fe0c8}`.","links":{"`Uuid`":"0:607:2003"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:174","a:1:8846:3484-0:436:2847","a:1:2799:243-0:436:2847","a:1:2816:253-0:436:2847","a:1:2856:3331-0:436:2847","a:1:8845:3485-0:436:2847","b:1:2290-0:436:2847","b:1:2605-0:436:2847","b:1:2600-0:436:2847","b:1:2590-0:436:2847","b:1:2594-0:436:2847","b:1:3433-0:436:2847","b:1:2287-0:436:2847","b:5:5804-0:436:2847","b:5:682-0:436:2847","0:457","0:517","0:488","0:444","0:446","0:519","0:455","0:515","0:439","0:447","0:442","0:452","0:483","0:521","0:485","0:441","0:449","0:454"]}}},"1:12781:34118":{"id":"1:12781:34118","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12321:133","`FromStr`":"1:12320:2729"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42018:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12320:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12320:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12791:34119":{"id":"1:12791:34119","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4596:34119"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44070:3756","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:523:1903":{"id":"b:1:2594-0:523:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2799:243-0:296:134":{"id":"a:1:2799:243-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:389:1129":{"id":"0:389:1129","crate_id":0,"name":"partial_cmp","span":{"filename":"src/fmt.rs","begin":[68,64],"end":[68,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31111:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:2339":{"id":"0:20:2339","crate_id":0,"name":"from_fields_le","span":{"filename":"src/builder.rs","begin":[168,4],"end":[187,5]},"visibility":"public","docs":"Creates a UUID from four field values in little-endian order.\n\nThe bytes in the `d1`, `d2` and `d3` fields will be flipped to convert\ninto big-endian order. This is based on the endianness of the UUID,\nrather than the target environment so bytes will be flipped on both\nbig and little endian machines.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet d1 = 0xa1a2a3a4;\nlet d2 = 0xb1b2;\nlet d3 = 0xc1c2;\nlet d4 = [0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8];\n\nlet uuid = Uuid::from_fields_le(d1, d2, d3, &d4);\n\nassert_eq!(\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d1",{"primitive":"u32"}],["d2",{"primitive":"u16"}],["d3",{"primitive":"u16"}],["d4",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:502:741":{"id":"0:502:741","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:413:2180":{"id":"b:1:2594-0:413:2180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:547":{"id":"0:547","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[361,33],"end":[361,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2641:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:548:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:560:1935":{"id":"0:560:1935","crate_id":0,"name":"Md5","span":{"filename":"src/lib.rs","begin":[309,4],"end":[309,11]},"visibility":"default","docs":"Version 3: MD5 hash.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"3","value":"3"}}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,22],"end":[68,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:374:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12725:34104":{"id":"1:12725:34104","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12360:3322","str::split":"1:12713:31149","prim@char":"4:12032:448","str::split_terminator":"1:12722:34103"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43839:3769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12788:31070":{"id":"1:12788:31070","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:896:9485"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:473:714":{"id":"0:473:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:589:1951":{"id":"0:589:1951","crate_id":0,"name":"Variant","span":{"filename":"src/lib.rs","begin":[332,0],"end":[341,1]},"visibility":"public","docs":"The reserved variants of UUIDs.\n\n# References\n\n* [Variant in RFC4122](http://tools.ietf.org/html/rfc4122#section-4.1.1)","links":{},"attrs":["#[non_exhaustive]","#[repr(u8)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:590:1953","0:593:1955","0:595:1957","0:597:146"],"impls":["a:1:8846:3484-0:589:1951","a:1:2799:243-0:589:1951","a:1:2816:253-0:589:1951","a:1:2856:3331-0:589:1951","a:1:8845:3485-0:589:1951","b:1:2290-0:589:1951","b:1:2605-0:589:1951","b:1:2600-0:589:1951","b:1:2590-0:589:1951","b:1:2594-0:589:1951","b:1:3433-0:589:1951","b:1:2287-0:589:1951","b:5:5804-0:589:1951","b:5:682-0:589:1951","0:605","0:599","0:601","0:604","0:602","0:126"]}}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[48,0],"end":[169,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:207:3032","0:208:2199","0:209:3041","0:210:3047","0:212:3054"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5550:9471":{"id":"5:5550:9471","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12787:9475"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:2357":{"id":"0:51:2357","crate_id":0,"name":"from_u128","span":{"filename":"src/builder.rs","begin":[789,4],"end":[791,5]},"visibility":"public","docs":"Creates a `Builder` from a 128bit value.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n\nlet uuid = Builder::from_u128(v).into_uuid();\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"primitive":"u128"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:232:205":{"id":"0:232:205","crate_id":0,"name":"Output","span":{"filename":"src/timestamp.rs","begin":[344,4],"end":[344,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"ClockSequence","id":"0:226:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:401":{"id":"0:401","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,38],"end":[74,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2355:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12685:34101":{"id":"1:12685:34101","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12038:1531","crate::ops::IndexMut":"1:3099:3312","str::slice_unchecked":"1:12684:34100"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:531":{"id":"0:531","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,29],"end":[40,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2809:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:311:658":{"id":"0:311:658","crate_id":0,"name":"eq","span":{"filename":"src/error.rs","begin":[4,33],"end":[4,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12746:34106":{"id":"1:12746:34106","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12360:3322","`DoubleEndedIterator`":"1:7752:127","prim@char":"4:12032:448","str::rmatch_indices":"1:12749:34107"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43921:3761","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2856:3331-0:291:1920":{"id":"a:1:2856:3331-0:291:1920","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:3331","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1920","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:264:2085":{"id":"0:264:2085","crate_id":0,"name":"as_fields","span":{"filename":"src/lib.rs","begin":[625,4],"end":[639,5]},"visibility":"public","docs":"Returns the four field values of the UUID.\n\nThese values can be passed to the [`Uuid::from_fields`] method to get\nthe original `Uuid` back.\n\n* The first field value represents the first group of (eight) hex\n  digits, taken as a big-endian `u32` value.  For V1 UUIDs, this field\n  represents the low 32 bits of the timestamp.\n* The second field value represents the second group of (four) hex\n  digits, taken as a big-endian `u16` value.  For V1 UUIDs, this field\n  represents the middle 16 bits of the timestamp.\n* The third field value represents the third group of (four) hex digits,\n  taken as a big-endian `u16` value.  The 4 most significant bits give\n  the UUID version, and for V1 UUIDs, the last 12 bits represent the\n  high 12 bits of the timestamp.\n* The last field value represents the last two groups of four and twelve\n  hex digits, taken in order.  The first 1-3 bits of this indicate the\n  UUID variant, and for V1 UUIDs, the next 13-15 bits indicate the clock\n  sequence and the last 48 bits indicate the node ID.\n\n# Examples\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::nil();\n\nassert_eq!(uuid.as_fields(), (0, 0, 0, &[0u8; 8]));\n\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.as_fields(),\n    (\n        0xa1a2a3a4,\n        0xb1b2,\n        0xc1c2,\n        &[0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8],\n    )\n);\n# Ok(())\n# }\n```","links":{"`Uuid::from_fields`":"0:18:2333"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u32"},{"primitive":"u16"},{"primitive":"u16"},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:2883":{"id":"0:194:2883","crate_id":0,"name":"from_uuid","span":{"filename":"src/fmt.rs","begin":[692,4],"end":[694,5]},"visibility":"public","docs":"Creates a [`Urn`] from a [`Uuid`].\n\n[`Uuid`]: ../struct.Uuid.html\n[`Urn`]: struct.Urn.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:406":{"id":"0:406","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,48],"end":[74,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"1:2386:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:407:459"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:212:3054":{"id":"0:212:3054","crate_id":0,"name":"to_unix_nanos","span":{"filename":"src/timestamp.rs","begin":[166,4],"end":[168,5]},"visibility":"public","docs":"Get the number of fractional nanoseconds in the Unix timestamp.\n\nThis method is deprecated and probably doesn't do what you're expecting it to.\nIt doesn't return the timestamp as nanoseconds since the Unix epoch, it returns\nthe fractional seconds of the timestamp.","links":{},"attrs":["#[deprecated(note =\n\"use `to_unix` instead; this method will be removed in a future release\")]"],"deprecation":{"since":null,"note":"use `to_unix` instead; this method will be removed in a future release"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12722:34103":{"id":"1:12722:34103","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12360:3322","str::split":"1:12713:31149","prim@char":"4:12032:448","`DoubleEndedIterator`":"1:7752:127","str::rsplit_terminator":"1:12725:34104"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43821:3770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8846:3484-0:550:1927":{"id":"a:1:8846:3484-0:550:1927","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3484","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12752:34108":{"id":"1:12752:34108","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,23],"end":[4,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2810:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2856:3331-0:550:1927":{"id":"a:1:2856:3331-0:550:1927","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:3331","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:399:60":{"id":"0:399:60","crate_id":0,"name":"default","span":{"filename":"src/fmt.rs","begin":[74,29],"end":[74,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:534":{"id":"0:534","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,40],"end":[40,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2810:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:585:714":{"id":"0:585:714","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[298,22],"end":[298,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5804-0:390:2842":{"id":"b:5:5804-0:390:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5802:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5806:1589"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:542":{"id":"0:542","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[361,13],"end":[361,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:543:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:456:658":{"id":"0:456:658","crate_id":0,"name":"eq","span":{"filename":"src/fmt.rs","begin":[86,53],"end":[86,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:549:2255":{"id":"0:549:2255","crate_id":0,"name":"uuid","span":{"filename":"src/macros.rs","begin":[27,0],"end":[92,1]},"visibility":"public","docs":"Parse [`Uuid`][uuid::Uuid]s from string literals at compile time.\n\n## Usage\n\nThis macro transforms the string literal representation of a\n[`Uuid`][uuid::Uuid] into the bytes representation, raising a compilation\nerror if it cannot properly be parsed.\n\n## Examples\n\nSetting a global constant:\n\n```\n# use uuid::{uuid, Uuid};\npub const SCHEMA_ATTR_CLASS: Uuid = uuid!(\"00000000-0000-0000-0000-ffff00000000\");\npub const SCHEMA_ATTR_UUID: Uuid = uuid!(\"00000000-0000-0000-0000-ffff00000001\");\npub const SCHEMA_ATTR_NAME: Uuid = uuid!(\"00000000-0000-0000-0000-ffff00000002\");\n```\n\nDefining a local variable:\n\n```\n# use uuid::uuid;\nlet uuid = uuid!(\"urn:uuid:F9168C5E-CEB2-4faa-B6BF-329BF39FA1E4\");\n```\n\n## Compilation Failures\n\nInvalid UUIDs are rejected:\n\n```compile_fail\n# use uuid::uuid;\nlet uuid = uuid!(\"F9168C5E-ZEB2-4FAA-B6BF-329BF39FA1E4\");\n```\n\nEnable the feature `macro-diagnostics` to see the error messages below.\n\nProvides the following compilation error:\n\n```txt\nerror: invalid character: expected an optional prefix of `urn:uuid:` followed by [0-9a-fA-F-], found Z at 9\n    |\n    |     let id = uuid!(\"F9168C5E-ZEB2-4FAA-B6BF-329BF39FA1E4\");\n    |                              ^\n```\n\nTokens that aren't string literals are also rejected:\n\n```compile_fail\n# use uuid::uuid;\nlet uuid_str: &str = \"550e8400e29b41d4a716446655440000\";\nlet uuid = uuid!(uuid_str);\n```\n\nProvides the following compilation error:\n\n```txt\nerror: expected string literal\n  |\n  |     let uuid = uuid!(uuid_str);\n  |                      ^^^^^^^^\n```\n\n[uuid::Uuid]: https://docs.rs/uuid/*/uuid/struct.Uuid.html","links":{},"attrs":["#[cfg(not(feature = \"macro-diagnostics\"))]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! uuid {\n    ($uuid:literal) => { ... };\n}"}},"a:1:8845:3485-0:436:2847":{"id":"a:1:8845:3485-0:436:2847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8845:3485-0:291:1920":{"id":"a:1:8845:3485-0:291:1920","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1920","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2287-0:540:1901":{"id":"b:1:2287-0:540:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:2833"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:486:714":{"id":"0:486:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:307:778":{"id":"0:307:778","crate_id":0,"name":"hash","span":{"filename":"src/error.rs","begin":[4,27],"end":[4,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10019:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:510:741":{"id":"0:510:741","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:301":{"id":"0:301","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,16],"end":[4,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:302:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2605-0:436:2847":{"id":"b:1:2605-0:436:2847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:191:2278":{"id":"0:191:2278","crate_id":0,"name":"into_uuid","span":{"filename":"src/fmt.rs","begin":[677,4],"end":[679,5]},"visibility":"public","docs":"Consumes the [`Simple`], returning the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet simple = Uuid::nil().simple();\nassert_eq!(simple.into_uuid(), Uuid::nil());\n```","links":{"`Simple`":"0:390:2842","`Uuid`":"0:607:2003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:236":{"id":"0:236","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[364,4],"end":[370,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ClockSequence","id":"0:226:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:237:205","0:238:3033"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12758:34111":{"id":"1:12758:34111","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:272:2126":{"id":"0:272:2126","crate_id":0,"name":"as_u64_pair","span":{"filename":"src/lib.rs","begin":[752,4],"end":[755,5]},"visibility":"public","docs":"Returns two 64bit values containing the value.\n\nThe bytes in the UUID will be split into two `u64`.\nThe first u64 represents the 64 most significant bits,\nthe second one represents the 64 least significant.\n\n# Examples\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\nassert_eq!(\n    uuid.as_u64_pair(),\n    (0xa1a2a3a4b1b2c1c2, 0xd1d2d3d4d5d6d7d8),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u64"},{"primitive":"u64"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2816:253-0:550:1927":{"id":"a:1:2816:253-0:550:1927","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8846:3484-0:367:2839":{"id":"a:1:8846:3484-0:367:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3484","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:445:60":{"id":"0:445:60","crate_id":0,"name":"default","span":{"filename":"src/fmt.rs","begin":[86,29],"end":[86,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2287-0:436:2847":{"id":"b:1:2287-0:436:2847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:2833"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:682-0:436:2847":{"id":"b:5:682-0:436:2847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3301","5:685:26191","5:686:26192"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:550:1927":{"id":"0:550:1927","crate_id":0,"name":"Version","span":{"filename":"src/lib.rs","begin":[301,0],"end":[322,1]},"visibility":"public","docs":"The version of the UUID, denoting the generating algorithm.\n\n# References\n\n* [Version in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3)","links":{},"attrs":["#[non_exhaustive]","#[repr(u8)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:551:1929","0:554:1931","0:557:1933","0:560:1935","0:563:1937","0:566:1939","0:569:1941","0:572:1943","0:575:1945","0:578:1947"],"impls":["a:1:8846:3484-0:550:1927","a:1:2799:243-0:550:1927","a:1:2816:253-0:550:1927","a:1:2856:3331-0:550:1927","a:1:8845:3485-0:550:1927","b:1:2290-0:550:1927","b:1:2605-0:550:1927","b:1:2600-0:550:1927","b:1:2590-0:550:1927","b:1:2594-0:550:1927","b:1:3433-0:550:1927","b:1:2287-0:550:1927","b:5:682-0:550:1927","0:583","0:587","0:586","0:581","0:584"]}}},"0:429":{"id":"0:429","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,48],"end":[80,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"1:2386:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:430:459"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:367:2839":{"id":"b:5:682-0:367:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3301","5:685:26191","5:686:26192"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:37:2618":{"id":"0:37:2618","crate_id":0,"name":"from_md5_bytes","span":{"filename":"src/builder.rs","begin":[558,4],"end":[562,5]},"visibility":"public","docs":"Creates a `Builder` for a version 3 UUID using the supplied MD5 hashed bytes.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["md5_bytes",{"resolved_path":{"name":"Bytes","id":"0:254:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:2312":{"id":"0:137:2312","crate_id":0,"name":"urn","span":{"filename":"src/fmt.rs","begin":[119,4],"end":[121,5]},"visibility":"public","docs":"Get a [`Urn`] formatter.","links":{"`Urn`":"0:413:2180"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12743:34105":{"id":"1:12743:34105","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12360:3322","`DoubleEndedIterator`":"1:7752:127","prim@char":"4:12032:448","str::matches":"1:12740:2714"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43993:3764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:276:2056":{"id":"0:276:2056","crate_id":0,"name":"is_nil","span":{"filename":"src/lib.rs","begin":[841,4],"end":[843,5]},"visibility":"public","docs":"Tests if the UUID is nil (all zeros).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12787:9475":{"id":"1:12787:9475","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:519":{"id":"0:519","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2558:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:520:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:182:2278":{"id":"0:182:2278","crate_id":0,"name":"into_uuid","span":{"filename":"src/fmt.rs","begin":[534,4],"end":[536,5]},"visibility":"public","docs":"Consumes the [`Braced`], returning the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet braced = Uuid::nil().braced();\nassert_eq!(braced.into_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2003","`Braced`":"0:436:2847"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:442":{"id":"0:442","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,22],"end":[86,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:443:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:493":{"id":"0:493","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:494:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8845:3485-0:296:134":{"id":"a:1:8845:3485-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:434":{"id":"0:434","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,64],"end":[80,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","le","lt","ge"],"trait":{"name":"PartialOrd","id":"1:2392:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:435:1129"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2856:3331-0:540:1901":{"id":"a:1:2856:3331-0:540:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:3331","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:376:60":{"id":"0:376:60","crate_id":0,"name":"default","span":{"filename":"src/fmt.rs","begin":[68,29],"end":[68,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:530":{"id":"0:530","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,23],"end":[40,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2594-0:291:1920":{"id":"b:1:2594-0:291:1920","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1920","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:44:2651":{"id":"0:44:2651","crate_id":0,"name":"from_custom_bytes","span":{"filename":"src/builder.rs","begin":[650,4],"end":[654,5]},"visibility":"public","docs":"Creates a `Builder` for a version 8 UUID using the supplied user-defined bytes.\n\nThis method won't interpret the given bytes in any way, except to set the appropriate\nbits for the UUID version and variant.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["custom_bytes",{"resolved_path":{"name":"Bytes","id":"0:254:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:371:452":{"id":"0:371:452","crate_id":0,"name":"clone","span":{"filename":"src/fmt.rs","begin":[68,9],"end":[68,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8845:3485-0:540:1901":{"id":"a:1:8845:3485-0:540:1901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:229":{"id":"0:229","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[343,0],"end":[348,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:226:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ClockSequence","id":"0:226:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}},"items":["0:232:205","0:233:3033"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5549:9470":{"id":"5:5549:9470","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12786:9474"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:622":{"id":"0:622","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,37],"end":[437,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2350:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:623:658"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2600-0:291:1920":{"id":"b:1:2600-0:291:1920","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1920","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2600-0:390:2842":{"id":"b:1:2600-0:390:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8845:3485-0:367:2839":{"id":"a:1:8845:3485-0:367:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:253-0:296:134":{"id":"0:253-0:296:134","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[284,34],"end":[284,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::error::Error","name":"Error","id":"0:296:134","glob":false}}},"0:57:2277":{"id":"0:57:2277","crate_id":0,"name":"with_version","span":{"filename":"src/builder.rs","begin":[860,4],"end":[864,5]},"visibility":"public","docs":"Specifies the version number of the UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["v",{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:572:1943":{"id":"0:572:1943","crate_id":0,"name":"SortRand","span":{"filename":"src/lib.rs","begin":[317,4],"end":[317,16]},"visibility":"default","docs":"Version 7: Timestamp and random.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"7","value":"7"}}}},"a:1:2816:253-0:413:2180":{"id":"a:1:2816:253-0:413:2180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2287-0:550:1927":{"id":"b:1:2287-0:550:1927","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:2833"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8845:3485-0:589:1951":{"id":"a:1:8845:3485-0:589:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:607:2003":{"id":"0:607:2003","crate_id":0,"name":"Uuid","span":{"filename":"src/lib.rs","begin":[451,0],"end":[451,23]},"visibility":"public","docs":"A Universally Unique Identifier (UUID).\n\n# Examples\n\nParse a UUID given in the simple format and print it as a urn:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\")?;\n\nprintln!(\"{}\", my_uuid.urn());\n# Ok(())\n# }\n```\n\nCreate a new random (V4) UUID and print it out in hexadecimal form:\n\n```\n// Note that this requires the `v4` feature enabled in the uuid crate.\n# use uuid::Uuid;\n# fn main() {\n# #[cfg(feature = \"v4\")] {\nlet my_uuid = Uuid::new_v4();\n\nprintln!(\"{}\", my_uuid);\n# }\n# }\n```\n\n# Formatting\n\nA UUID can be formatted in one of a few ways:\n\n* [`simple`](#method.simple): `a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8`.\n* [`hyphenated`](#method.hyphenated):\n  `a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8`.\n* [`urn`](#method.urn): `urn:uuid:A1A2A3A4-B1B2-C1C2-D1D2-D3D4D5D6D7D8`.\n* [`braced`](#method.braced): `{a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8}`.\n\nThe default representation when formatting a UUID with `Display` is\nhyphenated:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    my_uuid.to_string(),\n);\n# Ok(())\n# }\n```\n\nOther formats can be specified using adapter methods on the UUID:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    \"urn:uuid:a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    my_uuid.urn().to_string(),\n);\n# Ok(())\n# }\n```\n\n# Endianness\n\nThe specification for UUIDs encodes the integer fields that make up the\nvalue in big-endian order. This crate assumes integer inputs are already in\nthe correct order by default, regardless of the endianness of the\nenvironment. Most methods that accept integers have a `_le` variant (such as\n`from_fields_le`) that assumes any integer values will need to have their\nbytes flipped, regardless of the endianness of the environment.\n\nMost users won't need to worry about endianness unless they need to operate\non individual fields (such as when converting between Microsoft GUIDs). The\nimportant things to remember are:\n\n- The endianness is in terms of the fields of the UUID, not the environment.\n- The endianness is assumed to be big-endian when there's no `_le` suffix\n  somewhere.\n- Byte-flipping in `_le` methods applies to each integer.\n- Endianness roundtrips, so if you create a UUID with `from_fields_le`\n  you'll get the same values back out with `to_fields_le`.\n\n# ABI\n\nThe `Uuid` type is always guaranteed to be have the same ABI as [`Bytes`].","links":{"`Bytes`":"0:254:1924"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:13","0:87","0:132","0:256","a:1:8846:3484-0:607:2003","a:1:2799:243-0:607:2003","a:1:2816:253-0:607:2003","a:1:2856:3331-0:607:2003","a:1:8845:3485-0:607:2003","b:1:2290-0:607:2003","b:1:2605-0:607:2003","b:1:2600-0:607:2003","b:1:2590-0:607:2003","b:1:2594-0:607:2003","b:1:3433-0:607:2003","b:1:2287-0:607:2003","b:5:5804-0:607:2003","b:5:682-0:607:2003","0:505","0:282","0:501","0:517","0:511","0:519","0:284","0:624","0:495","0:515","0:124","0:613","0:499","0:521","0:619","0:84","0:288","0:122","0:616","0:509","0:120","0:503","0:622","0:128","0:610","0:621","0:513","0:612","0:493","0:507","0:497","0:286","0:130","0:81","0:614","0:491"]}}},"0:582:452":{"id":"0:582:452","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[298,9],"end":[298,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12686:31141":{"id":"1:12686:31141","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12687:31142"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2799:243-0:390:2842":{"id":"a:1:2799:243-0:390:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:476:714":{"id":"0:476:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:532":{"id":"0:532","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,29],"end":[40,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2350:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:533:658"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12793:9758":{"id":"1:12793:9758","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4597:9758"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44079:3757","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12695:26425":{"id":"1:12695:26425","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44063:3749","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,48],"end":[68,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"1:2386:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:384:459"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2287-0:523:1903":{"id":"b:1:2287-0:523:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:2833"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12794:34120":{"id":"1:12794:34120","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4594:34120"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44088:3758","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:535":{"id":"0:535","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,40],"end":[40,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2355:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2816:253-0:607:2003":{"id":"a:1:2816:253-0:607:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:90:2752":{"id":"0:90:2752","crate_id":0,"name":"try_parse_ascii","span":{"filename":"src/parser.rs","begin":[125,4],"end":[132,5]},"visibility":"public","docs":"Parses a `Uuid` from a string of hexadecimal digits with optional\nhyphens.\n\nThe input is expected to be a string of ASCII characters. This method\ncan be more convenient than [`try_parse`] if the UUID is being\nparsed from a byte stream instead of from a UTF8 string.\n\n# Examples\n\nParse a hyphenated UUID:\n\n```\n# use uuid::{Uuid, Version, Variant};\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::try_parse_ascii(b\"550e8400-e29b-41d4-a716-446655440000\")?;\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n# Ok(())\n# }\n```\n\n[`try_parse`]: #method.try_parse","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42018:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:386":{"id":"0:386","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,53],"end":[68,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2350:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:387:658"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2255":{"id":"0:0:2255","crate_id":0,"name":"uuid","span":{"filename":"src/lib.rs","begin":[12,0],"end":[1845,1]},"visibility":"public","docs":"Generate and parse universally unique identifiers (UUIDs).\n\nHere's an example of a UUID:\n\n```text\n67e55044-10b1-426f-9247-bb680e5fe0c8\n```\n\nA UUID is a unique 128-bit value, stored as 16 octets, and regularly\nformatted as a hex string in five groups. UUIDs are used to assign unique\nidentifiers to entities without requiring a central allocating authority.\n\nThey are particularly useful in distributed systems, though can be used in\ndisparate areas, such as databases and network protocols.  Typically a UUID\nis displayed in a readable string form as a sequence of hexadecimal digits,\nseparated into groups by hyphens.\n\nThe uniqueness property is not strictly guaranteed, however for all\npractical purposes, it can be assumed that an unintentional collision would\nbe extremely unlikely.\n\nUUIDs have a number of standardized encodings that are specified in [RFC4122](http://tools.ietf.org/html/rfc4122),\nwith recent additions [in draft](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04).\n\n# Getting started\n\nAdd the following to your `Cargo.toml`:\n\n```toml\n[dependencies.uuid]\nversion = \"1.6.1\"\nfeatures = [\n    \"v4\",                # Lets you generate random UUIDs\n    \"fast-rng\",          # Use a faster (but still sufficiently random) RNG\n    \"macro-diagnostics\", # Enable better diagnostics for compile-time UUIDs\n]\n```\n\nWhen you want a UUID, you can generate one:\n\n```\n# fn main() {\n# #[cfg(feature = \"v4\")]\n# {\nuse uuid::Uuid;\n\nlet id = Uuid::new_v4();\n# }\n# }\n```\n\nIf you have a UUID value, you can use its string literal form inline:\n\n```\nuse uuid::{uuid, Uuid};\n\nconst ID: Uuid = uuid!(\"67e55044-10b1-426f-9247-bb680e5fe0c8\");\n```\n\n# Working with different UUID versions\n\nThis library supports all standardized methods for generating UUIDs through individual Cargo features.\n\nBy default, this crate depends on nothing but the Rust standard library and can parse and format\nUUIDs, but cannot generate them. Depending on the kind of UUID you'd like to work with, there\nare Cargo features that enable generating them:\n\n* `v1` - Version 1 UUIDs using a timestamp and monotonic counter.\n* `v3` - Version 3 UUIDs based on the MD5 hash of some data.\n* `v4` - Version 4 UUIDs with random data.\n* `v5` - Version 5 UUIDs based on the SHA1 hash of some data.\n* `v6` - Version 6 UUIDs using a timestamp and monotonic counter.\n* `v7` - Version 7 UUIDs using a Unix timestamp.\n* `v8` - Version 8 UUIDs using user-defined data.\n\nVersions that are in draft are also supported. See the _unstable features_ section for details.\n\nThis library also includes a [`Builder`] type that can be used to help construct UUIDs of any\nversion without any additional dependencies or features. It's a lower-level API than [`Uuid`]\nthat can be used when you need control over implicit requirements on things like a source\nof randomness.\n\n## Which UUID version should I use?\n\nIf you just want to generate unique identifiers then consider version 4 (`v4`) UUIDs. If you want\nto use UUIDs as database keys or need to sort them then consider version 7 (`v7`) UUIDs.\nOther versions should generally be avoided unless there's an existing need for them.\n\nSome UUID versions supersede others. Prefer version 6 over version 1 and version 5 over version 3.\n\n# Other features\n\nOther crate features can also be useful beyond the version support:\n\n* `macro-diagnostics` - enhances the diagnostics of `uuid!` macro.\n* `serde` - adds the ability to serialize and deserialize a UUID using\n  `serde`.\n* `arbitrary` - adds an `Arbitrary` trait implementation to `Uuid` for\n  fuzzing.\n* `fast-rng` - uses a faster algorithm for generating random UUIDs.\n  This feature requires more dependencies to compile, but is just as suitable for\n  UUIDs as the default algorithm.\n* `bytemuck` - adds a `Pod` trait implementation to `Uuid` for byte manipulation\n\n# Unstable features\n\nSome features are unstable. They may be incomplete or depend on other\nunstable libraries. These include:\n\n* `zerocopy` - adds support for zero-copy deserialization using the\n  `zerocopy` library.\n* `borsh` - adds the ability to serialize and deserialize a UUID using\n  `borsh`.\n\nUnstable features may break between minor releases.\n\nTo allow unstable features, you'll need to enable the Cargo feature as\nnormal, but also pass an additional flag through your environment to opt-in\nto unstable `uuid` features:\n\n```text\nRUSTFLAGS=\"--cfg uuid_unstable\"\n```\n\n# Building for other targets\n\n## WebAssembly\n\nFor WebAssembly, enable the `js` feature:\n\n```toml\n[dependencies.uuid]\nversion = \"1.6.1\"\nfeatures = [\n    \"v4\",\n    \"v7\",\n    \"js\",\n]\n```\n\n## Embedded\n\nFor embedded targets without the standard library, you'll need to\ndisable default features when building `uuid`:\n\n```toml\n[dependencies.uuid]\nversion = \"1.6.1\"\ndefault-features = false\n```\n\nSome additional features are supported in no-std environments:\n\n* `v1`, `v3`, `v5`, `v6`, and `v8`.\n* `serde`.\n\nIf you need to use `v4` or `v7` in a no-std environment, you'll need to\nfollow [`getrandom`'s docs] on configuring a source of randomness\non currently unsupported targets. Alternatively, you can produce\nrandom bytes yourself and then pass them to [`Builder::from_random_bytes`]\nwithout enabling the `v4` feature.\n\n# Examples\n\nParse a UUID given in the simple format and print it as a URN:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\")?;\n\nprintln!(\"{}\", my_uuid.urn());\n# Ok(())\n# }\n```\n\nGenerate a random UUID and print it out in hexadecimal form:\n\n```\n// Note that this requires the `v4` feature to be enabled.\n# use uuid::Uuid;\n# fn main() {\n# #[cfg(feature = \"v4\")] {\nlet my_uuid = Uuid::new_v4();\n\nprintln!(\"{}\", my_uuid);\n# }\n# }\n```\n\n# References\n\n* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)\n* [RFC4122: A Universally Unique Identifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)\n* [Draft RFC: New UUID Formats, Version 4](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04)\n\n[`wasm-bindgen`]: https://crates.io/crates/wasm-bindgen\n[`cargo-web`]: https://crates.io/crates/cargo-web\n[`getrandom`'s docs]: https://docs.rs/getrandom","links":{"`Uuid`":"0:607:2003","`Builder::from_random_bytes`":"0:38:2625","`Builder`":"0:291:1920"},"attrs":["#![no_std]","#![deny(missing_debug_implementations, missing_docs)]","#![doc(html_logo_url =\n\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\nhtml_favicon_url = \"https://www.rust-lang.org/favicon.ico\", html_root_url =\n\"https://docs.rs/uuid/1.6.1\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:108:714","0:203:1899","0:240-0:540:1901","0:241-0:226:1902","0:242-0:523:1903","0:252-0:291:1920","0:253-0:296:134","0:254:1924","0:550:1927","0:589:1951","0:607:2003","0:549:2255"],"is_stripped":false}}},"0:108:714":{"id":"0:108:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[12,0],"end":[1040,1]},"visibility":"public","docs":"Adapters for alternative string formats.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:367:2839","0:390:2842","0:413:2180","0:436:2847"],"is_stripped":false}}},"0:208:2199":{"id":"0:208:2199","crate_id":0,"name":"from_rfc4122","span":{"filename":"src/timestamp.rs","begin":[80,4],"end":[94,5]},"visibility":"public","docs":"Construct a `Timestamp` from an RFC4122 timestamp and counter, as used\nin versions 1 and 6 UUIDs.\n\n# Overflow\n\nIf conversion from RFC4122 ticks to the internal timestamp format would overflow\nit will wrap.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ticks",{"primitive":"u64"}],["counter",{"primitive":"u16"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:566:1939":{"id":"0:566:1939","crate_id":0,"name":"Sha1","span":{"filename":"src/lib.rs","begin":[313,4],"end":[313,12]},"visibility":"default","docs":"Version 5: SHA-1 hash.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"5","value":"5"}}}},"0:195:2913":{"id":"0:195:2913","crate_id":0,"name":"encode_lower","span":{"filename":"src/fmt.rs","begin":[746,4],"end":[748,5]},"visibility":"public","docs":"Writes the [`Uuid`] as a lower-case URN string to\n`buffer`, and returns the subslice of the buffer that contains the\nencoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936DA01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.urn().encode_lower(&mut Uuid::encode_buffer()),\n        \"urn:uuid:936da01f-9abd-4d9d-80c7-02af85c822a8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 49];\n    uuid.urn().encode_lower(&mut buf);\n    assert_eq!(\n        uuid.urn().encode_lower(&mut buf),\n        \"urn:uuid:936da01f-9abd-4d9d-80c7-02af85c822a8\"\n    );\n    assert_eq!(\n        &buf as &[_],\n        b\"urn:uuid:936da01f-9abd-4d9d-80c7-02af85c822a8!!!!\" as &[_]\n    );\n     \n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:587":{"id":"0:587","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,29],"end":[298,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2350:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:588:658"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12692:26421":{"id":"1:12692:26421","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12691:26433"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44054:3750","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12775:34116":{"id":"1:12775:34116","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3322"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:714":{"id":"0:131:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[61,4],"end":[63,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5548:9823":{"id":"5:5548:9823","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8845:3485-0:413:2180":{"id":"a:1:8845:3485-0:413:2180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:481:714":{"id":"0:481:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:597:146":{"id":"0:597:146","crate_id":0,"name":"Future","span":{"filename":"src/lib.rs","begin":[340,4],"end":[340,10]},"visibility":"default","docs":"Reserved for future expansion.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:1:2287-0:607:2003":{"id":"b:1:2287-0:607:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:2833"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:605":{"id":"0:605","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,29],"end":[329,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2350:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:606:658"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:25:2208":{"id":"0:25:2208","crate_id":0,"name":"from_slice","span":{"filename":"src/builder.rs","begin":[338,4],"end":[346,5]},"visibility":"public","docs":"Creates a UUID using the supplied bytes.\n\n# Errors\n\nThis function will return an error if `b` has any length other than 16.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_slice(&bytes)?;\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42018:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8846:3484-0:436:2847":{"id":"a:1:8846:3484-0:436:2847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3484","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:682-0:550:1927":{"id":"b:5:682-0:550:1927","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3301","5:685:26191","5:686:26192"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:489:714":{"id":"0:489:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12737:31159":{"id":"1:12737:31159","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:550:1927":{"id":"b:1:3433-0:550:1927","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:469":{"id":"0:469","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:9806:2834","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:470:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:396":{"id":"0:396","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,22],"end":[74,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:397:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2856:3331-0:436:2847":{"id":"a:1:2856:3331-0:436:2847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:3331","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2799:243-0:523:1903":{"id":"a:1:2799:243-0:523:1903","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:388":{"id":"0:388","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,64],"end":[68,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","le","lt","ge"],"trait":{"name":"PartialOrd","id":"1:2392:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:389:1129"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[38,0],"end":[133,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:88:2291","0:89:2742","0:90:2752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:45:2208":{"id":"0:45:2208","crate_id":0,"name":"from_slice","span":{"filename":"src/builder.rs","begin":[685,4],"end":[687,5]},"visibility":"public","docs":"Creates a `Builder` using the supplied bytes.\n\n# Errors\n\nThis function will return an error if `b` has any length other than 16.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\n# fn main() -> Result<(), uuid::Error> {\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Builder::from_slice(&bytes)?.into_uuid();\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42018:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:599":{"id":"0:599","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,9],"end":[329,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:600:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2600-0:607:2003":{"id":"b:1:2600-0:607:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:507":{"id":"0:507","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:508:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12680:9381":{"id":"1:12680:9381","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:397:714":{"id":"0:397:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[74,22],"end":[74,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:2883":{"id":"0:185:2883","crate_id":0,"name":"from_uuid","span":{"filename":"src/fmt.rs","begin":[549,4],"end":[551,5]},"visibility":"public","docs":"Creates a [`Simple`] from a [`Uuid`].\n\n[`Uuid`]: ../struct.Uuid.html\n[`Simple`]: struct.Simple.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2360":{"id":"0:52:2360","crate_id":0,"name":"from_u128_le","span":{"filename":"src/builder.rs","begin":[810,4],"end":[812,5]},"visibility":"public","docs":"Creates a UUID from a 128bit value in little-endian order.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n\nlet uuid = Builder::from_u128_le(v).into_uuid();\n\nassert_eq!(\n    \"d8d7d6d5-d4d3-d2d1-c2c1-b2b1a4a3a2a1\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"primitive":"u128"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:480":{"id":"0:480","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:9808:2836","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:481:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:173:2278":{"id":"0:173:2278","crate_id":0,"name":"into_uuid","span":{"filename":"src/fmt.rs","begin":[389,4],"end":[391,5]},"visibility":"public","docs":"Consumes the [`Hyphenated`], returning the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet hyphenated = Uuid::nil().hyphenated();\nassert_eq!(hyphenated.into_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2003","`Hyphenated`":"0:367:2839"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:472":{"id":"0:472","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:9808:2836","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:473:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:517":{"id":"0:517","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:518:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:181:2676":{"id":"0:181:2676","crate_id":0,"name":"as_uuid","span":{"filename":"src/fmt.rs","begin":[520,4],"end":[522,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet braced = Uuid::nil().braced();\nassert_eq!(*braced.as_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12690:2086":{"id":"1:12690:2086","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43757:1924","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/builder.rs","begin":[46,9],"end":[46,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1920","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2287-0:589:1951":{"id":"b:1:2287-0:589:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:2833"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:367:2839":{"id":"0:367:2839","crate_id":0,"name":"Hyphenated","span":{"filename":"src/fmt.rs","begin":[70,0],"end":[70,28]},"visibility":"public","docs":"Format a [`Uuid`] as a hyphenated string, like\n`67e55044-10b1-426f-9247-bb680e5fe0c8`.","links":{"`Uuid`":"0:607:2003"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:165","a:1:8846:3484-0:367:2839","a:1:2799:243-0:367:2839","a:1:2816:253-0:367:2839","a:1:2856:3331-0:367:2839","a:1:8845:3485-0:367:2839","b:1:2290-0:367:2839","b:1:2605-0:367:2839","b:1:2600-0:367:2839","b:1:2590-0:367:2839","b:1:2594-0:367:2839","b:1:3433-0:367:2839","b:1:2287-0:367:2839","b:5:5804-0:367:2839","b:5:682-0:367:2839","0:377","0:383","0:370","0:380","0:388","0:459","0:372","0:464","0:495","0:461","0:385","0:386","0:375","0:378","0:493","0:497","0:491","0:373"]}}},"0:275:2158":{"id":"0:275:2158","crate_id":0,"name":"to_bytes_le","span":{"filename":"src/lib.rs","begin":[832,4],"end":[838,5]},"visibility":"public","docs":"Returns the bytes of the UUID in little-endian order.\n\nThe bytes will be flipped to convert into little-endian order. This is\nbased on the endianness of the UUID, rather than the target environment\nso bytes will be flipped on both big and little endian machines.\n\n# Examples\n\n```\nuse uuid::Uuid;\n\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.to_bytes_le(),\n    ([\n        0xa4, 0xa3, 0xa2, 0xa1, 0xb2, 0xb1, 0xc2, 0xc1, 0xd1, 0xd2,\n        0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8\n    ])\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"0:254:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12689:2713":{"id":"1:12689:2713","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12032:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43747:3754","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2603:134":{"id":"1:2603:134","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[943,0],"end":[947,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"std::vec::Vec","id":"5:6954:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"items":["0:287:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:134:2835":{"id":"0:134:2835","crate_id":0,"name":"as_hyphenated","span":{"filename":"src/fmt.rs","begin":[99,4],"end":[102,5]},"visibility":"public","docs":"Get a borrowed [`Hyphenated`] formatter.","links":{"`Hyphenated`":"0:367:2839"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:477":{"id":"0:477","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:9806:2834","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:478:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:263:2055":{"id":"0:263:2055","crate_id":0,"name":"get_version","span":{"filename":"src/lib.rs","begin":[566,4],"end":[580,5]},"visibility":"public","docs":"Returns the version of the UUID.\n\nThis represents the algorithm used to generate the value.\nIf the version field doesn't contain a recognized version then `None`\nis returned. If you're trying to read the version for a future extension\nyou can also use [`Uuid::get_version_num`] to unconditionally return a\nnumber. Future extensions may start to return `Some` once they're\nstandardized and supported.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::{Uuid, Version};\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"02f09a3f-1624-3b1d-8409-44eff7708208\")?;\n\nassert_eq!(Some(Version::Md5), my_uuid.get_version());\n# Ok(())\n# }\n```\n\n# References\n\n* [Version in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3)","links":{"`Uuid::get_version_num`":"0:262:2046"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:550:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:419":{"id":"0:419","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,22],"end":[80,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:420:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:412:1129":{"id":"0:412:1129","crate_id":0,"name":"partial_cmp","span":{"filename":"src/fmt.rs","begin":[74,64],"end":[74,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31111:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200:2278":{"id":"0:200:2278","crate_id":0,"name":"into_uuid","span":{"filename":"src/fmt.rs","begin":[827,4],"end":[829,5]},"visibility":"public","docs":"Consumes the [`Urn`], returning the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet urn = Uuid::nil().urn();\nassert_eq!(urn.into_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2003","`Urn`":"0:413:2180"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:714":{"id":"0:127:714","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[43,4],"end":[50,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2856:3331-0:607:2003":{"id":"a:1:2856:3331-0:607:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:3331","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:606:658":{"id":"0:606:658","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[329,29],"end":[329,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:515":{"id":"0:515","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:516:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12699:2313":{"id":"1:12699:2313","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:261:2038":{"id":"0:261:2038","crate_id":0,"name":"get_variant","span":{"filename":"src/lib.rs","begin":[501,4],"end":[512,5]},"visibility":"public","docs":"Returns the variant of the UUID structure.\n\nThis determines the interpretation of the structure of the UUID.\nThis method simply reads the value of the variant byte. It doesn't\nvalidate the rest of the UUID as conforming to that variant.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::{Uuid, Variant};\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"02f09a3f-1624-3b1d-8409-44eff7708208\")?;\n\nassert_eq!(Variant::RFC4122, my_uuid.get_variant());\n# Ok(())\n# }\n```\n\n# References\n\n* [Variant in RFC4122](http://tools.ietf.org/html/rfc4122#section-4.1.1)","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:505":{"id":"0:505","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:506:2833"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:237:205":{"id":"0:237:205","crate_id":0,"name":"Output","span":{"filename":"src/timestamp.rs","begin":[365,8],"end":[365,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"u16"}}}},"b:5:5804-0:589:1951":{"id":"b:5:5804-0:589:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5802:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5806:1589"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:140:2858":{"id":"0:140:2858","crate_id":0,"name":"as_braced","span":{"filename":"src/fmt.rs","begin":[138,4],"end":[141,5]},"visibility":"public","docs":"Get a borrowed [`Braced`] formatter.","links":{"`Braced`":"0:436:2847"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:601":{"id":"0:601","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,16],"end":[329,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12769:31161":{"id":"1:12769:31161","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3322"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:390:2842":{"id":"b:1:2594-0:390:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:619":{"id":"0:619","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,32],"end":[437,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"1:2386:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:620:459"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:39:2630":{"id":"0:39:2630","crate_id":0,"name":"from_sha1_bytes","span":{"filename":"src/builder.rs","begin":[593,4],"end":[597,5]},"visibility":"public","docs":"Creates a `Builder` for a version 5 UUID using the supplied SHA-1 hashed bytes.\n\nThis method assumes the bytes are already a SHA-1 hash, it will only set the appropriate\nbits for the UUID version and variant.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["sha1_bytes",{"resolved_path":{"name":"Bytes","id":"0:254:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:533:658":{"id":"0:533:658","crate_id":0,"name":"eq","span":{"filename":"src/timestamp.rs","begin":[40,29],"end":[40,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Timestamp","id":"0:523:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:2181":{"id":"0:184:2181","crate_id":0,"name":"LENGTH","span":{"filename":"src/fmt.rs","begin":[543,4],"end":[543,33]},"visibility":"public","docs":"The length of a simple [`Uuid`] string.\n\n[`Uuid`]: ../struct.Uuid.html","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"primitive":"usize"},"default":"32"}}},"a:1:2799:243-0:436:2847":{"id":"a:1:2799:243-0:436:2847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3433-0:367:2839":{"id":"b:1:3433-0:367:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"1:3310:9745":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"9:357:20979":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"4:7855:7500":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"17:15432:5620":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:46352:8065":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:43143:7985":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:16049:5769":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:15079:5503":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:11507:1927":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:13218:5052":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:3032:123":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"18:766:26178":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:22188:15060":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:15842:5019":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"4:8545:3324":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:42069:3325":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:13347:5071":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:7360:35011":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:6998:4545":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:9751:232":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"4:8973:8564":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:4870:6917":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"11:832:8471":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"4:10767:7499":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:6415:5997":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"11:1160:8470":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:44188:8012":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:40613:7924":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:13083:5018":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:43821:3770":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:7568:5860":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:12951:146":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"4:6610:4573":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:4854:6910":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"4:5395:8528":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"11:875:8462":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:7015:6090":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"18:614:35025":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:21771:15309":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"5:1531:8480":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:939:8460":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4955:6957":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12077:8350":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:10422:8292":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:10247:4553":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:6136:7225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:4999:4526":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:10067:4827":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:645:15245":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:22576:26783":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:9806:2834":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"4:7599:4580":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:3032:5865":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:5971:4568":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:4038:15352":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:5033:7005":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:40651:7928":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:1923:6379":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:4610:6831":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:47020:8086":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:15689:5683":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:45805:8046":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:8308:7553":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:7722:5852":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:7207:28892":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:15557:5645":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:46006:8054":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:7143:9834":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"4:4167:15372":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:8169:15308":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:46076:8057":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:12035:1145":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"4:482:4549":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:40521:8627":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:10797:3765":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:12486:4963":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"16:6513:6003":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:12431:9915":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:5829:7062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:12320:2729":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:43106:3625":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:3201:8513":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:7462:6156":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:3150:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"4:8326:8560":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:22233:15309":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"4:4311:8523":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"4:3966:15347":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:6915:5854":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:44025:3759":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:12380:3744":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:10538:8516":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:15321:5567":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"14:215:6317":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:47280:8090":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"4:8011:2592":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:13663:5153":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:3682:4502":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:40229:7896":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:11243:8314":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:11476:6380":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:6691:7301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:9802:3529":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:14439:5290":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"4:4383:8524":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:40310:3757":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:5634:5904":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:4496:6776":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:3192:217":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:47066:8087":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:12180:8361":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:2205:3845":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"5:7301:4513":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:11141:8310":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:3014:9743":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:12418:8363":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:7534:5858":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:2197:8283":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:42384:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"4:8476:7567":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"4:1909:701":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:48214:8127":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"0:563:1937":{"crate_id":0,"path":["uuid","Version","Random"],"kind":"variant"},"1:42881:6198":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"0:590:1953":{"crate_id":0,"path":["uuid","Variant","NCS"],"kind":"variant"},"17:256:8276":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"4:10757:7598":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"4:6811:15439":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"4:6896:4575":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"4:1562:6378":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"4:10338:30630":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:11576:4877":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:43789:3765":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:11714:8339":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:7476:29034":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12510:4964":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:5068:7018":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"4:6162:4567":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:7136:29972":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:9860:22039":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:40674:7930":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"4:9034:7587":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:42345:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:12310:4949":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:35:3975":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:119:15566":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"4:5632:4568":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:4639:7326":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:4686:6846":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:7333:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:4523:6788":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:10164:4609":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:6599:3326":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:10321:111":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:5149:4534":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:12850:4934":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:30282:9637":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"5:1281:8466":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:6929:6075":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"4:2946:134":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:3482:2254":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:9813:22038":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:22277:15053":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"6:6813:7342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"0:557:1933":{"crate_id":0,"path":["uuid","Version","Dce"],"kind":"variant"},"6:4724:6849":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4902:6931":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11345:4867":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"11:1891:3304":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"0:540:1901":{"crate_id":0,"path":["uuid","timestamp","context","NoContext"],"kind":"struct"},"17:14312:5268":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:4578:6817":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:8984:8566":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"4:3239:8514":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:4042:15353":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:7365:7428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4998:6988":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:6479:3304":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"18:531:4686":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:14373:5283":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:2281:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"11:837:8457":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:14887:5462":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:15117:5512":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:2564:159":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:4461:6759":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"11:102:6367":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:14413:5288":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"4:3425:7549":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:2600:4553":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:13516:5116":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"4:2352:3828":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"16:3764:5871":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:654:15925":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:4386:3540":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"4:10532:8512":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:2355:131":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"4:12039:1617":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"4:4151:15370":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:11178:7611":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:13026:5006":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:2932:9731":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:42086:202":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:2821:3509":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"6:4535:6793":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:7621:21981":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:2031:8282":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:40250:26780":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:7529:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:16170:5064":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"4:9274:8504":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"0:234:1900":{"crate_id":0,"path":["uuid","timestamp","context"],"kind":"module"},"17:13297:5064":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:8115:6227":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:1522:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:32342:8623":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:10449:245":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:13419:5085":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:357:8491":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:6415:7643":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:48184:8125":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:44399:3314":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:44502:8032":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:11991:4924":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:1836:185":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:7668:7458":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:10471:35022":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:9800:126":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:43114:7984":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:4924:850":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:14359:5282":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:2864:5840":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:15680:5681":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:41604:167":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:40552:7914":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:6741:7329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13334:5070":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:10315:4834":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:0:3235":{"crate_id":17,"path":["object"],"kind":"module"},"17:15003:5486":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4847:6908":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:5992:7153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:10812:125":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:11027:4815":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:4015:3304":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"10:0:3229":{"crate_id":10,"path":["adler"],"kind":"module"},"1:8215:29882":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:1296:8464":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:44219:8015":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:5403:4825":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:7694:5861":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:3270:143":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:46160:8060":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:660:8271":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:23110:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:2522:3297":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:14778:5421":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:3600:5870":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:14455:5292":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:10137:4829":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:10780:7606":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:6569:5851":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:6297:226":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"4:1541:3304":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:48100:8119":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"4:1556:6377":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:2641:122":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:43603:8634":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:3830:5873":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:41797:7967":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"9:52:9048":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:11645:4883":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:1604:6603":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:40290:7902":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:9752:2254":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"5:1481:6375":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:47130:8089":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:30543:3853":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:3602:3325":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:6261:8411":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:22202:3837":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"5:898:3324":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:13491:5112":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:6666:7283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:495:6478":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:48109:8120":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:9678:22024":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:7768:5850":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:8168:3307":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"11:2352:8466":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:8281:6239":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:15062:5498":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:2873:3939":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:6456:6001":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:8814:7579":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:21484:15309":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:6346:15440":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:12684:4792":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:4783:6872":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:6934:7415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:7474:8438":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:43747:3754":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:42897:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:2169:22098":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:15177:5528":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:15037:5489":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"4:11144:7579":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:44494:8030":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:12345:4954":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:43565:7649":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:3674:3326":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:41833:7968":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:2693:3824":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:40877:7939":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:5798:5920":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"11:2542:6382":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:41101:4607":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:43921:3761":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:7128:7587":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:7598:7442":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:12244:4941":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:7271:3326":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:2652:134":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:22011:15056":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:30509:3971":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"18:755:4723":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:5121:5899":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:14170:5247":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:7325:3326":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"0:551:1929":{"crate_id":0,"path":["uuid","Version","Nil"],"kind":"variant"},"5:3338:3976":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"4:8796:8561":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:15224:5538":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:4814:6888":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:40699:4702":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:574:6525":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:10962:8302":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:12360:3322":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"15:0:3233":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:825:4508":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:43161:7989":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:7710:142":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:5955:7139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:4460:3517":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:6420:4606":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"4:8232:8558":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:12102:8001":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:6268:35012":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:14497:5299":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:5052:7013":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:10941:8300":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:13365:5079":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:47486:8108":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:46036:8055":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"7:0:1681":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:21312:15309":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:23017:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:44490:8029":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"3:0:3225":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:13707:5162":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"4:5051:8525":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:42841:7974":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"11:856:8460":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:15725:5687":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:4361:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:3191:33491":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:1511:8456":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:43514:8632":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:7677:9830":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:7828:6179":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:21170:26486":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"0:560:1935":{"crate_id":0,"path":["uuid","Version","Md5"],"kind":"variant"},"4:12047:794":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"17:511:8279":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"4:8157:7546":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"17:15527:5638":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:42021:199":{"crate_id":1,"path":["core","result","Result","Ok"],"kind":"foreign_type"},"4:880:6375":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:6083:21083":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"18:491:4680":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:5363:5901":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"4:4231:8522":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"0:589:1951":{"crate_id":0,"path":["uuid","Variant"],"kind":"enum"},"12:0:3231":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:41086:7943":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"4:533:4550":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"11:2326:8464":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:1521:6551":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:2354:15294":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"4:1567:6379":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:43131:153":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"4:7923:8549":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:11269:4846":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"4:11234:158":{"crate_id":4,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"4:9467:135":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:7645:7452":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:12614:22042":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"11:434:34994":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:687:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:39457:7764":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:43614:7993":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:44088:3758":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:9968:22041":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:3225:33492":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:6169:7234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:507:4681":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:21923:15309":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:9459:9070":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:11158:7580":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:7717:15248":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:6100:7215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:15631:5666":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"18:644:4681":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"19:0:1125":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"0:550:1927":{"crate_id":0,"path":["uuid","Version"],"kind":"enum"},"6:1674:6657":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"4:12050:1633":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"4:3837:8521":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"4:3936:15345":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:42464:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11485:8330":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"4:12037:1498":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"10:36:6389":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"11:1582:8472":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:11126:8309":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:41852:7969":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"4:4915:15401":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13478:5108":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:4064:107":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:4556:6804":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:4666:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"11:844:15261":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"0:572:1943":{"crate_id":0,"path":["uuid","Version","SortRand"],"kind":"variant"},"5:5956:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:13961:5198":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:6687:6039":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:14896:5463":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:30565:3537":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"4:12036:338":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"6:7343:7427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:2927:9730":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:12043:690":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:13166:4564":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"5:7262:3974":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:15345:5571":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"4:12030:399":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:22597:26781":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:4439:4528":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:11978:8349":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:13097:5019":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:14934:5470":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:40599:7921":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:21495:7657":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:7505:7493":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:11755:8344":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"4:2426:3169":{"crate_id":4,"path":["std","io"],"kind":"module"},"4:3160:33313":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:4745:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"0:566:1939":{"crate_id":0,"path":["uuid","Version","Sha1"],"kind":"variant"},"16:6901:5853":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:5075:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:6466:4572":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:2878:6113":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:14633:5308":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:10813:35020":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:2942:6119":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:22924:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:41949:3326":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:10102:4828":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:5969:7140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:41111:7945":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:557:8493":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:15101:5509":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:2915:9729":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:10968:30047":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:13869:5186":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:11001:8305":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:8137:4719":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"17:9790:22037":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:9810:212":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"17:13684:5157":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:8072:6221":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"4:7901:7502":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"13:110:34998":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:2644:5831":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:39486:216":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:7556:7441":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:21813:26484":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:44506:8033":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:6681:4502":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:12380:4957":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:48135:8122":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:11399:8319":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:15961:5047":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:12115:8356":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:7838:4771":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"11:687:3325":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13285:5063":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:6525:4502":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:39574:222":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"0:575:1945":{"crate_id":0,"path":["uuid","Version","Custom"],"kind":"variant"},"1:40417:7910":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"18:582:3503":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:4641:5885":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:32443:3516":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:10950:8301":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:1537:6559":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:11459:8324":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:7513:6160":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:6012:7169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:44202:8014":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:46236:8062":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:4585:5883":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:7543:3305":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:32295:3296":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:44486:8028":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:44366:8023":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:475:2689":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:1528:6554":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:2911:9727":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"18:624:35026":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:3163:30559":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:2811:115":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"16:3232:5810":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:4884:6922":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:41092:7944":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:7284:3481":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:2197:3837":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:11604:4879":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:16098:5784":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:11885:9878":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10051:4826":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:4549:6801":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:40543:7626":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:8181:5864":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:6114:7217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4830:6897":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"11:2536:6381":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:15480:5621":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:45935:8051":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:1691:6664":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:45905:8050":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:4806:5889":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"4:4180:15373":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:6837:3981":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:8872:7582":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:2305:21110":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"4:12053:1632":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:16016:5762":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"6:6819:7343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:23079:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:4989:6982":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:11632:4882":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:13182:5047":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:5387:3748":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:44054:3750":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:9651:22034":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:7370:3326":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"11:2369:8476":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:5384:21970":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:1063:8466":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:6682:7295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:43757:1924":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:13832:5182":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:5613:4526":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:15279:5556":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:7023:4548":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"4:12031:1028":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"4:10953:8531":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:3576:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:4491:15376":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"9:330:6427":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:11612:7625":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:11449:4770":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:9048:30051":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:4543:6798":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:13162:5037":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:5419:4826":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:4745:5887":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:2284:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:13155:113":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:11369:4869":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:8200:7937":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:4307:8603":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:922:8457":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:8891:7583":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:10726:35014":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:5004:6991":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:21373:14973":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:15:2224":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:42608:3529":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4516:6785":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:2969:21112":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:3584:8289":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:5123:7049":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:22134:15059":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:563:6520":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4968:6967":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:3733:7467":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:15253:5546":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:723:150":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:3994:15350":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"4:5128:210":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"17:10785:35016":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:2974:33497":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:3278:8516":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:11767:8345":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:1546:6565":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"4:8403:7564":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"13:226:6366":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:1758:8501":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"17:11497:4870":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"4:4625:15350":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:6600:21976":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:11743:8343":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:9069:7590":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:2504:5825":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"4:640:8496":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:4053:5876":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:5995:5803":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:13448:5096":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:6228:7246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:1743:655":{"crate_id":4,"path":["std","env"],"kind":"module"},"17:15329:5568":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:1873:3819":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"16:4835:5890":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"0:578:1947":{"crate_id":0,"path":["uuid","Version","Max"],"kind":"variant"},"1:41627:7951":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:46830:8083":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:2920:6115":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"5:1490:8471":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:21925:14972":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:10432:35019":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4449:6754":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"4:11605:30371":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"4:5639:7494":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:12746:4984":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:43993:3764":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:1760:7633":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:11915:2703":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:44697:233":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"4:1550:6376":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13742:5166":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13463:5102":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:6204:8384":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:6107:7216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:3186:6377":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:5415:8529":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"17:14485:4952":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"18:707:3745":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:4440:3541":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:12930:22045":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:11477:3854":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"4:0:1523":{"crate_id":4,"path":["std"],"kind":"module"},"16:6545:6013":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:14087:5231":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:11113:8308":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:12055:1691":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:40664:7929":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:7259:9820":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:13935:5194":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:16062:5775":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:46095:8058":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:2799:243":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"16:6226:8399":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:47738:8110":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:2968:33520":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:2178:7471":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:1641:631":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:22056:15057":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:7610:7444":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"11:299:6368":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:44522:7611":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"4:10831:30921":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:43839:3769":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:8134:6230":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:41774:29035":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:30741:26794":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"4:7732:15249":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:9730:22035":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:6222:7245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:5941:7128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:5500:8531":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:3099:3312":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:12014:30052":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:6156:5976":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:16004:5760":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:11590:4878":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:5146:7055":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:3241:8515":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:3220:6376":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"4:3443:8518":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:22248:15052":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:2962:9735":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:8535:7572":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"6:4878:6921":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:4719:5886":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:6008:15486":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:1591:6596":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"4:8300:8556":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:2816:253":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"16:536:5800":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:5963:8377":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:12548:8368":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"4:7843:8546":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"5:2043:7467":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:261:8277":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:43939:3762":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:46626:8074":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:1796:8503":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"16:6332:5843":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:62:15512":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"7:31:20950":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:21124:26472":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:3045:3329":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:4932:6946":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"0:595:1957":{"crate_id":0,"path":["uuid","Variant","Microsoft"],"kind":"variant"},"16:4986:5895":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:3748:8481":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:21801:7658":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:15244:5545":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:3060:137":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"0:554:1931":{"crate_id":0,"path":["uuid","Version","Mac"],"kind":"variant"},"1:44498:8031":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"4:3323:15335":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:3366:7944":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12029:4926":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"14:202:3303":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:580:6528":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:11563:4876":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:8385:3477":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:10247:9228":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:13896:5190":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:45781:8045":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:12591:117":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:15535:5639":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:10230:4611":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"4:12052:1635":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:11516:8520":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:4040:8600":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11701:8336":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:7752:127":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:41873:200":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:42924:134":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:21156:26478":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"11:2548:6383":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:2149:7469":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:3655:4731":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:13648:5148":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:15943:5037":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:6041:21974":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:2618:5830":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:12872:4991":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:42851:3537":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:6279:5983":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:3813:3976":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:6764:7330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:2670:5832":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:22986:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"4:7915:8548":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:22955:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"4:7865:7501":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:12356:4955":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"18:671:8275":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:5049:5897":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:43574:7650":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:47816:8111":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:6844:6068":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:22559:7673":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:14324:5270":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:12560:8369":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:46404:8067":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:2574:263":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:2662:8511":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:22484:7662":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:4947:6952":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:48237:8128":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6943:7418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:2386:201":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:9272:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:16109:5785":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"16:2284:21084":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:46113:8059":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:781:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:15337:5570":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:4939:1095":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:8177:9829":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:2967:3301":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:4647:6843":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:2766:5836":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:14099:5233":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:5673:5848":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:9943:22023":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:43975:3763":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"16:5648:8375":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:2966:9736":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:13259:3973":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:3280:8517":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"11:710:8455":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"18:609:8270":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:42425:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:11690:8335":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"4:10762:7600":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:39371:3328":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:4434:6747":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:7067:6097":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:5921:7115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:6189:5981":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"4:6596:15433":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:44345:9922":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:2561:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:5859:7087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:1310:8470":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:7291:3304":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13436:5093":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:1956:3859":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:14757:5411":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:47986:8114":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"0:390:2842":{"crate_id":0,"path":["uuid","fmt","Simple"],"kind":"struct"},"1:39552:220":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:1450:3326":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:4192:7637":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:11340:7617":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"4:7848:7499":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:10803:8298":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:46306:8064":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:4303:227":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"4:909:8471":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:11307:7614":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"4:4129:29978":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:4808:6886":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:40853:7937":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:9186:30592":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:8097:6224":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:5802:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:16134:5791":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:15733:5690":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4388:6713":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"4:3670:15344":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:10840:30923":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:6086:7204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:12536:8367":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"14:7:8451":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:867:6374":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:10762:8612":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:7006:8416":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:10520:35017":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:6243:8403":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:44761:177":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:15356:5575":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:15671:5677":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:11395:8318":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:8802:205":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:1746:3857":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:4469:15375":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:2251:7477":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:3460:8288":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"4:8226:8556":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:42111:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:7862:6183":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:14122:5242":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:6644:239":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:41119:7947":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:2864:3515":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:15659:5675":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:15235:5542":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"4:4744:15364":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:11403:8616":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"4:5987:226":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:12701:4982":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:4428:6746":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:3179:3324":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:0:874":{"crate_id":6,"path":["libc"],"kind":"module"},"1:2521:15309":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:6531:6011":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:3282:9742":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:588:6533":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:16180:5069":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:12972:4999":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:11998:9068":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:881:4510":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:501:6480":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"4:2911:4557":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:23203:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:4676:6845":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:7782:6171":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:6837:7354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:2868:3298":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:9971:7964":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:12964:161":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:4824:417":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:46860:8084":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:30635:26800":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:12140:8358":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:11779:4888":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:1265:6100":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"0:549:2255":{"crate_id":0,"path":["uuid","uuid"],"kind":"macro"},"1:43741:3317":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:40389:7909":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:10988:8304":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:527:6500":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:46450:8069":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:43122:3624":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:13145:5034":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:1902:3820":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"16:6583:6015":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:14041:5207":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:15013:5487":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:2809:251":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:2944:232":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"11:2498:21038":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"16:5816:5925":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"14:0:3232":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:4845:29473":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:1434:3325":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:4663:9776":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:22146:26927":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:6318:5986":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:11945:8347":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:12445:8366":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:3888:5874":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:5088:5898":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:10172:4830":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"4:11388:7621":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:2570:264":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"16:8195:6232":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:2899:3299":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:5780:8536":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:7492:6157":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:22675:9673":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:15612:5661":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:5696:21971":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:7037:3569":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:2406:5821":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:6112:4526":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:1500:8455":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:3732:8519":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:8453:7985":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"17:15160:5520":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:5689:7638":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:11412:8320":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"4:2380:15304":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:3255:9739":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"11:2423:3326":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:9804:3530":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"16:5588:5847":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:30577:26789":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"11:2469:3976":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:21493:14971":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"9:393:20965":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:40370:7908":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:7090:6099":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:7792:21982":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:9094:183":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:2511:1919":{"crate_id":1,"path":["core","convert"],"kind":"module"},"17:12324:4950":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:10667:35021":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:11313:8591":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"0:0:2255":{"crate_id":0,"path":["uuid"],"kind":"module"},"1:7714:162":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:12049:1636":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:12365:3313":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"18:681:4705":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:9559:22019":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:43653:8635":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:12048:790":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:45873:8049":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:11370:8541":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:7708:5862":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:13909:5191":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:7884:21983":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:14878:5458":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:555:6515":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:2810:5838":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:3212:6378":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:12264:4946":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:10262:4616":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:39635:7767":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:7489:4561":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:1054:8464":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:4557:5882":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"4:8237:15343":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:13809:5177":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:8220:3759":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"17:12387:22166":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"0:367:2839":{"crate_id":0,"path":["uuid","fmt","Hyphenated"],"kind":"struct"},"14:165:21048":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:1913:16917":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"4:12054:844":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"17:14251:5257":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:10011:149":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:44778:8042":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:1501:6543":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:14989:5482":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11256:8315":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:22524:7670":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:39649:7768":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:8958:3313":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:5023:6999":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:5009:6993":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:3295:29506":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:1126:33522":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:10835:8613":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:30549:7695":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:14969:5474":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"4:8207:1924":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:10578:3933":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"4:1406:152":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:15294:5560":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:12127:8357":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:9014:8570":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"4:1040:6100":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:7388:7440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:261:4502":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:41958:3481":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"5:7518:4535":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"4:11215:7613":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:2889:9726":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"11:1142:8469":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:13322:5069":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:44748:8039":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:4613:5884":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:15087:5506":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:45975:8053":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:31139:3503":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:918:8456":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:40571:7917":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:12191:4929":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:13922:5193":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:1769:3856":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:16146:5794":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:9267:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:40344:7904":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"16:2428:5822":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:7041:6091":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"4:12033:1652":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"17:15192:5530":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"4:849:3325":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"11:742:8456":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:10925:22053":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:11426:8321":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:48199:8126":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:11800:4890":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:6376:21975":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:44514:8035":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:31111:202":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"4:11382:7620":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"11:2554:34987":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"4:8850:3324":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"4:11051:4587":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:3431:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:41644:7953":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:12596:8372":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:12290:4947":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"4:7906:7505":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"14:221:6319":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:7371:7430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"9:507:6449":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"4:8936:15438":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:4841:6905":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:39628:8624":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:42869:26791":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"11:2124:6100":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:9759:22036":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:44541:128":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:5082:8525":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6352:5988":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:10355:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:14950:5473":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"4:5431:8530":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:42189:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:4235:3539":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:6868:7379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:9808:2836":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:3347:9746":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:13056:5010":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:2903:3940":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:12045:792":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"4:10097:8577":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"4:621:3821":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"4:8858:8563":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:4087:9759":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:5891:7105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:11088:4850":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:13383:5080":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"4:836:3324":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:4977:6973":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:6409:7644":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:4473:6768":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:2469:7478":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:1072:8470":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"4:5825:4560":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"15:327:9045":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:6248:7260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:1703:6668":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:43593:7652":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:8828:7580":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"18:736:26177":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"4:9196:7594":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:5885:7102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"4:12042:688":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:11041:4862":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:3049:21113":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"0:413:2180":{"crate_id":0,"path":["uuid","fmt","Urn"],"kind":"struct"},"4:4906:15400":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:10896:4843":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"4:7380:30144":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"4:637:8494":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:2380:5820":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:15903:5741":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:3461:5869":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:1682:6658":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:276:3315":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:12230:4936":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:4764:6864":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:483:6472":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:6700:7302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4776:6871":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:1678:1182":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"7:78:20957":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:14181:5248":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"11:2569:3316":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:41070:7942":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:7629:3977":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:5130:7052":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"4:8190:7912":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"4:1538:3326":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:9624:22017":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:12052:4927":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"4:951:8463":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:3063:138":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:5518:4526":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:123:15567":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"11:1007:6100":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:4700:15402":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:44379:3771":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:41933:3324":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"4:5308:126":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"11:1910:6377":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:4312:8604":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:45827:8047":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:21112:26472":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:2907:9728":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:4375:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:10918:8615":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:7391:21980":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"9:177:9059":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:6357:182":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"4:10738:8586":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:6485:5846":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"18:538:4689":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:4087:3325":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:5240:209":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"16:4949:5894":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:15301:5561":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:2450:5823":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:46942:8085":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:6804:7338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:0:3234":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:6467:6002":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"11:673:3324":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"11:1603:8473":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"4:8330:7311":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:41924:170":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:12125:8002":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:6059:7195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:42010:3827":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"5:5872:3304":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:8845:3485":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:21386:7657":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:15566:5647":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:10430:8561":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:6818:6067":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"18:564:4691":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:12374:3745":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:1545:3976":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:4247:3324":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:7657:7454":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:7318:6137":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"4:893:3304":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:6960:8415":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:12784:4986":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:42001:9848":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:4800:6882":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:44063:3749":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:10207:4831":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:40581:7918":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:42306:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"18:521:26179":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:32331:8622":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"17:11052:8296":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:12202:22164":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"11:1896:3976":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"4:9147:3938":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:16160:5795":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"16:7660:6167":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:3251:8287":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"9:450:20964":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:14822:5452":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:2861:112":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"5:1472:6374":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:46428:8068":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:11958:4921":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:2359:5819":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:13882:4895":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:6401:5845":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:6499:5863":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:43365:7992":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:11617:4880":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:21139:26476":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"0:593:1955":{"crate_id":0,"path":["uuid","Variant","RFC4122"],"kind":"variant"},"11:1025:8464":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:14921:5465":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:4824:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:4431:4599":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"11:364:4494":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"4:7668:7496":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"16:6560:4491":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:46572:8072":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:10569:35015":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:4773:8290":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:7597:35007":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:4050:15355":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"18:727:4717":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:15493:5627":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:7311:33493":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:5435:5902":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:48146:8123":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:7342:35010":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:22642:7685":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"0:205:3022":{"crate_id":0,"path":["uuid","timestamp","UUID_TICKS_BETWEEN_EPOCHS"],"kind":"constant"},"9:486:20963":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:7269:35013":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:1146:33392":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:15287:5559":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"4:3166:30558":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:2810:250":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:10293:1924":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:7503:5857":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:4883:8607":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:10617:3325":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:46382:8066":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:12718:22043":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:7544:6162":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:10775:8297":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:10016:22018":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:10439:15309":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:7613:3976":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"18:599:35024":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:14235:5255":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:1514:6549":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:590:4692":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:1558:6574":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:1576:6584":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"4:5446:111":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"5:1382:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:11170:30919":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:21367:14970":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:10059:3623":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:14698:5359":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:2806:3096":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"11:396:4496":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:7523:6161":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:7462:7488":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"4:11355:7618":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:40401:29034":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5152:7058":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:6658:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:8154:8447":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:10724:8611":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"11:1566:21043":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:45761:8044":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"11:2443:3304":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"4:6430:8538":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:3735:8520":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:6047:7190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:42061:3324":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"16:149:4489":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:4710:6848":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:8205:21984":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:47096:8088":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"4:7026:4576":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"0:569:1941":{"crate_id":0,"path":["uuid","Version","SortMac"],"kind":"variant"},"1:2937:9732":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:2696:5833":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:41991:3482":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:1534:3324":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:12091:8354":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:5746:8532":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:569:6523":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:6120:7220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:7604:7443":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:10095:8578":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"4:9164:8574":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:6792:6066":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:15589:5660":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"11:351:34989":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:4417:5878":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:47940:8113":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:43893:3767":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:39596:9738":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:4914:6935":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:16032:5767":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"5:6866:3983":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"4:11197:3085":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:40683:7931":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:12459:4846":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:14765:5414":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:4480:6772":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:4376:4598":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:5645:3981":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:10881:22052":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:3056:3332":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:859:3326":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:12046:793":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"6:1496:6541":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:3980:15348":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:14021:5206":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:2807:3508":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"6:6798:7336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:11675:4968":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"11:1887:3326":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"4:8292:8559":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:11155:4852":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:44151:9921":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:14145:5243":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:4052:8601":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:14266:5261":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:15133:5516":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:4908:6932":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:11476:8519":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:5574:5844":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:7622:7446":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:4376:4528":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:47878:8112":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:2948:6120":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:4742:15363":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:11307:8317":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:4440:6749":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:2472:5824":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"4:9479:4582":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:11817:22140":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:2698:7481":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:48120:8121":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:207:4501":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:22468:7661":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:533:6503":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:2350:207":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:9770:140":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"4:4637:7324":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"9:237:7985":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:40223:3757":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"4:8842:7581":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:46474:8070":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"18:574:4681":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"11:883:8463":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:16123:5789":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:23048:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:40590:7920":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:542:6509":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"18:636:4704":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:14346:5281":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:12410:4961":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:5897:7106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4364:6695":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"4:9026:8572":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:10802:136":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:4616:6833":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"4:8286:15374":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:4487:3542":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:2933:21111":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"18:80:26166":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"11:2231:6380":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:7492:7491":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:42228:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:32349:3540":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:40337:7903":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:10685:3751":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:8847:3483":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:22282:15051":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:11932:8346":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:4628:6842":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:10986:7581":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"4:7540:8594":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"14:160:8451":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:2558:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:13204:148":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:2978:33498":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:44566:3943":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:4488:6774":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:23265:7693":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:13754:5168":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:6017:21973":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:903:3976":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:3066:139":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:44331:8018":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:11593:7624":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"16:8239:6154":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"11:1883:3324":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:5987:4534":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:15990:5756":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:22649:7688":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:13038:8620":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:2187:632":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"11:1676:4498":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:13202:5048":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:1969:203":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:40530:7912":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:11045:4586":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"4:504:4519":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:46206:8061":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:2907:5842":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:4566:6811":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"4:7878:136":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"4:7580:4578":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"4:4569:15393":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:4889:5892":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"4:6249:4568":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:11727:8341":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:15267:5553":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"4:4703:15375":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:15311:5564":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:595:4822":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:8050:6220":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:6721:21977":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:46525:8071":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:42946:3538":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:44510:8034":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:15507:5633":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:5339:4502":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:10337:4835":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:14156:5245":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:48062:8116":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:14296:5264":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:46706:8075":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"4:6146:4564":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"11:1107:8468":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"11:430:34993":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:12003:15250":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:11549:4875":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:41810:7551":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:44687:225":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:6426:3931":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"4:10155:8579":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:14194:5250":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:10904:8614":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:4159:15371":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:40723:7934":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:12600:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:6893:6073":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:2199:3838":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"4:914:8455":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:43666:7654":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:2574:5828":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:10593:3324":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:8959:7586":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:11537:8521":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:7643:15309":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:39410:9744":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"10:44:6390":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"4:2202:8508":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:42024:133":{"crate_id":1,"path":["core","result","Result","Err"],"kind":"foreign_type"},"16:5830:5926":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:43346:7990":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:44518:8036":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:7931:7467":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:2057:8481":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:48161:8124":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:10242:4832":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"15:306:21066":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:7417:3316":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:40713:7933":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:2881:5841":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:2958:9734":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:42503:8610":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:43675:8636":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:507:6483":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:6753:6053":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"4:8146:7545":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"6:6898:7396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:12032:448":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"6:1632:6628":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:2883:6110":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:42906:3537":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:15855:5033":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:4584:6820":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:0:3236":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:23710:242":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:7054:6094":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:40464:4600":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:15212:5537":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:12057:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:47628:8109":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"15:394:21075":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:489:6475":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:2548:5827":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:13504:5113":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:2722:5834":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:5866:5933":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:12385:3743":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:4740:15361":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:1821:8505":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"2:0:475":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"16:4462:5879":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:4506:6782":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"4:3930:15346":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:10618:35018":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:13856:5183":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11215:4859":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:14221:5252":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:21776:14976":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:13121:5033":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11469:8325":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:12009:4862":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:2200:135":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:6070:4562":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"4:1966:204":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:9814:3532":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:11536:4874":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:12474:4862":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"16:2321:5811":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:1784:3976":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"4:8978:113":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:11321:4862":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:10642:3766":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:22613:26796":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:9021:8571":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:2895:6114":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:6781:7331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"4:11290:4588":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:6696:6040":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:5753:8535":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:2596:5829":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:12921:4952":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"4:7754:8545":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10657:4862":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"4:10822:7546":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:2228:8286":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:43875:3768":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"18:481:4679":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:5111:7043":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"4:10076:8503":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:5017:5896":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:41941:3325":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:2622:8510":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:2139:4519":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:44294:8017":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:6071:7202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:15374:5578":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:7805:3333":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:12396:4958":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:44267:8016":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"11:774:6374":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:5727:5913":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:8171:3327":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:6718:7311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:14509:5306":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"9:0:3228":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:43583:8633":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:13273:5060":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:40474:8625":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"4:928:15261":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:22095:15058":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:5910:7107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:1664:6651":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:1555:4526":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"4:4821:15360":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:4635:7322":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:21314:14974":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:23172:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:21158:26483":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:4406:4526":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"4:3394:4526":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:39510:218":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"11:700:3326":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:4603:6829":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"9:426:20966":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:5381:8526":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"6:4595:6824":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:10054:3622":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:22500:7666":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:7279:7486":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:3915:5875":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:22551:7672":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"4:3491:30257":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:11666:4887":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:3315:5868":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:4351:6686":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:40863:7938":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:13976:5201":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:4455:6756":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:40325:9782":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:13254:5059":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:15519:5635":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13235:5054":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:44070:3756":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:1734:6680":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:11981:8597":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:15710:5686":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:5044:7011":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:6225:7640":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:12432:8365":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:6263:7271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12103:8355":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:41690:7960":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:1507:6546":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:548:6512":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:8281:7552":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:10510:8293":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:3510:15327":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"5:7362:3326":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:4527:5881":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:2970:7474":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:15546:5644":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:1203:8281":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:2526:5826":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:13695:5160":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"4:11619:7625":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:629:8477":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:9454:29917":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:4789:6875":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:22663:7689":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:6742:6052":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:14385:5284":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"4:12056:1241":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:44790:6388":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:13395:5083":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:1419:3324":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:5625:226":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:4497:5880":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:678:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:13407:5084":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:12065:7998":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13724:5165":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:5104:7040":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:41063:7941":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:40494:8626":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:5015:6994":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"11:1917:6378":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:12176:3751":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:14470:5296":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:4798:4558":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:7582:6163":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:4772:714":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"4:1819:8504":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:14786:5422":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:40501:7653":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"14:187:21053":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:10035:4825":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:7673:9831":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:5441:1531":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"1:43361:7991":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:2859:3513":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"5:4045:4502":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:9099:240":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:12038:1531":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"16:2744:5835":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:44356:8019":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:48080:8117":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:7613:8445":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:5085:7026":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:1570:6582":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:4774:5888":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"4:8991:30012":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"4:7529:4822":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"11:123:4492":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:1639:6632":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:7341:7487":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:0:530":{"crate_id":1,"path":["core"],"kind":"module"},"6:4755:6859":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:7554:5859":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:6128:7222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"4:6983:9329":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:5982:5946":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:43771:3766":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"11:811:3976":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"14:40:5034":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:8167:8450":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:5322:5900":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:4344:5877":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"11:1087:34992":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:5905:5936":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10559:8294":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:26112:272":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"4:8352:7554":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:40351:9783":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:7651:7453":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:3065:4726":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"4:7738:15280":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"17:14399:5285":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:48276:8129":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:2971:9737":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:2368:15298":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"4:11453:4590":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"0:203:1899":{"crate_id":0,"path":["uuid","timestamp"],"kind":"module"},"1:42622:2836":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:15125:5514":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:43640:7653":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:4401:6723":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:435:4778":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:7554:3306":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:6361:5989":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:10915:8299":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"11:1066:21042":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"15:288:21065":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"0:523:1903":{"crate_id":0,"path":["uuid","timestamp","Timestamp"],"kind":"struct"},"1:3265:260":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"11:1051:8466":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:5383:3747":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:15200:5531":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:40642:7927":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:42077:3326":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"0:254:1924":{"crate_id":0,"path":["uuid","Bytes"],"kind":"type_alias"},"13:0:3226":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:1863:1897":{"crate_id":4,"path":["std","error"],"kind":"module"},"1:22148:3837":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"4:945:8462":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"4:8562:7576":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:5760:21972":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:44035:3760":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"18:690:4708":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:1650:6640":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:10792:7500":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:21365:15309":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:9474:8546":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"4:10940:8545":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:9812:3531":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:2954:9733":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"4:6194:8537":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:4738:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:15868:5711":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:40431:9793":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:40280:7901":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"18:96:26167":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:6879:6071":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12758:4985":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:39470:219":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:42615:2834":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:4177:4526":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:22536:29040":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:1648:7632":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"5:4860:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:4862:5891":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:5982:7146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:2586:4554":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:15980:5755":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:10890:3767":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"14:31:8451":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:6425:5998":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:32356:7760":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:44079:3757":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:15027:5488":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"11:800:3304":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:7445:3929":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:11065:4848":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:16087:5783":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:41077:3931":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"0:226:1902":{"crate_id":0,"path":["uuid","timestamp","ClockSequence"],"kind":"trait"},"1:43685:7655":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:12584:8371":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"4:3988:15349":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:13676:5155":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:7702:7465":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:39530:221":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:9918:22040":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:5712:5910":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"4:2370:15299":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"17:11168:22070":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:12953:4996":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:40561:7915":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:785:4505":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:6968:21978":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:7639:7451":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:22:728":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:7663:1920":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:415:181":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:4:1108":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:4964:3473":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"6:5928:7119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:8213:3766":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"4:10473:4583":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:5802:7639":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:5867:7089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:6540:8539":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:7429:15260":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13787:5176":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:7616:7445":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"4:12044:795":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"2:234:232":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:42018:232":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:6913:7403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:6927:7412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:7736:6169":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:3968:4526":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:7861:175":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:2231:34962":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:14282:5262":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"4:12051:1634":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:40622:7925":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:14426:5289":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11226:8311":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:1680:4502":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:12255:4945":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:12797:4988":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:22119:15309":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:12141:8003":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:2518:8509":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:40384:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:12659:22021":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:5140:7053":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:5568:7232":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:2303:110":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:8866:3326":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:3540:3304":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"4:5571:15418":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"16:2832:5839":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:40302:3758":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:14662:5328":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:6346:8414":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"11:787:6375":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:45957:8052":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:6961:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:12273:4989":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:42601:3530":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:22362:7659":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:12986:29748":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:7429:4719":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:10852:22051":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13633:5144":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:15645:5668":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"18:652:4681":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:719:4714":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:41661:9839":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:48089:8118":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:48024:8115":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:11436:8617":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:12166:8360":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:6159:7231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"18:515:4684":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12999:5000":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:11014:8306":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:4161:8602":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:12828:4989":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:11294:8316":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:5612:5849":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"11:2383:3324":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"18:699:4709":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:11901:8618":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:12153:8359":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:44705:213":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:10876:3768":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:15049:5492":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:4893:6925":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"11:0:3230":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"4:4028:15351":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"0:436:2847":{"crate_id":0,"path":["uuid","fmt","Braced"],"kind":"struct"},"4:8920:15436":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:14843:5457":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:588:15243":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"11:2403:3325":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:14904:5464":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:32335:6154":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"4:1760:8502":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"17:12572:8370":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"4:10535:8514":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:23234:186":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:9795:117":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"11:2140:8464":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"11:2562:6385":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:1697:6667":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"11:2304:6100":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:401:8278":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:13309:5067":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:7651:8446":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:43715:3318":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"4:7689:3933":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:6543:15431":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:6944:35008":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:3589:3324":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:5743:5915":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:13584:5120":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11194:22071":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:45851:8048":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:3246:6379":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:9599:3549":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"16:5939:5942":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:3095:3311":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:44740:8638":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:43695:8637":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:1596:6598":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"11:1903:6376":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:12898:22044":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:40238:7897":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:1019:4502":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:596:6537":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"4:7895:125":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:9891:22020":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:7102:21979":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:13765:5169":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:3797:5872":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:40631:7926":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:2392:208":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:42150:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:46058:8056":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:44578:9928":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:7692:7463":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"4:3500:15307":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"16:2788:5837":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:6954:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:44803:8043":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"4:8551:7575":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:46603:8073":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:2856:3331":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:8846:3484":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:44173:8006":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:7633:7450":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:16076:5778":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:5661:5908":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:46784:8082":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11523:4872":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:2853:3511":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:46258:8063":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:39822:26364":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:15747:5693":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:8493:15413":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:40318:3756":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:14057:5212":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:40266:7900":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:15384:5583":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:15367:5576":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:4928:8291":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"0:607:2003":{"crate_id":0,"path":["uuid","Uuid"],"kind":"struct"},"4:363:8492":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:4698:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:11034:4585":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:43153:7988":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:10944:6446":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:10608:8295":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:5974:7141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:6856:3982":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:2567:141":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"17:12301:4948":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:7679:7459":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:13013:211":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:13948:5196":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:8001:8550":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"4:8904:15437":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:6079:7203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:10716:8296":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"4:9128:3085":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:12335:4952":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:4860:6913":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4922:6940":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:15184:5529":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"0:108:714":{"crate_id":0,"path":["uuid","fmt"],"kind":"module"},"6:6711:7307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"11:2151:8466":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:11439:8322":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:11816:4594":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:22415:7660":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:21102:3503":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:1094:8280":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:14001:5203":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:1718:6675":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"0:597:146":{"crate_id":0,"path":["uuid","Variant","Future"],"kind":"variant"},"1:42267:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:9109:158":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"4:8006:1945":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"17:12366:22165":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:21141:26482":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:2209:15291":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"6:4529:6790":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"11:328:6371":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:1110:33399":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:3199:8512":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:43729:3755":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:7723:3334":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:3276:9740":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:5117:7046":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:14208:5251":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:13989:5202":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:1710:6671":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:44045:3752":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12220:4934":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:6386:5994":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"8:0:3227":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:10974:4846":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:11657:4886":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:2339:5813":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:10019:153":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"4:7644:7495":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:15108:5511":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"4:9104:241":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:7436:5950":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:6889:7393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:4207:4526":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"4:8274:7551":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:23141:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:4921:5893":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"18:113:26168":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}