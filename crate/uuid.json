{"root":"0:0:2270","crate_version":"1.6.1","includes_private":false,"index":{"0:485":{"id":"0:485","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:9635:2850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:486:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2589-0:523:1919":{"id":"b:1:2589-0:523:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2592:135","1:2593:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:195:2928":{"id":"0:195:2928","crate_id":0,"name":"encode_lower","span":{"filename":"src/fmt.rs","begin":[746,4],"end":[748,5]},"visibility":"public","docs":"Writes the [`Uuid`] as a lower-case URN string to\n`buffer`, and returns the subslice of the buffer that contains the\nencoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936DA01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.urn().encode_lower(&mut Uuid::encode_buffer()),\n        \"urn:uuid:936da01f-9abd-4d9d-80c7-02af85c822a8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 49];\n    uuid.urn().encode_lower(&mut buf);\n    assert_eq!(\n        uuid.urn().encode_lower(&mut buf),\n        \"urn:uuid:936da01f-9abd-4d9d-80c7-02af85c822a8\"\n    );\n    assert_eq!(\n        &buf as &[_],\n        b\"urn:uuid:936da01f-9abd-4d9d-80c7-02af85c822a8!!!!\" as &[_]\n    );\n     \n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192":{"id":"0:192","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[682,0],"end":[830,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:193:2196","0:194:2898","0:195:2928","0:197:2936","0:199:2691","0:200:2293"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2276-0:540:1917":{"id":"b:1:2276-0:540:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2278:25910"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:203:1916":{"id":"0:203:1916","crate_id":0,"name":"timestamp","span":{"filename":"src/timestamp.rs","begin":[1,0],"end":[468,1]},"visibility":"public","docs":"Generating UUIDs from timestamps.\n\nTimestamps are used in a few UUID versions as a source of decentralized\nuniqueness (as in versions 1 and 6), and as a way to enable sorting (as\nin versions 6 and 7). Timestamps aren't encoded the same way by all UUID\nversions so this module provides a single [`Timestamp`] type that can\nconvert between them.\n\n# Timestamp representations in UUIDs\n\nVersions 1 and 6 UUIDs use a bespoke timestamp that consists of the\nnumber of 100ns ticks since `1582-10-15 00:00:00`, along with\na counter value to avoid duplicates.\n\nVersion 7 UUIDs use a more standard timestamp that consists of the\nnumber of millisecond ticks since the Unix epoch (`1970-01-01 00:00:00`).\n\n# References\n\n* [Timestamp in RFC4122](https://www.rfc-editor.org/rfc/rfc4122#section-4.1.4)\n* [Timestamp in Draft RFC: New UUID Formats, Version 4](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04#section-6.1)","links":{"`Timestamp`":"0:523:1919"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:234:531","0:205:3037","0:523:1919","0:226:1918"],"is_stripped":false}}},"b:5:5793-0:390:2858":{"id":"b:5:5793-0:390:2858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5791:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5795:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:380":{"id":"0:380","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,42],"end":[68,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9840:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:381:789"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:53:2222":{"id":"0:53:2222","crate_id":0,"name":"nil","span":{"filename":"src/builder.rs","begin":[829,4],"end":[831,5]},"visibility":"public","docs":"Creates a `Builder` with an initial [`Uuid::nil`].\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet uuid = Builder::nil().into_uuid();\n\nassert_eq!(\n    \"00000000-0000-0000-0000-000000000000\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{"`Uuid::nil`":"0:14:2222"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:575:1960":{"id":"0:575:1960","crate_id":0,"name":"Custom","span":{"filename":"src/lib.rs","begin":[319,4],"end":[319,14]},"visibility":"default","docs":"Version 8: Custom.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"8","value":"8"}}}},"0:503":{"id":"0:503","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2547:79","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:504:350"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:120":{"id":"0:120","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[22,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:121:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:610":{"id":"0:610","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,9],"end":[437,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:611:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12579:30551":{"id":"1:12579:30551","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41686:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2593:1628":{"id":"1:2593:1628","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2845:3344-0:291:1935":{"id":"a:1:2845:3344-0:291:1935","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2845:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1935","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:400":{"id":"0:400","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,38],"end":[74,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2799:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:456:667":{"id":"0:456:667","crate_id":0,"name":"eq","span":{"filename":"src/fmt.rs","begin":[86,53],"end":[86,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2276-0:296:135":{"id":"b:1:2276-0:296:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2278:25910"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12573:30548":{"id":"1:12573:30548","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12029:457","str::splitn":"1:12570:30546","self::pattern":"1:12200:3335"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43770:3777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:459":{"id":"0:459","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:460:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2594-0:607:2018":{"id":"b:1:2594-0:607:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2597:135","1:2598:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2582:2404":{"id":"1:2582:2404","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2556:143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:367:2855":{"id":"b:1:2594-0:367:2855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2597:135","1:2598:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:409":{"id":"0:409","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,53],"end":[74,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2337:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:410:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2579-0:523:1919":{"id":"b:1:2579-0:523:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2582:2404"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:282":{"id":"0:282","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[928,0],"end":[933,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2630:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:283:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12605:33461":{"id":"1:12605:33461","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12029:457","self::pattern":"1:12200:3335"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:476:725":{"id":"0:476:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:540:1917":{"id":"b:1:2594-0:540:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2597:135","1:2598:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2845:3344-0:540:1917":{"id":"a:1:2845:3344-0:540:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2845:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:604":{"id":"0:604","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,29],"end":[329,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2798:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:310":{"id":"0:310","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,33],"end":[4,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2337:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:311:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:39:2645":{"id":"0:39:2645","crate_id":0,"name":"from_sha1_bytes","span":{"filename":"src/builder.rs","begin":[593,4],"end":[597,5]},"visibility":"public","docs":"Creates a `Builder` for a version 5 UUID using the supplied SHA-1 hashed bytes.\n\nThis method assumes the bytes are already a SHA-1 hash, it will only set the appropriate\nbits for the UUID version and variant.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["sha1_bytes",{"resolved_path":{"name":"Bytes","id":"0:254:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271:2133":{"id":"0:271:2133","crate_id":0,"name":"to_u128_le","span":{"filename":"src/lib.rs","begin":[729,4],"end":[731,5]},"visibility":"public","docs":"Returns a 128bit little-endian value containing the value.\n\nThe bytes in the `u128` will be flipped to convert into big-endian\norder. This is based on the endianness of the UUID, rather than the\ntarget environment so bytes will be flipped on both big and little\nendian machines.\n\nNote that this will produce a different result than\n[`Uuid::to_fields_le`], because the entire UUID is reversed, rather\nthan reversing the individual fields in-place.\n\n# Examples\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.to_u128_le(),\n    0xd8d7d6d5d4d3d2d1c2c1b2b1a4a3a2a1,\n);\n# Ok(())\n# }\n```","links":{"`Uuid::to_fields_le`":"0:267:2116"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2276-0:413:2195":{"id":"b:1:2276-0:413:2195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2278:25910"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:166:2196":{"id":"0:166:2196","crate_id":0,"name":"LENGTH","span":{"filename":"src/fmt.rs","begin":[253,4],"end":[253,33]},"visibility":"public","docs":"The length of a hyphenated [`Uuid`] string.\n\n[`Uuid`]: ../struct.Uuid.html","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"primitive":"usize"},"default":"36"}}},"1:12570:30546":{"id":"1:12570:30546","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12029:457","self::pattern":"1:12200:3335","str::rsplitn":"1:12573:30548"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43752:3778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12598:33457":{"id":"1:12598:33457","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:418":{"id":"0:418","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,16],"end":[80,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2800:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:446":{"id":"0:446","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,38],"end":[86,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2799:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12623:33465":{"id":"1:12623:33465","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12161:134","`FromStr`":"1:12160:2744"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12160:2744","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12160:2744","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2579-0:413:2195":{"id":"b:1:2579-0:413:2195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2582:2404"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:518:752":{"id":"0:518:752","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:582:461":{"id":"0:582:461","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[298,9],"end":[298,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8670:3497-0:367:2855":{"id":"a:1:8670:3497-0:367:2855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8670:3497","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12608:29703":{"id":"1:12608:29703","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12029:457","self::pattern":"1:12200:3335"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41686:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:2898":{"id":"0:185:2898","crate_id":0,"name":"from_uuid","span":{"filename":"src/fmt.rs","begin":[549,4],"end":[551,5]},"visibility":"public","docs":"Creates a [`Simple`] from a [`Uuid`].\n\n[`Uuid`]: ../struct.Uuid.html\n[`Simple`]: struct.Simple.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:134":{"id":"0:82:134","crate_id":0,"name":"Err","span":{"filename":"src/parser.rs","begin":[23,4],"end":[23,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:300:461":{"id":"0:300:461","crate_id":0,"name":"clone","span":{"filename":"src/error.rs","begin":[4,9],"end":[4,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:403":{"id":"0:403","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,42],"end":[74,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9840:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:404:789"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:59:2293":{"id":"0:59:2293","crate_id":0,"name":"into_uuid","span":{"filename":"src/builder.rs","begin":[900,4],"end":[902,5]},"visibility":"public","docs":"Convert the builder into a [`Uuid`].\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet uuid = Builder::nil().into_uuid();\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"00000000-0000-0000-0000-000000000000\"\n);\n```","links":{"`Uuid`":"0:607:2018"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:193:2196":{"id":"0:193:2196","crate_id":0,"name":"LENGTH","span":{"filename":"src/fmt.rs","begin":[686,4],"end":[686,33]},"visibility":"public","docs":"The length of a URN [`Uuid`] string.\n\n[`Uuid`]: ../struct.Uuid.html","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"primitive":"usize"},"default":"45"}}},"a:1:2788:249-0:367:2855":{"id":"a:1:2788:249-0:367:2855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8670:3497-0:390:2858":{"id":"a:1:8670:3497-0:390:2858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8670:3497","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5793-0:589:1966":{"id":"b:5:5793-0:589:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5791:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5795:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:128":{"id":"0:128","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[53,0],"end":[57,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:9635:2850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:129:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12614:33462":{"id":"1:12614:33462","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12029:457","self::pattern":"1:12200:3335"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:390:2858":{"id":"0:390:2858","crate_id":0,"name":"Simple","span":{"filename":"src/fmt.rs","begin":[76,0],"end":[76,24]},"visibility":"public","docs":"Format a [`Uuid`] as a simple string, like\n`67e5504410b1426f9247bb680e5fe0c8`.","links":{"`Uuid`":"0:607:2018"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:183","a:1:8670:3497-0:390:2858","a:1:2805:259-0:390:2858","a:1:2845:3344-0:390:2858","a:1:2788:249-0:390:2858","a:1:8669:3498-0:390:2858","b:1:3424-0:390:2858","b:1:2594-0:390:2858","b:1:2276-0:390:2858","b:1:2589-0:390:2858","b:1:2579-0:390:2858","b:1:2583-0:390:2858","b:1:2273-0:390:2858","b:5:5793-0:390:2858","b:5:682-0:390:2858","0:395","0:467","0:469","0:501","0:411","0:406","0:396","0:398","0:408","0:401","0:393","0:472","0:505","0:503","0:403","0:400","0:409","0:499"]}}},"1:12544:30552":{"id":"1:12544:30552","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12029:457","self::pattern":"1:12200:3335"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:307:789":{"id":"0:307:789","crate_id":0,"name":"hash","span":{"filename":"src/error.rs","begin":[4,27],"end":[4,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9848:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:413:2195":{"id":"b:1:2594-0:413:2195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2597:135","1:2598:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:444":{"id":"0:444","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,29],"end":[86,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2630:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:445:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8669:3498-0:589:1966":{"id":"a:1:8669:3498-0:589:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8669:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:137:2327":{"id":"0:137:2327","crate_id":0,"name":"urn","span":{"filename":"src/fmt.rs","begin":[119,4],"end":[121,5]},"visibility":"public","docs":"Get a [`Urn`] formatter.","links":{"`Urn`":"0:413:2195"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2276-0:291:1935":{"id":"b:1:2276-0:291:1935","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1935","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2278:25910"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:495":{"id":"0:495","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2547:79","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:496:350"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8670:3497-0:607:2018":{"id":"a:1:8670:3497-0:607:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8670:3497","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:481:725":{"id":"0:481:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:549:2270":{"id":"0:549:2270","crate_id":0,"name":"uuid","span":{"filename":"src/macros.rs","begin":[27,0],"end":[92,1]},"visibility":"public","docs":"Parse [`Uuid`][uuid::Uuid]s from string literals at compile time.\n\n## Usage\n\nThis macro transforms the string literal representation of a\n[`Uuid`][uuid::Uuid] into the bytes representation, raising a compilation\nerror if it cannot properly be parsed.\n\n## Examples\n\nSetting a global constant:\n\n```\n# use uuid::{uuid, Uuid};\npub const SCHEMA_ATTR_CLASS: Uuid = uuid!(\"00000000-0000-0000-0000-ffff00000000\");\npub const SCHEMA_ATTR_UUID: Uuid = uuid!(\"00000000-0000-0000-0000-ffff00000001\");\npub const SCHEMA_ATTR_NAME: Uuid = uuid!(\"00000000-0000-0000-0000-ffff00000002\");\n```\n\nDefining a local variable:\n\n```\n# use uuid::uuid;\nlet uuid = uuid!(\"urn:uuid:F9168C5E-CEB2-4faa-B6BF-329BF39FA1E4\");\n```\n\n## Compilation Failures\n\nInvalid UUIDs are rejected:\n\n```compile_fail\n# use uuid::uuid;\nlet uuid = uuid!(\"F9168C5E-ZEB2-4FAA-B6BF-329BF39FA1E4\");\n```\n\nEnable the feature `macro-diagnostics` to see the error messages below.\n\nProvides the following compilation error:\n\n```txt\nerror: invalid character: expected an optional prefix of `urn:uuid:` followed by [0-9a-fA-F-], found Z at 9\n    |\n    |     let id = uuid!(\"F9168C5E-ZEB2-4FAA-B6BF-329BF39FA1E4\");\n    |                              ^\n```\n\nTokens that aren't string literals are also rejected:\n\n```compile_fail\n# use uuid::uuid;\nlet uuid_str: &str = \"550e8400e29b41d4a716446655440000\";\nlet uuid = uuid!(uuid_str);\n```\n\nProvides the following compilation error:\n\n```txt\nerror: expected string literal\n  |\n  |     let uuid = uuid!(uuid_str);\n  |                      ^^^^^^^^\n```\n\n[uuid::Uuid]: https://docs.rs/uuid/*/uuid/struct.Uuid.html","links":{},"attrs":["#[cfg(not(feature = \"macro-diagnostics\"))]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! uuid {\n    ($uuid:literal) => { ... };\n}"}},"0:430:468":{"id":"0:430:468","crate_id":0,"name":"cmp","span":{"filename":"src/fmt.rs","begin":[80,48],"end":[80,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30922:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12620:33464":{"id":"1:12620:33464","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12029:457","self::pattern":"1:12200:3335"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:2223":{"id":"0:45:2223","crate_id":0,"name":"from_slice","span":{"filename":"src/builder.rs","begin":[685,4],"end":[687,5]},"visibility":"public","docs":"Creates a `Builder` using the supplied bytes.\n\n# Errors\n\nThis function will return an error if `b` has any length other than 16.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\n# fn main() -> Result<(), uuid::Error> {\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Builder::from_slice(&bytes)?.into_uuid();\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:502:752":{"id":"0:502:752","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:486:725":{"id":"0:486:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253-0:296:135":{"id":"0:253-0:296:135","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[284,34],"end":[284,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::error::Error","name":"Error","id":"0:296:135","glob":false}}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[22,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"1:12160:2744","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:82:134","0:83:2745"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:374:725":{"id":"0:374:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[68,22],"end":[68,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[394,0],"end":[537,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:175:2196","0:176:2898","0:177:2928","0:179:2936","0:181:2691","0:182:2293"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8669:3498-0:390:2858":{"id":"a:1:8669:3498-0:390:2858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8669:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2598:1626":{"id":"1:2598:1626","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:452":{"id":"0:452","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,48],"end":[86,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"1:2373:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:453:468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:551:1944":{"id":"0:551:1944","crate_id":0,"name":"Nil","span":{"filename":"src/lib.rs","begin":[303,4],"end":[303,13]},"visibility":"default","docs":"The \"nil\" (all zeros) UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0u8","value":"0"}}}},"0:441":{"id":"0:441","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,16],"end":[86,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2800:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5539:9368":{"id":"5:5539:9368","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12629:9372"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:260:2043":{"id":"0:260:2043","crate_id":0,"name":"NAMESPACE_X500","span":{"filename":"src/lib.rs","begin":[473,4],"end":[476,7]},"visibility":"public","docs":"UUID namespace for X.500 Distinguished Names (DNs).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:527:725":{"id":"0:527:725","crate_id":0,"name":"fmt","span":{"filename":"src/timestamp.rs","begin":[40,9],"end":[40,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:34128":{"id":"5:5535:34128","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7493:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:277:2183":{"id":"0:277:2183","crate_id":0,"name":"is_max","span":{"filename":"src/lib.rs","begin":[846,4],"end":[848,5]},"visibility":"public","docs":"Tests if the UUID is max (all ones).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2583-0:390:2858":{"id":"b:1:2583-0:390:2858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12558:26572":{"id":"1:12558:26572","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12029:457","self::pattern":"1:12200:3335"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12016:3761","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:2691":{"id":"0:58:2691","crate_id":0,"name":"as_uuid","span":{"filename":"src/builder.rs","begin":[881,4],"end":[883,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet builder = Builder::nil();\n\nlet uuid1 = builder.as_uuid();\nlet uuid2 = builder.as_uuid();\n\nassert_eq!(uuid1, uuid2);\n```","links":{"`Uuid`":"0:607:2018"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5793-0:296:135":{"id":"b:5:5793-0:296:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5791:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5795:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:413:2195":{"id":"0:413:2195","crate_id":0,"name":"Urn","span":{"filename":"src/fmt.rs","begin":[82,0],"end":[82,21]},"visibility":"public","docs":"Format a [`Uuid`] as a URN string, like\n`urn:uuid:67e55044-10b1-426f-9247-bb680e5fe0c8`.","links":{"`Uuid`":"0:607:2018"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:192","a:1:8670:3497-0:413:2195","a:1:2805:259-0:413:2195","a:1:2845:3344-0:413:2195","a:1:2788:249-0:413:2195","a:1:8669:3498-0:413:2195","b:1:3424-0:413:2195","b:1:2594-0:413:2195","b:1:2276-0:413:2195","b:1:2589-0:413:2195","b:1:2579-0:413:2195","b:1:2583-0:413:2195","b:1:2273-0:413:2195","b:5:5793-0:413:2195","b:5:682-0:413:2195","0:507","0:513","0:421","0:419","0:418","0:511","0:477","0:431","0:424","0:509","0:426","0:434","0:432","0:416","0:475","0:480","0:423","0:429"]}}},"0:86:1626":{"id":"0:86:1626","crate_id":0,"name":"try_from","span":{"filename":"src/parser.rs","begin":[33,4],"end":[35,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid_str",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:2563:269","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2375":{"id":"0:52:2375","crate_id":0,"name":"from_u128_le","span":{"filename":"src/builder.rs","begin":[810,4],"end":[812,5]},"visibility":"public","docs":"Creates a UUID from a 128bit value in little-endian order.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n\nlet uuid = Builder::from_u128_le(v).into_uuid();\n\nassert_eq!(\n    \"d8d7d6d5-d4d3-d2d1-c2c1-b2b1a4a3a2a1\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"primitive":"u128"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:447":{"id":"0:447","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,38],"end":[86,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2342:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:34125","5:5521:3854","5:5524:34126","5:5527:34127","5:5535:34128","5:5536:34129","5:5537:9719","5:5538:9367","5:5539:9368"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:506:2849":{"id":"0:506:2849","crate_id":0,"name":"borrow","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5793-0:607:2018":{"id":"b:5:5793-0:607:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5791:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5795:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:16:2295":{"id":"0:16:2295","crate_id":0,"name":"max","span":{"filename":"src/builder.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"The 'max UUID' (all ones).\n\nThe max UUID is a special form of UUID that is specified to have all\n128 bits set to one.\n\n# References\n\n* [Max UUID in Draft RFC: New UUID Formats, Version 4](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04#section-5.4)\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet uuid = Uuid::max();\n\nassert_eq!(\n    \"ffffffff-ffff-ffff-ffff-ffffffffffff\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:436:2863":{"id":"b:5:682-0:436:2863","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3314","5:685:25915","5:686:25916"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:586":{"id":"0:586","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,29],"end":[298,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2798:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5793-0:413:2195":{"id":"b:5:5793-0:413:2195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5791:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5795:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:491":{"id":"0:491","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:492:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12529:30534":{"id":"1:12529:30534","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12528:30533"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3426:1641":{"id":"1:3426:1641","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39448:7674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2273-0:296:135":{"id":"b:1:2273-0:296:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2275:2849"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2579-0:367:2855":{"id":"b:1:2579-0:367:2855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2582:2404"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:473:725":{"id":"0:473:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209:3056":{"id":"0:209:3056","crate_id":0,"name":"from_unix","span":{"filename":"src/timestamp.rs","begin":[102,4],"end":[119,5]},"visibility":"public","docs":"Construct a `Timestamp` from a Unix timestamp, as used in version 7 UUIDs.\n\n# Overflow\n\nIf conversion from RFC4122 ticks to the internal timestamp format would overflow\nit will wrap.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["context",{"impl_trait":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:226:1918","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u16"}}}}]}}},"generic_params":[],"modifier":"none"}}]}],["seconds",{"primitive":"u64"}],["nanos",{"primitive":"u32"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl ClockSequence<Output = u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:226:1918","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u16"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:523:1919":{"id":"b:1:2594-0:523:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2597:135","1:2598:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:581":{"id":"0:581","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,9],"end":[298,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:582:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:287:752":{"id":"0:287:752","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[944,4],"end":[946,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:431":{"id":"0:431","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,53],"end":[80,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2798:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:520:350":{"id":"0:520:350","crate_id":0,"name":"as_ref","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12567:33451":{"id":"1:12567:33451","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12200:3335","str::split":"1:12555:30541","prim@char":"4:12029:457","str::split_terminator":"1:12564:33450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43716:3779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/builder.rs","begin":[49,0],"end":[492,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:2222","0:16:2295","0:18:2348","0:20:2354","0:22:2372","0:23:2375","0:24:2381","0:25:2223","0:27:2614","0:29:2242","0:30:2413","0:31:2621"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:84":{"id":"0:84","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[30,0],"end":[36,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:85:135","0:86:1626"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:283:60":{"id":"0:283:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[930,4],"end":[932,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:254:1939":{"id":"0:254:1939","crate_id":0,"name":"Bytes","span":{"filename":"src/lib.rs","begin":[291,0],"end":[291,26]},"visibility":"public","docs":"A 128-bit (16 byte) buffer containing the UUID.\n\n# ABI\n\nThe `Bytes` type is always guaranteed to be have the same ABI as [`Uuid`].","links":{"`Uuid`":"0:607:2018"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"array":{"type":{"primitive":"u8"},"len":"16"}},"generics":{"params":[],"where_predicates":[]}}}},"1:12630:33466":{"id":"1:12630:33466","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4584:33466"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43947:3766","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:484:725":{"id":"0:484:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:563:1952":{"id":"0:563:1952","crate_id":0,"name":"Random","span":{"filename":"src/lib.rs","begin":[311,4],"end":[311,14]},"visibility":"default","docs":"Version 4: Random.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"4","value":"4"}}}},"5:686:25916":{"id":"5:686:25916","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:584":{"id":"0:584","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,22],"end":[298,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:585:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:170:2936":{"id":"0:170:2936","crate_id":0,"name":"encode_upper","span":{"filename":"src/fmt.rs","begin":[361,4],"end":[363,5]},"visibility":"public","docs":"Writes the [`Uuid`] as an upper-case hyphenated string to\n`buffer`, and returns the subslice of the buffer that contains the\nencoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936da01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.hyphenated()\n            .encode_upper(&mut Uuid::encode_buffer()),\n        \"936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 40];\n    uuid.hyphenated().encode_upper(&mut buf);\n    assert_eq!(\n        &buf as &[_],\n        b\"936DA01F-9ABD-4D9D-80C7-02AF85C822A8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2845:3344-0:296:135":{"id":"a:1:2845:3344-0:296:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2845:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:483":{"id":"0:483","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:484:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:296:135":{"id":"b:5:682-0:296:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3314","5:685:25915","5:686:25916"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:35:2629":{"id":"0:35:2629","crate_id":0,"name":"from_rfc4122_timestamp","span":{"filename":"src/builder.rs","begin":[553,4],"end":[555,5]},"visibility":"public","docs":"Creates a `Builder` for a version 1 UUID using the supplied timestamp and node ID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ticks",{"primitive":"u64"}],["counter",{"primitive":"u16"}],["node_id",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"6"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:302:725":{"id":"0:302:725","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[4,16],"end":[4,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:398":{"id":"0:398","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,29],"end":[74,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2630:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:399:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:421":{"id":"0:421","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,29],"end":[80,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2630:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:422:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:435:1138":{"id":"0:435:1138","crate_id":0,"name":"partial_cmp","span":{"filename":"src/fmt.rs","begin":[80,64],"end":[80,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41686:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30922:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:299":{"id":"0:299","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,9],"end":[4,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:300:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:494:752":{"id":"0:494:752","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[171,4],"end":[171,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","provide","type_id","source","description"],"trait":{"name":"Error","id":"1:2641:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2276-0:523:1919":{"id":"b:1:2276-0:523:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2278:25910"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:208:2214":{"id":"0:208:2214","crate_id":0,"name":"from_rfc4122","span":{"filename":"src/timestamp.rs","begin":[80,4],"end":[94,5]},"visibility":"public","docs":"Construct a `Timestamp` from an RFC4122 timestamp and counter, as used\nin versions 1 and 6 UUIDs.\n\n# Overflow\n\nIf conversion from RFC4122 ticks to the internal timestamp format would overflow\nit will wrap.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ticks",{"primitive":"u64"}],["counter",{"primitive":"u16"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:267:2116":{"id":"0:267:2116","crate_id":0,"name":"to_fields_le","span":{"filename":"src/lib.rs","begin":[668,4],"end":[680,5]},"visibility":"public","docs":"Returns the four field values of the UUID in little-endian order.\n\nThe bytes in the returned integer fields will be converted from\nbig-endian order. This is based on the endianness of the UUID,\nrather than the target environment so bytes will be flipped on both\nbig and little endian machines.\n\n# Examples\n\n```\nuse uuid::Uuid;\n\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.to_fields_le(),\n    (\n        0xa4a3a2a1,\n        0xb2b1,\n        0xc2c1,\n        &[0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8],\n    )\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u32"},{"primitive":"u16"},{"primitive":"u16"},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2805:259-0:436:2863":{"id":"a:1:2805:259-0:436:2863","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:200:2293":{"id":"0:200:2293","crate_id":0,"name":"into_uuid","span":{"filename":"src/fmt.rs","begin":[827,4],"end":[829,5]},"visibility":"public","docs":"Consumes the [`Urn`], returning the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet urn = Uuid::nil().urn();\nassert_eq!(urn.into_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2018","`Urn`":"0:413:2195"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:511":{"id":"0:511","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2547:79","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:512:350"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:252-0:291:1935":{"id":"0:252-0:291:1935","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[284,16],"end":[284,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::builder::Builder","name":"Builder","id":"0:291:1935","glob":false}}},"b:1:2583-0:607:2018":{"id":"b:1:2583-0:607:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:131:725":{"id":"0:131:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[61,4],"end":[63,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:371:461":{"id":"0:371:461","crate_id":0,"name":"clone","span":{"filename":"src/fmt.rs","begin":[68,9],"end":[68,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2805:259-0:523:1919":{"id":"a:1:2805:259-0:523:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:54:2679":{"id":"0:54:2679","crate_id":0,"name":"set_variant","span":{"filename":"src/builder.rs","begin":[834,4],"end":[837,5]},"visibility":"public","docs":"Specifies the variant of the UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["v",{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:249-0:436:2863":{"id":"a:1:2788:249-0:436:2863","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8670:3497-0:436:2863":{"id":"a:1:8670:3497-0:436:2863","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8670:3497","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:24:2381":{"id":"0:24:2381","crate_id":0,"name":"from_u64_pair","span":{"filename":"src/builder.rs","begin":[288,4],"end":[307,5]},"visibility":"public","docs":"Creates a UUID from two 64bit values.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet hi = 0xa1a2a3a4b1b2c1c2u64;\nlet lo = 0xd1d2d3d4d5d6d7d8u64;\n\nlet uuid = Uuid::from_u64_pair(hi, lo);\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["high_bits",{"primitive":"u64"}],["low_bits",{"primitive":"u64"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:602":{"id":"0:602","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,22],"end":[329,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:603:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:498:2849":{"id":"0:498:2849","crate_id":0,"name":"borrow","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12551:3568":{"id":"1:12551:3568","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41688:202","prim@char":"4:12029:457","self::pattern":"1:12200:3335"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41686:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:422:60":{"id":"0:422:60","crate_id":0,"name":"default","span":{"filename":"src/fmt.rs","begin":[80,29],"end":[80,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:2242":{"id":"0:29:2242","crate_id":0,"name":"from_bytes","span":{"filename":"src/builder.rs","begin":[415,4],"end":[417,5]},"visibility":"public","docs":"Creates a UUID using the supplied bytes.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_bytes(bytes);\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"\n);\n# Ok(())\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["bytes",{"resolved_path":{"name":"Bytes","id":"0:254:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:416":{"id":"0:416","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,9],"end":[80,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:417:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3424-0:523:1919":{"id":"b:1:3424-0:523:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3426:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:393":{"id":"0:393","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,9],"end":[74,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:394:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:424":{"id":"0:424","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,38],"end":[80,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2342:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:259:2041":{"id":"0:259:2041","crate_id":0,"name":"NAMESPACE_URL","span":{"filename":"src/lib.rs","begin":[467,4],"end":[470,7]},"visibility":"public","docs":"UUID namespace for Uniform Resource Locators (URLs).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:528":{"id":"0:528","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,16],"end":[40,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:529:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2594-0:589:1966":{"id":"b:1:2594-0:589:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2597:135","1:2598:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:411":{"id":"0:411","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,64],"end":[74,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","lt","le","ge"],"trait":{"name":"PartialOrd","id":"1:2379:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:412:1138"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12588:33453":{"id":"1:12588:33453","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12200:3335","`DoubleEndedIterator`":"1:7581:128","prim@char":"4:12029:457","str::rmatch_indices":"1:12591:33454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43798:3771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:725":{"id":"0:129:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[54,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2589-0:296:135":{"id":"b:1:2589-0:296:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2592:135","1:2593:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:682-0:540:1917":{"id":"b:5:682-0:540:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3314","5:685:25915","5:686:25916"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12596:33456":{"id":"1:12596:33456","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:616":{"id":"0:616","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,26],"end":[437,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9840:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:617:789"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2845:3344-0:589:1966":{"id":"a:1:2845:3344-0:589:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2845:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5536:34129":{"id":"5:5536:34129","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:3328","`String`":"5:7493:255"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:3328","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:275:2173":{"id":"0:275:2173","crate_id":0,"name":"to_bytes_le","span":{"filename":"src/lib.rs","begin":[832,4],"end":[838,5]},"visibility":"public","docs":"Returns the bytes of the UUID in little-endian order.\n\nThe bytes will be flipped to convert into little-endian order. This is\nbased on the endianness of the UUID, rather than the target environment\nso bytes will be flipped on both big and little endian machines.\n\n# Examples\n\n```\nuse uuid::Uuid;\n\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.to_bytes_le(),\n    ([\n        0xa4, 0xa3, 0xa2, 0xa1, 0xb2, 0xb1, 0xc2, 0xc1, 0xd1, 0xd2,\n        0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8\n    ])\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"0:254:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2805:259-0:296:135":{"id":"a:1:2805:259-0:296:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:127:725":{"id":"0:127:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[43,4],"end":[50,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:234:531":{"id":"0:234:531","crate_id":0,"name":"context","span":{"filename":"src/timestamp.rs","begin":[351,0],"end":[351,15]},"visibility":"public","docs":"Default implementations for the [`ClockSequence`] trait.","links":{"`ClockSequence`":"0:226:1918"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:540:1917"],"is_stripped":false}}},"1:12547:3608":{"id":"1:12547:3608","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41688:202","prim@char":"4:12029:457","self::pattern":"1:12200:3335"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41686:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:2413":{"id":"0:34:2413","crate_id":0,"name":"from_bytes_le","span":{"filename":"src/builder.rs","begin":[548,4],"end":[550,5]},"visibility":"public","docs":"Creates a `Builder` using the supplied bytes in little endian order.\n\nThe individual fields encoded in the buffer will be flipped.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::{Builder, Uuid};\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Builder::from_bytes_le(bytes).into_uuid();\n\nassert_eq!(\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"resolved_path":{"name":"Bytes","id":"0:254:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:426":{"id":"0:426","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,42],"end":[80,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9840:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:427:789"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12518:9277":{"id":"1:12518:9277","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41688:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41686:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492:752":{"id":"0:492:752","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3424-0:413:2195":{"id":"b:1:3424-0:413:2195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3426:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12611:30553":{"id":"1:12611:30553","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12029:457","self::pattern":"1:12200:3335"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41686:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:367:2855":{"id":"0:367:2855","crate_id":0,"name":"Hyphenated","span":{"filename":"src/fmt.rs","begin":[70,0],"end":[70,28]},"visibility":"public","docs":"Format a [`Uuid`] as a hyphenated string, like\n`67e55044-10b1-426f-9247-bb680e5fe0c8`.","links":{"`Uuid`":"0:607:2018"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:165","a:1:8670:3497-0:367:2855","a:1:2805:259-0:367:2855","a:1:2845:3344-0:367:2855","a:1:2788:249-0:367:2855","a:1:8669:3498-0:367:2855","b:1:3424-0:367:2855","b:1:2594-0:367:2855","b:1:2276-0:367:2855","b:1:2589-0:367:2855","b:1:2579-0:367:2855","b:1:2583-0:367:2855","b:1:2273-0:367:2855","b:5:5793-0:367:2855","b:5:682-0:367:2855","0:377","0:461","0:464","0:380","0:383","0:378","0:372","0:375","0:491","0:388","0:385","0:370","0:386","0:495","0:497","0:459","0:373","0:493"]}}},"b:1:2273-0:589:1966":{"id":"b:1:2273-0:589:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2275:2849"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12508:33443":{"id":"1:12508:33443","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:454":{"id":"0:454","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,53],"end":[86,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2798:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12601:33459":{"id":"1:12601:33459","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:381:789":{"id":"0:381:789","crate_id":0,"name":"hash","span":{"filename":"src/fmt.rs","begin":[68,42],"end":[68,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9848:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[90,0],"end":[142,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:2272","0:134:2851","0:135:2317","0:136:2868","0:137:2327","0:138:2871","0:139:2844","0:140:2874"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2845:3344-0:607:2018":{"id":"a:1:2845:3344-0:607:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2845:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:190:2691":{"id":"0:190:2691","crate_id":0,"name":"as_uuid","span":{"filename":"src/fmt.rs","begin":[663,4],"end":[665,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet simple = Uuid::nil().simple();\nassert_eq!(*simple.as_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2018"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:614":{"id":"0:614","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,22],"end":[437,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2342:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8669:3498-0:291:1935":{"id":"a:1:8669:3498-0:291:1935","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8669:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1935","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:548:60":{"id":"0:548:60","crate_id":0,"name":"default","span":{"filename":"src/timestamp.rs","begin":[361,33],"end":[361,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8669:3498-0:367:2855":{"id":"a:1:8669:3498-0:367:2855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8669:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2589-0:367:2855":{"id":"b:1:2589-0:367:2855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2592:135","1:2593:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:461":{"id":"0:461","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:9635:2850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:462:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2273-0:367:2855":{"id":"b:1:2273-0:367:2855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2275:2849"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:408":{"id":"0:408","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,53],"end":[74,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2798:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:404:789":{"id":"0:404:789","crate_id":0,"name":"hash","span":{"filename":"src/fmt.rs","begin":[74,42],"end":[74,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9848:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:240-0:540:1917":{"id":"0:240-0:540:1917","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,20],"end":[238,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"timestamp::context::NoContext","name":"NoContext","id":"0:540:1917","glob":false}}},"0:257:2020":{"id":"0:257:2020","crate_id":0,"name":"NAMESPACE_DNS","span":{"filename":"src/lib.rs","begin":[455,4],"end":[458,7]},"visibility":"public","docs":"UUID namespace for Domain Name System (DNS).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"5:5795:1603":{"id":"5:5795:1603","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12532:2101":{"id":"1:12532:2101","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43634:1939","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2276-0:589:1966":{"id":"b:1:2276-0:589:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2278:25910"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12533:26560":{"id":"1:12533:26560","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12534:26585"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43922:3762","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:2874":{"id":"0:140:2874","crate_id":0,"name":"as_braced","span":{"filename":"src/fmt.rs","begin":[138,4],"end":[141,5]},"visibility":"public","docs":"Get a borrowed [`Braced`] formatter.","links":{"`Braced`":"0:436:2863"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12530:2240":{"id":"1:12530:2240","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12029:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43618:3330","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2579-0:436:2863":{"id":"b:1:2579-0:436:2863","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2582:2404"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:126":{"id":"0:126","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[42,0],"end":[51,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:127:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2788:249-0:540:1917":{"id":"a:1:2788:249-0:540:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:612":{"id":"0:612","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,16],"end":[437,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2800:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12561:30544":{"id":"1:12561:30544","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12200:3335","`DoubleEndedIterator`":"1:7581:128","prim@char":"4:12029:457","str::split":"1:12555:30541"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43666:3775","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[59,0],"end":[64,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:9637:2852","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:23:2375":{"id":"0:23:2375","crate_id":0,"name":"from_u128_le","span":{"filename":"src/builder.rs","begin":[249,4],"end":[268,5]},"visibility":"public","docs":"Creates a UUID from a 128bit value in little-endian order.\n\nThe entire value will be flipped to convert into big-endian order.\nThis is based on the endianness of the UUID, rather than the target\nenvironment so bytes will be flipped on both big and little endian\nmachines.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n\nlet uuid = Uuid::from_u128_le(v);\n\nassert_eq!(\n    \"d8d7d6d5-d4d3-d2d1-c2c1-b2b1a4a3a2a1\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"primitive":"u128"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:242-0:523:1919":{"id":"0:242-0:523:1919","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,55],"end":[238,64]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"timestamp::Timestamp","name":"Timestamp","id":"0:523:1919","glob":false}}},"0:462:725":{"id":"0:462:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:600:461":{"id":"0:600:461","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[329,9],"end":[329,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2614":{"id":"0:27:2614","crate_id":0,"name":"from_slice_le","span":{"filename":"src/builder.rs","begin":[379,4],"end":[387,5]},"visibility":"public","docs":"Creates a UUID using the supplied bytes in little endian order.\n\nThe individual fields encoded in the buffer will be flipped.\n\n# Errors\n\nThis function will return an error if `b` has any length other than 16.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_slice_le(&bytes)?;\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\"\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41831:238","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12585:33452":{"id":"1:12585:33452","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12200:3335","`DoubleEndedIterator`":"1:7581:128","prim@char":"4:12029:457","str::matches":"1:12582:2729"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43870:3774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:470:725":{"id":"0:470:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12576:30550":{"id":"1:12576:30550","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41686:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:526":{"id":"0:526","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,9],"end":[40,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:527:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:546":{"id":"0:546","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[361,27],"end":[361,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2800:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:566:1954":{"id":"0:566:1954","crate_id":0,"name":"Sha1","span":{"filename":"src/lib.rs","begin":[313,4],"end":[313,12]},"visibility":"default","docs":"Version 5: SHA-1 hash.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"5","value":"5"}}}},"0:83:2745":{"id":"0:83:2745","crate_id":0,"name":"from_str","span":{"filename":"src/parser.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid_str",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:12160:2744","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:296:135":{"id":"b:1:2594-0:296:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2597:135","1:2598:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:458:1138":{"id":"0:458:1138","crate_id":0,"name":"partial_cmp","span":{"filename":"src/fmt.rs","begin":[86,64],"end":[86,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41686:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30922:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290:1626":{"id":"0:290:1626","crate_id":0,"name":"try_from","span":{"filename":"src/lib.rs","begin":[953,4],"end":[955,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"resolved_path":{"name":"std::vec::Vec","id":"5:6918:276","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:2563:269","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,29],"end":[68,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2630:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:376:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:533:667":{"id":"0:533:667","crate_id":0,"name":"eq","span":{"filename":"src/timestamp.rs","begin":[40,29],"end":[40,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:512:350":{"id":"0:512:350","crate_id":0,"name":"as_ref","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:2621":{"id":"0:31:2621","crate_id":0,"name":"from_bytes_ref","span":{"filename":"src/builder.rs","begin":[484,4],"end":[487,5]},"visibility":"public","docs":"Creates a reference to a UUID from a reference to the supplied bytes.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_bytes_ref(&bytes);\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"\n);\n\nassert!(std::ptr::eq(\n    uuid as *const Uuid as *const u8,\n    &bytes as *const [u8; 16] as *const u8,\n));\n# Ok(())\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:254:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12600:33458":{"id":"1:12600:33458","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12602:33460":{"id":"1:12602:33460","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12029:457","self::pattern":"1:12200:3335"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12225:3753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:455":{"id":"0:455","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,53],"end":[86,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2337:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:456:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12626:9366":{"id":"1:12626:9366","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39635:26176","Self::is_ascii":"1:12625:9365"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41686:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39635:26176","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12520:9278":{"id":"1:12520:9278","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41688:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41686:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12527:33448":{"id":"1:12527:33448","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12035:1544","crate::ops::IndexMut":"1:3089:3325","str::slice_unchecked":"1:12526:33447"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:2691":{"id":"0:172:2691","crate_id":0,"name":"as_uuid","span":{"filename":"src/fmt.rs","begin":[375,4],"end":[377,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet hyphenated = Uuid::nil().hyphenated();\nassert_eq!(*hyphenated.as_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2018"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173:2293":{"id":"0:173:2293","crate_id":0,"name":"into_uuid","span":{"filename":"src/fmt.rs","begin":[389,4],"end":[391,5]},"visibility":"public","docs":"Consumes the [`Hyphenated`], returning the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet hyphenated = Uuid::nil().hyphenated();\nassert_eq!(hyphenated.into_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2018","`Hyphenated`":"0:367:2855"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:427:789":{"id":"0:427:789","crate_id":0,"name":"hash","span":{"filename":"src/fmt.rs","begin":[80,42],"end":[80,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9848:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:544":{"id":"0:544","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[361,20],"end":[361,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:545:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12535:32587":{"id":"1:12535:32587","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43902:3769","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:449":{"id":"0:449","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,42],"end":[86,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9840:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:450:789"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:529:461":{"id":"0:529:461","crate_id":0,"name":"clone","span":{"filename":"src/timestamp.rs","begin":[40,16],"end":[40,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:623:667":{"id":"0:623:667","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[437,37],"end":[437,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32":{"id":"0:32","crate_id":0,"name":null,"span":{"filename":"src/builder.rs","begin":[494,0],"end":[903,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Builder","id":"0:291:1935","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:33:2242","0:34:2413","0:35:2629","0:37:2633","0:38:2640","0:39:2645","0:40:2649","0:42:2662","0:44:2666","0:45:2223","0:46:2614","0:47:2348","0:49:2354","0:51:2372","0:52:2375","0:53:2222","0:54:2679","0:55:2635","0:56:2685","0:57:2292","0:58:2691","0:59:2293"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:122":{"id":"0:122","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[29,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:123:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2845:3344-0:413:2195":{"id":"a:1:2845:3344-0:413:2195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2845:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:417:461":{"id":"0:417:461","crate_id":0,"name":"clone","span":{"filename":"src/fmt.rs","begin":[80,9],"end":[80,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:478:725":{"id":"0:478:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2276-0:607:2018":{"id":"b:1:2276-0:607:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2278:25910"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:123:725":{"id":"0:123:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[30,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2276-0:436:2863":{"id":"b:1:2276-0:436:2863","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2278:25910"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:55:2635":{"id":"0:55:2635","crate_id":0,"name":"with_variant","span":{"filename":"src/builder.rs","begin":[840,4],"end":[851,5]},"visibility":"public","docs":"Specifies the variant of the UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["v",{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8670:3497-0:413:2195":{"id":"a:1:8670:3497-0:413:2195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8670:3497","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:457":{"id":"0:457","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,64],"end":[86,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","lt","le","ge"],"trait":{"name":"PartialOrd","id":"1:2379:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:458:1138"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2788:249-0:291:1935":{"id":"a:1:2788:249-0:291:1935","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1935","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:133:2272":{"id":"0:133:2272","crate_id":0,"name":"hyphenated","span":{"filename":"src/fmt.rs","begin":[93,4],"end":[95,5]},"visibility":"public","docs":"Get a [`Hyphenated`] formatter.","links":{"`Hyphenated`":"0:367:2855"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:378":{"id":"0:378","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,38],"end":[68,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2342:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:522:2849":{"id":"0:522:2849","crate_id":0,"name":"borrow","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:390:2858":{"id":"b:1:2594-0:390:2858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2597:135","1:2598:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2592:135":{"id":"1:2592:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:593:1970":{"id":"0:593:1970","crate_id":0,"name":"RFC4122","span":{"filename":"src/lib.rs","begin":[336,4],"end":[336,11]},"visibility":"default","docs":"As described in the RFC4122 Specification (default).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:179:2936":{"id":"0:179:2936","crate_id":0,"name":"encode_upper","span":{"filename":"src/fmt.rs","begin":[506,4],"end":[508,5]},"visibility":"public","docs":"Writes the [`Uuid`] as an upper-case hyphenated string surrounded by\nbraces to `buffer`, and returns the subslice of the buffer that contains\nthe encoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936da01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.braced()\n            .encode_upper(&mut Uuid::encode_buffer()),\n        \"{936DA01F-9ABD-4D9D-80C7-02AF85C822A8}\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 40];\n    uuid.braced().encode_upper(&mut buf);\n    assert_eq!(\n        &buf as &[_],\n        b\"{936DA01F-9ABD-4D9D-80C7-02AF85C822A8}!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:509":{"id":"0:509","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:510:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:88:2306":{"id":"0:88:2306","crate_id":0,"name":"parse_str","span":{"filename":"src/parser.rs","begin":[64,4],"end":[68,5]},"visibility":"public","docs":"Parses a `Uuid` from a string of hexadecimal digits with optional\nhyphens.\n\nAny of the formats generated by this module (simple, hyphenated, urn,\nMicrosoft GUID) are supported by this parsing function.\n\nPrefer [`try_parse`] unless you need detailed user-facing diagnostics.\nThis method will be eventually deprecated in favor of `try_parse`.\n\n# Examples\n\nParse a hyphenated UUID:\n\n```\n# use uuid::{Uuid, Version, Variant};\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"550e8400-e29b-41d4-a716-446655440000\")?;\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n# Ok(())\n# }\n```\n\n[`try_parse`]: #method.try_parse","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41831:238","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[131,0],"end":[164,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5527:34127":{"id":"5:5527:34127","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7493:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[950,0],"end":[956,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:6918:276","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:289:135","0:290:1626"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:207:3047":{"id":"0:207:3047","crate_id":0,"name":"now","span":{"filename":"src/timestamp.rs","begin":[57,4],"end":[71,5]},"visibility":"public","docs":"Get a timestamp representing the current system time.\n\nThis method defers to the standard library's `SystemTime` type.\n\n# Panics\n\nThis method will panic if calculating the elapsed time since the Unix epoch fails.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["context",{"impl_trait":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:226:1918","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u16"}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl ClockSequence<Output = u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:226:1918","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u16"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3424-0:367:2855":{"id":"b:1:3424-0:367:2855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3426:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:90:2768":{"id":"0:90:2768","crate_id":0,"name":"try_parse_ascii","span":{"filename":"src/parser.rs","begin":[125,4],"end":[132,5]},"visibility":"public","docs":"Parses a `Uuid` from a string of hexadecimal digits with optional\nhyphens.\n\nThe input is expected to be a string of ASCII characters. This method\ncan be more convenient than [`try_parse`] if the UUID is being\nparsed from a byte stream instead of from a UTF8 string.\n\n# Examples\n\nParse a hyphenated UUID:\n\n```\n# use uuid::{Uuid, Version, Variant};\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::try_parse_ascii(b\"550e8400-e29b-41d4-a716-446655440000\")?;\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n# Ok(())\n# }\n```\n\n[`try_parse`]: #method.try_parse","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41831:238","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:256":{"id":"0:256","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[453,0],"end":[926,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:257:2020","0:258:2038","0:259:2041","0:260:2043","0:261:2053","0:262:2061","0:263:2070","0:264:2100","0:267:2116","0:270:2121","0:271:2133","0:272:2141","0:273:2054","0:274:2163","0:275:2173","0:276:2071","0:277:2183","0:278:2194","0:281:2210"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:590:1968":{"id":"0:590:1968","crate_id":0,"name":"NCS","span":{"filename":"src/lib.rs","begin":[334,4],"end":[334,13]},"visibility":"default","docs":"Reserved by the NCS for backward compatibility.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0u8","value":"0"}}}},"1:12515:33446":{"id":"1:12515:33446","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:500:752":{"id":"0:500:752","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12564:33450":{"id":"1:12564:33450","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12200:3335","str::split":"1:12555:30541","prim@char":"4:12029:457","`DoubleEndedIterator`":"1:7581:128","str::rsplit_terminator":"1:12567:33451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43698:3780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:499":{"id":"0:499","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:500:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:625:1138":{"id":"0:625:1138","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[437,48],"end":[437,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41686:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30922:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:249-0:589:1966":{"id":"a:1:2788:249-0:589:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:56:2685":{"id":"0:56:2685","crate_id":0,"name":"set_version","span":{"filename":"src/builder.rs","begin":[854,4],"end":[857,5]},"visibility":"public","docs":"Specifies the version number of the UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["v",{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2579-0:390:2858":{"id":"b:1:2579-0:390:2858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2582:2404"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:108:725":{"id":"0:108:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[12,0],"end":[1040,1]},"visibility":"public","docs":"Adapters for alternative string formats.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:367:2855","0:390:2858","0:413:2195","0:436:2863"],"is_stripped":false}}},"1:12531:2728":{"id":"1:12531:2728","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12029:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43624:3764","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12628:9371":{"id":"1:12628:9371","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12506:880":{"id":"1:12506:880","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12029:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3424-0:296:135":{"id":"b:1:3424-0:296:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3426:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2276-0:390:2858":{"id":"b:1:2276-0:390:2858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2278:25910"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2273-0:607:2018":{"id":"b:1:2273-0:607:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2275:2849"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:176:2898":{"id":"0:176:2898","crate_id":0,"name":"from_uuid","span":{"filename":"src/fmt.rs","begin":[404,4],"end":[406,5]},"visibility":"public","docs":"Creates a [`Braced`] from a [`Uuid`].\n\n[`Uuid`]: ../struct.Uuid.html\n[`Braced`]: struct.Braced.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3424-0:540:1917":{"id":"b:1:3424-0:540:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3426:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:186:2928":{"id":"0:186:2928","crate_id":0,"name":"encode_lower","span":{"filename":"src/fmt.rs","begin":[601,4],"end":[603,5]},"visibility":"public","docs":"Writes the [`Uuid`] as a lower-case simple string to `buffer`,\nand returns the subslice of the buffer that contains the encoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936DA01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.simple().encode_lower(&mut Uuid::encode_buffer()),\n        \"936da01f9abd4d9d80c702af85c822a8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 36];\n    assert_eq!(\n        uuid.simple().encode_lower(&mut buf),\n        \"936da01f9abd4d9d80c702af85c822a8\"\n    );\n    assert_eq!(\n        &buf as &[_],\n        b\"936da01f9abd4d9d80c702af85c822a8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:249-0:390:2858":{"id":"a:1:2788:249-0:390:2858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2597:135":{"id":"1:2597:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32106:3309","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:497":{"id":"0:497","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:498:2849"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:184:2196":{"id":"0:184:2196","crate_id":0,"name":"LENGTH","span":{"filename":"src/fmt.rs","begin":[543,4],"end":[543,33]},"visibility":"public","docs":"The length of a simple [`Uuid`] string.\n\n[`Uuid`]: ../struct.Uuid.html","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"primitive":"usize"},"default":"32"}}},"0:181:2691":{"id":"0:181:2691","crate_id":0,"name":"as_uuid","span":{"filename":"src/fmt.rs","begin":[520,4],"end":[522,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet braced = Uuid::nil().braced();\nassert_eq!(*braced.as_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2018"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:237:210":{"id":"0:237:210","crate_id":0,"name":"Output","span":{"filename":"src/timestamp.rs","begin":[365,8],"end":[365,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"u16"}}}},"0:306":{"id":"0:306","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,27],"end":[4,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9840:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:307:789"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12537:26581":{"id":"1:12537:26581","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43940:3759","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2273-0:436:2863":{"id":"b:1:2273-0:436:2863","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2275:2849"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12591:33454":{"id":"1:12591:33454","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12200:3335","`DoubleEndedIterator`":"1:7581:128","prim@char":"4:12029:457","str::match_indices":"1:12588:33453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43816:3772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12633:33467":{"id":"1:12633:33467","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4582:33467"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43965:3768","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:583":{"id":"0:583","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,16],"end":[298,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2800:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5538:9367":{"id":"5:5538:9367","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12628:9371"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2805:259-0:589:1966":{"id":"a:1:2805:259-0:589:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:397:725":{"id":"0:397:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[74,22],"end":[74,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8669:3498-0:436:2863":{"id":"a:1:8669:3498-0:436:2863","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8669:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12582:2729":{"id":"1:12582:2729","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12200:3335","`DoubleEndedIterator`":"1:7581:128","prim@char":"4:12029:457","str::rmatches":"1:12585:33452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43852:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:389:1138":{"id":"0:389:1138","crate_id":0,"name":"partial_cmp","span":{"filename":"src/fmt.rs","begin":[68,64],"end":[68,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41686:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30922:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2273-0:390:2858":{"id":"b:1:2273-0:390:2858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2275:2849"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:395":{"id":"0:395","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,16],"end":[74,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2800:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:611:461":{"id":"0:611:461","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[437,9],"end":[437,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2589-0:589:1966":{"id":"b:1:2589-0:589:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2592:135","1:2593:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:197:2936":{"id":"0:197:2936","crate_id":0,"name":"encode_upper","span":{"filename":"src/fmt.rs","begin":[799,4],"end":[801,5]},"visibility":"public","docs":"Writes the [`Uuid`] as an upper-case URN string to\n`buffer`, and returns the subslice of the buffer that contains the\nencoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936da01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.urn().encode_upper(&mut Uuid::encode_buffer()),\n        \"urn:uuid:936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 49];\n    assert_eq!(\n        uuid.urn().encode_upper(&mut buf),\n        \"urn:uuid:936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"\n    );\n    assert_eq!(\n        &buf as &[_],\n        b\"urn:uuid:936DA01F-9ABD-4D9D-80C7-02AF85C822A8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291:1935":{"id":"0:291:1935","crate_id":0,"name":"Builder","span":{"filename":"src/builder.rs","begin":[47,0],"end":[47,25]},"visibility":"public","docs":"A builder for creating a UUID.\n\nThis type is useful if you need to mutate individual fields of a [`Uuid`]\nwhile constructing it. Since the [`Uuid`] type is `Copy`, it doesn't offer\nany methods to mutate in place. They live on the `Builder` instead.\n\nThe `Builder` type also always exposes APIs to construct [`Uuid`]s for any\nversion without needing crate features or additional dependencies. It's a\nlower-level API than the methods on [`Uuid`].\n\n# Examples\n\nCreating a version 4 UUID from externally generated random bytes:\n\n```\n# use uuid::{Builder, Version, Variant};\n# let rng = || [\n#     70, 235, 208, 238, 14, 109, 67, 201, 185, 13, 204, 195, 90,\n# 145, 63, 62,\n# ];\nlet random_bytes = rng();\n\nlet uuid = Builder::from_random_bytes(random_bytes).into_uuid();\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n```","links":{"`Uuid`":"0:607:2018"},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:32","a:1:8670:3497-0:291:1935","a:1:2805:259-0:291:1935","a:1:2845:3344-0:291:1935","a:1:2788:249-0:291:1935","a:1:8669:3498-0:291:1935","b:1:3424-0:291:1935","b:1:2594-0:291:1935","b:1:2276-0:291:1935","b:1:2589-0:291:1935","b:1:2579-0:291:1935","b:1:2583-0:291:1935","b:1:2273-0:291:1935","0:294"]}}},"0:578:1962":{"id":"0:578:1962","crate_id":0,"name":"Max","span":{"filename":"src/lib.rs","begin":[321,4],"end":[321,14]},"visibility":"default","docs":"The \"max\" (all ones) UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0xff","value":"255"}}}},"a:1:8669:3498-0:523:1919":{"id":"a:1:8669:3498-0:523:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8669:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:607:2018":{"id":"0:607:2018","crate_id":0,"name":"Uuid","span":{"filename":"src/lib.rs","begin":[451,0],"end":[451,23]},"visibility":"public","docs":"A Universally Unique Identifier (UUID).\n\n# Examples\n\nParse a UUID given in the simple format and print it as a urn:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\")?;\n\nprintln!(\"{}\", my_uuid.urn());\n# Ok(())\n# }\n```\n\nCreate a new random (V4) UUID and print it out in hexadecimal form:\n\n```\n// Note that this requires the `v4` feature enabled in the uuid crate.\n# use uuid::Uuid;\n# fn main() {\n# #[cfg(feature = \"v4\")] {\nlet my_uuid = Uuid::new_v4();\n\nprintln!(\"{}\", my_uuid);\n# }\n# }\n```\n\n# Formatting\n\nA UUID can be formatted in one of a few ways:\n\n* [`simple`](#method.simple): `a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8`.\n* [`hyphenated`](#method.hyphenated):\n  `a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8`.\n* [`urn`](#method.urn): `urn:uuid:A1A2A3A4-B1B2-C1C2-D1D2-D3D4D5D6D7D8`.\n* [`braced`](#method.braced): `{a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8}`.\n\nThe default representation when formatting a UUID with `Display` is\nhyphenated:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    my_uuid.to_string(),\n);\n# Ok(())\n# }\n```\n\nOther formats can be specified using adapter methods on the UUID:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    \"urn:uuid:a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    my_uuid.urn().to_string(),\n);\n# Ok(())\n# }\n```\n\n# Endianness\n\nThe specification for UUIDs encodes the integer fields that make up the\nvalue in big-endian order. This crate assumes integer inputs are already in\nthe correct order by default, regardless of the endianness of the\nenvironment. Most methods that accept integers have a `_le` variant (such as\n`from_fields_le`) that assumes any integer values will need to have their\nbytes flipped, regardless of the endianness of the environment.\n\nMost users won't need to worry about endianness unless they need to operate\non individual fields (such as when converting between Microsoft GUIDs). The\nimportant things to remember are:\n\n- The endianness is in terms of the fields of the UUID, not the environment.\n- The endianness is assumed to be big-endian when there's no `_le` suffix\n  somewhere.\n- Byte-flipping in `_le` methods applies to each integer.\n- Endianness roundtrips, so if you create a UUID with `from_fields_le`\n  you'll get the same values back out with `to_fields_le`.\n\n# ABI\n\nThe `Uuid` type is always guaranteed to be have the same ABI as [`Bytes`].","links":{"`Bytes`":"0:254:1939"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:13","0:87","0:132","0:256","a:1:8670:3497-0:607:2018","a:1:2805:259-0:607:2018","a:1:2845:3344-0:607:2018","a:1:2788:249-0:607:2018","a:1:8669:3498-0:607:2018","b:1:3424-0:607:2018","b:1:2594-0:607:2018","b:1:2276-0:607:2018","b:1:2589-0:607:2018","b:1:2579-0:607:2018","b:1:2583-0:607:2018","b:1:2273-0:607:2018","b:5:5793-0:607:2018","b:5:682-0:607:2018","0:130","0:120","0:622","0:624","0:616","0:507","0:513","0:521","0:128","0:511","0:501","0:122","0:288","0:84","0:619","0:286","0:81","0:519","0:509","0:621","0:517","0:491","0:284","0:613","0:515","0:614","0:612","0:505","0:610","0:124","0:282","0:495","0:497","0:503","0:499","0:493"]}}},"0:212:3069":{"id":"0:212:3069","crate_id":0,"name":"to_unix_nanos","span":{"filename":"src/timestamp.rs","begin":[166,4],"end":[168,5]},"visibility":"public","docs":"Get the number of fractional nanoseconds in the Unix timestamp.\n\nThis method is deprecated and probably doesn't do what you're expecting it to.\nIt doesn't return the timestamp as nanoseconds since the Unix epoch, it returns\nthe fractional seconds of the timestamp.","links":{},"attrs":["#[deprecated(note =\n\"use `to_unix` instead; this method will be removed in a future release\")]"],"deprecation":{"since":null,"note":"use `to_unix` instead; this method will be removed in a future release"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:450:789":{"id":"0:450:789","crate_id":0,"name":"hash","span":{"filename":"src/fmt.rs","begin":[86,42],"end":[86,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9848:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12629:9372":{"id":"1:12629:9372","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3424-0:436:2863":{"id":"b:1:3424-0:436:2863","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3426:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:30:2413":{"id":"0:30:2413","crate_id":0,"name":"from_bytes_le","span":{"filename":"src/builder.rs","begin":[446,4],"end":[451,5]},"visibility":"public","docs":"Creates a UUID using the supplied bytes in little endian order.\n\nThe individual fields encoded in the buffer will be flipped.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_bytes_le(bytes);\n\nassert_eq!(\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"resolved_path":{"name":"Bytes","id":"0:254:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2805:259-0:291:1935":{"id":"a:1:2805:259-0:291:1935","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1935","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:304":{"id":"0:304","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,23],"end":[4,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2342:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:589:1966":{"id":"b:5:682-0:589:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3314","5:685:25915","5:686:25916"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8670:3497-0:550:1942":{"id":"a:1:8670:3497-0:550:1942","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8670:3497","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2805:259-0:413:2195":{"id":"a:1:2805:259-0:413:2195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:513":{"id":"0:513","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:514:2849"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2845:3344-0:390:2858":{"id":"a:1:2845:3344-0:390:2858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2845:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:309":{"id":"0:309","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,33],"end":[4,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2798:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:387:667":{"id":"0:387:667","crate_id":0,"name":"eq","span":{"filename":"src/fmt.rs","begin":[68,53],"end":[68,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:569:1956":{"id":"0:569:1956","crate_id":0,"name":"SortMac","span":{"filename":"src/lib.rs","begin":[315,4],"end":[315,15]},"visibility":"default","docs":"Version 6: Sortable Timestamp and node ID.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"6","value":"6"}}}},"5:685:25915":{"id":"5:685:25915","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:439":{"id":"0:439","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,9],"end":[86,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:440:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12514:2054":{"id":"1:12514:2054","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11760:2718"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2805:259-0:607:2018":{"id":"a:1:2805:259-0:607:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2805:259-0:390:2858":{"id":"a:1:2805:259-0:390:2858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2589-0:540:1917":{"id":"b:1:2589-0:540:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2592:135","1:2593:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2273-0:540:1917":{"id":"b:1:2273-0:540:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2275:2849"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:543:725":{"id":"0:543:725","crate_id":0,"name":"fmt","span":{"filename":"src/timestamp.rs","begin":[361,13],"end":[361,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:2354":{"id":"0:20:2354","crate_id":0,"name":"from_fields_le","span":{"filename":"src/builder.rs","begin":[168,4],"end":[187,5]},"visibility":"public","docs":"Creates a UUID from four field values in little-endian order.\n\nThe bytes in the `d1`, `d2` and `d3` fields will be flipped to convert\ninto big-endian order. This is based on the endianness of the UUID,\nrather than the target environment so bytes will be flipped on both\nbig and little endian machines.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet d1 = 0xa1a2a3a4;\nlet d2 = 0xb1b2;\nlet d3 = 0xc1c2;\nlet d4 = [0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8];\n\nlet uuid = Uuid::from_fields_le(d1, d2, d3, &d4);\n\nassert_eq!(\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d1",{"primitive":"u32"}],["d2",{"primitive":"u16"}],["d3",{"primitive":"u16"}],["d4",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:621":{"id":"0:621","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,37],"end":[437,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2798:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:467":{"id":"0:467","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:468:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:607:2018":{"id":"b:5:682-0:607:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3314","5:685:25915","5:686:25916"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:460:725":{"id":"0:460:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:2372":{"id":"0:22:2372","crate_id":0,"name":"from_u128","span":{"filename":"src/builder.rs","begin":[206,4],"end":[225,5]},"visibility":"public","docs":"Creates a UUID from a 128bit value.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n\nlet uuid = Uuid::from_u128(v);\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"primitive":"u128"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2805:259-0:367:2855":{"id":"a:1:2805:259-0:367:2855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:682-0:390:2858":{"id":"b:5:682-0:390:2858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3314","5:685:25915","5:686:25916"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12536:33449":{"id":"1:12536:33449","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43912:3770","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12541:2328":{"id":"1:12541:2328","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12029:457","self::pattern":"1:12200:3335"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:423":{"id":"0:423","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,38],"end":[80,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2799:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8669:3498-0:550:1942":{"id":"a:1:8669:3498-0:550:1942","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8669:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5524:34126":{"id":"5:5524:34126","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7493:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:537":{"id":"0:537","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,44],"end":[40,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9840:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:538:789"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:523:1919":{"id":"b:5:682-0:523:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3314","5:685:25915","5:686:25916"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:281:2210":{"id":"0:281:2210","crate_id":0,"name":"get_timestamp","span":{"filename":"src/lib.rs","begin":[898,4],"end":[925,5]},"visibility":"public","docs":"If the UUID is the correct version (v1, v6, or v7) this will return\nthe timestamp and counter portion parsed from a V1 UUID.\n\nReturns `None` if the supplied UUID is not V1.\n\nThe V1 timestamp format defined in RFC4122 specifies a 60-bit\ninteger representing the number of 100-nanosecond intervals\nsince 00:00:00.00, 15 Oct 1582.\n\n[`Timestamp`] offers several options for converting the raw RFC4122\nvalue into more commonly-used formats, such as a unix timestamp.\n\n# Roundtripping\n\nThis method is unlikely to roundtrip a timestamp in a UUID due to the way\nUUIDs encode timestamps. The timestamp returned from this method will be truncated to\n100ns precision for version 1 and 6 UUIDs, and to millisecond precision for version 7 UUIDs.\n\n[`Timestamp`]: v1/struct.Timestamp.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41686:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:613":{"id":"0:613","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,22],"end":[437,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2799:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:432":{"id":"0:432","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,53],"end":[80,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2337:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:433:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12526:33447":{"id":"1:12526:33447","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12035:1544","str::slice_mut_unchecked":"1:12527:33448","crate::ops::Index":"1:3085:3324"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12524:9280":{"id":"1:12524:9280","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:514:2849":{"id":"0:514:2849","crate_id":0,"name":"borrow","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:443:725":{"id":"0:443:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[86,22],"end":[86,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3424-0:390:2858":{"id":"b:1:3424-0:390:2858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3426:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:296:135":{"id":"0:296:135","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[5,0],"end":[5,39]},"visibility":"public","docs":"A general error that can occur when working with UUIDs.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8670:3497-0:296:135","a:1:2805:259-0:296:135","a:1:2845:3344-0:296:135","a:1:2788:249-0:296:135","a:1:8669:3498-0:296:135","b:1:3424-0:296:135","b:1:2594-0:296:135","b:1:2276-0:296:135","b:1:2589-0:296:135","b:1:2579-0:296:135","b:1:2583-0:296:135","b:1:2273-0:296:135","b:5:5793-0:296:135","b:5:682-0:296:135","0:68","0:303","0:309","0:306","0:310","0:304","0:73","0:301","0:299"]}}},"0:624":{"id":"0:624","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,48],"end":[437,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","lt","le","ge"],"trait":{"name":"PartialOrd","id":"1:2379:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:625:1138"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:597:148":{"id":"0:597:148","crate_id":0,"name":"Future","span":{"filename":"src/lib.rs","begin":[340,4],"end":[340,10]},"visibility":"default","docs":"Reserved for future expansion.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:464":{"id":"0:464","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:9637:2852","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:465:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:521":{"id":"0:521","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:522:2849"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:540:1917":{"id":"0:540:1917","crate_id":0,"name":"NoContext","span":{"filename":"src/timestamp.rs","begin":[362,4],"end":[362,25]},"visibility":"public","docs":"An empty counter that will always return the value `0`.\n\nThis type should be used when constructing timestamps for version 7 UUIDs,\nsince they don't need a counter for uniqueness.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:1:8670:3497-0:540:1917","a:1:2805:259-0:540:1917","a:1:2845:3344-0:540:1917","a:1:2788:249-0:540:1917","a:1:8669:3498-0:540:1917","b:1:3424-0:540:1917","b:1:2594-0:540:1917","b:1:2276-0:540:1917","b:1:2589-0:540:1917","b:1:2579-0:540:1917","b:1:2583-0:540:1917","b:1:2273-0:540:1917","b:5:682-0:540:1917","0:236","0:546","0:544","0:542","0:547"]}}},"1:12555:30541":{"id":"1:12555:30541","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12200:3335","`DoubleEndedIterator`":"1:7581:128","prim@char":"4:12029:457","str::split_whitespace":"1:12533:26560","str::rsplit":"1:12561:30544"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43648:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2589-0:550:1942":{"id":"b:1:2589-0:550:1942","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2592:135","1:2593:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12538:2420":{"id":"1:12538:2420","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12029:457","self::pattern":"1:12200:3335"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:241-0:226:1918":{"id":"0:241-0:226:1918","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,40],"end":[238,53]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"timestamp::ClockSequence","name":"ClockSequence","id":"0:226:1918","glob":false}}},"b:1:2273-0:413:2195":{"id":"b:1:2273-0:413:2195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2275:2849"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:617:789":{"id":"0:617:789","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[437,26],"end":[437,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9848:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2579-0:296:135":{"id":"b:1:2579-0:296:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2582:2404"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[539,0],"end":[680,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:2196","0:185:2898","0:186:2928","0:188:2936","0:190:2691","0:191:2293"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:433:667":{"id":"0:433:667","crate_id":0,"name":"eq","span":{"filename":"src/fmt.rs","begin":[80,53],"end":[80,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:233:3048":{"id":"0:233:3048","crate_id":0,"name":"generate_sequence","span":{"filename":"src/timestamp.rs","begin":[345,4],"end":[347,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["seconds",{"primitive":"u64"}],["subsec_nanos",{"primitive":"u32"}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:226:1918","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2805:259-0:540:1917":{"id":"a:1:2805:259-0:540:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:489:725":{"id":"0:489:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8670:3497-0:523:1919":{"id":"a:1:8670:3497-0:523:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8670:3497","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[36,0],"end":[40,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::std::string::String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:125:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2845:3344-0:436:2863":{"id":"a:1:2845:3344-0:436:2863","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2845:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12505":{"id":"1:12505","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12506:880","1:12507:3569","1:12508:33443","1:12509:33444","1:12511:33445","1:12514:2054","1:12515:33446","1:12516:349","1:12517:348","1:12518:9277","1:12520:9278","1:12522:9279","1:12524:9280","1:12526:33447","1:12527:33448","1:12528:30533","1:12529:30534","1:12530:2240","1:12531:2728","1:12532:2101","1:12533:26560","1:12534:26585","1:12535:32587","1:12536:33449","1:12537:26581","1:12538:2420","1:12541:2328","1:12544:30552","1:12547:3608","1:12551:3568","1:12555:30541","1:12558:26572","1:12561:30544","1:12564:33450","1:12567:33451","1:12570:30546","1:12573:30548","1:12576:30550","1:12579:30551","1:12582:2729","1:12585:33452","1:12588:33453","1:12591:33454","1:12594:33455","1:12596:33456","1:12598:33457","1:12600:33458","1:12601:33459","1:12602:33460","1:12605:33461","1:12608:29703","1:12611:30553","1:12614:33462","1:12617:33463","1:12620:33464","1:12623:33465","1:12625:9365","1:12626:9366","1:12627:9370","1:12628:9371","1:12629:9372","1:12630:33466","1:12632:9654","1:12633:33467"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:289:135":{"id":"0:289:135","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[951,4],"end":[951,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:585:725":{"id":"0:585:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[298,22],"end":[298,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:227:210":{"id":"0:227:210","crate_id":0,"name":"Output","span":{"filename":"src/timestamp.rs","begin":[335,4],"end":[335,16]},"visibility":"default","docs":"The type of sequence returned by this counter.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[935,0],"end":[940,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2547:79","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:285:350"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:413:2195":{"id":"b:5:682-0:413:2195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3314","5:685:25915","5:686:25916"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:682-0:550:1942":{"id":"b:5:682-0:550:1942","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3314","5:685:25915","5:686:25916"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:475":{"id":"0:475","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:476:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:175:2196":{"id":"0:175:2196","crate_id":0,"name":"LENGTH","span":{"filename":"src/fmt.rs","begin":[398,4],"end":[398,33]},"visibility":"public","docs":"The length of a braced [`Uuid`] string.\n\n[`Uuid`]: ../struct.Uuid.html","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"primitive":"usize"},"default":"38"}}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,16],"end":[68,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2800:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2805:259-0:550:1942":{"id":"a:1:2805:259-0:550:1942","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2579-0:589:1966":{"id":"b:1:2579-0:589:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2582:2404"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:588:667":{"id":"0:588:667","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[298,29],"end":[298,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:228:3048":{"id":"0:228:3048","crate_id":0,"name":"generate_sequence","span":{"filename":"src/timestamp.rs","begin":[340,4],"end":[340,81]},"visibility":"default","docs":"Get the next value in the sequence to feed into a timestamp.\n\nThis method will be called each time a [`Timestamp`] is constructed.","links":{"`Timestamp`":"0:523:1919"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["seconds",{"primitive":"u64"}],["subsec_nanos",{"primitive":"u32"}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:226:1918","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"1:12627:9370":{"id":"1:12627:9370","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2583-0:413:2195":{"id":"b:1:2583-0:413:2195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3424-0:550:1942":{"id":"b:1:3424-0:550:1942","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3426:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:14:2222":{"id":"0:14:2222","crate_id":0,"name":"nil","span":{"filename":"src/builder.rs","begin":[72,4],"end":[74,5]},"visibility":"public","docs":"The 'nil UUID' (all zeros).\n\nThe nil UUID is a special form of UUID that is specified to have all\n128 bits set to zero.\n\n# References\n\n* [Nil UUID in RFC4122](https://tools.ietf.org/html/rfc4122.html#section-4.1.7)\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet uuid = Uuid::nil();\n\nassert_eq!(\n    \"00000000-0000-0000-0000-000000000000\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:488":{"id":"0:488","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:9637:2852","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:489:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,38],"end":[68,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2799:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:295:725":{"id":"0:295:725","crate_id":0,"name":"fmt","span":{"filename":"src/builder.rs","begin":[46,9],"end":[46,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2270":{"id":"0:0:2270","crate_id":0,"name":"uuid","span":{"filename":"src/lib.rs","begin":[12,0],"end":[1845,1]},"visibility":"public","docs":"Generate and parse universally unique identifiers (UUIDs).\n\nHere's an example of a UUID:\n\n```text\n67e55044-10b1-426f-9247-bb680e5fe0c8\n```\n\nA UUID is a unique 128-bit value, stored as 16 octets, and regularly\nformatted as a hex string in five groups. UUIDs are used to assign unique\nidentifiers to entities without requiring a central allocating authority.\n\nThey are particularly useful in distributed systems, though can be used in\ndisparate areas, such as databases and network protocols.  Typically a UUID\nis displayed in a readable string form as a sequence of hexadecimal digits,\nseparated into groups by hyphens.\n\nThe uniqueness property is not strictly guaranteed, however for all\npractical purposes, it can be assumed that an unintentional collision would\nbe extremely unlikely.\n\nUUIDs have a number of standardized encodings that are specified in [RFC4122](http://tools.ietf.org/html/rfc4122),\nwith recent additions [in draft](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04).\n\n# Getting started\n\nAdd the following to your `Cargo.toml`:\n\n```toml\n[dependencies.uuid]\nversion = \"1.6.1\"\nfeatures = [\n    \"v4\",                # Lets you generate random UUIDs\n    \"fast-rng\",          # Use a faster (but still sufficiently random) RNG\n    \"macro-diagnostics\", # Enable better diagnostics for compile-time UUIDs\n]\n```\n\nWhen you want a UUID, you can generate one:\n\n```\n# fn main() {\n# #[cfg(feature = \"v4\")]\n# {\nuse uuid::Uuid;\n\nlet id = Uuid::new_v4();\n# }\n# }\n```\n\nIf you have a UUID value, you can use its string literal form inline:\n\n```\nuse uuid::{uuid, Uuid};\n\nconst ID: Uuid = uuid!(\"67e55044-10b1-426f-9247-bb680e5fe0c8\");\n```\n\n# Working with different UUID versions\n\nThis library supports all standardized methods for generating UUIDs through individual Cargo features.\n\nBy default, this crate depends on nothing but the Rust standard library and can parse and format\nUUIDs, but cannot generate them. Depending on the kind of UUID you'd like to work with, there\nare Cargo features that enable generating them:\n\n* `v1` - Version 1 UUIDs using a timestamp and monotonic counter.\n* `v3` - Version 3 UUIDs based on the MD5 hash of some data.\n* `v4` - Version 4 UUIDs with random data.\n* `v5` - Version 5 UUIDs based on the SHA1 hash of some data.\n* `v6` - Version 6 UUIDs using a timestamp and monotonic counter.\n* `v7` - Version 7 UUIDs using a Unix timestamp.\n* `v8` - Version 8 UUIDs using user-defined data.\n\nVersions that are in draft are also supported. See the _unstable features_ section for details.\n\nThis library also includes a [`Builder`] type that can be used to help construct UUIDs of any\nversion without any additional dependencies or features. It's a lower-level API than [`Uuid`]\nthat can be used when you need control over implicit requirements on things like a source\nof randomness.\n\n## Which UUID version should I use?\n\nIf you just want to generate unique identifiers then consider version 4 (`v4`) UUIDs. If you want\nto use UUIDs as database keys or need to sort them then consider version 7 (`v7`) UUIDs.\nOther versions should generally be avoided unless there's an existing need for them.\n\nSome UUID versions supersede others. Prefer version 6 over version 1 and version 5 over version 3.\n\n# Other features\n\nOther crate features can also be useful beyond the version support:\n\n* `macro-diagnostics` - enhances the diagnostics of `uuid!` macro.\n* `serde` - adds the ability to serialize and deserialize a UUID using\n  `serde`.\n* `arbitrary` - adds an `Arbitrary` trait implementation to `Uuid` for\n  fuzzing.\n* `fast-rng` - uses a faster algorithm for generating random UUIDs.\n  This feature requires more dependencies to compile, but is just as suitable for\n  UUIDs as the default algorithm.\n* `bytemuck` - adds a `Pod` trait implementation to `Uuid` for byte manipulation\n\n# Unstable features\n\nSome features are unstable. They may be incomplete or depend on other\nunstable libraries. These include:\n\n* `zerocopy` - adds support for zero-copy deserialization using the\n  `zerocopy` library.\n* `borsh` - adds the ability to serialize and deserialize a UUID using\n  `borsh`.\n\nUnstable features may break between minor releases.\n\nTo allow unstable features, you'll need to enable the Cargo feature as\nnormal, but also pass an additional flag through your environment to opt-in\nto unstable `uuid` features:\n\n```text\nRUSTFLAGS=\"--cfg uuid_unstable\"\n```\n\n# Building for other targets\n\n## WebAssembly\n\nFor WebAssembly, enable the `js` feature:\n\n```toml\n[dependencies.uuid]\nversion = \"1.6.1\"\nfeatures = [\n    \"v4\",\n    \"v7\",\n    \"js\",\n]\n```\n\n## Embedded\n\nFor embedded targets without the standard library, you'll need to\ndisable default features when building `uuid`:\n\n```toml\n[dependencies.uuid]\nversion = \"1.6.1\"\ndefault-features = false\n```\n\nSome additional features are supported in no-std environments:\n\n* `v1`, `v3`, `v5`, `v6`, and `v8`.\n* `serde`.\n\nIf you need to use `v4` or `v7` in a no-std environment, you'll need to\nfollow [`getrandom`'s docs] on configuring a source of randomness\non currently unsupported targets. Alternatively, you can produce\nrandom bytes yourself and then pass them to [`Builder::from_random_bytes`]\nwithout enabling the `v4` feature.\n\n# Examples\n\nParse a UUID given in the simple format and print it as a URN:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\")?;\n\nprintln!(\"{}\", my_uuid.urn());\n# Ok(())\n# }\n```\n\nGenerate a random UUID and print it out in hexadecimal form:\n\n```\n// Note that this requires the `v4` feature to be enabled.\n# use uuid::Uuid;\n# fn main() {\n# #[cfg(feature = \"v4\")] {\nlet my_uuid = Uuid::new_v4();\n\nprintln!(\"{}\", my_uuid);\n# }\n# }\n```\n\n# References\n\n* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)\n* [RFC4122: A Universally Unique Identifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)\n* [Draft RFC: New UUID Formats, Version 4](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04)\n\n[`wasm-bindgen`]: https://crates.io/crates/wasm-bindgen\n[`cargo-web`]: https://crates.io/crates/cargo-web\n[`getrandom`'s docs]: https://docs.rs/getrandom","links":{"`Uuid`":"0:607:2018","`Builder::from_random_bytes`":"0:38:2640","`Builder`":"0:291:1935"},"attrs":["#![no_std]","#![deny(missing_debug_implementations, missing_docs)]","#![doc(html_logo_url =\n\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\nhtml_favicon_url = \"https://www.rust-lang.org/favicon.ico\", html_root_url =\n\"https://docs.rs/uuid/1.6.1\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:108:725","0:203:1916","0:240-0:540:1917","0:241-0:226:1918","0:242-0:523:1919","0:252-0:291:1935","0:253-0:296:135","0:254:1939","0:550:1942","0:589:1966","0:607:2018","0:549:2270"],"is_stripped":false}}},"a:1:8669:3498-0:296:135":{"id":"a:1:8669:3498-0:296:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8669:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[249,0],"end":[392,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:166:2196","0:167:2898","0:168:2928","0:170:2936","0:172:2691","0:173:2293"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,9],"end":[68,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:371:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:436:2863":{"id":"0:436:2863","crate_id":0,"name":"Braced","span":{"filename":"src/fmt.rs","begin":[88,0],"end":[88,24]},"visibility":"public","docs":"Format a [`Uuid`] as a braced hyphenated string, like\n`{67e55044-10b1-426f-9247-bb680e5fe0c8}`.","links":{"`Uuid`":"0:607:2018"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:174","a:1:8670:3497-0:436:2863","a:1:2805:259-0:436:2863","a:1:2845:3344-0:436:2863","a:1:2788:249-0:436:2863","a:1:8669:3498-0:436:2863","b:1:3424-0:436:2863","b:1:2594-0:436:2863","b:1:2276-0:436:2863","b:1:2589-0:436:2863","b:1:2579-0:436:2863","b:1:2583-0:436:2863","b:1:2273-0:436:2863","b:5:5793-0:436:2863","b:5:682-0:436:2863","0:488","0:439","0:521","0:483","0:455","0:441","0:519","0:447","0:517","0:449","0:485","0:444","0:442","0:515","0:446","0:457","0:452","0:454"]}}},"0:557:1948":{"id":"0:557:1948","crate_id":0,"name":"Dce","span":{"filename":"src/lib.rs","begin":[307,4],"end":[307,11]},"visibility":"default","docs":"Version 2: DCE Security.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"0:57:2292":{"id":"0:57:2292","crate_id":0,"name":"with_version","span":{"filename":"src/builder.rs","begin":[860,4],"end":[864,5]},"visibility":"public","docs":"Specifies the version number of the UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["v",{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:2928":{"id":"0:168:2928","crate_id":0,"name":"encode_lower","span":{"filename":"src/fmt.rs","begin":[310,4],"end":[312,5]},"visibility":"public","docs":"Writes the [`Uuid`] as a lower-case hyphenated string to\n`buffer`, and returns the subslice of the buffer that contains the\nencoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936DA01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.hyphenated()\n            .encode_lower(&mut Uuid::encode_buffer()),\n        \"936da01f-9abd-4d9d-80c7-02af85c822a8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 40];\n    uuid.hyphenated().encode_lower(&mut buf);\n    assert_eq!(\n        &buf as &[_],\n        b\"936da01f-9abd-4d9d-80c7-02af85c822a8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:2633":{"id":"0:37:2633","crate_id":0,"name":"from_md5_bytes","span":{"filename":"src/builder.rs","begin":[558,4],"end":[562,5]},"visibility":"public","docs":"Creates a `Builder` for a version 3 UUID using the supplied MD5 hashed bytes.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["md5_bytes",{"resolved_path":{"name":"Bytes","id":"0:254:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:501":{"id":"0:501","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:502:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:410:667":{"id":"0:410:667","crate_id":0,"name":"eq","span":{"filename":"src/fmt.rs","begin":[74,53],"end":[74,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:550:1942":{"id":"b:1:2594-0:550:1942","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2597:135","1:2598:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:595:1972":{"id":"0:595:1972","crate_id":0,"name":"Microsoft","span":{"filename":"src/lib.rs","begin":[338,4],"end":[338,13]},"visibility":"default","docs":"Reserved by Microsoft for backward compatibility.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:1:8670:3497-0:540:1917":{"id":"a:1:8670:3497-0:540:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8670:3497","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:385":{"id":"0:385","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,53],"end":[68,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2798:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12511:33445":{"id":"1:12511:33445","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12509:33444"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12522:9279":{"id":"1:12522:9279","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12507:3569":{"id":"1:12507:3569","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12632:9654":{"id":"1:12632:9654","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4585:9654"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43956:3767","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:3854":{"id":"5:5521:3854","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7493:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:523:1919":{"id":"0:523:1919","crate_id":0,"name":"Timestamp","span":{"filename":"src/timestamp.rs","begin":[41,0],"end":[46,1]},"visibility":"public","docs":"A timestamp that can be encoded into a UUID.\n\nThis type abstracts the specific encoding, so versions 1, 6, and 7\nUUIDs can both be supported through the same type, even\nthough they have a different representation of a timestamp.\n\n# References\n\n* [Timestamp in RFC4122](https://www.rfc-editor.org/rfc/rfc4122#section-4.1.4)\n* [Timestamp in Draft RFC: New UUID Formats, Version 4](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04#section-6.1)\n* [Clock Sequence in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.5)","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:206","a:1:8670:3497-0:523:1919","a:1:2805:259-0:523:1919","a:1:2845:3344-0:523:1919","a:1:2788:249-0:523:1919","a:1:8669:3498-0:523:1919","b:1:3424-0:523:1919","b:1:2594-0:523:1919","b:1:2276-0:523:1919","b:1:2589-0:523:1919","b:1:2579-0:523:1919","b:1:2583-0:523:1919","b:1:2273-0:523:1919","b:5:682-0:523:1919","0:528","0:532","0:530","0:526","0:535","0:534","0:537","0:531"]}}},"a:1:8670:3497-0:296:135":{"id":"a:1:8670:3497-0:296:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8670:3497","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8669:3498-0:540:1917":{"id":"a:1:8669:3498-0:540:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8669:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:547":{"id":"0:547","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[361,33],"end":[361,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2630:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:548:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:25:2223":{"id":"0:25:2223","crate_id":0,"name":"from_slice","span":{"filename":"src/builder.rs","begin":[338,4],"end":[346,5]},"visibility":"public","docs":"Creates a UUID using the supplied bytes.\n\n# Errors\n\nThis function will return an error if `b` has any length other than 16.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_slice(&bytes)?;\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41831:238","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2589-0:607:2018":{"id":"b:1:2589-0:607:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2592:135","1:2593:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:560:1950":{"id":"0:560:1950","crate_id":0,"name":"Md5","span":{"filename":"src/lib.rs","begin":[309,4],"end":[309,11]},"visibility":"default","docs":"Version 3: MD5 hash.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"3","value":"3"}}}},"0:264:2100":{"id":"0:264:2100","crate_id":0,"name":"as_fields","span":{"filename":"src/lib.rs","begin":[625,4],"end":[639,5]},"visibility":"public","docs":"Returns the four field values of the UUID.\n\nThese values can be passed to the [`Uuid::from_fields`] method to get\nthe original `Uuid` back.\n\n* The first field value represents the first group of (eight) hex\n  digits, taken as a big-endian `u32` value.  For V1 UUIDs, this field\n  represents the low 32 bits of the timestamp.\n* The second field value represents the second group of (four) hex\n  digits, taken as a big-endian `u16` value.  For V1 UUIDs, this field\n  represents the middle 16 bits of the timestamp.\n* The third field value represents the third group of (four) hex digits,\n  taken as a big-endian `u16` value.  The 4 most significant bits give\n  the UUID version, and for V1 UUIDs, the last 12 bits represent the\n  high 12 bits of the timestamp.\n* The last field value represents the last two groups of four and twelve\n  hex digits, taken in order.  The first 1-3 bits of this indicate the\n  UUID variant, and for V1 UUIDs, the next 13-15 bits indicate the clock\n  sequence and the last 48 bits indicate the node ID.\n\n# Examples\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::nil();\n\nassert_eq!(uuid.as_fields(), (0, 0, 0, &[0u8; 8]));\n\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.as_fields(),\n    (\n        0xa1a2a3a4,\n        0xb1b2,\n        0xc1c2,\n        &[0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8],\n    )\n);\n# Ok(())\n# }\n```","links":{"`Uuid::from_fields`":"0:18:2348"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u32"},{"primitive":"u16"},{"primitive":"u16"},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,22],"end":[68,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:374:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:468:725":{"id":"0:468:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:249-0:523:1919":{"id":"a:1:2788:249-0:523:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:89:2757":{"id":"0:89:2757","crate_id":0,"name":"try_parse","span":{"filename":"src/parser.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"Parses a `Uuid` from a string of hexadecimal digits with optional\nhyphens.\n\nThis function is similar to [`parse_str`], in fact `parse_str` shares\nthe same underlying parser. The difference is that if `try_parse`\nfails, it won't generate very useful error messages. The `parse_str`\nfunction will eventually be deprecated in favor or `try_parse`.\n\nTo parse a UUID from a byte stream instead of a UTF8 string, see\n[`try_parse_ascii`].\n\n# Examples\n\nParse a hyphenated UUID:\n\n```\n# use uuid::{Uuid, Version, Variant};\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::try_parse(\"550e8400-e29b-41d4-a716-446655440000\")?;\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n# Ok(())\n# }\n```\n\n[`parse_str`]: #method.parse_str\n[`try_parse_ascii`]: #method.try_parse_ascii","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41831:238","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:3314":{"id":"5:684:3314","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:504:350":{"id":"0:504:350","crate_id":0,"name":"as_ref","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[48,0],"end":[169,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:207:3047","0:208:2214","0:209:3056","0:210:3062","0:212:3069"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:394:461":{"id":"0:394:461","crate_id":0,"name":"clone","span":{"filename":"src/fmt.rs","begin":[74,9],"end":[74,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:401":{"id":"0:401","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,38],"end":[74,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2342:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:276:2071":{"id":"0:276:2071","crate_id":0,"name":"is_nil","span":{"filename":"src/lib.rs","begin":[841,4],"end":[843,5]},"visibility":"public","docs":"Tests if the UUID is nil (all zeros).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:2348":{"id":"0:18:2348","crate_id":0,"name":"from_fields","span":{"filename":"src/builder.rs","begin":[122,4],"end":[141,5]},"visibility":"public","docs":"Creates a UUID from four field values.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet d1 = 0xa1a2a3a4;\nlet d2 = 0xb1b2;\nlet d3 = 0xc1c2;\nlet d4 = [0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8];\n\nlet uuid = Uuid::from_fields(d1, d2, d3, &d4);\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d1",{"primitive":"u32"}],["d2",{"primitive":"u16"}],["d3",{"primitive":"u16"}],["d4",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:510:752":{"id":"0:510:752","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:531":{"id":"0:531","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,29],"end":[40,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2798:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:406":{"id":"0:406","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,48],"end":[74,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"1:2373:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:407:468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8669:3498-0:607:2018":{"id":"a:1:8669:3498-0:607:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8669:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,23],"end":[4,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2799:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:399:60":{"id":"0:399:60","crate_id":0,"name":"default","span":{"filename":"src/fmt.rs","begin":[74,29],"end":[74,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:534":{"id":"0:534","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,40],"end":[40,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2799:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:273:2054":{"id":"0:273:2054","crate_id":0,"name":"as_bytes","span":{"filename":"src/lib.rs","begin":[784,4],"end":[786,5]},"visibility":"public","docs":"Returns a slice of 16 octets containing the value.\n\nThis method borrows the underlying byte value of the UUID.\n\n# Examples\n\n```\n# use uuid::Uuid;\nlet bytes1 = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\nlet uuid1 = Uuid::from_bytes_ref(&bytes1);\n\nlet bytes2 = uuid1.as_bytes();\nlet uuid2 = Uuid::from_bytes_ref(bytes2);\n\nassert_eq!(uuid1, uuid2);\n\nassert!(std::ptr::eq(\n    uuid2 as *const Uuid as *const u8,\n    &bytes1 as *const [u8; 16] as *const u8,\n));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:254:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2583-0:291:1935":{"id":"b:1:2583-0:291:1935","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1935","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:542":{"id":"0:542","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[361,13],"end":[361,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:543:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:516:752":{"id":"0:516:752","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:291:1935":{"id":"b:1:2594-0:291:1935","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1935","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2597:135","1:2598:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:274:2163":{"id":"0:274:2163","crate_id":0,"name":"into_bytes","span":{"filename":"src/lib.rs","begin":[804,4],"end":[806,5]},"visibility":"public","docs":"Consumes self and returns the underlying byte value of the UUID.\n\n# Examples\n\n```\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\nlet uuid = Uuid::from_bytes(bytes);\nassert_eq!(bytes, uuid.into_bytes());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Bytes","id":"0:254:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:603:725":{"id":"0:603:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[329,22],"end":[329,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:465:725":{"id":"0:465:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:258:2038":{"id":"0:258:2038","crate_id":0,"name":"NAMESPACE_OID","span":{"filename":"src/lib.rs","begin":[461,4],"end":[464,7]},"visibility":"public","docs":"UUID namespace for ISO Object Identifiers (OIDs).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"5:5520:34125":{"id":"5:5520:34125","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:3328","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:3328","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:301":{"id":"0:301","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,16],"end":[4,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:302:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:46:2614":{"id":"0:46:2614","crate_id":0,"name":"from_slice_le","span":{"filename":"src/builder.rs","begin":[720,4],"end":[722,5]},"visibility":"public","docs":"Creates a `Builder` using the supplied bytes in little endian order.\n\nThe individual fields encoded in the buffer will be flipped.\n\n# Errors\n\nThis function will return an error if `b` has any length other than 16.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\n# fn main() -> Result<(), uuid::Error> {\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Builder::from_slice_le(&bytes)?.into_uuid();\n\nassert_eq!(\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:508:752":{"id":"0:508:752","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:236":{"id":"0:236","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[364,4],"end":[370,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ClockSequence","id":"0:226:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:237:210","0:238:3048"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:199:2691":{"id":"0:199:2691","crate_id":0,"name":"as_uuid","span":{"filename":"src/fmt.rs","begin":[813,4],"end":[815,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet urn = Uuid::nil().urn();\nassert_eq!(*urn.as_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2018"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8670:3497-0:589:1966":{"id":"a:1:8670:3497-0:589:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8670:3497","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:210:3062":{"id":"0:210:3062","crate_id":0,"name":"to_unix","span":{"filename":"src/timestamp.rs","begin":[142,4],"end":[144,5]},"visibility":"public","docs":"Get the value of the timestamp as a Unix timestamp, as used in version 7 UUIDs.\n\n# Overflow\n\nIf conversion from RFC4122 ticks to the internal timestamp format would overflow\nit will wrap.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u64"},{"primitive":"u32"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2276-0:550:1942":{"id":"b:1:2276-0:550:1942","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2278:25910"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12625:9365":{"id":"1:12625:9365","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:445:60":{"id":"0:445:60","crate_id":0,"name":"default","span":{"filename":"src/fmt.rs","begin":[86,29],"end":[86,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:2844":{"id":"0:139:2844","crate_id":0,"name":"braced","span":{"filename":"src/fmt.rs","begin":[132,4],"end":[134,5]},"visibility":"public","docs":"Get a [`Braced`] formatter.","links":{"`Braced`":"0:436:2863"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:545:461":{"id":"0:545:461","crate_id":0,"name":"clone","span":{"filename":"src/timestamp.rs","begin":[361,20],"end":[361,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:429":{"id":"0:429","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,48],"end":[80,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"1:2373:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:430:468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2579-0:540:1917":{"id":"b:1:2579-0:540:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2582:2404"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:272:2141":{"id":"0:272:2141","crate_id":0,"name":"as_u64_pair","span":{"filename":"src/lib.rs","begin":[752,4],"end":[755,5]},"visibility":"public","docs":"Returns two 64bit values containing the value.\n\nThe bytes in the UUID will be split into two `u64`.\nThe first u64 represents the 64 most significant bits,\nthe second one represents the 64 least significant.\n\n# Examples\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\nassert_eq!(\n    uuid.as_u64_pair(),\n    (0xa1a2a3a4b1b2c1c2, 0xd1d2d3d4d5d6d7d8),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u64"},{"primitive":"u64"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:554:1946":{"id":"0:554:1946","crate_id":0,"name":"Mac","span":{"filename":"src/lib.rs","begin":[305,4],"end":[305,11]},"visibility":"default","docs":"Version 1: Timestamp and node ID.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"0:519":{"id":"0:519","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2547:79","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:520:350"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2579-0:291:1935":{"id":"b:1:2579-0:291:1935","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1935","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2582:2404"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:442":{"id":"0:442","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,22],"end":[86,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:443:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:453:468":{"id":"0:453:468","crate_id":0,"name":"cmp","span":{"filename":"src/fmt.rs","begin":[86,48],"end":[86,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30922:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493":{"id":"0:493","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:494:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:51:2372":{"id":"0:51:2372","crate_id":0,"name":"from_u128","span":{"filename":"src/builder.rs","begin":[789,4],"end":[791,5]},"visibility":"public","docs":"Creates a `Builder` from a 128bit value.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n\nlet uuid = Builder::from_u128(v).into_uuid();\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"primitive":"u128"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:434":{"id":"0:434","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,64],"end":[80,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","lt","le","ge"],"trait":{"name":"PartialOrd","id":"1:2379:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:435:1138"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:589:1966":{"id":"0:589:1966","crate_id":0,"name":"Variant","span":{"filename":"src/lib.rs","begin":[332,0],"end":[341,1]},"visibility":"public","docs":"The reserved variants of UUIDs.\n\n# References\n\n* [Variant in RFC4122](http://tools.ietf.org/html/rfc4122#section-4.1.1)","links":{},"attrs":["#[non_exhaustive]","#[repr(u8)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:590:1968","0:593:1970","0:595:1972","0:597:148"],"impls":["a:1:8670:3497-0:589:1966","a:1:2805:259-0:589:1966","a:1:2845:3344-0:589:1966","a:1:2788:249-0:589:1966","a:1:8669:3498-0:589:1966","b:1:3424-0:589:1966","b:1:2594-0:589:1966","b:1:2276-0:589:1966","b:1:2589-0:589:1966","b:1:2579-0:589:1966","b:1:2583-0:589:1966","b:1:2273-0:589:1966","b:5:5793-0:589:1966","b:5:682-0:589:1966","0:604","0:602","0:599","0:601","0:605","0:126"]}}},"0:44:2666":{"id":"0:44:2666","crate_id":0,"name":"from_custom_bytes","span":{"filename":"src/builder.rs","begin":[650,4],"end":[654,5]},"visibility":"public","docs":"Creates a `Builder` for a version 8 UUID using the supplied user-defined bytes.\n\nThis method won't interpret the given bytes in any way, except to set the appropriate\nbits for the UUID version and variant.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["custom_bytes",{"resolved_path":{"name":"Bytes","id":"0:254:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:376:60":{"id":"0:376:60","crate_id":0,"name":"default","span":{"filename":"src/fmt.rs","begin":[68,29],"end":[68,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2583-0:436:2863":{"id":"b:1:2583-0:436:2863","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2845:3344-0:367:2855":{"id":"a:1:2845:3344-0:367:2855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2845:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:530":{"id":"0:530","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,23],"end":[40,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2800:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:42:2662":{"id":"0:42:2662","crate_id":0,"name":"from_unix_timestamp_millis","span":{"filename":"src/builder.rs","begin":[639,4],"end":[644,5]},"visibility":"public","docs":"Creates a `Builder` for a version 7 UUID using the supplied Unix timestamp and random bytes.\n\nThis method assumes the bytes are already sufficiently random.\n\n# Examples\n\nCreating a UUID using the current system timestamp:\n\n```\n# use std::convert::TryInto;\nuse std::time::{Duration, SystemTime};\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\n# use uuid::{Builder, Uuid, Variant, Version, Timestamp, NoContext};\n# let rng = || [\n#     70, 235, 208, 238, 14, 109, 67, 201, 185, 13\n# ];\nlet ts = SystemTime::now().duration_since(SystemTime::UNIX_EPOCH)?;\n\nlet random_bytes = rng();\n\nlet uuid = Builder::from_unix_timestamp_millis(ts.as_millis().try_into()?, &random_bytes).into_uuid();\n\nassert_eq!(Some(Version::SortRand), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["millis",{"primitive":"u64"}],["random_bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"10"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:367:2855":{"id":"b:5:682-0:367:2855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3314","5:685:25915","5:686:25916"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12534:26585":{"id":"1:12534:26585","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12533:26560"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43931:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278:2194":{"id":"0:278:2194","crate_id":0,"name":"encode_buffer","span":{"filename":"src/lib.rs","begin":[875,4],"end":[877,5]},"visibility":"public","docs":"A buffer that can be used for `encode_...` calls, that is\nguaranteed to be long enough for any of the format adapters.\n\n# Examples\n\n```\n# use uuid::Uuid;\nlet uuid = Uuid::nil();\n\nassert_eq!(\n    uuid.simple().encode_lower(&mut Uuid::encode_buffer()),\n    \"00000000000000000000000000000000\"\n);\n\nassert_eq!(\n    uuid.hyphenated()\n        .encode_lower(&mut Uuid::encode_buffer()),\n    \"00000000-0000-0000-0000-000000000000\"\n);\n\nassert_eq!(\n    uuid.urn().encode_lower(&mut Uuid::encode_buffer()),\n    \"urn:uuid:00000000-0000-0000-0000-000000000000\"\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"array":{"type":{"primitive":"u8"},"len":"45"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:229":{"id":"0:229","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[343,0],"end":[348,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:226:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ClockSequence","id":"0:226:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}},"items":["0:232:210","0:233:3048"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:136:2868":{"id":"0:136:2868","crate_id":0,"name":"as_simple","span":{"filename":"src/fmt.rs","begin":[112,4],"end":[115,5]},"visibility":"public","docs":"Get a borrowed [`Simple`] formatter.","links":{"`Simple`":"0:390:2858"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:496:350":{"id":"0:496:350","crate_id":0,"name":"as_ref","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:622":{"id":"0:622","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,37],"end":[437,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2337:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:623:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:121:725":{"id":"0:121:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5793-0:436:2863":{"id":"b:5:5793-0:436:2863","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5791:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5795:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:135:2317":{"id":"0:135:2317","crate_id":0,"name":"simple","span":{"filename":"src/fmt.rs","begin":[106,4],"end":[108,5]},"visibility":"public","docs":"Get a [`Simple`] formatter.","links":{"`Simple`":"0:390:2858"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:440:461":{"id":"0:440:461","crate_id":0,"name":"clone","span":{"filename":"src/fmt.rs","begin":[86,9],"end":[86,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:2851":{"id":"0:134:2851","crate_id":0,"name":"as_hyphenated","span":{"filename":"src/fmt.rs","begin":[99,4],"end":[102,5]},"visibility":"public","docs":"Get a borrowed [`Hyphenated`] formatter.","links":{"`Hyphenated`":"0:367:2855"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8669:3498-0:413:2195":{"id":"a:1:8669:3498-0:413:2195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8669:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:47:2348":{"id":"0:47:2348","crate_id":0,"name":"from_fields","span":{"filename":"src/builder.rs","begin":[744,4],"end":[746,5]},"visibility":"public","docs":"Creates a `Builder` from four field values.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet d1 = 0xa1a2a3a4;\nlet d2 = 0xb1b2;\nlet d3 = 0xc1c2;\nlet d4 = [0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8];\n\nlet uuid = Builder::from_fields(d1, d2, d3, &d4).into_uuid();\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d1",{"primitive":"u32"}],["d2",{"primitive":"u16"}],["d3",{"primitive":"u16"}],["d4",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2589-0:390:2858":{"id":"b:1:2589-0:390:2858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2592:135","1:2593:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2583-0:523:1919":{"id":"b:1:2583-0:523:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2278:25910":{"id":"1:2278:25910","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2589-0:291:1935":{"id":"b:1:2589-0:291:1935","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1935","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2592:135","1:2593:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:238:3048":{"id":"0:238:3048","crate_id":0,"name":"generate_sequence","span":{"filename":"src/timestamp.rs","begin":[367,8],"end":[369,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_seconds",{"primitive":"u64"}],["_nanos",{"primitive":"u32"}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:226:1918","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:407:468":{"id":"0:407:468","crate_id":0,"name":"cmp","span":{"filename":"src/fmt.rs","begin":[74,48],"end":[74,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30922:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:249-0:607:2018":{"id":"a:1:2788:249-0:607:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12516:349":{"id":"1:12516:349","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12517:348","`u8`":"4:12046:1650"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2276-0:367:2855":{"id":"b:1:2276-0:367:2855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2278:25910"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2583-0:589:1966":{"id":"b:1:2583-0:589:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:85:135":{"id":"0:85:135","crate_id":0,"name":"Error","span":{"filename":"src/parser.rs","begin":[31,4],"end":[31,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:532":{"id":"0:532","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,29],"end":[40,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2337:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:533:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:412:1138":{"id":"0:412:1138","crate_id":0,"name":"partial_cmp","span":{"filename":"src/fmt.rs","begin":[74,64],"end":[74,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41686:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30922:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3424-0:607:2018":{"id":"b:1:3424-0:607:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3426:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:285:350":{"id":"0:285:350","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[937,4],"end":[939,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:2898":{"id":"0:194:2898","crate_id":0,"name":"from_uuid","span":{"filename":"src/fmt.rs","begin":[692,4],"end":[694,5]},"visibility":"public","docs":"Creates a [`Urn`] from a [`Uuid`].\n\n[`Uuid`]: ../struct.Uuid.html\n[`Urn`]: struct.Urn.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:550:1942":{"id":"0:550:1942","crate_id":0,"name":"Version","span":{"filename":"src/lib.rs","begin":[301,0],"end":[322,1]},"visibility":"public","docs":"The version of the UUID, denoting the generating algorithm.\n\n# References\n\n* [Version in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3)","links":{},"attrs":["#[non_exhaustive]","#[repr(u8)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:551:1944","0:554:1946","0:557:1948","0:560:1950","0:563:1952","0:566:1954","0:569:1956","0:572:1958","0:575:1960","0:578:1962"],"impls":["a:1:8670:3497-0:550:1942","a:1:2805:259-0:550:1942","a:1:2845:3344-0:550:1942","a:1:2788:249-0:550:1942","a:1:8669:3498-0:550:1942","b:1:3424-0:550:1942","b:1:2594-0:550:1942","b:1:2276-0:550:1942","b:1:2589-0:550:1942","b:1:2579-0:550:1942","b:1:2583-0:550:1942","b:1:2273-0:550:1942","b:5:682-0:550:1942","0:586","0:584","0:581","0:587","0:583"]}}},"1:12617:33463":{"id":"1:12617:33463","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12029:457","self::pattern":"1:12200:3335"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2585:752":{"id":"1:2585:752","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:191:2293":{"id":"0:191:2293","crate_id":0,"name":"into_uuid","span":{"filename":"src/fmt.rs","begin":[677,4],"end":[679,5]},"visibility":"public","docs":"Consumes the [`Simple`], returning the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet simple = Uuid::nil().simple();\nassert_eq!(simple.into_uuid(), Uuid::nil());\n```","links":{"`Simple`":"0:390:2858","`Uuid`":"0:607:2018"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,48],"end":[68,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"1:2373:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:384:468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:205:3037":{"id":"0:205:3037","crate_id":0,"name":"UUID_TICKS_BETWEEN_EPOCHS","span":{"filename":"src/timestamp.rs","begin":[27,0],"end":[27,65]},"visibility":"public","docs":"The number of 100 nanosecond ticks between the RFC4122 epoch\n(`1582-10-15 00:00:00`) and the Unix epoch (`1970-01-01 00:00:00`).","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u64"},"expr":"0x01B2_1DD2_1381_4000","value":"122_192_928_000_000_000u64","is_literal":true}}},"b:1:2273-0:550:1942":{"id":"b:1:2273-0:550:1942","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2275:2849"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2273-0:523:1919":{"id":"b:1:2273-0:523:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2275:2849"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2579-0:550:1942":{"id":"b:1:2579-0:550:1942","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2582:2404"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:535":{"id":"0:535","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,40],"end":[40,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2342:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2579-0:607:2018":{"id":"b:1:2579-0:607:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2582:2404"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12528:30533":{"id":"1:12528:30533","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12529:30534"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12594:33455":{"id":"1:12594:33455","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:386":{"id":"0:386","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,53],"end":[68,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2337:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:387:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:261:2053":{"id":"0:261:2053","crate_id":0,"name":"get_variant","span":{"filename":"src/lib.rs","begin":[501,4],"end":[512,5]},"visibility":"public","docs":"Returns the variant of the UUID structure.\n\nThis determines the interpretation of the structure of the UUID.\nThis method simply reads the value of the variant byte. It doesn't\nvalidate the rest of the UUID as conforming to that variant.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::{Uuid, Variant};\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"02f09a3f-1624-3b1d-8409-44eff7708208\")?;\n\nassert_eq!(Variant::RFC4122, my_uuid.get_variant());\n# Ok(())\n# }\n```\n\n# References\n\n* [Variant in RFC4122](http://tools.ietf.org/html/rfc4122#section-4.1.1)","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:2640":{"id":"0:38:2640","crate_id":0,"name":"from_random_bytes","span":{"filename":"src/builder.rs","begin":[583,4],"end":[587,5]},"visibility":"public","docs":"Creates a `Builder` for a version 4 UUID using the supplied random bytes.\n\nThis method assumes the bytes are already sufficiently random, it will only\nset the appropriate bits for the UUID version and variant.\n\n# Examples\n\n```\n# use uuid::{Builder, Variant, Version};\n# let rng = || [\n#     70, 235, 208, 238, 14, 109, 67, 201, 185, 13, 204, 195, 90,\n# 145, 63, 62,\n# ];\nlet random_bytes = rng();\nlet uuid = Builder::from_random_bytes(random_bytes).into_uuid();\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["random_bytes",{"resolved_path":{"name":"Bytes","id":"0:254:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3424-0:291:1935":{"id":"b:1:3424-0:291:1935","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1935","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3426:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2589-0:413:2195":{"id":"b:1:2589-0:413:2195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2592:135","1:2593:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:587":{"id":"0:587","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,29],"end":[298,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2337:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:588:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:311:667":{"id":"0:311:667","crate_id":0,"name":"eq","span":{"filename":"src/error.rs","begin":[4,33],"end":[4,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8670:3497-0:291:1935":{"id":"a:1:8670:3497-0:291:1935","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8670:3497","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1935","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:384:468":{"id":"0:384:468","crate_id":0,"name":"cmp","span":{"filename":"src/fmt.rs","begin":[68,48],"end":[68,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30922:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:249-0:550:1942":{"id":"a:1:2788:249-0:550:1942","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:605":{"id":"0:605","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,29],"end":[329,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2337:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:606:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:177:2928":{"id":"0:177:2928","crate_id":0,"name":"encode_lower","span":{"filename":"src/fmt.rs","begin":[455,4],"end":[457,5]},"visibility":"public","docs":"Writes the [`Uuid`] as a lower-case hyphenated string surrounded by\nbraces to `buffer`, and returns the subslice of the buffer that contains\nthe encoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936DA01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.braced()\n            .encode_lower(&mut Uuid::encode_buffer()),\n        \"{936da01f-9abd-4d9d-80c7-02af85c822a8}\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 40];\n    uuid.braced().encode_lower(&mut buf);\n    assert_eq!(\n        &buf as &[_],\n        b\"{936da01f-9abd-4d9d-80c7-02af85c822a8}!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3424-0:589:1966":{"id":"b:1:3424-0:589:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3426:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2788:249-0:413:2195":{"id":"a:1:2788:249-0:413:2195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:606:667":{"id":"0:606:667","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[329,29],"end":[329,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:469":{"id":"0:469","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:9635:2850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:470:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:396":{"id":"0:396","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,22],"end":[74,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:397:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:33:2242":{"id":"0:33:2242","crate_id":0,"name":"from_bytes","span":{"filename":"src/builder.rs","begin":[517,4],"end":[519,5]},"visibility":"public","docs":"Creates a `Builder` using the supplied bytes.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Builder::from_bytes(bytes).into_uuid();\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"resolved_path":{"name":"Bytes","id":"0:254:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:2649":{"id":"0:40:2649","crate_id":0,"name":"from_sorted_rfc4122_timestamp","span":{"filename":"src/builder.rs","begin":[602,4],"end":[610,5]},"visibility":"public","docs":"Creates a `Builder` for a version 6 UUID using the supplied timestamp and node ID.\n\nThis method will encode the ticks, counter, and node ID in a sortable UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ticks",{"primitive":"u64"}],["counter",{"primitive":"u16"}],["node_id",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"6"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:725":{"id":"0:69:725","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[132,4],"end":[163,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:249-0:296:135":{"id":"a:1:2788:249-0:296:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:388":{"id":"0:388","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,64],"end":[68,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","lt","le","ge"],"trait":{"name":"PartialOrd","id":"1:2379:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:389:1138"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:599":{"id":"0:599","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,9],"end":[329,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:600:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2583-0:367:2855":{"id":"b:1:2583-0:367:2855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:507":{"id":"0:507","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:508:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[38,0],"end":[133,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:88:2306","0:89:2757","0:90:2768"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:480":{"id":"0:480","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:9637:2852","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:481:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:262:2061":{"id":"0:262:2061","crate_id":0,"name":"get_version_num","span":{"filename":"src/lib.rs","begin":[536,4],"end":[538,5]},"visibility":"public","docs":"Returns the version number of the UUID.\n\nThis represents the algorithm used to generate the value.\nThis method is the future-proof alternative to [`Uuid::get_version`].\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"02f09a3f-1624-3b1d-8409-44eff7708208\")?;\n\nassert_eq!(3, my_uuid.get_version_num());\n# Ok(())\n# }\n```\n\n# References\n\n* [Version in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3)","links":{"`Uuid::get_version`":"0:263:2070"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12509:33444":{"id":"1:12509:33444","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:517":{"id":"0:517","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:518:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:620:468":{"id":"0:620:468","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[437,32],"end":[437,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30922:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:2936":{"id":"0:188:2936","crate_id":0,"name":"encode_upper","span":{"filename":"src/fmt.rs","begin":[649,4],"end":[651,5]},"visibility":"public","docs":"Writes the [`Uuid`] as an upper-case simple string to `buffer`,\nand returns the subslice of the buffer that contains the encoded UUID.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936da01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.simple().encode_upper(&mut Uuid::encode_buffer()),\n        \"936DA01F9ABD4D9D80C702AF85C822A8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 36];\n    assert_eq!(\n        uuid.simple().encode_upper(&mut buf),\n        \"936DA01F9ABD4D9D80C702AF85C822A8\"\n    );\n    assert_eq!(\n        &buf as &[_],\n        b\"936DA01F9ABD4D9D80C702AF85C822A8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:472":{"id":"0:472","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:9637:2852","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:473:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:226:1918":{"id":"0:226:1918","crate_id":0,"name":"ClockSequence","span":{"filename":"src/timestamp.rs","begin":[333,0],"end":[341,1]},"visibility":"public","docs":"A counter that can be used by version 1 and version 6 UUIDs to support\nthe uniqueness of timestamps.\n\n# References\n\n* [Clock Sequence in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.5)","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:227:210","0:228:3048"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:236","0:229"]}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/builder.rs","begin":[46,9],"end":[46,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1935","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5537:9719":{"id":"5:5537:9719","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7493:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[943,0],"end":[947,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"std::vec::Vec","id":"5:6918:276","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"items":["0:287:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2583-0:540:1917":{"id":"b:1:2583-0:540:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:49:2354":{"id":"0:49:2354","crate_id":0,"name":"from_fields_le","span":{"filename":"src/builder.rs","begin":[768,4],"end":[770,5]},"visibility":"public","docs":"Creates a `Builder` from four field values.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet d1 = 0xa1a2a3a4;\nlet d2 = 0xb1b2;\nlet d3 = 0xc1c2;\nlet d4 = [0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8];\n\nlet uuid = Builder::from_fields_le(d1, d2, d3, &d4).into_uuid();\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\"\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d1",{"primitive":"u32"}],["d2",{"primitive":"u16"}],["d3",{"primitive":"u16"}],["d4",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2845:3344-0:550:1942":{"id":"a:1:2845:3344-0:550:1942","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2845:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:477":{"id":"0:477","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:9635:2850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:478:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2845:3344-0:523:1919":{"id":"a:1:2845:3344-0:523:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2845:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:419":{"id":"0:419","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,22],"end":[80,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:420:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:232:210":{"id":"0:232:210","crate_id":0,"name":"Output","span":{"filename":"src/timestamp.rs","begin":[344,4],"end":[344,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"ClockSequence","id":"0:226:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:263:2070":{"id":"0:263:2070","crate_id":0,"name":"get_version","span":{"filename":"src/lib.rs","begin":[566,4],"end":[580,5]},"visibility":"public","docs":"Returns the version of the UUID.\n\nThis represents the algorithm used to generate the value.\nIf the version field doesn't contain a recognized version then `None`\nis returned. If you're trying to read the version for a future extension\nyou can also use [`Uuid::get_version_num`] to unconditionally return a\nnumber. Future extensions may start to return `Some` once they're\nstandardized and supported.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::{Uuid, Version};\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"02f09a3f-1624-3b1d-8409-44eff7708208\")?;\n\nassert_eq!(Some(Version::Md5), my_uuid.get_version());\n# Ok(())\n# }\n```\n\n# References\n\n* [Version in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3)","links":{"`Uuid::get_version_num`":"0:262:2061"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41686:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:182:2293":{"id":"0:182:2293","crate_id":0,"name":"into_uuid","span":{"filename":"src/fmt.rs","begin":[534,4],"end":[536,5]},"visibility":"public","docs":"Consumes the [`Braced`], returning the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet braced = Uuid::nil().braced();\nassert_eq!(braced.into_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2018","`Braced`":"0:436:2863"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2275:2849":{"id":"1:2275:2849","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2589-0:436:2863":{"id":"b:1:2589-0:436:2863","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2592:135","1:2593:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:515":{"id":"0:515","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:516:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5793-0:367:2855":{"id":"b:5:5793-0:367:2855","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5791:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2855","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5795:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:138:2871":{"id":"0:138:2871","crate_id":0,"name":"as_urn","span":{"filename":"src/fmt.rs","begin":[125,4],"end":[128,5]},"visibility":"public","docs":"Get a borrowed [`Urn`] formatter.","links":{"`Urn`":"0:413:2195"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Urn","id":"0:413:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:505":{"id":"0:505","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:506:2849"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2583-0:296:135":{"id":"b:1:2583-0:296:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:572:1958":{"id":"0:572:1958","crate_id":0,"name":"SortRand","span":{"filename":"src/lib.rs","begin":[317,4],"end":[317,16]},"visibility":"default","docs":"Version 7: Timestamp and random.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"7","value":"7"}}}},"0:601":{"id":"0:601","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,16],"end":[329,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2800:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:167:2898":{"id":"0:167:2898","crate_id":0,"name":"from_uuid","span":{"filename":"src/fmt.rs","begin":[259,4],"end":[261,5]},"visibility":"public","docs":"Creates a [`Hyphenated`] from a [`Uuid`].\n\n[`Uuid`]: ../struct.Uuid.html\n[`Hyphenated`]: struct.Hyphenated.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2583-0:550:1942":{"id":"b:1:2583-0:550:1942","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:420:725":{"id":"0:420:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[80,22],"end":[80,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:2121":{"id":"0:270:2121","crate_id":0,"name":"as_u128","span":{"filename":"src/lib.rs","begin":[700,4],"end":[702,5]},"visibility":"public","docs":"Returns a 128bit value containing the value.\n\nThe bytes in the UUID will be packed directly into a `u128`.\n\n# Examples\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.as_u128(),\n    0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8,\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:619":{"id":"0:619","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,32],"end":[437,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"1:2373:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:620:468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:125:752":{"id":"0:125:752","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[37,4],"end":[39,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:607:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:436:2863":{"id":"b:1:2594-0:436:2863","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2597:135","1:2598:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2273-0:291:1935":{"id":"b:1:2273-0:291:1935","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1935","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2275:2849"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:538:789":{"id":"0:538:789","crate_id":0,"name":"hash","span":{"filename":"src/timestamp.rs","begin":[40,44],"end":[40,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9848:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12517:348":{"id":"1:12517:348","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12046:1650"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:7722:5758":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:10462:3338":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:5743:5821":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:9753:8204":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:9489:34699":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:40157:7811":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"6:6934:7322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:44247:7930":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:687:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:10789:22034":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:13711:5466":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:4224:8420":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"4:2346:3838":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:12214:3755":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:9913:8207":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:47509:8016":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:30552:26151":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:4549:6708":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:9883:3632":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:2656:8409":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:21561:15204":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:4473:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:3362:7851":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"4:2194:136":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:3046:3345":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:915:8353":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:2788:5743":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:1773:3866":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:41474:9734":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:2550:78":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"11:992:6006":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:10508:4879":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:8868:7489":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:21161:14871":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"4:4733:15256":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:4144:15265":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:5963:8275":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"4:11231:162":{"crate_id":4,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"1:40477:7836":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:5816:5831":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"11:2334:3338":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:40131:3766":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:2943:9629":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"4:7709:15143":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:10532:8412":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:44367:7935":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:42119:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"11:860:8360":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:43931:3760":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:6318:5892":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:475:2704":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:4651:9672":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:2900:9623":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:7289:3339":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:0:3248":{"crate_id":17,"path":["object"],"kind":"module"},"16:6696:5946":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:12791:5204":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:1073:8368":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:7088:9716":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"6:5068:6925":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:5867:6996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:10937:8443":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"14:7:8349":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:1376:98":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:12971:5249":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:4543:6705":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:11281:8516":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:14297:5634":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"4:8222:8455":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:2641:135":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:4418:4604":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:46263:7973":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:9580:238":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"17:13025:5256":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"10:0:3242":{"crate_id":10,"path":["adler"],"kind":"module"},"1:22427:7593":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:2872:6016":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:46741:7991":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:41737:174":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:2185:3848":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:42990:7895":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:6171:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:3065:4731":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:11248:8515":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:12025:5055":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11273:4953":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"4:8196:7844":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:2183:3847":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:10037:4853":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:1651:7539":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"16:5696:21866":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"4:7681:3942":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"11:1869:6283":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:9351:4839":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"11:2085:8364":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"4:10529:8410":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"4:11031:4590":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:6918:276":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"4:8133:4724":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"17:9446:8199":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:14283:5628":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:41762:3339":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:9637:2852":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:119:15461":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:12831:5208":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:2150:21992":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:6700:7209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:23072:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:21468:14869":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"4:10092:8477":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:4764:6771":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"4:10427:8460":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:4122:30359":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"11:841:8358":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:39409:9634":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:22973:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:13149:5283":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:40403:7827":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:11390:8270":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:2744:5741":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"4:11367:8439":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:45662:7952":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:13839:5493":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:43922:3762":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"4:2420:3183":{"crate_id":4,"path":["std","io"],"kind":"module"},"1:2682:3835":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"4:1542:3317":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:44148:7923":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:1838:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:10715:8250":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:40512:4707":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:7997:8449":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"4:2196:8406":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:4044:8500":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"11:2165:6286":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:654:15820":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"4:11609:7532":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:48157:8036":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:1525:8378":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:5941:7035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:8489:15308":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"4:641:8394":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"9:52:8946":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:13568:5422":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:8296:8455":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"4:4737:15259":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:4344:5783":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:48027:8030":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:5574:5750":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:39635:26176":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"4:1761:8400":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:557:8391":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"4:1041:6006":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:44280:3327":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:7342:34687":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:22253:7569":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:12725:5195":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:3764:5777":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:12791:148":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"10:36:6295":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:44395:7942":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:7782:6077":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12253:5103":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:2472:5730":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:44447:3952":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:20993:27122":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"18:719:4719":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"4:7891:126":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:2867:6019":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:2012:8191":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:10198:8218":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:21008:27242":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:46977:7995":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"11:1850:3317":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:9624:118":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:10530:3761":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:42734:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:5885:7009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:6514:4507":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"4:12044:805":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:46711:7990":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:11307:4957":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"4:1563:6284":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"14:221:6225":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"4:10470:4588":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"4:3830:8419":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:3261:145":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:482:4554":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:9456:34697":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:1963:209":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:6961:7328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:6666:7190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:4988:4531":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:6079:7110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:7668:7365":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"11:122:4497":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"11:2473:6289":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:6820:3991":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:2864:5746":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:14091:5562":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:261:8186":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:897:3337":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:504:4524":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:8896:21930":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:42968:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"11:680:3338":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:2616:8408":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:652:4686":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:14435:5669":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:6837:7261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:45856:7960":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:3600:5776":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:9143:3947":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"4:12028:1037":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"4:2374:15199":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"4:9044:29940":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:44226:9817":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:14014:5539":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:6569:5757":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:690:4713":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:14421:5667":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:824:4513":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:11236:4951":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"4:11048:4592":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:3830:5779":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"4:12049:1649":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:40526:7840":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:2209:8195":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:2931:6025":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:41665:7876":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:7462:6062":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:5760:21867":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:6666:4507":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:6915:5760":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:11163:4934":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:4461:6666":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:4179:7544":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:11981:7910":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:4294:8502":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:4871:8506":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:12712:5194":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:10293:4867":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:4557:5788":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10479:1942":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:7768:5756":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:21197:14873":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:13299:5307":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:42688:70":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:13967:5529":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12544:5169":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:47867:8021":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:6898:7303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:42743:70":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:2498:1934":{"crate_id":1,"path":["core","convert"],"kind":"module"},"6:1558:6481":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"4:8326:7218":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:4618:15245":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"4:837:3337":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:40496:7838":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:13547:5412":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:10950:8256":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:256:8185":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:30922:207":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"16:5798:5826":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:2574:5734":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:13576:5423":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:1650:6547":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:7911:8447":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:41804:3495":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:276:3328":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"4:4628:7229":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:13827:5490":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:4480:6679":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:8449:7892":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:7067:6003":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:7393:15155":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:12099:5068":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"4:8969:8463":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:41610:7874":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:30446:26148":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:40890:3940":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:10673:8243":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:41874:3337":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"16:2428:5728":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"11:2286:8364":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:44371:7936":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"4:11616:7532":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:40115:3768":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:47697:8018":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:10317:4872":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"4:7874:137":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:11760:2718":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:6485:5752":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:40394:7825":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"18:531:4691":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:7552:3347":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:32254:3529":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:41924:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:4908:6839":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:1644:640":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"17:13423:5309":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:39182:3341":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:9522:8200":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:2548:5733":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:43514:8533":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:8203:1939":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:43546:7562":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:4529:6697":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:42783:76":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:40051:7804":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:6332:5749":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:6059:7102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"0:597:148":{"crate_id":0,"path":["uuid","Variant","Future"],"kind":"variant"},"1:8669:3498":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:44032:9816":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:39268:7671":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:3050:138":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:9099:90":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:11813:4599":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:42438:3543":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:3214:6282":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"4:8282:15269":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:12225:3753":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:41831:238":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:4693:15297":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:1259:6006":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:10638:4892":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:5403:4830":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:7660:6073":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"11:1687:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:7645:7359":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:32153:8521":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:44237:7926":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:6927:7319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"11:2467:6288":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"4:3663:15239":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:14523:5691":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:5739:8430":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:2942:135":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"5:5372:3757":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"4:11194:3100":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:6401:5751":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:13877:5507":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:1184:8190":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"0:0:2270":{"crate_id":0,"path":["uuid"],"kind":"module"},"16:7474:8336":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:7518:3319":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:9848:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"16:7884:21878":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:11762:5000":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:4079:9655":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"4:6976:9227":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:7581:128":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:1596:6505":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"4:10983:7488":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:2596:5735":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:9791:34695":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:0:538":{"crate_id":1,"path":["core"],"kind":"module"},"4:9464:136":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"0:557:1948":{"crate_id":0,"path":["uuid","Version","Dce"],"kind":"variant"},"17:10562:4883":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:6101:4531":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"9:393:20860":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:2795:3111":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:22029:15204":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:4462:15270":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:5104:6947":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"4:11385:7528":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:2670:5738":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:11382:4966":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:46665:7989":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:5328:4507":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:3235:8412":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:6091:7547":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:5075:6928":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:11112:8265":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:9639:218":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:42197:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:45917:7962":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:8348:7461":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:1797:8401":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:12998:113":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"6:6114:7124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:2380:5726":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"11:1842:3337":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:25921:279":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:44212:7925":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:6943:7325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"11:2394:3985":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:6107:7123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:42445:3542":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:21592:14875":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:13086:5265":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:11296:4955":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:12306:5117":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:10398:8228":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:9853:21946":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"18:644:4686":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:46187:7971":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:12185:5084":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:14461:5678":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:48095:8034":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:489:6381":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:40435:7832":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:7792:21877":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:6901:5759":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:3173:3337":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:10094:8476":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:41587:26146":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:7902:7412":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:3315:5774":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:2848:3526":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"16:7360:34688":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:5088:5804":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11024:4932":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"4:8277:7459":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:44422:129":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"11:1127:8367":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"4:8304:7460":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:12423:5145":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:7381:3329":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:4506:6689":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:11711:4957":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:2969:21007":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:43198:7898":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:9094:83":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:40412:7828":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"4:7372:32796":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"17:13724:5471":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:4814:6795":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:1064:8364":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:21815:14880":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"16:8072:6127":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:10098:8216":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:39343:227":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:4870:6824":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:6083:20978":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:9065:7497":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:10604:4887":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"9:357:20874":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:2526:5732":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:2644:5737":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:8281:6145":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:6017:21868":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:5044:8423":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:8714:21925":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:1913:16812":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:4595:6731":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:2951:9631":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:21025:27237":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:6159:7138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:43770:3777":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:10777:7513":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:6261:8309":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:10140:21964":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"16:7513:6066":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:5897:7013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:6687:5945":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:21566:14866":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:4585:5789":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:21211:3847":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"4:12042:803":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"17:11245:4990":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:22742:197":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:42080:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:14537:5694":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:7258:4724":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:3232:5716":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"18:96:25891":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:11730:9772":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:46484:7980":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:22285:7574":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:400:8187":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:6531:5917":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"4:6533:8437":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:43956:3767":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:40334:8525":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:7539:144":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:14043:5547":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:9922:8208":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:10088:4558":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"4:7839:8445":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"17:9575:34696":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:21330:14874":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:5430:1544":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"1:44054:7913":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:10772:4895":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:2850:112":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:5111:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:7284:3494":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:1759:8399":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"17:9763:34692":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:10335:32489":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:9599:142":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:12766:5202":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:6361:5895":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6742:5958":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:23006:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:5982:7053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:8167:8348":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:14347:5646":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:5861:3317":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:5928:7026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:44659:7949":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:12485:5161":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:2968:33414":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:11473:8417":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:9581:2269":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:22874:201":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:10739:8252":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:6275:7550":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:21297:14879":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:10060:4855":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:4986:5801":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7041:5997":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:1710:6578":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:0:3247":{"crate_id":16,"path":["gimli"],"kind":"module"},"4:4031:15247":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"4:946:8360":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:7577:3985":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:12672:4900":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:35:3984":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:42951:7891":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:5964:4573":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:12960:5248":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"4:7655:1935":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:12050:1646":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"1:21023:27239":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"4:6139:4569":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:11743:4997":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:3004:9639":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"4:5564:15313":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"16:5995:5709":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:8195:6138":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:4032:8499":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:43798:3771":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:1591:6503":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:10266:8223":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"4:9192:7501":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:20978:27122":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:40123:3767":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:12853:216":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"16:4835:5796":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:3206:6284":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:47011:7996":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"11:357:4499":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"14:165:20943":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"4:6459:4577":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"0:551:1944":{"crate_id":0,"path":["uuid","Version","Nil"],"kind":"variant"},"17:12173:5081":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:4939:1104":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:13915:5515":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:11352:4962":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"4:11379:7527":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:12075:5064":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:10279:8224":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:6813:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4789:6782":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:44403:7518":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:434:4783":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:3583:3337":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:7102:21874":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:5049:5803":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"4:724:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:10457:8237":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:6830:3992":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:45732:7955":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:7690:179":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"0:413:2195":{"crate_id":0,"path":["uuid","fmt","Urn"],"kind":"struct"},"17:12155:5080":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:30318:3980":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:7388:7347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:32142:8444":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"17:13817:5489":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:10441:8232":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:9633:3543":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"4:3484:32540":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:9138:4833":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:13950:5521":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"18:590:4697":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:43965:3768":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:2556:143":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:22398:26175":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:4791:4563":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:46087:7968":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:7736:6075":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"11:822:8355":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:7635:15204":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:32106:3309":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:41814:9742":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:11338:22059":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:1935:3869":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:2630:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:13114:5271":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:4666:6751":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:9868:4848":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:47981:8026":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"4:10759:7507":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:3722:7374":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:9090:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:4388:6620":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"4:7128:30360":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:6600:21871":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:40883:7849":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:9426:3560":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:3422:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"5:3671:4507":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:12040:699":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:44069:7919":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:12751:5199":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:43912:3770":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:536:5706":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:13740:5474":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:44671:6294":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:10448:6286":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:7318:4566":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"5:5791:263":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:4899:15295":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:8002:9724":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"4:2940:238":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"14:0:3245":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:10469:4875":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"11:1036:8364":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:45786:7957":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:21810:14872":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:21400:15204":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:13041:5258":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:22775:198":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"7:78:20852":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:3418:7456":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:5374:8424":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:22841:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:13229:5291":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"4:7730:15175":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"1:46041:7967":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:5419:4831":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:40093:7808":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:1691:6571":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:4949:5800":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:7243:7393":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:6120:7127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:12197:5085":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:2907:4562":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"4:1744:664":{"crate_id":4,"path":["std","env"],"kind":"module"},"5:7426:7395":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:42761:135":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:40063:26171":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:5004:6898":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:4488:6681":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:1664:6558":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:43902:3769":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"4:860:3339":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"8:0:3240":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:2800:115":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"5:7482:4540":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:5123:6956":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:7998:3340":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:582:4827":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:8660:21911":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:11536:4985":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"0:566:1954":{"crate_id":0,"path":["uuid","Version","Sha1"],"kind":"variant"},"6:4375:6610":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:4889:5798":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"11:2058:6006":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:6279:5889":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:10487:3776":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"16:2618:5736":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"18:614:34701":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:2796:3521":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:13974:5530":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"4:2594:4558":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:1682:6565":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:11587:4989":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:47161:7997":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:11328:4960":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:3053:139":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:46901:7993":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:45939:7963":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"11:868:8361":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:21462:14867":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:6063:4567":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"4:6637:245":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:14222:5621":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:40079:7807":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:6913:7310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:14164:5579":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:11846:5011":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:6583:5921":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:2921:9627":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:14500:5687":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:10727:8251":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:14069:5557":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:12532:5167":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"18:636:4709":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:45838:7959":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:22709:200":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:6741:7236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:4376:8422":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"0:590:1968":{"crate_id":0,"path":["uuid","Variant","NCS"],"kind":"variant"},"4:12045:801":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"0:108:725":{"crate_id":0,"path":["uuid","fmt"],"kind":"module"},"1:7506:9725":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:6189:5887":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:6071:7109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:7440:26150":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:5661:5814":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:5997:15381":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:44399:7943":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:11174:22058":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"4:646:15140":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:12998:5252":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11952:5038":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:11125:8266":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:4449:6661":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:3267:9636":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:2270:102":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:4912:861":{"crate_id":1,"path":["core","iter"],"kind":"module"},"4:12047:1647":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:39462:7675":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:10438:3337":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:11789:5001":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:45754:7956":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:7598:7349":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"11:1010:8362":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"4:11995:8966":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"4:3162:30242":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:41686:205":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"6:4854:6817":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"4:5388:8426":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"9:507:6355":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"0:607:2018":{"crate_id":0,"path":["uuid","Uuid"],"kind":"struct"},"1:2173:641":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:44260:3781":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"11:1145:8368":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:6987:4553":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"18:0:3249":{"crate_id":18,"path":["memchr"],"kind":"module"},"13:0:3239":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:4160:15267":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:7090:6005":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:2799:256":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:43435:7557":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:10280:15204":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:46285:7974":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"11:1882:6285":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:8979:21933":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:8288:8458":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:4761:725":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"4:10764:7406":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"15:0:3246":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:880:4515":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:12016:3761":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:40914:4612":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:39365:226":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:6467:5908":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:1428:3338":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:3232:8196":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:44375:7937":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"4:9271:8402":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:1140:33439":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:0:885":{"crate_id":6,"path":["libc"],"kind":"module"},"17:13779:5483":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"4:9010:8469":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"9:486:20858":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"11:2461:6287":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"11:1855:3985":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"4:12000:15145":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:7862:6089":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:40536:7841":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:2845:3344":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:11322:3864":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:6012:7076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:234:238":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:12514:5166":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:6156:5882":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:7493:255":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"4:5439:111":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:46117:7969":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"4:8007:2607":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:12137:5072":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"4:10575:3942":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:5982:5852":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:4428:4533":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:5648:8273":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:21344:3847":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:40365:7821":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:6456:5907":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"0:540:1917":{"crate_id":0,"path":["uuid","timestamp","context","NoContext"],"kind":"struct"},"1:22361:26152":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:2364:15194":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"6:4710:6755":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:11513:8418":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"11:389:4501":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:6499:5769":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"18:681:4710":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:14025:5543":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:5727:5819":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:12035:1544":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:12124:5071":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"4:10799:137":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"4:850:3338":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:10680:8512":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:7371:7337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:4630:7231":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:507:6389":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:4222:3550":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:6100:7122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6781:7238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:6335:15335":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:12847:5213":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:5818:4565":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:6682:7202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:2798:257":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"14:40:5035":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:40042:7803":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:1820:8402":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:10754:7505":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"4:4814:15255":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:7037:25934":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"14:187:20948":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:3565:8198":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:40036:3767":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:9973:8212":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:8854:8462":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:6711:7214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:4350:277":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:11491:4983":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"0:436:2863":{"crate_id":0,"path":["uuid","fmt","Braced"],"kind":"struct"},"4:7919:8448":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"11:2479:34665":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13488:5360":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:1764:7540":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"7:31:20845":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"0:595:1972":{"crate_id":0,"path":["uuid","Variant","Microsoft"],"kind":"variant"},"4:8887:7490":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:495:6384":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:7391:21875":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:3531:3317":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"16:3032:5771":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:9618:34693":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:4833:29476":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:11317:4959":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"4:8792:8460":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"16:7597:34684":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:7006:8314":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:6243:8301":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:2884:6020":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:22031:14868":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:4440:6656":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"0:560:1950":{"crate_id":0,"path":["uuid","Version","Md5"],"kind":"variant"},"4:8916:15331":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:10930:4926":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:3503:15222":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"11:785:3317":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11911:5034":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:4365:4533":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:2406:5727":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:47821:8020":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:6169:7141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"4:3276:8415":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:4364:6602":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:1537:6466":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:11287:4593":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:527:6406":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:10686:8246":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:43698:3780":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:41899:207":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:7365:7335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:5085:6933":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"4:11602:30313":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"4:3973:15243":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:2133:4524":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"18:699:4714":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:7708:5768":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:2203:15186":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:46823:7992":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:13803:5488":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:12877:5232":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:8846:3337":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:14127:5571":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:2512:8407":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:43501:7560":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:5690:7546":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:6419:3940":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"4:7591:4585":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:5634:5810":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"4:3728:8418":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"0:554:1946":{"crate_id":0,"path":["uuid","Version","Mac"],"kind":"variant"},"6:5829:6969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:6801:3990":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:11688:21938":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:10024:8203":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"0:589:1966":{"crate_id":0,"path":["uuid","Variant"],"kind":"enum"},"1:47970:8025":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:3022:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:4676:6752":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:4808:6793":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:6248:7167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:2896:9624":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:6268:34690":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:45957:7964":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"11:0:3243":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:40455:7834":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:6136:7132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:8039:26969":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:10721:3778":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:538:4694":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:5830:5832":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:3301:9641":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:4841:6812":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:48080:8033":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:48001:8028":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:5945:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:9897:21947":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:8779:3326":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:894:3317":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:784:4510":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:5955:7046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"18:727:4722":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:12226:5094":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"4:9095:246":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:13072:5263":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13102:5269":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"4:363:8390":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:10005:4614":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:42158:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:4632:7233":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:7677:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"11:772:6281":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:11282:4954":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:7927:7374":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:7054:6000":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10589:4885":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:41963:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"15:394:20970":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"4:7834:4776":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:44459:9823":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:2960:9633":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:3185:33400":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:13009:4569":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"17:12044:5060":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:41440:7858":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:3049:21008":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:43752:3778":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:2964:7381":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:5612:5755":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:1516:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:12474:5158":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:20965:3516":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:533:6409":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:39323:224":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:6204:8282":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:7692:7370":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:9373:4840":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:4878:6828":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"18:624:34700":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:11887:5020":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:12686:5191":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:548:6418":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:11138:8267":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"0:572:1958":{"crate_id":0,"path":["uuid","Version","SortRand"],"kind":"variant"},"1:42277:96":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:43947:3766":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"7:0:1696":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:2510:15204":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:2888:3312":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:9702:8203":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:43202:7899":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"4:12034:1512":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"6:555:6421":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:12599:5178":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:6536:15326":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:46139:7970":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:3725:8417":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"0:575:1960":{"crate_id":0,"path":["uuid","Version","Custom"],"kind":"variant"},"16:7613:8343":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:30358:7602":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:6263:7178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:4738:6757":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:9071:4830":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:40905:7851":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:12033:346":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"16:6792:5972":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:40426:7831":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"4:6155:4572":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:1521:6458":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:2907:5748":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:14470:5682":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:5017:5802":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"4:4021:15246":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:8050:6126":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:1681:1193":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:12555:5170":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:7128:7494":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:40214:26150":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12912:5243":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:5632:7545":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:1778:3985":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"4:5625:4573":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:3987:15245":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"4:7861:7408":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:14002:5538":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"18:574:4686":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"0:549:2270":{"crate_id":0,"path":["uuid","uuid"],"kind":"macro"},"10:44:6296":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:7639:7358":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:5138:4539":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"4:3475:2269":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"4:4484:15271":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:13011:5253":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:2225:34655":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:12051:855":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"16:3888:5780":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:10367:8225":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:6376:21870":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:2284:20979":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:5140:6960":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:12646:5184":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:2463:7385":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:13982:5531":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:11192:4939":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:11905:7905":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:4447:3530":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:43536:8534":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:5980:232":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:22321:26145":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:1558:4531":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:2245:7384":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:40183:7815":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:42706:116":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:5023:6906":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4947:6859":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:2810:3522":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:10963:4929":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:47961:8024":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:1507:6453":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:6893:5979":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:6973:9729":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:43454:7559":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:10290:251":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:9017:8470":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:1864:1914":{"crate_id":4,"path":["std","error"],"kind":"module"},"16:2881:5747":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:41457:7860":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:13047:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:32160:3551":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"6:6804:7245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:22336:7580":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"4:8209:3776":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"6:7616:7352":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:4351:6593":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:4998:6895":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:2810:5744":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"11:344:34666":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:21209:26594":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"5:2172:7378":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:4830:6804":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"4:10735:8485":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:2450:5729":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:46507:7981":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:7507:3318":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:10152:8478":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:40384:7824":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:1570:6489":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:44387:7940":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:2379:213":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4893:6832":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5146:6962":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"9:450:20859":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:3085:3324":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:46233:7972":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:22460:9570":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:9391:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"6:1576:6491":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:10751:4893":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"4:4957:3486":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"6:588:6439":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"4:3159:30240":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:910:8369":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:2692:7388":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:940:8358":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"18:515:4689":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:4812:426":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:3246:9635":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:40138:9678":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"0:234:531":{"crate_id":0,"path":["uuid","timestamp","context"],"kind":"module"},"17:14515:5688":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:4774:5794":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:10371:8226":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"11:1562:8371":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:11720:21939":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11873:5019":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:1444:3339":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:6187:8435":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:9532:34694":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:6587:3339":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:48118:8035":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:4166:4531":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"4:3197:8411":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"18:599:34702":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:41623:7458":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:10187:4864":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:6228:7153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:13990:5532":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:6872:3580":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:5435:5808":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"4:12011:30301":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:43648:3776":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:40287:8523":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"16:2933:21006":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:10073:8401":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:123:15462":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"15:288:20960":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:10981:4867":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:12433:118":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:3797:5778":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:7633:7357":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"14:202:3316":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:41882:3338":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:46331:7976":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:6889:7300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:12200:3335":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:9208:4835":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:1413:3337":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:7544:6068":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:6929:5981":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:42678:7881":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"4:10318:111":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:11935:5035":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:42238:89":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:13102:3982":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"17:14111:5568":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:43852:3773":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:1703:6575":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:6086:7111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:14034:5546":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"4:5121:215":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"11:829:15156":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:44684:7950":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"4:11310:8490":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11640:4939":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13175:5285":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"4:1822:8403":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:14084:5561":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:9629:127":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:8216:3769":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"18:564:4696":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:4968:6874":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:3286:27039":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"11:693:3339":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:7469:7400":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:7523:6067":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"11:2238:6006":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:43618:3330":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"14:215:6223":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:42459:2852":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:43666:3775":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:12811:5207":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:42002:85":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"4:8531:7479":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:11450:4595":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:5052:6920":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"4:5746:8433":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:41890:3339":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"5:1674:4507":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:3570:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:46309:7975":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"11:427:34671":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"4:8900:15332":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"11:1051:20937":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:6960:8313":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"18:660:8180":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:5561:7139":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"16:6425:5904":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"4:3319:15230":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:21907:7566":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"11:2303:8374":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"4:588:15138":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"4:5233:214":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"16:2696:5739":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:6545:5919":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:40924:7852":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:10749:8513":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:2267:101":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:21159:15204":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"4:7746:8443":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:4556:6711":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:40197:105":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:9286:8968":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:9160:8473":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"11:1541:8370":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:5921:7022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:2037:7374":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:4884:6829":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:2337:212":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:10127:4857":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:9087:4831":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:10941:6352":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"4:1966:208":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:6280:4611":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"4:12041:806":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"4:9022:8471":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:10789:7407":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:4:1117":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"6:5891:7012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:4373:3551":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:10647:4971":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:8766:21926":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:22907:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:1475:6281":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:7534:5764":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"11:1092:8366":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:6269:7551":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"4:10965:30295":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:2842:3524":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:4401:6630":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:12374:5121":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"4:9124:3100":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"6:1528:6461":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:9960:8211":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:4004:3317":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:629:8375":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:32146:6060":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"11:1876:6284":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:5484:4531":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:6798:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:12048:1648":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"17:13759:5475":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"4:3493:15202":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:12271:9810":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:582:3516":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:4932:6853":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:8687:21924":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:45976:7965":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"11:298:6274":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"4:11042:4591":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:47619:8017":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:1632:6535":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:9643:3545":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:2373:206":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:8381:3490":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:12053:1253":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"11:2074:8362":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:7343:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:8154:8345":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:2342:132":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"4:5773:8434":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:4035:15248":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:4434:6654":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:11152:8268":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:11508:21937":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:11449:21936":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:3332:3985":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:22:739":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:8270:7458":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:5974:7048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:4641:5791":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:4989:6889":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:11394:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:1604:6510":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:7897:7409":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:44642:181":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:8798:210":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"6:1734:6587":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:13891:5510":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:0:320":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:10431:8231":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"4:11590:7531":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"4:6242:4573":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"4:10950:8429":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:678:262":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:2937:6026":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:40374:7822":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:5992:7060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:3089:3325":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:12043:804":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"6:580:6434":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"11:796:3985":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"4:8186:7819":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:9661:34698":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12466:5156":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:12209:5086":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:868:6280":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:7543:166":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:609:8179":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:40230:7817":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:5033:6912":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:40876:7848":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:5117:6953":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:4806:5795":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:42452:2850":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:11063:8261":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:5130:6959":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:14479:5684":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:3959:15242":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:929:15156":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:12046:1650":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:7502:9726":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:11087:8263":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:8980:8465":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:5384:21865":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:5152:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"12:0:3244":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11992:5049":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:7503:5763":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:12946:5246":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:43634:1939":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:10411:8229":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:45816:7958":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:21585:15204":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:44578:239":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13555:5415":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:7532:8493":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"18:766:25902":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"4:7019:4581":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"13:226:6272":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:13677:5463":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:10576:4884":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"0:523:1919":{"crate_id":0,"path":["uuid","timestamp","Timestamp"],"kind":"struct"},"6:1718:6582":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:3596:3338":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:44100:7922":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:22808:199":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:8115:6133":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:9608:8202":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:7657:7361":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:8399:7471":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:30950:3516":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"11:483:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:14402:5662":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"11:666:3337":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:4745:5793":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:13668:5459":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:1514:6456":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:44083:7921":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:13163:5284":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:0:482":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:2348:15189":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:9565:8201":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:7492:6063":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"18:113:25892":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"18:736:25901":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:3180:6283":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:2862:3948":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:45642:7951":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:14146:5576":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:4847:6815":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:14336:5645":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:21919:27126":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:4849:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:43375:8530":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:3338:9642":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"18:481:4684":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:6560:4496":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"16:2504:5731":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"9:330:6333":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:47905:8022":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18:507:4686":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"4:1568:6285":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:4053:5782":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:4616:6740":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4428:6653":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:4824:6801":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:4977:6880":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:21253:14878":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:9781:8205":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:2947:9630":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"11:759:6280":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:3195:8410":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:4417:5784":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:4776:6778":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:1120:34453":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:8795:21927":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"4:923:8355":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:2511:3310":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"11:1525:20938":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:9278:4837":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:43444:8531":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:40932:7854":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:3237:8413":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:1904:3831":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"16:6041:21869":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:5866:5839":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:22309:7578":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:6721:21872":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"9:237:7892":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"11:1846:3339":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:1013:4507":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:2961:3314":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:3056:140":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:22147:7567":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:10166:21965":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:14174:5584":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:21594:7564":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:10735:3777":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:30374:70":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"4:1407:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:7995:3320":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"0:205:3037":{"crate_id":0,"path":["uuid","timestamp","UUID_TICKS_BETWEEN_EPOCHS"],"kind":"constant"},"1:46355:7977":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:12030:1666":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"17:3441:8197":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:7255:3317":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:8233:15238":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"4:12054:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:12205:3326":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"4:9030:7494":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"4:6290:232":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:40676:7845":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:10103:4621":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:12238:5097":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:7521:4827":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:6962:4550":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:8595:21913":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:14317:5639":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:2321:5717":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:1546:6472":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:6386:5900":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"4:919:8354":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:46587:7982":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:22448:7597":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12087:5065":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:11474:4797":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:5044:6918":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:47990:8027":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:30352:3863":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"11:817:8369":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"4:904:3985":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"4:415:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:21460:15204":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:9173:4834":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:12039:697":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"0:226:1918":{"crate_id":0,"path":["uuid","timestamp","ClockSequence"],"kind":"trait"},"17:14379:5661":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:22940:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"4:8002:1960":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"4:4304:8421":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:4719:5792":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11075:8262":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:6868:7286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:261:4507":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:6047:7097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:8826:21928":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:7610:7351":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:13907:5513":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:3274:8414":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:11212:7520":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:22382:26168":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:1104:33438":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:5634:3990":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:7828:6085":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:43464:8532":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:6844:5974":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:49981:14882":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:41771:3494":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"11:2351:3339":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"0:203:1916":{"crate_id":0,"path":["uuid","timestamp"],"kind":"module"},"17:11359:22060":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:46406:7978":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:21416:14865":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"4:1875:3830":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"5:4076:3338":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:39387:228":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:10244:9126":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:7604:7350":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:2178:8192":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:149:4494":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:7702:7372":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:7694:5767":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:11262:4952":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"4:5075:8423":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:6128:7129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:2916:9626":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:43716:3779":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"9:177:8957":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:4236:3337":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:9631:3542":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"5:4395:4531":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"4:4562:15288":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:4698:6754":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:4363:4603":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:40103:7809":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:45887:7961":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:563:6426":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4755:6766":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"4:9105:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"0:390:2858":{"crate_id":0,"path":["uuid","fmt","Simple"],"kind":"struct"},"6:1697:6574":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:22344:7581":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:6589:15328":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:11618:4990":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"4:8322:8459":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:6879:5977":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:14057:5554":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:2904:9625":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:7305:7394":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:10384:8227":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:9651:4867":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13275:4957":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:3035:3342":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:4527:5787":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:2143:7376":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"9:0:3241":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:44621:8536":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:10642:3775":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:40356:7533":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:10241:4851":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:574:6431":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:8228:8457":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:10617:4888":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"5:4196:4531":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:7679:7366":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"18:521:25903":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"4:3981:15244":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:7275:33398":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:1275:8364":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:7556:7348":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:4497:5786":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6818:5973":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"4:8955:7493":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:43624:3764":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:1557:6283":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"4:8165:15203":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:32167:7667":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:1501:6450":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:7582:6069":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:43527:7561":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"4:7844:7406":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"11:1862:6282":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:42718:6104":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:2547:79":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:11548:4986":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"0:254:1939":{"crate_id":0,"path":["uuid","Bytes"],"kind":"type_alias"},"5:7226:3983":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"0:563:1952":{"crate_id":0,"path":["uuid","Version","Random"],"kind":"variant"},"4:357:8389":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:1304:8368":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:40307:8524":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:41823:217":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:39283:225":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:2289:110":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:11155:7487":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:12052:1706":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"5:7235:3339":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:569:6429":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:2853:3528":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"5:3144:99":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:44586:219":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"16:7621:21876":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"11:101:6273":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:43426:7556":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:9471:8445":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:1505:8354":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:12659:5187":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"14:160:8349":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:2962:34603":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:43592:3331":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"18:755:4728":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:5322:5806":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:10013:4867":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:1546:3985":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:12878:8519":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"15:327:8943":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"3:0:3238":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:1911:710":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"17:13189:5286":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:9641:3544":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11408:21935":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:8097:6130":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:4800:6789":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:9946:4851":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:10421:4775":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:9243:4836":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:2722:5740":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:5976:4539":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:7622:7353":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:7326:3339":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"11:731:8354":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:12220:3754":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:40202:7816":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:2909:6021":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"6:4745:6759":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:7651:7360":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:2563:269":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:39448:7674":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"16:7318:6043":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:10904:8253":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:5363:5807":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:10495:4877":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:12577:5177":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"9:426:20861":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:5009:6900":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"4:11175:7518":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"4:5424:8428":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:47367:8015":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:4578:6724":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"0:367:2855":{"crate_id":0,"path":["uuid","fmt","Hyphenated"],"kind":"struct"},"17:14077:5560":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:10607:8511":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:11816:5007":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:11942:7908":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:11352:7525":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:6753:5959":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:45686:7953":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:6889:4580":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"4:9100:247":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:7409:106":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:5859:6994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:5632:7401":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"11:2423:20933":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:9986:8213":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:2805:259":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"13:110:34675":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:12112:5070":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:10763:8514":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:2359:5725":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:13216:5290":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11216:4946":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:44175:7924":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:952:8361":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:48042:8031":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:4862:5797":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:8181:5770":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"4:3929:15240":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:4173:15268":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:44379:7938":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:8927:21931":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13694:5465":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:13852:5499":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:1496:6448":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:9888:3633":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:7265:4518":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:12984:5251":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:39299:222":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:42998:7896":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:9840:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:5572:4531":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"4:6350:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:4566:6718":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"11:2494:3329":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:9887:8206":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:5712:5816":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:48065:8032":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:2972:33413":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13612:5453":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:40314:7560":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"14:31:8349":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:30388:26159":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:4496:6683":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13287:5300":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:41754:3338":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"5:3219:33401":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:7572:4583":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"4:881:6281":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:4647:6750":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:43475:7900":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:10629:4891":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:1075:8189":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:10548:4882":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:1494:8353":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:44568:231":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"0:593:1970":{"crate_id":0,"path":["uuid","Variant","RFC4122"],"kind":"variant"},"4:10819:7453":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"4:10535:8414":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:8671:3496":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"11:324:6277":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:22200:7568":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:11304:7521":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"18:707:3755":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:10215:8221":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:12935:5244":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:7750:8444":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"17:9999:4820":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:3915:5781":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:2553:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"18:491:4685":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:41503:7867":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:501:6386":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:596:6444":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:13793:5487":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:4908:15296":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13203:5289":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:6764:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:8205:21879":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4516:6692":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:6819:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"11:703:8353":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:14449:5676":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:7456:7398":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:1535:3337":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:3183:223":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:11965:7909":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:9103:4832":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:12622:5183":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:3240:6285":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:10917:8254":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:9281:26934":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:483:6378":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12281:5113":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:10341:4874":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:14119:5569":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12063:5061":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4724:6756":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:9824:21945":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"4:2362:15193":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"4:8824:7487":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:5588:5753":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:4914:6842":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:12738:5197":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:1551:6282":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"0:578:1962":{"crate_id":0,"path":["uuid","Version","Max"],"kind":"variant"},"1:4148:8501":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:48016:8029":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:14356:5648":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:9004:21934":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4535:6700":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:62:15407":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"5:7297:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:43183:7897":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:5910:7014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:8932:15333":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:11972:5048":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:9052:21912":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"11:423:34670":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"0:569:1956":{"crate_id":0,"path":["uuid","Version","SortMac"],"kind":"variant"},"17:13898:5512":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:4860:6820":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:3436:8416":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:8974:113":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"11:1635:4503":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:43870:3774":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:10569:8510":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:40150:7810":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"4:12029:457":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"4:11141:7486":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:14309:5636":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:5301:127":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"17:12294:5114":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:1484:8369":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:11227:4950":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"11:2317:3337":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:42943:3635":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:9182:33026":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:39221:9640":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:10085:8215":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:10521:4880":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:7724:15144":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"4:4735:15258":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:4290:233":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:12008:5053":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"4:11978:8496":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:4056:107":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"4:6603:4578":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:41834:204":{"crate_id":1,"path":["core","result","Result","Ok"],"kind":"foreign_type"},"18:671:8184":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:7593:3986":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:13245:5293":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:4610:6738":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:12826:27974":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:4043:15250":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:7554:5765":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:504:8188":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:4603:6736":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4584:6727":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:8670:3497":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:3666:3339":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13136:5282":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:14157:5577":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:43606:3765":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:5905:5842":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"19:0:1134":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:10535:4881":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:4955:6864":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:41417:171":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:5015:6901":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:40464:7835":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:9635:2850":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:5939:5848":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:5121:5805":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:4613:5790":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:12779:5203":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:1466:6280":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:8547:7482":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"17:11099:8264":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:8153:7453":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:40343:7819":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:3923:15241":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"4:8558:7483":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:44629:7946":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:41646:7875":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"4:5493:8429":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"11:1072:34669":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:3156:32956":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:780:100":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:2892:3949":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:40444:7833":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:207:4506":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:12438:5149":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:5969:7047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"11:2260:8362":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:6415:5903":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:10071:4616":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:43556:8535":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:4686:6753":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:8849:21929":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:6346:8312":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:11368:4963":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"4:2199:3855":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:2788:249":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:41746:3337":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:46453:7979":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:12027:408":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:40666:7844":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:21482:7564":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:11167:30302":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"11:2487:6291":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:1639:6539":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:40690:7846":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:46947:7994":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:10699:8248":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:44383:7939":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:8239:6060":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:1750:3867":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:6352:5894":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"4:533:4555":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:40164:9679":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:13056:5262":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:10828:30296":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:47943:8023":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:6968:21873":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:13869:5504":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:10809:126":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:10662:8242":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:6468:3317":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:47759:8019":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:2051:8379":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:9968:7871":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"4:11534:8419":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:6718:7218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13923:5517":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:13686:5464":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:42959:3634":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"4:8838:7488":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:21006:27240":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:12032:1154":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:39441:8522":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:6691:7208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:7269:34689":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:7634:3346":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:22269:7570":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:8541:3337":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"18:80:25890":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:15:2239":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:0:1536":{"crate_id":4,"path":["std"],"kind":"module"},"1:2878:9622":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"4:6804:15334":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"15:306:20961":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:7851:7407":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"16:6944:34685":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:7636:7402":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:40244:9689":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"5:5376:3758":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"4:5618:232":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:41837:134":{"crate_id":1,"path":["core","result","Result","Err"],"kind":"foreign_type"},"1:4427:3552":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:6423:8436":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12268:5109":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:2926:9628":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:2766:5742":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:40277:4605":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:11746:8517":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:5673:5754":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"4:8862:3339":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:7651:8344":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"4:9476:4587":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:6513:5909":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"4:622:3832":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:23039:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:8134:6136":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:13260:5297":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:11049:8257":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:6222:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:3461:5775":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:2305:21005":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:9712:34691":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"11:2368:3317":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:12160:2744":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:3256:266":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:30091:9534":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"5:4034:4507":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:3273:9638":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:2339:5719":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:21383:14870":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"4:638:8392":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:42041:92":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:3737:8379":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:40899:7850":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:7436:5856":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:2832:5745":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:1055:8362":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"4:2580:4559":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:12699:5192":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:4921:5799":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:42316:8509":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:3655:4736":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:4455:6663":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"4:5408:8427":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"17:10113:8217":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:4628:6749":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:22434:7596":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:7334:3339":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:40487:7837":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:45708:7954":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10228:8222":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"0:550:1942":{"crate_id":0,"path":["uuid","Version"],"kind":"enum"},"4:8472:7474":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:11001:4931":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:13452:5329":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:4902:6838":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:3390:4531":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:2857:3311":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:12453:5154":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"4:12036:1631":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"16:4462:5785":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:43816:3772":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:4474:3553":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:8954:21932":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:2559:270":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:8810:7486":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"6:4783:6779":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:14101:5565":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:13633:5458":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:44391:7941":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:7568:5766":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:9329:1939":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:2955:9632":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:6658:7185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"4:8987:29704":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:23519:248":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:3960:4531":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:9934:8209":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"4:8142:7452":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"4:10837:30298":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:542:6415":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:7660:7403":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"4:11337:7524":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"4:4696:15270":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:14325:5640":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:4299:8503":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:4523:6695":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:12889:5234":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:14270:5622":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:1539:3339":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11574:4987":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"4:4152:15266":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:7015:5996":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:45994:7966":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11202:4941":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:11662:4992":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:42980:7892":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:12497:5163":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:1290:8362":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:6226:8297":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:1674:6564":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:14135:5572":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:12804:165":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:43940:3759":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:4922:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:3802:3985":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}