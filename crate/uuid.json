{"root":"0:0:2260","crate_version":"1.6.1","includes_private":false,"index":{"0:485":{"id":"0:485","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:9878:2838","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:486:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:120":{"id":"0:120","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[22,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9867:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:121:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:192":{"id":"0:192","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[682,0],"end":[830,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:193:2186","0:194:2887","0:195:2917","0:197:2925","0:199:2680","0:200:2283"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:610":{"id":"0:610","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,9],"end":[437,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:611:455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:188:2925":{"id":"0:188:2925","crate_id":0,"name":"encode_upper","span":{"filename":"src/fmt.rs","begin":[649,4],"end":[651,5]},"visibility":"public","docs":"Writes the [`Uuid`] as an upper-case simple string to `buffer`,\nand returns the subslice of the buffer that contains the encoded UUID.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936da01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.simple().encode_upper(&mut Uuid::encode_buffer()),\n        \"936DA01F9ABD4D9D80C702AF85C822A8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 36];\n    assert_eq!(\n        uuid.simple().encode_upper(&mut buf),\n        \"936DA01F9ABD4D9D80C702AF85C822A8\"\n    );\n    assert_eq!(\n        &buf as &[_],\n        b\"936DA01F9ABD4D9D80C702AF85C822A8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:380":{"id":"0:380","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,42],"end":[68,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10083:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:381:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:503":{"id":"0:503","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2695:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:504:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2949:253-0:291:1925":{"id":"a:1:2949:253-0:291:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:307:781":{"id":"0:307:781","crate_id":0,"name":"hash","span":{"filename":"src/error.rs","begin":[4,27],"end":[4,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10091:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:585:717":{"id":"0:585:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[298,22],"end":[298,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3496-0:291:1925":{"id":"b:1:3496-0:291:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3498:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:400":{"id":"0:400","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,38],"end":[74,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:32463:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:459":{"id":"0:459","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9872:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:460:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:258:2028":{"id":"0:258:2028","crate_id":0,"name":"NAMESPACE_OID","span":{"filename":"src/lib.rs","begin":[461,4],"end":[464,7]},"visibility":"public","docs":"UUID namespace for ISO Object Identifiers (OIDs).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:518:744":{"id":"0:518:744","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12746:339":{"id":"1:12746:339","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12747:2878","`u8`":"4:12049:1641"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:2285":{"id":"0:16:2285","crate_id":0,"name":"max","span":{"filename":"src/builder.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"The 'max UUID' (all ones).\n\nThe max UUID is a special form of UUID that is specified to have all\n128 bits set to one.\n\n# References\n\n* [Max UUID in Draft RFC: New UUID Formats, Version 4](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04#section-5.4)\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet uuid = Uuid::max();\n\nassert_eq!(\n    \"ffffffff-ffff-ffff-ffff-ffffffffffff\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282":{"id":"0:282","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[928,0],"end":[933,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2778:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:283:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:409":{"id":"0:409","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,53],"end":[74,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2487:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:410:661"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2727-0:367:2843":{"id":"b:1:2727-0:367:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2730:2394"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:300:455":{"id":"0:300:455","crate_id":0,"name":"clone","span":{"filename":"src/error.rs","begin":[4,9],"end":[4,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:2338":{"id":"0:18:2338","crate_id":0,"name":"from_fields","span":{"filename":"src/builder.rs","begin":[122,4],"end":[141,5]},"visibility":"public","docs":"Creates a UUID from four field values.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet d1 = 0xa1a2a3a4;\nlet d2 = 0xb1b2;\nlet d3 = 0xc1c2;\nlet d4 = [0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8];\n\nlet uuid = Uuid::from_fields(d1, d2, d3, &d4);\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d1",{"primitive":"u32"}],["d2",{"primitive":"u16"}],["d3",{"primitive":"u16"}],["d4",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2727-0:413:2185":{"id":"b:1:2727-0:413:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2730:2394"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32518:3339-0:291:1925":{"id":"a:1:32518:3339-0:291:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32518:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:604":{"id":"0:604","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,29],"end":[329,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32438:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:35:2618":{"id":"0:35:2618","crate_id":0,"name":"from_rfc4122_timestamp","span":{"filename":"src/builder.rs","begin":[553,4],"end":[555,5]},"visibility":"public","docs":"Creates a `Builder` for a version 1 UUID using the supplied timestamp and node ID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ticks",{"primitive":"u64"}],["counter",{"primitive":"u16"}],["node_id",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"6"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:310":{"id":"0:310","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,33],"end":[4,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2487:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:311:661"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:197:2925":{"id":"0:197:2925","crate_id":0,"name":"encode_upper","span":{"filename":"src/fmt.rs","begin":[799,4],"end":[801,5]},"visibility":"public","docs":"Writes the [`Uuid`] as an upper-case URN string to\n`buffer`, and returns the subslice of the buffer that contains the\nencoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936da01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.urn().encode_upper(&mut Uuid::encode_buffer()),\n        \"urn:uuid:936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 49];\n    assert_eq!(\n        uuid.urn().encode_upper(&mut buf),\n        \"urn:uuid:936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"\n    );\n    assert_eq!(\n        &buf as &[_],\n        b\"urn:uuid:936DA01F-9ABD-4D9D-80C7-02AF85C822A8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274:2153":{"id":"0:274:2153","crate_id":0,"name":"into_bytes","span":{"filename":"src/lib.rs","begin":[804,4],"end":[806,5]},"visibility":"public","docs":"Consumes self and returns the underlying byte value of the UUID.\n\n# Examples\n\n```\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\nlet uuid = Uuid::from_bytes(bytes);\nassert_eq!(bytes, uuid.into_bytes());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Bytes","id":"0:254:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2742-0:607:2008":{"id":"b:1:2742-0:607:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2745:134","1:2746:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12809:30249":{"id":"1:12809:30249","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42018:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12452:3750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42146:3490-0:390:2846":{"id":"a:1:42146:3490-0:390:2846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42146:3490","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:418":{"id":"0:418","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,16],"end":[80,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2944:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2727-0:390:2846":{"id":"b:1:2727-0:390:2846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2730:2394"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:446":{"id":"0:446","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,38],"end":[86,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:32463:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2742-0:550:1932":{"id":"b:1:2742-0:550:1932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2745:134","1:2746:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:263:2060":{"id":"0:263:2060","crate_id":0,"name":"get_version","span":{"filename":"src/lib.rs","begin":[566,4],"end":[580,5]},"visibility":"public","docs":"Returns the version of the UUID.\n\nThis represents the algorithm used to generate the value.\nIf the version field doesn't contain a recognized version then `None`\nis returned. If you're trying to read the version for a future extension\nyou can also use [`Uuid::get_version_num`] to unconditionally return a\nnumber. Future extensions may start to return `Some` once they're\nstandardized and supported.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::{Uuid, Version};\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"02f09a3f-1624-3b1d-8409-44eff7708208\")?;\n\nassert_eq!(Some(Version::Md5), my_uuid.get_version());\n# Ok(())\n# }\n```\n\n# References\n\n* [Version in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3)","links":{"`Uuid::get_version_num`":"0:262:2051"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42018:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:508:744":{"id":"0:508:744","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32518:3339-0:390:2846":{"id":"a:1:32518:3339-0:390:2846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32518:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12752:9226":{"id":"1:12752:9226","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10521:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10521:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:540:1906":{"id":"0:540:1906","crate_id":0,"name":"NoContext","span":{"filename":"src/timestamp.rs","begin":[362,4],"end":[362,25]},"visibility":"public","docs":"An empty counter that will always return the value `0`.\n\nThis type should be used when constructing timestamps for version 7 UUIDs,\nsince they don't need a counter for uniqueness.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:1:32518:3339-0:540:1906","a:1:42146:3490-0:540:1906","a:1:32436:243-0:540:1906","a:1:42147:3489-0:540:1906","a:1:2949:253-0:540:1906","b:1:2737-0:540:1906","b:1:3496-0:540:1906","b:1:2427-0:540:1906","b:1:2424-0:540:1906","b:1:2742-0:540:1906","b:1:2727-0:540:1906","b:1:2731-0:540:1906","b:5:687-0:540:1906","0:236","0:546","0:544","0:542","0:547"]}}},"b:1:3496-0:523:1908":{"id":"b:1:3496-0:523:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3498:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:394:455":{"id":"0:394:455","crate_id":0,"name":"clone","span":{"filename":"src/fmt.rs","begin":[74,9],"end":[74,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42147:3489-0:589:1956":{"id":"a:1:42147:3489-0:589:1956","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42147:3489","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12826:33643":{"id":"1:12826:33643","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12830:33645":{"id":"1:12830:33645","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12831:33646":{"id":"1:12831:33646","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12855:9313":{"id":"1:12855:9313","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:9316":{"id":"5:5555:9316","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12859:9320"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:403":{"id":"0:403","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,42],"end":[74,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10083:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:404:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2731-0:413:2185":{"id":"b:1:2731-0:413:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2733:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:687-0:589:1956":{"id":"b:5:687-0:589:1956","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:3305","5:690:26202","5:691:26203"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2731-0:436:2851":{"id":"b:1:2731-0:436:2851","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2733:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:128":{"id":"0:128","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[53,0],"end":[57,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:9878:2838","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:129:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42147:3489-0:390:2846":{"id":"a:1:42147:3489-0:390:2846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42147:3489","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2949:253-0:296:134":{"id":"a:1:2949:253-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:29:2232":{"id":"0:29:2232","crate_id":0,"name":"from_bytes","span":{"filename":"src/builder.rs","begin":[415,4],"end":[417,5]},"visibility":"public","docs":"Creates a UUID using the supplied bytes.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_bytes(bytes);\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"\n);\n# Ok(())\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["bytes",{"resolved_path":{"name":"Bytes","id":"0:254:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:444":{"id":"0:444","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,29],"end":[86,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2778:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:445:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32436:243-0:436:2851":{"id":"a:1:32436:243-0:436:2851","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32436:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2737-0:390:2846":{"id":"b:1:2737-0:390:2846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2707:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2740:134","1:2741:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:529:455":{"id":"0:529:455","crate_id":0,"name":"clone","span":{"filename":"src/timestamp.rs","begin":[40,16],"end":[40,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:495":{"id":"0:495","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2695:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:496:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3496-0:413:2185":{"id":"b:1:3496-0:413:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3498:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:545:455":{"id":"0:545:455","crate_id":0,"name":"clone","span":{"filename":"src/timestamp.rs","begin":[361,20],"end":[361,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:600:455":{"id":"0:600:455","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[329,9],"end":[329,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:2622":{"id":"0:37:2622","crate_id":0,"name":"from_md5_bytes","span":{"filename":"src/builder.rs","begin":[558,4],"end":[562,5]},"visibility":"public","docs":"Creates a `Builder` for a version 3 UUID using the supplied MD5 hashed bytes.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["md5_bytes",{"resolved_path":{"name":"Bytes","id":"0:254:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12824:33642":{"id":"1:12824:33642","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[22,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"1:12392:2733","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:82:133","0:83:2734"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2741:1619":{"id":"1:2741:1619","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42165:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42146:3490-0:607:2008":{"id":"a:1:42146:3490-0:607:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42146:3490","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[394,0],"end":[537,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:175:2186","0:176:2887","0:177:2917","0:179:2925","0:181:2680","0:182:2283"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2727-0:436:2851":{"id":"b:1:2727-0:436:2851","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2730:2394"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:452":{"id":"0:452","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,48],"end":[86,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"1:2523:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:453:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12861:31402":{"id":"1:12861:31402","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:896:9330"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:504:340":{"id":"0:504:340","crate_id":0,"name":"as_ref","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:441":{"id":"0:441","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,16],"end":[86,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2944:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5553:9834":{"id":"5:5553:9834","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:462:717":{"id":"0:462:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:2204":{"id":"0:208:2204","crate_id":0,"name":"from_rfc4122","span":{"filename":"src/timestamp.rs","begin":[80,4],"end":[94,5]},"visibility":"public","docs":"Construct a `Timestamp` from an RFC4122 timestamp and counter, as used\nin versions 1 and 6 UUIDs.\n\n# Overflow\n\nIf conversion from RFC4122 ticks to the internal timestamp format would overflow\nit will wrap.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ticks",{"primitive":"u64"}],["counter",{"primitive":"u16"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32518:3339-0:523:1908":{"id":"a:1:32518:3339-0:523:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32518:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:194:2887":{"id":"0:194:2887","crate_id":0,"name":"from_uuid","span":{"filename":"src/fmt.rs","begin":[692,4],"end":[694,5]},"visibility":"public","docs":"Creates a [`Urn`] from a [`Uuid`].\n\n[`Uuid`]: ../struct.Uuid.html\n[`Urn`]: struct.Urn.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2731-0:550:1932":{"id":"b:1:2731-0:550:1932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2733:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:260:2033":{"id":"0:260:2033","crate_id":0,"name":"NAMESPACE_X500","span":{"filename":"src/lib.rs","begin":[473,4],"end":[476,7]},"visibility":"public","docs":"UUID namespace for X.500 Distinguished Names (DNs).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:135:2307":{"id":"0:135:2307","crate_id":0,"name":"simple","span":{"filename":"src/fmt.rs","begin":[106,4],"end":[108,5]},"visibility":"public","docs":"Get a [`Simple`] formatter.","links":{"`Simple`":"0:390:2846"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3496-0:550:1932":{"id":"b:1:3496-0:550:1932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3498:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12838:30251":{"id":"1:12838:30251","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12032:451","self::pattern":"1:12432:3327"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42018:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:447":{"id":"0:447","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,38],"end":[86,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2492:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:523:1908":{"id":"0:523:1908","crate_id":0,"name":"Timestamp","span":{"filename":"src/timestamp.rs","begin":[41,0],"end":[46,1]},"visibility":"public","docs":"A timestamp that can be encoded into a UUID.\n\nThis type abstracts the specific encoding, so versions 1, 6, and 7\nUUIDs can both be supported through the same type, even\nthough they have a different representation of a timestamp.\n\n# References\n\n* [Timestamp in RFC4122](https://www.rfc-editor.org/rfc/rfc4122#section-4.1.4)\n* [Timestamp in Draft RFC: New UUID Formats, Version 4](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04#section-6.1)\n* [Clock Sequence in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.5)","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:206","a:1:32518:3339-0:523:1908","a:1:42146:3490-0:523:1908","a:1:32436:243-0:523:1908","a:1:42147:3489-0:523:1908","a:1:2949:253-0:523:1908","b:1:2737-0:523:1908","b:1:3496-0:523:1908","b:1:2427-0:523:1908","b:1:2424-0:523:1908","b:1:2742-0:523:1908","b:1:2727-0:523:1908","b:1:2731-0:523:1908","b:5:687-0:523:1908","0:532","0:534","0:528","0:531","0:526","0:530","0:535","0:537"]}}},"0:234:1905":{"id":"0:234:1905","crate_id":0,"name":"context","span":{"filename":"src/timestamp.rs","begin":[351,0],"end":[351,15]},"visibility":"public","docs":"Default implementations for the [`ClockSequence`] trait.","links":{"`ClockSequence`":"0:226:1907"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:540:1906"],"is_stripped":false}}},"5:691:26203":{"id":"5:691:26203","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:589:1956":{"id":"0:589:1956","crate_id":0,"name":"Variant","span":{"filename":"src/lib.rs","begin":[332,0],"end":[341,1]},"visibility":"public","docs":"The reserved variants of UUIDs.\n\n# References\n\n* [Variant in RFC4122](http://tools.ietf.org/html/rfc4122#section-4.1.1)","links":{},"attrs":["#[non_exhaustive]","#[repr(u8)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:590:1958","0:593:1960","0:595:1962","0:597:146"],"impls":["a:1:32518:3339-0:589:1956","a:1:42146:3490-0:589:1956","a:1:32436:243-0:589:1956","a:1:42147:3489-0:589:1956","a:1:2949:253-0:589:1956","b:1:2737-0:589:1956","b:1:3496-0:589:1956","b:1:2427-0:589:1956","b:1:2424-0:589:1956","b:1:2742-0:589:1956","b:1:2727-0:589:1956","b:1:2731-0:589:1956","b:5:687-0:589:1956","b:5:5809-0:589:1956","0:599","0:126","0:604","0:601","0:605","0:602"]}}},"a:1:32436:243-0:607:2008":{"id":"a:1:32436:243-0:607:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32436:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32518:3339-0:367:2843":{"id":"a:1:32518:3339-0:367:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32518:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2949:253-0:523:1908":{"id":"a:1:2949:253-0:523:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:45:2213":{"id":"0:45:2213","crate_id":0,"name":"from_slice","span":{"filename":"src/builder.rs","begin":[685,4],"end":[687,5]},"visibility":"public","docs":"Creates a `Builder` using the supplied bytes.\n\n# Errors\n\nThis function will return an error if `b` has any length other than 16.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\n# fn main() -> Result<(), uuid::Error> {\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Builder::from_slice(&bytes)?.into_uuid();\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42165:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2426:2837":{"id":"1:2426:2837","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:453:462":{"id":"0:453:462","crate_id":0,"name":"cmp","span":{"filename":"src/fmt.rs","begin":[86,48],"end":[86,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31182:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:491":{"id":"0:491","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:492:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:586":{"id":"0:586","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,29],"end":[298,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32438:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:272:2131":{"id":"0:272:2131","crate_id":0,"name":"as_u64_pair","span":{"filename":"src/lib.rs","begin":[752,4],"end":[755,5]},"visibility":"public","docs":"Returns two 64bit values containing the value.\n\nThe bytes in the UUID will be split into two `u64`.\nThe first u64 represents the 64 most significant bits,\nthe second one represents the 64 least significant.\n\n# Examples\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\nassert_eq!(\n    uuid.as_u64_pair(),\n    (0xa1a2a3a4b1b2c1c2, 0xd1d2d3d4d5d6d7d8),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u64"},{"primitive":"u64"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:1617":{"id":"0:86:1617","crate_id":0,"name":"try_from","span":{"filename":"src/parser.rs","begin":[33,4],"end":[35,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid_str",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42165:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:2711:263","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12738:33630":{"id":"1:12738:33630","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:554:1936":{"id":"0:554:1936","crate_id":0,"name":"Mac","span":{"filename":"src/lib.rs","begin":[305,4],"end":[305,11]},"visibility":"default","docs":"Version 1: Timestamp and node ID.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"1:12750:9225":{"id":"1:12750:9225","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42020:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42018:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10521:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10521:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:581":{"id":"0:581","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,9],"end":[298,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:582:455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:431":{"id":"0:431","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,53],"end":[80,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32438:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:311:661":{"id":"0:311:661","crate_id":0,"name":"eq","span":{"filename":"src/error.rs","begin":[4,33],"end":[4,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3496-0:367:2843":{"id":"b:1:3496-0:367:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3498:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/builder.rs","begin":[49,0],"end":[492,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:2212","0:16:2285","0:18:2338","0:20:2344","0:22:2362","0:23:2365","0:24:2371","0:25:2213","0:27:2603","0:29:2232","0:30:2403","0:31:2610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:238:3037":{"id":"0:238:3037","crate_id":0,"name":"generate_sequence","span":{"filename":"src/timestamp.rs","begin":[367,8],"end":[369,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_seconds",{"primitive":"u64"}],["_nanos",{"primitive":"u32"}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:226:1907","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:412:1134":{"id":"0:412:1134","crate_id":0,"name":"partial_cmp","span":{"filename":"src/fmt.rs","begin":[74,64],"end":[74,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:42018:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31182:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:283:60":{"id":"0:283:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[930,4],"end":[932,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32518:3339-0:436:2851":{"id":"a:1:32518:3339-0:436:2851","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32518:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:84":{"id":"0:84","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[30,0],"end":[36,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:85:134","0:86:1617"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:371:455":{"id":"0:371:455","crate_id":0,"name":"clone","span":{"filename":"src/fmt.rs","begin":[68,9],"end":[68,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:584":{"id":"0:584","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,22],"end":[298,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9867:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:585:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:90:2756":{"id":"0:90:2756","crate_id":0,"name":"try_parse_ascii","span":{"filename":"src/parser.rs","begin":[125,4],"end":[132,5]},"visibility":"public","docs":"Parses a `Uuid` from a string of hexadecimal digits with optional\nhyphens.\n\nThe input is expected to be a string of ASCII characters. This method\ncan be more convenient than [`try_parse`] if the UUID is being\nparsed from a byte stream instead of from a UTF8 string.\n\n# Examples\n\nParse a hyphenated UUID:\n\n```\n# use uuid::{Uuid, Version, Variant};\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::try_parse_ascii(b\"550e8400-e29b-41d4-a716-446655440000\")?;\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n# Ok(())\n# }\n```\n\n[`try_parse`]: #method.try_parse","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42165:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125:744":{"id":"0:125:744","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[37,4],"end":[39,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12759:30232":{"id":"1:12759:30232","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12758:30231"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:476:717":{"id":"0:476:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:390:2846":{"id":"b:5:687-0:390:2846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:3305","5:690:26202","5:691:26203"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3496-0:589:1956":{"id":"b:1:3496-0:589:1956","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3498:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:483":{"id":"0:483","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9872:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:484:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:407:462":{"id":"0:407:462","crate_id":0,"name":"cmp","span":{"filename":"src/fmt.rs","begin":[74,48],"end":[74,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31182:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:690:26202":{"id":"5:690:26202","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:398":{"id":"0:398","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,29],"end":[74,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2778:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:399:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:421":{"id":"0:421","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,29],"end":[80,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2778:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:422:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:500:744":{"id":"0:500:744","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:588:661":{"id":"0:588:661","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[298,29],"end":[298,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2740:134":{"id":"1:2740:134","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:299":{"id":"0:299","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,9],"end":[4,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:300:455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2742-0:540:1906":{"id":"b:1:2742-0:540:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2745:134","1:2746:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[171,4],"end":[171,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","provide","description","cause"],"trait":{"name":"Error","id":"1:2789:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:496:340":{"id":"0:496:340","crate_id":0,"name":"as_ref","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2427-0:413:2185":{"id":"b:1:2427-0:413:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2421:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2429:26197"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:367:2843":{"id":"0:367:2843","crate_id":0,"name":"Hyphenated","span":{"filename":"src/fmt.rs","begin":[70,0],"end":[70,28]},"visibility":"public","docs":"Format a [`Uuid`] as a hyphenated string, like\n`67e55044-10b1-426f-9247-bb680e5fe0c8`.","links":{"`Uuid`":"0:607:2008"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:165","a:1:32518:3339-0:367:2843","a:1:42146:3490-0:367:2843","a:1:32436:243-0:367:2843","a:1:42147:3489-0:367:2843","a:1:2949:253-0:367:2843","b:1:2737-0:367:2843","b:1:3496-0:367:2843","b:1:2427-0:367:2843","b:1:2424-0:367:2843","b:1:2742-0:367:2843","b:1:2727-0:367:2843","b:1:2731-0:367:2843","b:5:687-0:367:2843","b:5:5809-0:367:2843","0:388","0:372","0:375","0:383","0:378","0:497","0:491","0:495","0:370","0:373","0:461","0:493","0:459","0:377","0:386","0:464","0:380","0:385"]}}},"0:511":{"id":"0:511","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2695:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:512:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12758:30231":{"id":"1:12758:30231","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12759:30232"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176:2887":{"id":"0:176:2887","crate_id":0,"name":"from_uuid","span":{"filename":"src/fmt.rs","begin":[404,4],"end":[406,5]},"visibility":"public","docs":"Creates a [`Braced`] from a [`Uuid`].\n\n[`Uuid`]: ../struct.Uuid.html\n[`Braced`]: struct.Braced.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:302:717":{"id":"0:302:717","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[4,16],"end":[4,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23:2365":{"id":"0:23:2365","crate_id":0,"name":"from_u128_le","span":{"filename":"src/builder.rs","begin":[249,4],"end":[268,5]},"visibility":"public","docs":"Creates a UUID from a 128bit value in little-endian order.\n\nThe entire value will be flipped to convert into big-endian order.\nThis is based on the endianness of the UUID, rather than the target\nenvironment so bytes will be flipped on both big and little endian\nmachines.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n\nlet uuid = Uuid::from_u128_le(v);\n\nassert_eq!(\n    \"d8d7d6d5-d4d3-d2d1-c2c1-b2b1a4a3a2a1\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"primitive":"u128"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12764:26448":{"id":"1:12764:26448","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12763:26440"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44201:3756","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2737-0:296:134":{"id":"b:1:2737-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2707:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2740:134","1:2741:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2424-0:413:2185":{"id":"b:1:2424-0:413:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2418:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2426:2837"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:285:340":{"id":"0:285:340","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[937,4],"end":[939,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:450:781":{"id":"0:450:781","crate_id":0,"name":"hash","span":{"filename":"src/fmt.rs","begin":[86,42],"end":[86,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10091:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32436:243-0:413:2185":{"id":"a:1:32436:243-0:413:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32436:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32518:3339-0:413:2185":{"id":"a:1:32518:3339-0:413:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32518:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:602":{"id":"0:602","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,22],"end":[329,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9867:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:603:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:140:2862":{"id":"0:140:2862","crate_id":0,"name":"as_braced","span":{"filename":"src/fmt.rs","begin":[138,4],"end":[141,5]},"visibility":"public","docs":"Get a borrowed [`Braced`] formatter.","links":{"`Braced`":"0:436:2851"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:422:60":{"id":"0:422:60","crate_id":0,"name":"default","span":{"filename":"src/fmt.rs","begin":[80,29],"end":[80,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:516:744":{"id":"0:516:744","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2737-0:589:1956":{"id":"b:1:2737-0:589:1956","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2707:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2740:134","1:2741:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2424-0:540:1906":{"id":"b:1:2424-0:540:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2418:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2426:2837"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:416":{"id":"0:416","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,9],"end":[80,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:417:455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2727-0:550:1932":{"id":"b:1:2727-0:550:1932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2730:2394"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12791:30242":{"id":"1:12791:30242","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12432:3327","`DoubleEndedIterator`":"1:7826:127","prim@char":"4:12032:451","str::split":"1:12785:30239"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43936:3771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12452:3750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:393":{"id":"0:393","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,9],"end":[74,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:394:455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:424":{"id":"0:424","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,38],"end":[80,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2492:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2427-0:296:134":{"id":"b:1:2427-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2421:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2429:26197"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:528":{"id":"0:528","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,16],"end":[40,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:529:455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:575:1950":{"id":"0:575:1950","crate_id":0,"name":"Custom","span":{"filename":"src/lib.rs","begin":[319,4],"end":[319,14]},"visibility":"default","docs":"Version 8: Custom.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"8","value":"8"}}}},"0:582:455":{"id":"0:582:455","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[298,9],"end":[298,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2745:134":{"id":"1:2745:134","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32366:3300","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:5:5809-0:390:2846":{"id":"b:5:5809-0:390:2846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9872:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5807:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5811:1594"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:411":{"id":"0:411","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,64],"end":[74,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["le","lt","gt","ge"],"trait":{"name":"PartialOrd","id":"1:2529:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:412:1134"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12754:9227":{"id":"1:12754:9227","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10521:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10521:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12785:30239":{"id":"1:12785:30239","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12432:3327","`DoubleEndedIterator`":"1:7826:127","prim@char":"4:12032:451","str::split_whitespace":"1:12763:26440","str::rsplit":"1:12791:30242"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43918:3772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5809-0:296:134":{"id":"b:5:5809-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9872:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5807:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5811:1594"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:687-0:367:2843":{"id":"b:5:687-0:367:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:3305","5:690:26202","5:691:26203"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:38:2629":{"id":"0:38:2629","crate_id":0,"name":"from_random_bytes","span":{"filename":"src/builder.rs","begin":[583,4],"end":[587,5]},"visibility":"public","docs":"Creates a `Builder` for a version 4 UUID using the supplied random bytes.\n\nThis method assumes the bytes are already sufficiently random, it will only\nset the appropriate bits for the UUID version and variant.\n\n# Examples\n\n```\n# use uuid::{Builder, Variant, Version};\n# let rng = || [\n#     70, 235, 208, 238, 14, 109, 67, 201, 185, 13, 204, 195, 90,\n# 145, 63, 62,\n# ];\nlet random_bytes = rng();\nlet uuid = Builder::from_random_bytes(random_bytes).into_uuid();\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["random_bytes",{"resolved_path":{"name":"Bytes","id":"0:254:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2727-0:523:1908":{"id":"b:1:2727-0:523:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2730:2394"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:270:2111":{"id":"0:270:2111","crate_id":0,"name":"as_u128","span":{"filename":"src/lib.rs","begin":[700,4],"end":[702,5]},"visibility":"public","docs":"Returns a 128bit value containing the value.\n\nThe bytes in the UUID will be packed directly into a `u128`.\n\n# Examples\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.as_u128(),\n    0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8,\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:616":{"id":"0:616","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,26],"end":[437,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10083:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:617:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12748:9224":{"id":"1:12748:9224","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42020:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42018:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10521:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10521:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12741:33632":{"id":"1:12741:33632","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12739:33631"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12841:30252":{"id":"1:12841:30252","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12032:451","self::pattern":"1:12432:3327"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42018:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12452:3750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:620:462":{"id":"0:620:462","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[437,32],"end":[437,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31182:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:607:2008":{"id":"0:607:2008","crate_id":0,"name":"Uuid","span":{"filename":"src/lib.rs","begin":[451,0],"end":[451,23]},"visibility":"public","docs":"A Universally Unique Identifier (UUID).\n\n# Examples\n\nParse a UUID given in the simple format and print it as a urn:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\")?;\n\nprintln!(\"{}\", my_uuid.urn());\n# Ok(())\n# }\n```\n\nCreate a new random (V4) UUID and print it out in hexadecimal form:\n\n```\n// Note that this requires the `v4` feature enabled in the uuid crate.\n# use uuid::Uuid;\n# fn main() {\n# #[cfg(feature = \"v4\")] {\nlet my_uuid = Uuid::new_v4();\n\nprintln!(\"{}\", my_uuid);\n# }\n# }\n```\n\n# Formatting\n\nA UUID can be formatted in one of a few ways:\n\n* [`simple`](#method.simple): `a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8`.\n* [`hyphenated`](#method.hyphenated):\n  `a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8`.\n* [`urn`](#method.urn): `urn:uuid:A1A2A3A4-B1B2-C1C2-D1D2-D3D4D5D6D7D8`.\n* [`braced`](#method.braced): `{a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8}`.\n\nThe default representation when formatting a UUID with `Display` is\nhyphenated:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    my_uuid.to_string(),\n);\n# Ok(())\n# }\n```\n\nOther formats can be specified using adapter methods on the UUID:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    \"urn:uuid:a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    my_uuid.urn().to_string(),\n);\n# Ok(())\n# }\n```\n\n# Endianness\n\nThe specification for UUIDs encodes the integer fields that make up the\nvalue in big-endian order. This crate assumes integer inputs are already in\nthe correct order by default, regardless of the endianness of the\nenvironment. Most methods that accept integers have a `_le` variant (such as\n`from_fields_le`) that assumes any integer values will need to have their\nbytes flipped, regardless of the endianness of the environment.\n\nMost users won't need to worry about endianness unless they need to operate\non individual fields (such as when converting between Microsoft GUIDs). The\nimportant things to remember are:\n\n- The endianness is in terms of the fields of the UUID, not the environment.\n- The endianness is assumed to be big-endian when there's no `_le` suffix\n  somewhere.\n- Byte-flipping in `_le` methods applies to each integer.\n- Endianness roundtrips, so if you create a UUID with `from_fields_le`\n  you'll get the same values back out with `to_fields_le`.\n\n# ABI\n\nThe `Uuid` type is always guaranteed to be have the same ABI as [`Bytes`].","links":{"`Bytes`":"0:254:1929"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:13","0:87","0:132","0:256","a:1:32518:3339-0:607:2008","a:1:42146:3490-0:607:2008","a:1:32436:243-0:607:2008","a:1:42147:3489-0:607:2008","a:1:2949:253-0:607:2008","b:1:2737-0:607:2008","b:1:3496-0:607:2008","b:1:2427-0:607:2008","b:1:2424-0:607:2008","b:1:2742-0:607:2008","b:1:2727-0:607:2008","b:1:2731-0:607:2008","b:5:687-0:607:2008","b:5:5809-0:607:2008","0:503","0:122","0:511","0:284","0:513","0:621","0:505","0:610","0:619","0:497","0:622","0:612","0:499","0:288","0:491","0:495","0:282","0:509","0:130","0:128","0:507","0:286","0:84","0:81","0:517","0:120","0:519","0:614","0:493","0:624","0:521","0:515","0:616","0:613","0:124","0:501"]}}},"0:195:2917":{"id":"0:195:2917","crate_id":0,"name":"encode_lower","span":{"filename":"src/fmt.rs","begin":[746,4],"end":[748,5]},"visibility":"public","docs":"Writes the [`Uuid`] as a lower-case URN string to\n`buffer`, and returns the subslice of the buffer that contains the\nencoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936DA01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.urn().encode_lower(&mut Uuid::encode_buffer()),\n        \"urn:uuid:936da01f-9abd-4d9d-80c7-02af85c822a8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 49];\n    uuid.urn().encode_lower(&mut buf);\n    assert_eq!(\n        uuid.urn().encode_lower(&mut buf),\n        \"urn:uuid:936da01f-9abd-4d9d-80c7-02af85c822a8\"\n    );\n    assert_eq!(\n        &buf as &[_],\n        b\"urn:uuid:936da01f-9abd-4d9d-80c7-02af85c822a8!!!!\" as &[_]\n    );\n     \n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:456:661":{"id":"0:456:661","crate_id":0,"name":"eq","span":{"filename":"src/fmt.rs","begin":[86,53],"end":[86,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:426":{"id":"0:426","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,42],"end":[80,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10083:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:427:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:387:661":{"id":"0:387:661","crate_id":0,"name":"eq","span":{"filename":"src/fmt.rs","begin":[68,53],"end":[68,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:2680":{"id":"0:172:2680","crate_id":0,"name":"as_uuid","span":{"filename":"src/fmt.rs","begin":[375,4],"end":[377,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet hyphenated = Uuid::nil().hyphenated();\nassert_eq!(*hyphenated.as_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271:2123":{"id":"0:271:2123","crate_id":0,"name":"to_u128_le","span":{"filename":"src/lib.rs","begin":[729,4],"end":[731,5]},"visibility":"public","docs":"Returns a 128bit little-endian value containing the value.\n\nThe bytes in the `u128` will be flipped to convert into big-endian\norder. This is based on the endianness of the UUID, rather than the\ntarget environment so bytes will be flipped on both big and little\nendian machines.\n\nNote that this will produce a different result than\n[`Uuid::to_fields_le`], because the entire UUID is reversed, rather\nthan reversing the individual fields in-place.\n\n# Examples\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.to_u128_le(),\n    0xd8d7d6d5d4d3d2d1c2c1b2b1a4a3a2a1,\n);\n# Ok(())\n# }\n```","links":{"`Uuid::to_fields_le`":"0:267:2106"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200:2283":{"id":"0:200:2283","crate_id":0,"name":"into_uuid","span":{"filename":"src/fmt.rs","begin":[827,4],"end":[829,5]},"visibility":"public","docs":"Consumes the [`Urn`], returning the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet urn = Uuid::nil().urn();\nassert_eq!(urn.into_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2008","`Urn`":"0:413:2185"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:34327":{"id":"5:5540:34327","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:538:781":{"id":"0:538:781","crate_id":0,"name":"hash","span":{"filename":"src/timestamp.rs","begin":[40,44],"end":[40,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10091:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:454":{"id":"0:454","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,53],"end":[86,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32438:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42147:3489-0:367:2843":{"id":"a:1:42147:3489-0:367:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42147:3489","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[90,0],"end":[142,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:2262","0:134:2839","0:135:2307","0:136:2856","0:137:2317","0:138:2859","0:139:2832","0:140:2862"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32518:3339-0:540:1906":{"id":"a:1:32518:3339-0:540:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32518:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:569:1946":{"id":"0:569:1946","crate_id":0,"name":"SortMac","span":{"filename":"src/lib.rs","begin":[315,4],"end":[315,15]},"visibility":"default","docs":"Version 6: Sortable Timestamp and node ID.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"6","value":"6"}}}},"0:614":{"id":"0:614","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,22],"end":[437,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2492:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:548:60":{"id":"0:548:60","crate_id":0,"name":"default","span":{"filename":"src/timestamp.rs","begin":[361,33],"end":[361,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12859:9320":{"id":"1:12859:9320","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2424-0:607:2008":{"id":"b:1:2424-0:607:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2418:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2426:2837"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:185:2887":{"id":"0:185:2887","crate_id":0,"name":"from_uuid","span":{"filename":"src/fmt.rs","begin":[549,4],"end":[551,5]},"visibility":"public","docs":"Creates a [`Simple`] from a [`Uuid`].\n\n[`Uuid`]: ../struct.Uuid.html\n[`Simple`]: struct.Simple.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:408":{"id":"0:408","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,53],"end":[74,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32438:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:461":{"id":"0:461","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:9878:2838","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:462:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2424-0:296:134":{"id":"b:1:2424-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2418:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2426:2837"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42147:3489-0:523:1908":{"id":"a:1:42147:3489-0:523:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42147:3489","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:287:744":{"id":"0:287:744","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[944,4],"end":[946,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:413:2185":{"id":"b:5:687-0:413:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:3305","5:690:26202","5:691:26203"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2742-0:589:1956":{"id":"b:1:2742-0:589:1956","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2745:134","1:2746:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5554:9315":{"id":"5:5554:9315","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12858:9319"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:2668":{"id":"0:54:2668","crate_id":0,"name":"set_variant","span":{"filename":"src/builder.rs","begin":[834,4],"end":[837,5]},"visibility":"public","docs":"Specifies the variant of the UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["v",{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:484:717":{"id":"0:484:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:540:1906":{"id":"b:5:687-0:540:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:3305","5:690:26202","5:691:26203"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:126":{"id":"0:126","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[42,0],"end":[51,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9872:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:127:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:31:2610":{"id":"0:31:2610","crate_id":0,"name":"from_bytes_ref","span":{"filename":"src/builder.rs","begin":[484,4],"end":[487,5]},"visibility":"public","docs":"Creates a reference to a UUID from a reference to the supplied bytes.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_bytes_ref(&bytes);\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"\n);\n\nassert!(std::ptr::eq(\n    uuid as *const Uuid as *const u8,\n    &bytes as *const [u8; 16] as *const u8,\n));\n# Ok(())\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:254:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:612":{"id":"0:612","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,16],"end":[437,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2944:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:30:2403":{"id":"0:30:2403","crate_id":0,"name":"from_bytes_le","span":{"filename":"src/builder.rs","begin":[446,4],"end":[451,5]},"visibility":"public","docs":"Creates a UUID using the supplied bytes in little endian order.\n\nThe individual fields encoded in the buffer will be flipped.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_bytes_le(bytes);\n\nassert_eq!(\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"resolved_path":{"name":"Bytes","id":"0:254:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:261:2043":{"id":"0:261:2043","crate_id":0,"name":"get_variant","span":{"filename":"src/lib.rs","begin":[501,4],"end":[512,5]},"visibility":"public","docs":"Returns the variant of the UUID structure.\n\nThis determines the interpretation of the structure of the UUID.\nThis method simply reads the value of the variant byte. It doesn't\nvalidate the rest of the UUID as conforming to that variant.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::{Uuid, Variant};\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"02f09a3f-1624-3b1d-8409-44eff7708208\")?;\n\nassert_eq!(Variant::RFC4122, my_uuid.get_variant());\n# Ok(())\n# }\n```\n\n# References\n\n* [Variant in RFC4122](http://tools.ietf.org/html/rfc4122#section-4.1.1)","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[59,0],"end":[64,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:9880:2840","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2260":{"id":"0:0:2260","crate_id":0,"name":"uuid","span":{"filename":"src/lib.rs","begin":[12,0],"end":[1845,1]},"visibility":"public","docs":"Generate and parse universally unique identifiers (UUIDs).\n\nHere's an example of a UUID:\n\n```text\n67e55044-10b1-426f-9247-bb680e5fe0c8\n```\n\nA UUID is a unique 128-bit value, stored as 16 octets, and regularly\nformatted as a hex string in five groups. UUIDs are used to assign unique\nidentifiers to entities without requiring a central allocating authority.\n\nThey are particularly useful in distributed systems, though can be used in\ndisparate areas, such as databases and network protocols.  Typically a UUID\nis displayed in a readable string form as a sequence of hexadecimal digits,\nseparated into groups by hyphens.\n\nThe uniqueness property is not strictly guaranteed, however for all\npractical purposes, it can be assumed that an unintentional collision would\nbe extremely unlikely.\n\nUUIDs have a number of standardized encodings that are specified in [RFC4122](http://tools.ietf.org/html/rfc4122),\nwith recent additions [in draft](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04).\n\n# Getting started\n\nAdd the following to your `Cargo.toml`:\n\n```toml\n[dependencies.uuid]\nversion = \"1.6.1\"\nfeatures = [\n    \"v4\",                # Lets you generate random UUIDs\n    \"fast-rng\",          # Use a faster (but still sufficiently random) RNG\n    \"macro-diagnostics\", # Enable better diagnostics for compile-time UUIDs\n]\n```\n\nWhen you want a UUID, you can generate one:\n\n```\n# fn main() {\n# #[cfg(feature = \"v4\")]\n# {\nuse uuid::Uuid;\n\nlet id = Uuid::new_v4();\n# }\n# }\n```\n\nIf you have a UUID value, you can use its string literal form inline:\n\n```\nuse uuid::{uuid, Uuid};\n\nconst ID: Uuid = uuid!(\"67e55044-10b1-426f-9247-bb680e5fe0c8\");\n```\n\n# Working with different UUID versions\n\nThis library supports all standardized methods for generating UUIDs through individual Cargo features.\n\nBy default, this crate depends on nothing but the Rust standard library and can parse and format\nUUIDs, but cannot generate them. Depending on the kind of UUID you'd like to work with, there\nare Cargo features that enable generating them:\n\n* `v1` - Version 1 UUIDs using a timestamp and monotonic counter.\n* `v3` - Version 3 UUIDs based on the MD5 hash of some data.\n* `v4` - Version 4 UUIDs with random data.\n* `v5` - Version 5 UUIDs based on the SHA1 hash of some data.\n* `v6` - Version 6 UUIDs using a timestamp and monotonic counter.\n* `v7` - Version 7 UUIDs using a Unix timestamp.\n* `v8` - Version 8 UUIDs using user-defined data.\n\nVersions that are in draft are also supported. See the _unstable features_ section for details.\n\nThis library also includes a [`Builder`] type that can be used to help construct UUIDs of any\nversion without any additional dependencies or features. It's a lower-level API than [`Uuid`]\nthat can be used when you need control over implicit requirements on things like a source\nof randomness.\n\n## Which UUID version should I use?\n\nIf you just want to generate unique identifiers then consider version 4 (`v4`) UUIDs. If you want\nto use UUIDs as database keys or need to sort them then consider version 7 (`v7`) UUIDs.\nOther versions should generally be avoided unless there's an existing need for them.\n\nSome UUID versions supersede others. Prefer version 6 over version 1 and version 5 over version 3.\n\n# Other features\n\nOther crate features can also be useful beyond the version support:\n\n* `macro-diagnostics` - enhances the diagnostics of `uuid!` macro.\n* `serde` - adds the ability to serialize and deserialize a UUID using\n  `serde`.\n* `arbitrary` - adds an `Arbitrary` trait implementation to `Uuid` for\n  fuzzing.\n* `fast-rng` - uses a faster algorithm for generating random UUIDs.\n  This feature requires more dependencies to compile, but is just as suitable for\n  UUIDs as the default algorithm.\n* `bytemuck` - adds a `Pod` trait implementation to `Uuid` for byte manipulation\n\n# Unstable features\n\nSome features are unstable. They may be incomplete or depend on other\nunstable libraries. These include:\n\n* `zerocopy` - adds support for zero-copy deserialization using the\n  `zerocopy` library.\n* `borsh` - adds the ability to serialize and deserialize a UUID using\n  `borsh`.\n\nUnstable features may break between minor releases.\n\nTo allow unstable features, you'll need to enable the Cargo feature as\nnormal, but also pass an additional flag through your environment to opt-in\nto unstable `uuid` features:\n\n```text\nRUSTFLAGS=\"--cfg uuid_unstable\"\n```\n\n# Building for other targets\n\n## WebAssembly\n\nFor WebAssembly, enable the `js` feature:\n\n```toml\n[dependencies.uuid]\nversion = \"1.6.1\"\nfeatures = [\n    \"v4\",\n    \"v7\",\n    \"js\",\n]\n```\n\n## Embedded\n\nFor embedded targets without the standard library, you'll need to\ndisable default features when building `uuid`:\n\n```toml\n[dependencies.uuid]\nversion = \"1.6.1\"\ndefault-features = false\n```\n\nSome additional features are supported in no-std environments:\n\n* `v1`, `v3`, `v5`, `v6`, and `v8`.\n* `serde`.\n\nIf you need to use `v4` or `v7` in a no-std environment, you'll need to\nfollow [`getrandom`'s docs] on configuring a source of randomness\non currently unsupported targets. Alternatively, you can produce\nrandom bytes yourself and then pass them to [`Builder::from_random_bytes`]\nwithout enabling the `v4` feature.\n\n# Examples\n\nParse a UUID given in the simple format and print it as a URN:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\")?;\n\nprintln!(\"{}\", my_uuid.urn());\n# Ok(())\n# }\n```\n\nGenerate a random UUID and print it out in hexadecimal form:\n\n```\n// Note that this requires the `v4` feature to be enabled.\n# use uuid::Uuid;\n# fn main() {\n# #[cfg(feature = \"v4\")] {\nlet my_uuid = Uuid::new_v4();\n\nprintln!(\"{}\", my_uuid);\n# }\n# }\n```\n\n# References\n\n* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)\n* [RFC4122: A Universally Unique Identifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)\n* [Draft RFC: New UUID Formats, Version 4](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04)\n\n[`wasm-bindgen`]: https://crates.io/crates/wasm-bindgen\n[`cargo-web`]: https://crates.io/crates/cargo-web\n[`getrandom`'s docs]: https://docs.rs/getrandom","links":{"`Uuid`":"0:607:2008","`Builder::from_random_bytes`":"0:38:2629","`Builder`":"0:291:1925"},"attrs":["#![no_std]","#![deny(missing_debug_implementations, missing_docs)]","#![doc(html_logo_url =\n\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\nhtml_favicon_url = \"https://www.rust-lang.org/favicon.ico\", html_root_url =\n\"https://docs.rs/uuid/1.6.1\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:108:717","0:203:1904","0:240-0:540:1906","0:241-0:226:1907","0:242-0:523:1908","0:252-0:291:1925","0:253-0:296:134","0:254:1929","0:550:1932","0:589:1956","0:607:2008","0:549:2260"],"is_stripped":false}}},"1:12866:33654":{"id":"1:12866:33654","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4668:33654"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44235:3764","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:227:205":{"id":"0:227:205","crate_id":0,"name":"Output","span":{"filename":"src/timestamp.rs","begin":[335,4],"end":[335,16]},"visibility":"default","docs":"The type of sequence returned by this counter.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"1:12777:3603":{"id":"1:12777:3603","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42020:197","prim@char":"4:12032:451","self::pattern":"1:12432:3327"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42018:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2727-0:291:1925":{"id":"b:1:2727-0:291:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2730:2394"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:296:134":{"id":"0:296:134","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[5,0],"end":[5,39]},"visibility":"public","docs":"A general error that can occur when working with UUIDs.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:32518:3339-0:296:134","a:1:42146:3490-0:296:134","a:1:32436:243-0:296:134","a:1:42147:3489-0:296:134","a:1:2949:253-0:296:134","b:1:2737-0:296:134","b:1:3496-0:296:134","b:1:2427-0:296:134","b:1:2424-0:296:134","b:1:2742-0:296:134","b:1:2727-0:296:134","b:1:2731-0:296:134","b:5:687-0:296:134","b:5:5809-0:296:134","0:73","0:304","0:299","0:68","0:303","0:306","0:310","0:301","0:309"]}}},"b:1:2731-0:540:1906":{"id":"b:1:2731-0:540:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2733:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2737-0:550:1932":{"id":"b:1:2737-0:550:1932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2707:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2740:134","1:2741:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:177:2917":{"id":"0:177:2917","crate_id":0,"name":"encode_lower","span":{"filename":"src/fmt.rs","begin":[455,4],"end":[457,5]},"visibility":"public","docs":"Writes the [`Uuid`] as a lower-case hyphenated string surrounded by\nbraces to `buffer`, and returns the subslice of the buffer that contains\nthe encoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936DA01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.braced()\n            .encode_lower(&mut Uuid::encode_buffer()),\n        \"{936da01f-9abd-4d9d-80c7-02af85c822a8}\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 40];\n    uuid.braced().encode_lower(&mut buf);\n    assert_eq!(\n        &buf as &[_],\n        b\"{936da01f-9abd-4d9d-80c7-02af85c822a8}!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:546":{"id":"0:546","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[361,27],"end":[361,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2944:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:526":{"id":"0:526","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,9],"end":[40,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9867:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:527:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:420:717":{"id":"0:420:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[80,22],"end":[80,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,29],"end":[68,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2778:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:376:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:257:2010":{"id":"0:257:2010","crate_id":0,"name":"NAMESPACE_DNS","span":{"filename":"src/lib.rs","begin":[455,4],"end":[458,7]},"visibility":"public","docs":"UUID namespace for Domain Name System (DNS).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:623:661":{"id":"0:623:661","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[437,37],"end":[437,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:717":{"id":"0:69:717","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[132,4],"end":[163,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138:2859":{"id":"0:138:2859","crate_id":0,"name":"as_urn","span":{"filename":"src/fmt.rs","begin":[125,4],"end":[128,5]},"visibility":"public","docs":"Get a borrowed [`Urn`] formatter.","links":{"`Urn`":"0:413:2185"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:455":{"id":"0:455","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,53],"end":[86,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2487:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:456:661"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:551:1934":{"id":"0:551:1934","crate_id":0,"name":"Nil","span":{"filename":"src/lib.rs","begin":[303,4],"end":[303,13]},"visibility":"default","docs":"The \"nil\" (all zeros) UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0u8","value":"0"}}}},"a:1:32436:243-0:291:1925":{"id":"a:1:32436:243-0:291:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32436:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12863:33653":{"id":"1:12863:33653","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4670:33653"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44217:3762","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12765:32956":{"id":"1:12765:32956","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44172:3765","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12768:2410":{"id":"1:12768:2410","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12032:451","self::pattern":"1:12432:3327"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:544":{"id":"0:544","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[361,20],"end":[361,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:545:455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:33:2232":{"id":"0:33:2232","crate_id":0,"name":"from_bytes","span":{"filename":"src/builder.rs","begin":[517,4],"end":[519,5]},"visibility":"public","docs":"Creates a `Builder` using the supplied bytes.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Builder::from_bytes(bytes).into_uuid();\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"resolved_path":{"name":"Bytes","id":"0:254:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2427-0:523:1908":{"id":"b:1:2427-0:523:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2421:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2429:26197"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:289:134":{"id":"0:289:134","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[951,4],"end":[951,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:290:1617":{"id":"0:290:1617","crate_id":0,"name":"try_from","span":{"filename":"src/lib.rs","begin":[953,4],"end":[955,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"resolved_path":{"name":"std::vec::Vec","id":"5:6959:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42165:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:2711:263","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:449":{"id":"0:449","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,42],"end":[86,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10083:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:450:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:522:2837":{"id":"0:522:2837","crate_id":0,"name":"borrow","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32":{"id":"0:32","crate_id":0,"name":null,"span":{"filename":"src/builder.rs","begin":[494,0],"end":[903,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Builder","id":"0:291:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:33:2232","0:34:2403","0:35:2618","0:37:2622","0:38:2629","0:39:2634","0:40:2638","0:42:2651","0:44:2655","0:45:2213","0:46:2603","0:47:2338","0:49:2344","0:51:2362","0:52:2365","0:53:2212","0:54:2668","0:55:2624","0:56:2674","0:57:2282","0:58:2680","0:59:2283"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:122":{"id":"0:122","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[29,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9872:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:123:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:184:2186":{"id":"0:184:2186","crate_id":0,"name":"LENGTH","span":{"filename":"src/fmt.rs","begin":[543,4],"end":[543,33]},"visibility":"public","docs":"The length of a simple [`Uuid`] string.\n\n[`Uuid`]: ../struct.Uuid.html","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"primitive":"usize"},"default":"32"}}},"0:468:717":{"id":"0:468:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:34328":{"id":"5:5543:34328","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:240-0:540:1906":{"id":"0:240-0:540:1906","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,20],"end":[238,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"timestamp::context::NoContext","name":"NoContext","id":"0:540:1906","glob":false}}},"1:12745:33633":{"id":"1:12745:33633","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:34326","5:5537:3850","5:5540:34327","5:5543:34328","5:5551:34329","5:5552:34330","5:5553:9834","5:5554:9315","5:5555:9316"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:502:744":{"id":"0:502:744","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:457":{"id":"0:457","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,64],"end":[86,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["le","lt","gt","ge"],"trait":{"name":"PartialOrd","id":"1:2529:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:458:1134"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12774:30250":{"id":"1:12774:30250","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12032:451","self::pattern":"1:12432:3327"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12452:3750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2949:253-0:540:1906":{"id":"a:1:2949:253-0:540:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:378":{"id":"0:378","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,38],"end":[68,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2492:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:42:2651":{"id":"0:42:2651","crate_id":0,"name":"from_unix_timestamp_millis","span":{"filename":"src/builder.rs","begin":[639,4],"end":[644,5]},"visibility":"public","docs":"Creates a `Builder` for a version 7 UUID using the supplied Unix timestamp and random bytes.\n\nThis method assumes the bytes are already sufficiently random.\n\n# Examples\n\nCreating a UUID using the current system timestamp:\n\n```\n# use std::convert::TryInto;\nuse std::time::{Duration, SystemTime};\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\n# use uuid::{Builder, Uuid, Variant, Version, Timestamp, NoContext};\n# let rng = || [\n#     70, 235, 208, 238, 14, 109, 67, 201, 185, 13\n# ];\nlet ts = SystemTime::now().duration_since(SystemTime::UNIX_EPOCH)?;\n\nlet random_bytes = rng();\n\nlet uuid = Builder::from_unix_timestamp_millis(ts.as_millis().try_into()?, &random_bytes).into_uuid();\n\nassert_eq!(Some(Version::SortRand), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["millis",{"primitive":"u64"}],["random_bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"10"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:2832":{"id":"0:139:2832","crate_id":0,"name":"braced","span":{"filename":"src/fmt.rs","begin":[132,4],"end":[134,5]},"visibility":"public","docs":"Get a [`Braced`] formatter.","links":{"`Braced`":"0:436:2851"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2731-0:523:1908":{"id":"b:1:2731-0:523:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2733:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:175:2186":{"id":"0:175:2186","crate_id":0,"name":"LENGTH","span":{"filename":"src/fmt.rs","begin":[398,4],"end":[398,33]},"visibility":"public","docs":"The length of a braced [`Uuid`] string.\n\n[`Uuid`]: ../struct.Uuid.html","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"primitive":"usize"},"default":"38"}}},"0:509":{"id":"0:509","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:510:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:578:1952":{"id":"0:578:1952","crate_id":0,"name":"Max","span":{"filename":"src/lib.rs","begin":[321,4],"end":[321,14]},"visibility":"default","docs":"The \"max\" (all ones) UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0xff","value":"255"}}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[131,0],"end":[164,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9872:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2427-0:550:1932":{"id":"b:1:2427-0:550:1932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2421:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2429:26197"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5536:34326":{"id":"5:5536:34326","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:3320","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:3320","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[950,0],"end":[956,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:6959:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:289:134","0:290:1617"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:278:2184":{"id":"0:278:2184","crate_id":0,"name":"encode_buffer","span":{"filename":"src/lib.rs","begin":[875,4],"end":[877,5]},"visibility":"public","docs":"A buffer that can be used for `encode_...` calls, that is\nguaranteed to be long enough for any of the format adapters.\n\n# Examples\n\n```\n# use uuid::Uuid;\nlet uuid = Uuid::nil();\n\nassert_eq!(\n    uuid.simple().encode_lower(&mut Uuid::encode_buffer()),\n    \"00000000000000000000000000000000\"\n);\n\nassert_eq!(\n    uuid.hyphenated()\n        .encode_lower(&mut Uuid::encode_buffer()),\n    \"00000000-0000-0000-0000-000000000000\"\n);\n\nassert_eq!(\n    uuid.urn().encode_lower(&mut Uuid::encode_buffer()),\n    \"urn:uuid:00000000-0000-0000-0000-000000000000\"\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"array":{"type":{"primitive":"u8"},"len":"45"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:256":{"id":"0:256","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[453,0],"end":[926,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:257:2010","0:258:2028","0:259:2031","0:260:2033","0:261:2043","0:262:2051","0:263:2060","0:264:2090","0:267:2106","0:270:2111","0:271:2123","0:272:2131","0:273:2044","0:274:2153","0:275:2163","0:276:2061","0:277:2173","0:278:2184","0:281:2200"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2742-0:367:2843":{"id":"b:1:2742-0:367:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2745:134","1:2746:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:254:1929":{"id":"0:254:1929","crate_id":0,"name":"Bytes","span":{"filename":"src/lib.rs","begin":[291,0],"end":[291,26]},"visibility":"public","docs":"A 128-bit (16 byte) buffer containing the UUID.\n\n# ABI\n\nThe `Bytes` type is always guaranteed to be have the same ABI as [`Uuid`].","links":{"`Uuid`":"0:607:2008"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"array":{"type":{"primitive":"u8"},"len":"16"}},"generics":{"params":[],"where_predicates":[]}}}},"0:24:2371":{"id":"0:24:2371","crate_id":0,"name":"from_u64_pair","span":{"filename":"src/builder.rs","begin":[288,4],"end":[307,5]},"visibility":"public","docs":"Creates a UUID from two 64bit values.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet hi = 0xa1a2a3a4b1b2c1c2u64;\nlet lo = 0xd1d2d3d4d5d6d7d8u64;\n\nlet uuid = Uuid::from_u64_pair(hi, lo);\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["high_bits",{"primitive":"u64"}],["low_bits",{"primitive":"u64"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12794:33637":{"id":"1:12794:33637","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12432:3327","str::split":"1:12785:30239","prim@char":"4:12032:451","`DoubleEndedIterator`":"1:7826:127","str::rsplit_terminator":"1:12797:33638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43968:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:499":{"id":"0:499","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:500:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:277:2173":{"id":"0:277:2173","crate_id":0,"name":"is_max","span":{"filename":"src/lib.rs","begin":[846,4],"end":[848,5]},"visibility":"public","docs":"Tests if the UUID is max (all ones).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12844:33649":{"id":"1:12844:33649","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12032:451","self::pattern":"1:12432:3327"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12452:3750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12797:33638":{"id":"1:12797:33638","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12432:3327","str::split":"1:12785:30239","prim@char":"4:12032:451","str::split_terminator":"1:12794:33637"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43986:3775","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12452:3750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:543:717":{"id":"0:543:717","crate_id":0,"name":"fmt","span":{"filename":"src/timestamp.rs","begin":[361,13],"end":[361,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2742-0:296:134":{"id":"b:1:2742-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2745:134","1:2746:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:267:2106":{"id":"0:267:2106","crate_id":0,"name":"to_fields_le","span":{"filename":"src/lib.rs","begin":[668,4],"end":[680,5]},"visibility":"public","docs":"Returns the four field values of the UUID in little-endian order.\n\nThe bytes in the returned integer fields will be converted from\nbig-endian order. This is based on the endianness of the UUID,\nrather than the target environment so bytes will be flipped on both\nbig and little endian machines.\n\n# Examples\n\n```\nuse uuid::Uuid;\n\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.to_fields_le(),\n    (\n        0xa4a3a2a1,\n        0xb2b1,\n        0xc2c1,\n        &[0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8],\n    )\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u32"},{"primitive":"u16"},{"primitive":"u16"},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42146:3490-0:550:1932":{"id":"a:1:42146:3490-0:550:1932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42146:3490","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:606:661":{"id":"0:606:661","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[329,29],"end":[329,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12856:9314":{"id":"1:12856:9314","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39967:26353","Self::is_ascii":"1:12855:9313"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42018:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39967:26353","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12756:33634":{"id":"1:12756:33634","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12038:1536","str::slice_mut_unchecked":"1:12757:33635","crate::ops::Index":"1:39598:3316"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:281:2200":{"id":"0:281:2200","crate_id":0,"name":"get_timestamp","span":{"filename":"src/lib.rs","begin":[898,4],"end":[925,5]},"visibility":"public","docs":"If the UUID is the correct version (v1, v6, or v7) this will return\nthe timestamp and counter portion parsed from a V1 UUID.\n\nReturns `None` if the supplied UUID is not V1.\n\nThe V1 timestamp format defined in RFC4122 specifies a 60-bit\ninteger representing the number of 100-nanosecond intervals\nsince 00:00:00.00, 15 Oct 1582.\n\n[`Timestamp`] offers several options for converting the raw RFC4122\nvalue into more commonly-used formats, such as a unix timestamp.\n\n# Roundtripping\n\nThis method is unlikely to roundtrip a timestamp in a UUID due to the way\nUUIDs encode timestamps. The timestamp returned from this method will be truncated to\n100ns precision for version 1 and 6 UUIDs, and to millisecond precision for version 7 UUIDs.\n\n[`Timestamp`]: v1/struct.Timestamp.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42018:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:264:2090":{"id":"0:264:2090","crate_id":0,"name":"as_fields","span":{"filename":"src/lib.rs","begin":[625,4],"end":[639,5]},"visibility":"public","docs":"Returns the four field values of the UUID.\n\nThese values can be passed to the [`Uuid::from_fields`] method to get\nthe original `Uuid` back.\n\n* The first field value represents the first group of (eight) hex\n  digits, taken as a big-endian `u32` value.  For V1 UUIDs, this field\n  represents the low 32 bits of the timestamp.\n* The second field value represents the second group of (four) hex\n  digits, taken as a big-endian `u16` value.  For V1 UUIDs, this field\n  represents the middle 16 bits of the timestamp.\n* The third field value represents the third group of (four) hex digits,\n  taken as a big-endian `u16` value.  The 4 most significant bits give\n  the UUID version, and for V1 UUIDs, the last 12 bits represent the\n  high 12 bits of the timestamp.\n* The last field value represents the last two groups of four and twelve\n  hex digits, taken in order.  The first 1-3 bits of this indicate the\n  UUID variant, and for V1 UUIDs, the next 13-15 bits indicate the clock\n  sequence and the last 48 bits indicate the node ID.\n\n# Examples\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::nil();\n\nassert_eq!(uuid.as_fields(), (0, 0, 0, &[0u8; 8]));\n\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.as_fields(),\n    (\n        0xa1a2a3a4,\n        0xb1b2,\n        0xc1c2,\n        &[0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8],\n    )\n);\n# Ok(())\n# }\n```","links":{"`Uuid::from_fields`":"0:18:2338"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u32"},{"primitive":"u16"},{"primitive":"u16"},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:191:2283":{"id":"0:191:2283","crate_id":0,"name":"into_uuid","span":{"filename":"src/fmt.rs","begin":[677,4],"end":[679,5]},"visibility":"public","docs":"Consumes the [`Simple`], returning the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet simple = Uuid::nil().simple();\nassert_eq!(simple.into_uuid(), Uuid::nil());\n```","links":{"`Simple`":"0:390:2846","`Uuid`":"0:607:2008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:497":{"id":"0:497","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2418:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:498:2837"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5811:1594":{"id":"5:5811:1594","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42146:3490-0:413:2185":{"id":"a:1:42146:3490-0:413:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42146:3490","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:56:2674":{"id":"0:56:2674","crate_id":0,"name":"set_version","span":{"filename":"src/builder.rs","begin":[854,4],"end":[857,5]},"visibility":"public","docs":"Specifies the version number of the UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["v",{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:470:717":{"id":"0:470:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:306":{"id":"0:306","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,27],"end":[4,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10083:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:307:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2731-0:589:1956":{"id":"b:1:2731-0:589:1956","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2733:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2731-0:607:2008":{"id":"b:1:2731-0:607:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2733:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:212:3058":{"id":"0:212:3058","crate_id":0,"name":"to_unix_nanos","span":{"filename":"src/timestamp.rs","begin":[166,4],"end":[168,5]},"visibility":"public","docs":"Get the number of fractional nanoseconds in the Unix timestamp.\n\nThis method is deprecated and probably doesn't do what you're expecting it to.\nIt doesn't return the timestamp as nanoseconds since the Unix epoch, it returns\nthe fractional seconds of the timestamp.","links":{},"attrs":["#[deprecated(note =\n\"use `to_unix` instead; this method will be removed in a future release\")]"],"deprecation":{"since":null,"note":"use `to_unix` instead; this method will be removed in a future release"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12763:26440":{"id":"1:12763:26440","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12764:26448"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44192:3758","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2424-0:367:2843":{"id":"b:1:2424-0:367:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2418:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2426:2837"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:583":{"id":"0:583","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,16],"end":[298,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2944:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:435:1134":{"id":"0:435:1134","crate_id":0,"name":"partial_cmp","span":{"filename":"src/fmt.rs","begin":[80,64],"end":[80,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:42018:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31182:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:3051":{"id":"0:210:3051","crate_id":0,"name":"to_unix","span":{"filename":"src/timestamp.rs","begin":[142,4],"end":[144,5]},"visibility":"public","docs":"Get the value of the timestamp as a Unix timestamp, as used in version 7 UUIDs.\n\n# Overflow\n\nIf conversion from RFC4122 ticks to the internal timestamp format would overflow\nit will wrap.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u64"},{"primitive":"u32"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12766:33636":{"id":"1:12766:33636","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44182:3766","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12862:31403":{"id":"1:12862:31403","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:896:9330"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12865:9768":{"id":"1:12865:9768","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4671:9768"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44226:3763","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:134":{"id":"0:85:134","crate_id":0,"name":"Error","span":{"filename":"src/parser.rs","begin":[31,4],"end":[31,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12803:30246":{"id":"1:12803:30246","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12032:451","str::splitn":"1:12800:30244","self::pattern":"1:12432:3327"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44040:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12452:3750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:395":{"id":"0:395","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,16],"end":[74,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2944:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2949:253-0:367:2843":{"id":"a:1:2949:253-0:367:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42146:3490-0:589:1956":{"id":"a:1:42146:3490-0:589:1956","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42146:3490","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12744:2044":{"id":"1:12744:2044","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11987:2707"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2424-0:523:1908":{"id":"b:1:2424-0:523:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2418:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2426:2837"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:137:2317":{"id":"0:137:2317","crate_id":0,"name":"urn","span":{"filename":"src/fmt.rs","begin":[119,4],"end":[121,5]},"visibility":"public","docs":"Get a [`Urn`] formatter.","links":{"`Urn`":"0:413:2185"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12736:873":{"id":"1:12736:873","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12032:451"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:259:2031":{"id":"0:259:2031","crate_id":0,"name":"NAMESPACE_URL","span":{"filename":"src/lib.rs","begin":[467,4],"end":[470,7]},"visibility":"public","docs":"UUID namespace for Uniform Resource Locators (URLs).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:473:717":{"id":"0:473:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12737:3564":{"id":"1:12737:3564","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2742-0:436:2851":{"id":"b:1:2742-0:436:2851","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2745:134","1:2746:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:384:462":{"id":"0:384:462","crate_id":0,"name":"cmp","span":{"filename":"src/fmt.rs","begin":[68,48],"end":[68,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31182:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:304":{"id":"0:304","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,23],"end":[4,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2492:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:443:717":{"id":"0:443:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[86,22],"end":[86,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:494:744":{"id":"0:494:744","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:226:1907":{"id":"0:226:1907","crate_id":0,"name":"ClockSequence","span":{"filename":"src/timestamp.rs","begin":[333,0],"end":[341,1]},"visibility":"public","docs":"A counter that can be used by version 1 and version 6 UUIDs to support\nthe uniqueness of timestamps.\n\n# References\n\n* [Clock Sequence in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.5)","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:227:205","0:228:3037"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:236","0:229"]}}},"1:12828:33644":{"id":"1:12828:33644","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:513":{"id":"0:513","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2418:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:514:2837"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32518:3339-0:296:134":{"id":"a:1:32518:3339-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32518:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3496-0:540:1906":{"id":"b:1:3496-0:540:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3498:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:241-0:226:1907":{"id":"0:241-0:226:1907","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,40],"end":[238,53]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"timestamp::ClockSequence","name":"ClockSequence","id":"0:226:1907","glob":false}}},"0:478:717":{"id":"0:478:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:2213":{"id":"0:25:2213","crate_id":0,"name":"from_slice","span":{"filename":"src/builder.rs","begin":[338,4],"end":[346,5]},"visibility":"public","docs":"Creates a UUID using the supplied bytes.\n\n# Errors\n\nThis function will return an error if `b` has any length other than 16.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_slice(&bytes)?;\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42165:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32436:243-0:296:134":{"id":"a:1:32436:243-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32436:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:309":{"id":"0:309","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,33],"end":[4,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32438:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:89:2746":{"id":"0:89:2746","crate_id":0,"name":"try_parse","span":{"filename":"src/parser.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"Parses a `Uuid` from a string of hexadecimal digits with optional\nhyphens.\n\nThis function is similar to [`parse_str`], in fact `parse_str` shares\nthe same underlying parser. The difference is that if `try_parse`\nfails, it won't generate very useful error messages. The `parse_str`\nfunction will eventually be deprecated in favor or `try_parse`.\n\nTo parse a UUID from a byte stream instead of a UTF8 string, see\n[`try_parse_ascii`].\n\n# Examples\n\nParse a hyphenated UUID:\n\n```\n# use uuid::{Uuid, Version, Variant};\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::try_parse(\"550e8400-e29b-41d4-a716-446655440000\")?;\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n# Ok(())\n# }\n```\n\n[`parse_str`]: #method.parse_str\n[`try_parse_ascii`]: #method.try_parse_ascii","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42165:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:486:717":{"id":"0:486:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2737-0:540:1906":{"id":"b:1:2737-0:540:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2707:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2740:134","1:2741:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2733:744":{"id":"1:2733:744","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:2282":{"id":"0:57:2282","crate_id":0,"name":"with_version","span":{"filename":"src/builder.rs","begin":[860,4],"end":[864,5]},"visibility":"public","docs":"Specifies the version number of the UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["v",{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:439":{"id":"0:439","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,9],"end":[86,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:440:455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2949:253-0:550:1932":{"id":"a:1:2949:253-0:550:1932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:40:2638":{"id":"0:40:2638","crate_id":0,"name":"from_sorted_rfc4122_timestamp","span":{"filename":"src/builder.rs","begin":[602,4],"end":[610,5]},"visibility":"public","docs":"Creates a `Builder` for a version 6 UUID using the supplied timestamp and node ID.\n\nThis method will encode the ticks, counter, and node ID in a sortable UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ticks",{"primitive":"u64"}],["counter",{"primitive":"u16"}],["node_id",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"6"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2731-0:296:134":{"id":"b:1:2731-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2733:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32518:3339-0:550:1932":{"id":"a:1:32518:3339-0:550:1932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32518:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5809-0:589:1956":{"id":"b:5:5809-0:589:1956","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9872:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5807:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5811:1594"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42146:3490-0:296:134":{"id":"a:1:42146:3490-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42146:3490","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:687-0:436:2851":{"id":"b:5:687-0:436:2851","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:3305","5:690:26202","5:691:26203"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:273:2044":{"id":"0:273:2044","crate_id":0,"name":"as_bytes","span":{"filename":"src/lib.rs","begin":[784,4],"end":[786,5]},"visibility":"public","docs":"Returns a slice of 16 octets containing the value.\n\nThis method borrows the underlying byte value of the UUID.\n\n# Examples\n\n```\n# use uuid::Uuid;\nlet bytes1 = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\nlet uuid1 = Uuid::from_bytes_ref(&bytes1);\n\nlet bytes2 = uuid1.as_bytes();\nlet uuid2 = Uuid::from_bytes_ref(bytes2);\n\nassert_eq!(uuid1, uuid2);\n\nassert!(std::ptr::eq(\n    uuid2 as *const Uuid as *const u8,\n    &bytes1 as *const [u8; 16] as *const u8,\n));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:254:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2949:253-0:436:2851":{"id":"a:1:2949:253-0:436:2851","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32436:243-0:550:1932":{"id":"a:1:32436:243-0:550:1932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32436:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2727-0:607:2008":{"id":"b:1:2727-0:607:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2730:2394"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:129:717":{"id":"0:129:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[54,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:489:717":{"id":"0:489:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:621":{"id":"0:621","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,37],"end":[437,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32438:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:467":{"id":"0:467","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9872:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:468:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42147:3489-0:550:1932":{"id":"a:1:42147:3489-0:550:1932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42147:3489","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:550:1932":{"id":"0:550:1932","crate_id":0,"name":"Version","span":{"filename":"src/lib.rs","begin":[301,0],"end":[322,1]},"visibility":"public","docs":"The version of the UUID, denoting the generating algorithm.\n\n# References\n\n* [Version in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3)","links":{},"attrs":["#[non_exhaustive]","#[repr(u8)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:551:1934","0:554:1936","0:557:1938","0:560:1940","0:563:1942","0:566:1944","0:569:1946","0:572:1948","0:575:1950","0:578:1952"],"impls":["a:1:32518:3339-0:550:1932","a:1:42146:3490-0:550:1932","a:1:32436:243-0:550:1932","a:1:42147:3489-0:550:1932","a:1:2949:253-0:550:1932","b:1:2737-0:550:1932","b:1:3496-0:550:1932","b:1:2427-0:550:1932","b:1:2424-0:550:1932","b:1:2742-0:550:1932","b:1:2727-0:550:1932","b:1:2731-0:550:1932","b:5:687-0:550:1932","0:587","0:584","0:581","0:583","0:586"]}}},"0:512:340":{"id":"0:512:340","crate_id":0,"name":"as_ref","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:2634":{"id":"0:39:2634","crate_id":0,"name":"from_sha1_bytes","span":{"filename":"src/builder.rs","begin":[593,4],"end":[597,5]},"visibility":"public","docs":"Creates a `Builder` for a version 5 UUID using the supplied SHA-1 hashed bytes.\n\nThis method assumes the bytes are already a SHA-1 hash, it will only set the appropriate\nbits for the UUID version and variant.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["sha1_bytes",{"resolved_path":{"name":"Bytes","id":"0:254:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2424-0:436:2851":{"id":"b:1:2424-0:436:2851","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2418:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2426:2837"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2427-0:436:2851":{"id":"b:1:2427-0:436:2851","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2421:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2429:26197"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2427-0:540:1906":{"id":"b:1:2427-0:540:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2421:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2429:26197"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:417:455":{"id":"0:417:455","crate_id":0,"name":"clone","span":{"filename":"src/fmt.rs","begin":[80,9],"end":[80,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:381:781":{"id":"0:381:781","crate_id":0,"name":"hash","span":{"filename":"src/fmt.rs","begin":[68,42],"end":[68,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10091:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:2344":{"id":"0:20:2344","crate_id":0,"name":"from_fields_le","span":{"filename":"src/builder.rs","begin":[168,4],"end":[187,5]},"visibility":"public","docs":"Creates a UUID from four field values in little-endian order.\n\nThe bytes in the `d1`, `d2` and `d3` fields will be flipped to convert\ninto big-endian order. This is based on the endianness of the UUID,\nrather than the target environment so bytes will be flipped on both\nbig and little endian machines.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet d1 = 0xa1a2a3a4;\nlet d2 = 0xb1b2;\nlet d3 = 0xc1c2;\nlet d4 = [0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8];\n\nlet uuid = Uuid::from_fields_le(d1, d2, d3, &d4);\n\nassert_eq!(\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d1",{"primitive":"u32"}],["d2",{"primitive":"u16"}],["d3",{"primitive":"u16"}],["d4",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2742-0:291:1925":{"id":"b:1:2742-0:291:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2745:134","1:2746:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:617:781":{"id":"0:617:781","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[437,26],"end":[437,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10091:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12767:26447":{"id":"1:12767:26447","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44210:3755","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12850:33651":{"id":"1:12850:33651","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12032:451","self::pattern":"1:12432:3327"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12452:3750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:34330":{"id":"5:5552:34330","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:3320","`String`":"5:7534:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:3320","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42146:3490-0:367:2843":{"id":"a:1:42146:3490-0:367:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42146:3490","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:423":{"id":"0:423","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,38],"end":[80,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:32463:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42147:3489-0:413:2185":{"id":"a:1:42147:3489-0:413:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42147:3489","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2727-0:589:1956":{"id":"b:1:2727-0:589:1956","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2730:2394"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3496-0:390:2846":{"id":"b:1:3496-0:390:2846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3498:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:537":{"id":"0:537","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,44],"end":[40,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10083:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:538:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:47:2338":{"id":"0:47:2338","crate_id":0,"name":"from_fields","span":{"filename":"src/builder.rs","begin":[744,4],"end":[746,5]},"visibility":"public","docs":"Creates a `Builder` from four field values.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet d1 = 0xa1a2a3a4;\nlet d2 = 0xb1b2;\nlet d3 = 0xc1c2;\nlet d4 = [0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8];\n\nlet uuid = Builder::from_fields(d1, d2, d3, &d4).into_uuid();\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d1",{"primitive":"u32"}],["d2",{"primitive":"u16"}],["d3",{"primitive":"u16"}],["d4",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:242-0:523:1908":{"id":"0:242-0:523:1908","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,55],"end":[238,64]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"timestamp::Timestamp","name":"Timestamp","id":"0:523:1908","glob":false}}},"0:527:717":{"id":"0:527:717","crate_id":0,"name":"fmt","span":{"filename":"src/timestamp.rs","begin":[40,9],"end":[40,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:613":{"id":"0:613","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,22],"end":[437,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:32463:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:432":{"id":"0:432","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,53],"end":[80,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2487:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:433:661"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12806:30248":{"id":"1:12806:30248","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42018:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12788:26450":{"id":"1:12788:26450","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12032:451","self::pattern":"1:12432:3327"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12248:3757","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:624":{"id":"0:624","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,48],"end":[437,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["le","lt","gt","ge"],"trait":{"name":"PartialOrd","id":"1:2529:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:625:1134"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2727-0:540:1906":{"id":"b:1:2727-0:540:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2730:2394"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:464":{"id":"0:464","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:9880:2840","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:465:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42147:3489-0:436:2851":{"id":"a:1:42147:3489-0:436:2851","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42147:3489","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:533:661":{"id":"0:533:661","crate_id":0,"name":"eq","span":{"filename":"src/timestamp.rs","begin":[40,29],"end":[40,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32436:243-0:589:1956":{"id":"a:1:32436:243-0:589:1956","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32436:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:521":{"id":"0:521","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2418:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:522:2837"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5809-0:607:2008":{"id":"b:5:5809-0:607:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9872:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5807:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5811:1594"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12761:2717":{"id":"1:12761:2717","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43894:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5809-0:413:2185":{"id":"b:5:5809-0:413:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9872:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5807:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5811:1594"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:131:717":{"id":"0:131:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[61,4],"end":[63,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2742-0:413:2185":{"id":"b:1:2742-0:413:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2745:134","1:2746:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:44:2655":{"id":"0:44:2655","crate_id":0,"name":"from_custom_bytes","span":{"filename":"src/builder.rs","begin":[650,4],"end":[654,5]},"visibility":"public","docs":"Creates a `Builder` for a version 8 UUID using the supplied user-defined bytes.\n\nThis method won't interpret the given bytes in any way, except to set the appropriate\nbits for the UUID version and variant.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["custom_bytes",{"resolved_path":{"name":"Bytes","id":"0:254:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12739:33631":{"id":"1:12739:33631","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2427-0:367:2843":{"id":"b:1:2427-0:367:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2421:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2429:26197"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:590:1958":{"id":"0:590:1958","crate_id":0,"name":"NCS","span":{"filename":"src/lib.rs","begin":[334,4],"end":[334,13]},"visibility":"default","docs":"Reserved by the NCS for backward compatibility.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0u8","value":"0"}}}},"0:492:744":{"id":"0:492:744","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[539,0],"end":[680,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:2186","0:185:2887","0:186:2917","0:188:2925","0:190:2680","0:191:2283"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42146:3490-0:436:2851":{"id":"a:1:42146:3490-0:436:2851","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42146:3490","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[36,0],"end":[40,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::std::string::String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:125:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12800:30244":{"id":"1:12800:30244","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12032:451","self::pattern":"1:12432:3327","str::rsplitn":"1:12803:30246"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44022:3774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:481:717":{"id":"0:481:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:520:340":{"id":"0:520:340","crate_id":0,"name":"as_ref","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[935,0],"end":[940,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2695:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:285:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:475":{"id":"0:475","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9872:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:476:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:593:1960":{"id":"0:593:1960","crate_id":0,"name":"RFC4122","span":{"filename":"src/lib.rs","begin":[336,4],"end":[336,11]},"visibility":"default","docs":"As described in the RFC4122 Specification (default).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,16],"end":[68,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2944:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:46:2603":{"id":"0:46:2603","crate_id":0,"name":"from_slice_le","span":{"filename":"src/builder.rs","begin":[720,4],"end":[722,5]},"visibility":"public","docs":"Creates a `Builder` using the supplied bytes in little endian order.\n\nThe individual fields encoded in the buffer will be flipped.\n\n# Errors\n\nThis function will return an error if `b` has any length other than 16.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\n# fn main() -> Result<(), uuid::Error> {\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Builder::from_slice_le(&bytes)?.into_uuid();\n\nassert_eq!(\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42165:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:523:1908":{"id":"b:5:687-0:523:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:3305","5:690:26202","5:691:26203"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:34:2403":{"id":"0:34:2403","crate_id":0,"name":"from_bytes_le","span":{"filename":"src/builder.rs","begin":[548,4],"end":[550,5]},"visibility":"public","docs":"Creates a `Builder` using the supplied bytes in little endian order.\n\nThe individual fields encoded in the buffer will be flipped.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::{Builder, Uuid};\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Builder::from_bytes_le(bytes).into_uuid();\n\nassert_eq!(\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"resolved_path":{"name":"Bytes","id":"0:254:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:186:2917":{"id":"0:186:2917","crate_id":0,"name":"encode_lower","span":{"filename":"src/fmt.rs","begin":[601,4],"end":[603,5]},"visibility":"public","docs":"Writes the [`Uuid`] as a lower-case simple string to `buffer`,\nand returns the subslice of the buffer that contains the encoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936DA01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.simple().encode_lower(&mut Uuid::encode_buffer()),\n        \"936da01f9abd4d9d80c702af85c822a8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 36];\n    assert_eq!(\n        uuid.simple().encode_lower(&mut buf),\n        \"936da01f9abd4d9d80c702af85c822a8\"\n    );\n    assert_eq!(\n        &buf as &[_],\n        b\"936da01f9abd4d9d80c702af85c822a8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2949:253-0:589:1956":{"id":"a:1:2949:253-0:589:1956","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:133:2262":{"id":"0:133:2262","crate_id":0,"name":"hyphenated","span":{"filename":"src/fmt.rs","begin":[93,4],"end":[95,5]},"visibility":"public","docs":"Get a [`Hyphenated`] formatter.","links":{"`Hyphenated`":"0:367:2843"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5551:34329":{"id":"5:5551:34329","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:488":{"id":"0:488","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:9880:2840","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:489:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:689:3305":{"id":"5:689:3305","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,38],"end":[68,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:32463:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12781:3563":{"id":"1:12781:3563","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42020:197","prim@char":"4:12032:451","self::pattern":"1:12432:3327"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42018:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12452:3750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5809-0:436:2851":{"id":"b:5:5809-0:436:2851","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9872:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5807:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5811:1594"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:134:2839":{"id":"0:134:2839","crate_id":0,"name":"as_hyphenated","span":{"filename":"src/fmt.rs","begin":[99,4],"end":[102,5]},"visibility":"public","docs":"Get a borrowed [`Hyphenated`] formatter.","links":{"`Hyphenated`":"0:367:2843"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:133":{"id":"0:82:133","crate_id":0,"name":"Err","span":{"filename":"src/parser.rs","begin":[23,4],"end":[23,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:440:455":{"id":"0:440:455","crate_id":0,"name":"clone","span":{"filename":"src/fmt.rs","begin":[86,9],"end":[86,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32518:3339-0:607:2008":{"id":"a:1:32518:3339-0:607:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32518:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12821:33641":{"id":"1:12821:33641","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12432:3327","`DoubleEndedIterator`":"1:7826:127","prim@char":"4:12032:451","str::match_indices":"1:12818:33640"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44086:3768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12452:3750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:3850":{"id":"5:5537:3850","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[249,0],"end":[392,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:166:2186","0:167:2887","0:168:2917","0:170:2925","0:172:2680","0:173:2283"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,9],"end":[68,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:371:455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2737-0:523:1908":{"id":"b:1:2737-0:523:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2707:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2740:134","1:2741:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:88:2296":{"id":"0:88:2296","crate_id":0,"name":"parse_str","span":{"filename":"src/parser.rs","begin":[64,4],"end":[68,5]},"visibility":"public","docs":"Parses a `Uuid` from a string of hexadecimal digits with optional\nhyphens.\n\nAny of the formats generated by this module (simple, hyphenated, urn,\nMicrosoft GUID) are supported by this parsing function.\n\nPrefer [`try_parse`] unless you need detailed user-facing diagnostics.\nThis method will be eventually deprecated in favor of `try_parse`.\n\n# Examples\n\nParse a hyphenated UUID:\n\n```\n# use uuid::{Uuid, Version, Variant};\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"550e8400-e29b-41d4-a716-446655440000\")?;\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n# Ok(())\n# }\n```\n\n[`try_parse`]: #method.try_parse","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42165:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:2362":{"id":"0:22:2362","crate_id":0,"name":"from_u128","span":{"filename":"src/builder.rs","begin":[206,4],"end":[225,5]},"visibility":"public","docs":"Creates a UUID from a 128bit value.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n\nlet uuid = Uuid::from_u128(v);\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"primitive":"u128"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2746:1617":{"id":"1:2746:1617","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42165:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:550:1932":{"id":"b:5:687-0:550:1932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:3305","5:690:26202","5:691:26203"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:501":{"id":"0:501","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:502:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:190:2680":{"id":"0:190:2680","crate_id":0,"name":"as_uuid","span":{"filename":"src/fmt.rs","begin":[663,4],"end":[665,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet simple = Uuid::nil().simple();\nassert_eq!(*simple.as_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42146:3490-0:523:1908":{"id":"a:1:42146:3490-0:523:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42146:3490","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2742-0:523:1908":{"id":"b:1:2742-0:523:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2745:134","1:2746:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42146:3490-0:540:1906":{"id":"a:1:42146:3490-0:540:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42146:3490","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:58:2680":{"id":"0:58:2680","crate_id":0,"name":"as_uuid","span":{"filename":"src/builder.rs","begin":[881,4],"end":[883,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet builder = Builder::nil();\n\nlet uuid1 = builder.as_uuid();\nlet uuid2 = builder.as_uuid();\n\nassert_eq!(uuid1, uuid2);\n```","links":{"`Uuid`":"0:607:2008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:385":{"id":"0:385","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,53],"end":[68,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32438:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:557:1938":{"id":"0:557:1938","crate_id":0,"name":"Dce","span":{"filename":"src/lib.rs","begin":[307,4],"end":[307,11]},"visibility":"default","docs":"Version 2: DCE Security.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"a:1:32436:243-0:523:1908":{"id":"a:1:32436:243-0:523:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32436:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32518:3339-0:589:1956":{"id":"a:1:32518:3339-0:589:1956","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32518:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:182:2283":{"id":"0:182:2283","crate_id":0,"name":"into_uuid","span":{"filename":"src/fmt.rs","begin":[534,4],"end":[536,5]},"visibility":"public","docs":"Consumes the [`Braced`], returning the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet braced = Uuid::nil().braced();\nassert_eq!(braced.into_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2008","`Braced`":"0:436:2851"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42147:3489-0:540:1906":{"id":"a:1:42147:3489-0:540:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42147:3489","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:199:2680":{"id":"0:199:2680","crate_id":0,"name":"as_uuid","span":{"filename":"src/fmt.rs","begin":[813,4],"end":[815,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet urn = Uuid::nil().urn();\nassert_eq!(*urn.as_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209:3045":{"id":"0:209:3045","crate_id":0,"name":"from_unix","span":{"filename":"src/timestamp.rs","begin":[102,4],"end":[119,5]},"visibility":"public","docs":"Construct a `Timestamp` from a Unix timestamp, as used in version 7 UUIDs.\n\n# Overflow\n\nIf conversion from RFC4122 ticks to the internal timestamp format would overflow\nit will wrap.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["context",{"impl_trait":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:226:1907","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u16"}}}}]}}},"generic_params":[],"modifier":"none"}}]}],["seconds",{"primitive":"u64"}],["nanos",{"primitive":"u32"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl ClockSequence<Output = u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:226:1907","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u16"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:262:2051":{"id":"0:262:2051","crate_id":0,"name":"get_version_num","span":{"filename":"src/lib.rs","begin":[536,4],"end":[538,5]},"visibility":"public","docs":"Returns the version number of the UUID.\n\nThis represents the algorithm used to generate the value.\nThis method is the future-proof alternative to [`Uuid::get_version`].\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"02f09a3f-1624-3b1d-8409-44eff7708208\")?;\n\nassert_eq!(3, my_uuid.get_version_num());\n# Ok(())\n# }\n```\n\n# References\n\n* [Version in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3)","links":{"`Uuid::get_version`":"0:263:2060"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3498:1632":{"id":"1:3498:1632","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39780:7412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167:2887":{"id":"0:167:2887","crate_id":0,"name":"from_uuid","span":{"filename":"src/fmt.rs","begin":[259,4],"end":[261,5]},"visibility":"public","docs":"Creates a [`Hyphenated`] from a [`Uuid`].\n\n[`Uuid`]: ../struct.Uuid.html\n[`Hyphenated`]: struct.Hyphenated.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:547":{"id":"0:547","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[361,33],"end":[361,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2778:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:548:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:291:1925":{"id":"0:291:1925","crate_id":0,"name":"Builder","span":{"filename":"src/builder.rs","begin":[47,0],"end":[47,25]},"visibility":"public","docs":"A builder for creating a UUID.\n\nThis type is useful if you need to mutate individual fields of a [`Uuid`]\nwhile constructing it. Since the [`Uuid`] type is `Copy`, it doesn't offer\nany methods to mutate in place. They live on the `Builder` instead.\n\nThe `Builder` type also always exposes APIs to construct [`Uuid`]s for any\nversion without needing crate features or additional dependencies. It's a\nlower-level API than the methods on [`Uuid`].\n\n# Examples\n\nCreating a version 4 UUID from externally generated random bytes:\n\n```\n# use uuid::{Builder, Version, Variant};\n# let rng = || [\n#     70, 235, 208, 238, 14, 109, 67, 201, 185, 13, 204, 195, 90,\n# 145, 63, 62,\n# ];\nlet random_bytes = rng();\n\nlet uuid = Builder::from_random_bytes(random_bytes).into_uuid();\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n```","links":{"`Uuid`":"0:607:2008"},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:32","a:1:32518:3339-0:291:1925","a:1:42146:3490-0:291:1925","a:1:32436:243-0:291:1925","a:1:42147:3489-0:291:1925","a:1:2949:253-0:291:1925","b:1:2737-0:291:1925","b:1:3496-0:291:1925","b:1:2427-0:291:1925","b:1:2424-0:291:1925","b:1:2742-0:291:1925","b:1:2727-0:291:1925","b:1:2731-0:291:1925","0:294"]}}},"0:625:1134":{"id":"0:625:1134","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[437,48],"end":[437,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:42018:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31182:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410:661":{"id":"0:410:661","crate_id":0,"name":"eq","span":{"filename":"src/fmt.rs","begin":[74,53],"end":[74,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:607:2008":{"id":"b:5:687-0:607:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:3305","5:690:26202","5:691:26203"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12832:33647":{"id":"1:12832:33647","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12032:451","self::pattern":"1:12432:3327"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12457:3749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:2925":{"id":"0:170:2925","crate_id":0,"name":"encode_upper","span":{"filename":"src/fmt.rs","begin":[361,4],"end":[363,5]},"visibility":"public","docs":"Writes the [`Uuid`] as an upper-case hyphenated string to\n`buffer`, and returns the subslice of the buffer that contains the\nencoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936da01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.hyphenated()\n            .encode_upper(&mut Uuid::encode_buffer()),\n        \"936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 40];\n    uuid.hyphenated().encode_upper(&mut buf);\n    assert_eq!(\n        &buf as &[_],\n        b\"936DA01F-9ABD-4D9D-80C7-02AF85C822A8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,22],"end":[68,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9867:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:374:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:127:717":{"id":"0:127:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[43,4],"end":[50,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2424-0:550:1932":{"id":"b:1:2424-0:550:1932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2418:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2426:2837"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2731-0:291:1925":{"id":"b:1:2731-0:291:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2733:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:427:781":{"id":"0:427:781","crate_id":0,"name":"hash","span":{"filename":"src/fmt.rs","begin":[80,42],"end":[80,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10091:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:2917":{"id":"0:168:2917","crate_id":0,"name":"encode_lower","span":{"filename":"src/fmt.rs","begin":[310,4],"end":[312,5]},"visibility":"public","docs":"Writes the [`Uuid`] as a lower-case hyphenated string to\n`buffer`, and returns the subslice of the buffer that contains the\nencoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936DA01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.hyphenated()\n            .encode_lower(&mut Uuid::encode_buffer()),\n        \"936da01f-9abd-4d9d-80c7-02af85c822a8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 40];\n    uuid.hyphenated().encode_lower(&mut buf);\n    assert_eq!(\n        &buf as &[_],\n        b\"936da01f-9abd-4d9d-80c7-02af85c822a8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:374:717":{"id":"0:374:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[68,22],"end":[68,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12818:33640":{"id":"1:12818:33640","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12432:3327","`DoubleEndedIterator`":"1:7826:127","prim@char":"4:12032:451","str::rmatch_indices":"1:12821:33641"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44068:3767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[48,0],"end":[169,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:207:3036","0:208:2204","0:209:3045","0:210:3051","0:212:3058"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5809-0:367:2843":{"id":"b:5:5809-0:367:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9872:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5807:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5811:1594"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:232:205":{"id":"0:232:205","crate_id":0,"name":"Output","span":{"filename":"src/timestamp.rs","begin":[344,4],"end":[344,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"ClockSequence","id":"0:226:1907","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:401":{"id":"0:401","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,38],"end":[74,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2492:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3496-0:436:2851":{"id":"b:1:3496-0:436:2851","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3498:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:173:2283":{"id":"0:173:2283","crate_id":0,"name":"into_uuid","span":{"filename":"src/fmt.rs","begin":[389,4],"end":[391,5]},"visibility":"public","docs":"Consumes the [`Hyphenated`], returning the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet hyphenated = Uuid::nil().hyphenated();\nassert_eq!(hyphenated.into_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2008","`Hyphenated`":"0:367:2843"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:506:2837":{"id":"0:506:2837","crate_id":0,"name":"borrow","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:2856":{"id":"0:136:2856","crate_id":0,"name":"as_simple","span":{"filename":"src/fmt.rs","begin":[112,4],"end":[115,5]},"visibility":"public","docs":"Get a borrowed [`Simple`] formatter.","links":{"`Simple`":"0:390:2846"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:611:455":{"id":"0:611:455","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[437,9],"end":[437,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:531":{"id":"0:531","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,29],"end":[40,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32438:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:121:717":{"id":"0:121:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2427-0:291:1925":{"id":"b:1:2427-0:291:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2421:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2429:26197"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:406":{"id":"0:406","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,48],"end":[74,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"1:2523:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:407:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2427-0:390:2846":{"id":"b:1:2427-0:390:2846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2421:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2429:26197"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:207:3036":{"id":"0:207:3036","crate_id":0,"name":"now","span":{"filename":"src/timestamp.rs","begin":[57,4],"end":[71,5]},"visibility":"public","docs":"Get a timestamp representing the current system time.\n\nThis method defers to the standard library's `SystemTime` type.\n\n# Panics\n\nThis method will panic if calculating the elapsed time since the Unix epoch fails.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["context",{"impl_trait":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:226:1907","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u16"}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl ClockSequence<Output = u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:226:1907","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u16"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12847:33650":{"id":"1:12847:33650","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12032:451","self::pattern":"1:12432:3327"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2731-0:390:2846":{"id":"b:1:2731-0:390:2846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2733:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:179:2925":{"id":"0:179:2925","crate_id":0,"name":"encode_upper","span":{"filename":"src/fmt.rs","begin":[506,4],"end":[508,5]},"visibility":"public","docs":"Writes the [`Uuid`] as an upper-case hyphenated string surrounded by\nbraces to `buffer`, and returns the subslice of the buffer that contains\nthe encoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936da01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.braced()\n            .encode_upper(&mut Uuid::encode_buffer()),\n        \"{936DA01F-9ABD-4D9D-80C7-02AF85C822A8}\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 40];\n    uuid.braced().encode_upper(&mut buf);\n    assert_eq!(\n        &buf as &[_],\n        b\"{936DA01F-9ABD-4D9D-80C7-02AF85C822A8}!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32436:243-0:540:1906":{"id":"a:1:32436:243-0:540:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32436:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,23],"end":[4,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:32463:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:27:2603":{"id":"0:27:2603","crate_id":0,"name":"from_slice_le","span":{"filename":"src/builder.rs","begin":[379,4],"end":[387,5]},"visibility":"public","docs":"Creates a UUID using the supplied bytes in little endian order.\n\nThe individual fields encoded in the buffer will be flipped.\n\n# Errors\n\nThis function will return an error if `b` has any length other than 16.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_slice_le(&bytes)?;\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\"\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42165:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:399:60":{"id":"0:399:60","crate_id":0,"name":"default","span":{"filename":"src/fmt.rs","begin":[74,29],"end":[74,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:534":{"id":"0:534","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,40],"end":[40,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:32463:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:389:1134":{"id":"0:389:1134","crate_id":0,"name":"partial_cmp","span":{"filename":"src/fmt.rs","begin":[68,64],"end":[68,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:42018:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31182:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12757:33635":{"id":"1:12757:33635","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12038:1536","crate::ops::IndexMut":"1:3162:3317","str::slice_unchecked":"1:12756:33634"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:542":{"id":"0:542","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[361,13],"end":[361,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9867:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:543:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:510:744":{"id":"0:510:744","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2737-0:607:2008":{"id":"b:1:2737-0:607:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2707:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2740:134","1:2741:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2737-0:291:1925":{"id":"b:1:2737-0:291:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2707:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2740:134","1:2741:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:205:3026":{"id":"0:205:3026","crate_id":0,"name":"UUID_TICKS_BETWEEN_EPOCHS","span":{"filename":"src/timestamp.rs","begin":[27,0],"end":[27,65]},"visibility":"public","docs":"The number of 100 nanosecond ticks between the RFC4122 epoch\n(`1582-10-15 00:00:00`) and the Unix epoch (`1970-01-01 00:00:00`).","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u64"},"expr":"0x01B2_1DD2_1381_4000","value":"122_192_928_000_000_000u64","is_literal":true}}},"0:301":{"id":"0:301","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,16],"end":[4,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9867:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:302:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2731-0:367:2843":{"id":"b:1:2731-0:367:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2733:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:236":{"id":"0:236","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[364,4],"end":[370,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ClockSequence","id":"0:226:1907","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:540:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:237:205","0:238:3037"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2429:26197":{"id":"1:2429:26197","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:166:2186":{"id":"0:166:2186","crate_id":0,"name":"LENGTH","span":{"filename":"src/fmt.rs","begin":[253,4],"end":[253,33]},"visibility":"public","docs":"The length of a hyphenated [`Uuid`] string.\n\n[`Uuid`]: ../struct.Uuid.html","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"primitive":"usize"},"default":"36"}}},"0:445:60":{"id":"0:445:60","crate_id":0,"name":"default","span":{"filename":"src/fmt.rs","begin":[86,29],"end":[86,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12857:9318":{"id":"1:12857:9318","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2424-0:390:2846":{"id":"b:1:2424-0:390:2846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2418:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2426:2837"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:429":{"id":"0:429","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,48],"end":[80,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"1:2523:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:430:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12853:33652":{"id":"1:12853:33652","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12393:133","`FromStr`":"1:12392:2733"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42165:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12392:2733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12392:2733","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12812:2718":{"id":"1:12812:2718","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12432:3327","`DoubleEndedIterator`":"1:7826:127","prim@char":"4:12032:451","str::rmatches":"1:12815:33639"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44122:3769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:397:717":{"id":"0:397:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[74,22],"end":[74,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:519":{"id":"0:519","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2695:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:520:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:442":{"id":"0:442","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,22],"end":[86,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9867:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:443:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:493":{"id":"0:493","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:494:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:434":{"id":"0:434","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,64],"end":[80,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["le","lt","gt","ge"],"trait":{"name":"PartialOrd","id":"1:2529:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:435:1134"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12835:33648":{"id":"1:12835:33648","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12032:451","self::pattern":"1:12432:3327"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32436:243-0:390:2846":{"id":"a:1:32436:243-0:390:2846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32436:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:376:60":{"id":"0:376:60","crate_id":0,"name":"default","span":{"filename":"src/fmt.rs","begin":[68,29],"end":[68,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:430:462":{"id":"0:430:462","crate_id":0,"name":"cmp","span":{"filename":"src/fmt.rs","begin":[80,48],"end":[80,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31182:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:530":{"id":"0:530","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,23],"end":[40,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2944:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:275:2163":{"id":"0:275:2163","crate_id":0,"name":"to_bytes_le","span":{"filename":"src/lib.rs","begin":[832,4],"end":[838,5]},"visibility":"public","docs":"Returns the bytes of the UUID in little-endian order.\n\nThe bytes will be flipped to convert into little-endian order. This is\nbased on the endianness of the UUID, rather than the target environment\nso bytes will be flipped on both big and little endian machines.\n\n# Examples\n\n```\nuse uuid::Uuid;\n\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.to_bytes_le(),\n    ([\n        0xa4, 0xa3, 0xa2, 0xa1, 0xb2, 0xb1, 0xc2, 0xc1, 0xd1, 0xd2,\n        0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8\n    ])\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"0:254:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252-0:291:1925":{"id":"0:252-0:291:1925","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[284,16],"end":[284,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::builder::Builder","name":"Builder","id":"0:291:1925","glob":false}}},"0:229":{"id":"0:229","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[343,0],"end":[348,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:226:1907","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ClockSequence","id":"0:226:1907","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}},"items":["0:232:205","0:233:3037"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12815:33639":{"id":"1:12815:33639","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12432:3327","`DoubleEndedIterator`":"1:7826:127","prim@char":"4:12032:451","str::matches":"1:12812:2718"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44140:3770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12452:3750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2424-0:291:1925":{"id":"b:1:2424-0:291:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2418:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2426:2837"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:53:2212":{"id":"0:53:2212","crate_id":0,"name":"nil","span":{"filename":"src/builder.rs","begin":[829,4],"end":[831,5]},"visibility":"public","docs":"Creates a `Builder` with an initial [`Uuid::nil`].\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet uuid = Builder::nil().into_uuid();\n\nassert_eq!(\n    \"00000000-0000-0000-0000-000000000000\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{"`Uuid::nil`":"0:14:2212"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:717":{"id":"0:108:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[12,0],"end":[1040,1]},"visibility":"public","docs":"Adapters for alternative string formats.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:367:2843","0:390:2846","0:413:2185","0:436:2851"],"is_stripped":false}}},"0:622":{"id":"0:622","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,37],"end":[437,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2487:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:623:661"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12858:9319":{"id":"1:12858:9319","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42147:3489-0:291:1925":{"id":"a:1:42147:3489-0:291:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42147:3489","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:498:2837":{"id":"0:498:2837","crate_id":0,"name":"borrow","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2949:253-0:413:2185":{"id":"a:1:2949:253-0:413:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:14:2212":{"id":"0:14:2212","crate_id":0,"name":"nil","span":{"filename":"src/builder.rs","begin":[72,4],"end":[74,5]},"visibility":"public","docs":"The 'nil UUID' (all zeros).\n\nThe nil UUID is a special form of UUID that is specified to have all\n128 bits set to zero.\n\n# References\n\n* [Nil UUID in RFC4122](https://tools.ietf.org/html/rfc4122.html#section-4.1.7)\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet uuid = Uuid::nil();\n\nassert_eq!(\n    \"00000000-0000-0000-0000-000000000000\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42147:3489-0:296:134":{"id":"a:1:42147:3489-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42147:3489","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:253-0:296:134":{"id":"0:253-0:296:134","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[284,34],"end":[284,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::error::Error","name":"Error","id":"0:296:134","glob":false}}},"1:12735":{"id":"1:12735","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12736:873","1:12737:3564","1:12738:33630","1:12739:33631","1:12741:33632","1:12744:2044","1:12745:33633","1:12746:339","1:12747:2878","1:12748:9224","1:12750:9225","1:12752:9226","1:12754:9227","1:12756:33634","1:12757:33635","1:12758:30231","1:12759:30232","1:12760:2230","1:12761:2717","1:12762:2091","1:12763:26440","1:12764:26448","1:12765:32956","1:12766:33636","1:12767:26447","1:12768:2410","1:12771:2318","1:12774:30250","1:12777:3603","1:12781:3563","1:12785:30239","1:12788:26450","1:12791:30242","1:12794:33637","1:12797:33638","1:12800:30244","1:12803:30246","1:12806:30248","1:12809:30249","1:12812:2718","1:12815:33639","1:12818:33640","1:12821:33641","1:12824:33642","1:12826:33643","1:12828:33644","1:12830:33645","1:12831:33646","1:12832:33647","1:12835:33648","1:12838:30251","1:12841:30252","1:12844:33649","1:12847:33650","1:12850:33651","1:12853:33652","1:12855:9313","1:12856:9314","1:12857:9318","1:12858:9319","1:12859:9320","1:12860:31401","1:12861:31402","1:12862:31403","1:12863:33653","1:12865:9768","1:12866:33654"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:181:2680":{"id":"0:181:2680","crate_id":0,"name":"as_uuid","span":{"filename":"src/fmt.rs","begin":[520,4],"end":[522,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet braced = Uuid::nil().braced();\nassert_eq!(*braced.as_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:607:2008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:532":{"id":"0:532","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,29],"end":[40,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2487:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:533:661"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:51:2362":{"id":"0:51:2362","crate_id":0,"name":"from_u128","span":{"filename":"src/builder.rs","begin":[789,4],"end":[791,5]},"visibility":"public","docs":"Creates a `Builder` from a 128bit value.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n\nlet uuid = Builder::from_u128(v).into_uuid();\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"primitive":"u128"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2949:253-0:390:2846":{"id":"a:1:2949:253-0:390:2846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:687-0:296:134":{"id":"b:5:687-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:3305","5:690:26202","5:691:26203"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:433:661":{"id":"0:433:661","crate_id":0,"name":"eq","span":{"filename":"src/fmt.rs","begin":[80,53],"end":[80,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,48],"end":[68,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"1:2523:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:384:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2427-0:607:2008":{"id":"b:1:2427-0:607:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2421:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2429:26197"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:413:2185":{"id":"0:413:2185","crate_id":0,"name":"Urn","span":{"filename":"src/fmt.rs","begin":[82,0],"end":[82,21]},"visibility":"public","docs":"Format a [`Uuid`] as a URN string, like\n`urn:uuid:67e55044-10b1-426f-9247-bb680e5fe0c8`.","links":{"`Uuid`":"0:607:2008"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:192","a:1:32518:3339-0:413:2185","a:1:42146:3490-0:413:2185","a:1:32436:243-0:413:2185","a:1:42147:3489-0:413:2185","a:1:2949:253-0:413:2185","b:1:2737-0:413:2185","b:1:3496-0:413:2185","b:1:2427-0:413:2185","b:1:2424-0:413:2185","b:1:2742-0:413:2185","b:1:2727-0:413:2185","b:1:2731-0:413:2185","b:5:687-0:413:2185","b:5:5809-0:413:2185","0:421","0:432","0:423","0:480","0:431","0:511","0:513","0:419","0:424","0:475","0:416","0:477","0:426","0:418","0:509","0:507","0:429","0:434"]}}},"0:535":{"id":"0:535","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,40],"end":[40,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2492:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:523:1908","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42146:3490-0:291:1925":{"id":"a:1:42146:3490-0:291:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42146:3490","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:228:3037":{"id":"0:228:3037","crate_id":0,"name":"generate_sequence","span":{"filename":"src/timestamp.rs","begin":[340,4],"end":[340,81]},"visibility":"default","docs":"Get the next value in the sequence to feed into a timestamp.\n\nThis method will be called each time a [`Timestamp`] is constructed.","links":{"`Timestamp`":"0:523:1908"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["seconds",{"primitive":"u64"}],["subsec_nanos",{"primitive":"u32"}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:226:1907","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:386":{"id":"0:386","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,53],"end":[68,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2487:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:387:661"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2742-0:390:2846":{"id":"b:1:2742-0:390:2846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2745:134","1:2746:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:572:1948":{"id":"0:572:1948","crate_id":0,"name":"SortRand","span":{"filename":"src/lib.rs","begin":[317,4],"end":[317,16]},"visibility":"default","docs":"Version 7: Timestamp and random.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"7","value":"7"}}}},"0:603:717":{"id":"0:603:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[329,22],"end":[329,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12762:2091":{"id":"1:12762:2091","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43904:1929","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:1904":{"id":"0:203:1904","crate_id":0,"name":"timestamp","span":{"filename":"src/timestamp.rs","begin":[1,0],"end":[468,1]},"visibility":"public","docs":"Generating UUIDs from timestamps.\n\nTimestamps are used in a few UUID versions as a source of decentralized\nuniqueness (as in versions 1 and 6), and as a way to enable sorting (as\nin versions 6 and 7). Timestamps aren't encoded the same way by all UUID\nversions so this module provides a single [`Timestamp`] type that can\nconvert between them.\n\n# Timestamp representations in UUIDs\n\nVersions 1 and 6 UUIDs use a bespoke timestamp that consists of the\nnumber of 100ns ticks since `1582-10-15 00:00:00`, along with\na counter value to avoid duplicates.\n\nVersion 7 UUIDs use a more standard timestamp that consists of the\nnumber of millisecond ticks since the Unix epoch (`1970-01-01 00:00:00`).\n\n# References\n\n* [Timestamp in RFC4122](https://www.rfc-editor.org/rfc/rfc4122#section-4.1.4)\n* [Timestamp in Draft RFC: New UUID Formats, Version 4](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04#section-6.1)","links":{"`Timestamp`":"0:523:1908"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:234:1905","0:205:3026","0:523:1908","0:226:1907"],"is_stripped":false}}},"0:587":{"id":"0:587","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,29],"end":[298,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2487:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:550:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:588:661"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:123:717":{"id":"0:123:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[30,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:436:2851":{"id":"0:436:2851","crate_id":0,"name":"Braced","span":{"filename":"src/fmt.rs","begin":[88,0],"end":[88,24]},"visibility":"public","docs":"Format a [`Uuid`] as a braced hyphenated string, like\n`{67e55044-10b1-426f-9247-bb680e5fe0c8}`.","links":{"`Uuid`":"0:607:2008"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:174","a:1:32518:3339-0:436:2851","a:1:42146:3490-0:436:2851","a:1:32436:243-0:436:2851","a:1:42147:3489-0:436:2851","a:1:2949:253-0:436:2851","b:1:2737-0:436:2851","b:1:3496-0:436:2851","b:1:2427-0:436:2851","b:1:2424-0:436:2851","b:1:2742-0:436:2851","b:1:2727-0:436:2851","b:1:2731-0:436:2851","b:5:687-0:436:2851","b:5:5809-0:436:2851","0:439","0:455","0:452","0:485","0:488","0:449","0:446","0:447","0:444","0:483","0:454","0:457","0:517","0:519","0:442","0:521","0:515","0:441"]}}},"b:1:3496-0:296:134":{"id":"b:1:3496-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3498:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:83:2734":{"id":"0:83:2734","crate_id":0,"name":"from_str","span":{"filename":"src/parser.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid_str",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42165:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:12392:2733","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:597:146":{"id":"0:597:146","crate_id":0,"name":"Future","span":{"filename":"src/lib.rs","begin":[340,4],"end":[340,10]},"visibility":"default","docs":"Reserved for future expansion.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:605":{"id":"0:605","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,29],"end":[329,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2487:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:606:661"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:595:1962":{"id":"0:595:1962","crate_id":0,"name":"Microsoft","span":{"filename":"src/lib.rs","begin":[338,4],"end":[338,13]},"visibility":"default","docs":"Reserved by Microsoft for backward compatibility.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:566:1944":{"id":"0:566:1944","crate_id":0,"name":"Sha1","span":{"filename":"src/lib.rs","begin":[313,4],"end":[313,12]},"visibility":"default","docs":"Version 5: SHA-1 hash.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"5","value":"5"}}}},"0:55:2624":{"id":"0:55:2624","crate_id":0,"name":"with_variant","span":{"filename":"src/builder.rs","begin":[840,4],"end":[851,5]},"visibility":"public","docs":"Specifies the variant of the UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["v",{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42147:3489-0:607:2008":{"id":"a:1:42147:3489-0:607:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42147:3489","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2737-0:367:2843":{"id":"b:1:2737-0:367:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2707:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2740:134","1:2741:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:465:717":{"id":"0:465:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:404:781":{"id":"0:404:781","crate_id":0,"name":"hash","span":{"filename":"src/fmt.rs","begin":[74,42],"end":[74,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10091:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:396":{"id":"0:396","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,22],"end":[74,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9867:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:397:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:469":{"id":"0:469","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:9878:2838","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:470:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32436:243-0:367:2843":{"id":"a:1:32436:243-0:367:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32436:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:388":{"id":"0:388","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,64],"end":[68,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["le","lt","gt","ge"],"trait":{"name":"PartialOrd","id":"1:2529:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:367:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:389:1134"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:233:3037":{"id":"0:233:3037","crate_id":0,"name":"generate_sequence","span":{"filename":"src/timestamp.rs","begin":[345,4],"end":[347,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["seconds",{"primitive":"u64"}],["subsec_nanos",{"primitive":"u32"}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:226:1907","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:563:1942":{"id":"0:563:1942","crate_id":0,"name":"Random","span":{"filename":"src/lib.rs","begin":[311,4],"end":[311,14]},"visibility":"default","docs":"Version 4: Random.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"4","value":"4"}}}},"b:1:2727-0:296:134":{"id":"b:1:2727-0:296:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:296:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2730:2394"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2737-0:436:2851":{"id":"b:1:2737-0:436:2851","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2707:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2740:134","1:2741:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:507":{"id":"0:507","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:508:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:599":{"id":"0:599","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,9],"end":[329,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:600:455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[38,0],"end":[133,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:88:2296","0:89:2746","0:90:2756"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:480":{"id":"0:480","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:9880:2840","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:481:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3496-0:607:2008":{"id":"b:1:3496-0:607:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3498:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12747:2878":{"id":"1:12747:2878","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12049:1641"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:517":{"id":"0:517","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:518:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2737-0:413:2185":{"id":"b:1:2737-0:413:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2707:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2740:134","1:2741:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:472":{"id":"0:472","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:9880:2840","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:473:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12860:31401":{"id":"1:12860:31401","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:896:9330"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:295:717":{"id":"0:295:717","crate_id":0,"name":"fmt","span":{"filename":"src/builder.rs","begin":[46,9],"end":[46,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2730:2394":{"id":"1:2730:2394","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2704:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/builder.rs","begin":[46,9],"end":[46,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9867:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:291:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:390:2846":{"id":"0:390:2846","crate_id":0,"name":"Simple","span":{"filename":"src/fmt.rs","begin":[76,0],"end":[76,24]},"visibility":"public","docs":"Format a [`Uuid`] as a simple string, like\n`67e5504410b1426f9247bb680e5fe0c8`.","links":{"`Uuid`":"0:607:2008"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:183","a:1:32518:3339-0:390:2846","a:1:42146:3490-0:390:2846","a:1:32436:243-0:390:2846","a:1:42147:3489-0:390:2846","a:1:2949:253-0:390:2846","b:1:2737-0:390:2846","b:1:3496-0:390:2846","b:1:2427-0:390:2846","b:1:2424-0:390:2846","b:1:2742-0:390:2846","b:1:2727-0:390:2846","b:1:2731-0:390:2846","b:5:687-0:390:2846","b:5:5809-0:390:2846","0:503","0:406","0:408","0:403","0:505","0:409","0:400","0:499","0:401","0:398","0:393","0:396","0:472","0:411","0:395","0:469","0:467","0:501"]}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[943,0],"end":[947,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"std::vec::Vec","id":"5:6959:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"items":["0:287:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:52:2365":{"id":"0:52:2365","crate_id":0,"name":"from_u128_le","span":{"filename":"src/builder.rs","begin":[810,4],"end":[812,5]},"visibility":"public","docs":"Creates a UUID from a 128bit value in little-endian order.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n\nlet uuid = Builder::from_u128_le(v).into_uuid();\n\nassert_eq!(\n    \"d8d7d6d5-d4d3-d2d1-c2c1-b2b1a4a3a2a1\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"primitive":"u128"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:460:717":{"id":"0:460:717","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9842:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9823:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:549:2260":{"id":"0:549:2260","crate_id":0,"name":"uuid","span":{"filename":"src/macros.rs","begin":[27,0],"end":[92,1]},"visibility":"public","docs":"Parse [`Uuid`][uuid::Uuid]s from string literals at compile time.\n\n## Usage\n\nThis macro transforms the string literal representation of a\n[`Uuid`][uuid::Uuid] into the bytes representation, raising a compilation\nerror if it cannot properly be parsed.\n\n## Examples\n\nSetting a global constant:\n\n```\n# use uuid::{uuid, Uuid};\npub const SCHEMA_ATTR_CLASS: Uuid = uuid!(\"00000000-0000-0000-0000-ffff00000000\");\npub const SCHEMA_ATTR_UUID: Uuid = uuid!(\"00000000-0000-0000-0000-ffff00000001\");\npub const SCHEMA_ATTR_NAME: Uuid = uuid!(\"00000000-0000-0000-0000-ffff00000002\");\n```\n\nDefining a local variable:\n\n```\n# use uuid::uuid;\nlet uuid = uuid!(\"urn:uuid:F9168C5E-CEB2-4faa-B6BF-329BF39FA1E4\");\n```\n\n## Compilation Failures\n\nInvalid UUIDs are rejected:\n\n```compile_fail\n# use uuid::uuid;\nlet uuid = uuid!(\"F9168C5E-ZEB2-4FAA-B6BF-329BF39FA1E4\");\n```\n\nEnable the feature `macro-diagnostics` to see the error messages below.\n\nProvides the following compilation error:\n\n```txt\nerror: invalid character: expected an optional prefix of `urn:uuid:` followed by [0-9a-fA-F-], found Z at 9\n    |\n    |     let id = uuid!(\"F9168C5E-ZEB2-4FAA-B6BF-329BF39FA1E4\");\n    |                              ^\n```\n\nTokens that aren't string literals are also rejected:\n\n```compile_fail\n# use uuid::uuid;\nlet uuid_str: &str = \"550e8400e29b41d4a716446655440000\";\nlet uuid = uuid!(uuid_str);\n```\n\nProvides the following compilation error:\n\n```txt\nerror: expected string literal\n  |\n  |     let uuid = uuid!(uuid_str);\n  |                      ^^^^^^^^\n```\n\n[uuid::Uuid]: https://docs.rs/uuid/*/uuid/struct.Uuid.html","links":{},"attrs":["#[cfg(not(feature = \"macro-diagnostics\"))]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! uuid {\n    ($uuid:literal) => { ... };\n}"}},"0:477":{"id":"0:477","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:9878:2838","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:478:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:514:2837":{"id":"0:514:2837","crate_id":0,"name":"borrow","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:2344":{"id":"0:49:2344","crate_id":0,"name":"from_fields_le","span":{"filename":"src/builder.rs","begin":[768,4],"end":[770,5]},"visibility":"public","docs":"Creates a `Builder` from four field values.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet d1 = 0xa1a2a3a4;\nlet d2 = 0xb1b2;\nlet d3 = 0xc1c2;\nlet d4 = [0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8];\n\nlet uuid = Builder::from_fields_le(d1, d2, d3, &d4).into_uuid();\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\"\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d1",{"primitive":"u32"}],["d2",{"primitive":"u16"}],["d3",{"primitive":"u16"}],["d4",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:419":{"id":"0:419","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,22],"end":[80,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9867:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:420:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2949:253-0:607:2008":{"id":"a:1:2949:253-0:607:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:515":{"id":"0:515","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:516:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12771:2318":{"id":"1:12771:2318","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12032:451","self::pattern":"1:12432:3327"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12437:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:505":{"id":"0:505","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2418:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:390:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:506:2837"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:237:205":{"id":"0:237:205","crate_id":0,"name":"Output","span":{"filename":"src/timestamp.rs","begin":[365,8],"end":[365,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"u16"}}}},"b:1:2424-0:589:1956":{"id":"b:1:2424-0:589:1956","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2418:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2426:2837"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:59:2283":{"id":"0:59:2283","crate_id":0,"name":"into_uuid","span":{"filename":"src/builder.rs","begin":[900,4],"end":[902,5]},"visibility":"public","docs":"Convert the builder into a [`Uuid`].\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet uuid = Builder::nil().into_uuid();\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"00000000-0000-0000-0000-000000000000\"\n);\n```","links":{"`Uuid`":"0:607:2008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:276:2061":{"id":"0:276:2061","crate_id":0,"name":"is_nil","span":{"filename":"src/lib.rs","begin":[841,4],"end":[843,5]},"visibility":"public","docs":"Tests if the UUID is nil (all zeros).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:601":{"id":"0:601","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,16],"end":[329,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2944:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:193:2186":{"id":"0:193:2186","crate_id":0,"name":"LENGTH","span":{"filename":"src/fmt.rs","begin":[686,4],"end":[686,33]},"visibility":"public","docs":"The length of a URN [`Uuid`] string.\n\n[`Uuid`]: ../struct.Uuid.html","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"primitive":"usize"},"default":"45"}}},"0:619":{"id":"0:619","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,32],"end":[437,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"1:2523:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:607:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:620:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2427-0:589:1956":{"id":"b:1:2427-0:589:1956","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32437:3100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2421:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:589:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2429:26197"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:560:1940":{"id":"0:560:1940","crate_id":0,"name":"Md5","span":{"filename":"src/lib.rs","begin":[309,4],"end":[309,11]},"visibility":"default","docs":"Version 3: MD5 hash.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"3","value":"3"}}}},"0:458:1134":{"id":"0:458:1134","crate_id":0,"name":"partial_cmp","span":{"filename":"src/fmt.rs","begin":[86,64],"end":[86,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Braced","id":"0:436:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:42018:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31182:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12760:2230":{"id":"1:12760:2230","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43888:3322","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:7738:15291":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"11:1566:21054":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:47246:7733":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:41955:7195":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:10852:22062":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"4:10247:9056":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:10813:35031":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:11549:3860":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:22302:15320":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"18:766:26189":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11666:4531":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"11:299:6012":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:13663:4797":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:41942:7612":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:13297:4708":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"4:8286:15385":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:15003:5130":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:10432:35029":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:774:6018":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:12003:15261":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:40706:7560":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:3155:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"11:883:8108":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:2596:5473":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:6263:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:8493:15424":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:32463:250":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:4252:3329":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:42453:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:7906:7149":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"5:830:4149":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:13334:4714":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"4:9474:8191":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"11:2548:6027":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:38354:9746":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"11:2554:35011":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:47636:7753":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:21562:14982":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:8850:3329":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:7534:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:13224:113":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"6:4824:6538":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:1591:6240":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:2670:5476":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:3112:3334":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"10:0:3233":{"crate_id":10,"path":["adler"],"kind":"module"},"5:1685:4143":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:9867:117":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:46722:7717":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:11612:7269":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:5568:6876":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:32939:5757":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:8097:5868":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:6700:6946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4878:6565":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:5687:4170":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:4806:5533":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"18:681:4349":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"4:4038:15363":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"9:237:7630":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"15:288:21076":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"11:856:8105":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:4889:5536":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:2983:34406":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:7503:5501":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"4:8973:8209":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:4460:3546":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"18:736:26188":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:1710:6315":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"4:7848:7143":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:12153:8004":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:22431:7304":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"0:234:1905":{"crate_id":0,"path":["uuid","timestamp","context"],"kind":"module"},"17:13056:4654":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:2256:7121":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:6798:6980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:43832:7300":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:44657:7679":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:5634:5548":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"9:450:20975":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"4:10532:8157":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:2993:3519":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:42018:200":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:23148:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"11:430:35002":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:6530:4143":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"4:8006:1950":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"6:4854:6554":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"4:945:8107":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:4566:6455":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:4745:5531":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:40534:7554":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:12273:4633":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:48028:7757":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:40447:3764":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:4977:6617":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"4:8872:7226":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:43290:7630":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:15943:4681":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"5:1536:8125":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:14470:4940":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:5104:6684":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:10775:7942":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"4:6070:4206":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:7828:5823":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:6813:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:47170:7731":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:32413:8268":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:16098:5428":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"4:2380:15315":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:30706:26564":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:6968:21989":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:22569:7311":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"18:491:4324":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4841:6549":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:6194:8182":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:6893:5717":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:0:878":{"crate_id":6,"path":["libc"],"kind":"module"},"4:12039:1622":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:12898:22055":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:6249:4212":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:22351:15062":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:38189:9743":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:44633:7673":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"16:4053:5520":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:12828:4633":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:33918:9740":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:2197:7928":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:3081:9753":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:48364:7772":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:12049:1641":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:33663:9738":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"14:215:5961":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:12536:8012":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"4:11355:7262":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:5123:6693":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"10:36:6033":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:1527:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:7838:4415":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"5:7028:4192":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"11:787:6019":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:22732:7334":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:3494:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:21381:15320":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:4127:107":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"3:0:3229":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"5:4212:4170":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:11508:8262":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"11:0:3234":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:13235:4698":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:6059:6839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"11:1910:6021":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:6560:4132":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:12432:3327":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:14765:5058":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:22484:7305":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:5146:6699":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:10321:111":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:22537:7306":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:7540:8239":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"0:569:1946":{"crate_id":0,"path":["uuid","Version","SortMac"],"kind":"variant"},"4:6426:3937":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"17:12230:4580":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"4:2946:134":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:47280:7734":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:42171:133":{"crate_id":1,"path":["core","result","Result","Err"],"kind":"foreign_type"},"1:34091:9741":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:0:478":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:15279:5200":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"4:9479:4226":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:22605:26581":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:10822:7190":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:5982:5590":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:43813:7299":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:34437:5763":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:6456:5645":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:42998:3543":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:4919:28990":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:8919:3488":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:13121:4677":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:16076:5422":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:23210:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:4647:6487":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4516:6429":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"15:394:21086":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:542:6153":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:62:15523":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"11:673:3329":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"8:0:3231":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:4884:6566":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12103:8000":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:3607:3330":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:15027:5132":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:13935:4838":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"4:4744:15375":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:1883:3863":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:8814:7223":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"17:2169:22109":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:555:6159":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:4444:4172":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:6871:3989":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:44546:3319":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"0:551:1934":{"crate_id":0,"path":["uuid","Version","Nil"],"kind":"variant"},"6:4578:6461":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:44898:7684":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:11675:4612":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:10155:8224":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"18:564:4335":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:11981:8242":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:5648:8020":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:10315:4478":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:11549:4519":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:13322:4713":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:13976:4845":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:5696:21982":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:11439:7967":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:0:3238":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:10618:35032":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:3737:3331":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:4469:15386":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:5816:5569":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"4:6983:9174":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:21210:26884":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:4676:6489":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:5085:6670":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:6844:5712":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:42258:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"4:7901:7146":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:9339:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:3166:32336":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:13026:4650":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:11014:7951":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:7610:7088":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"18:582:3509":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"4:1902:3826":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"17:13882:4539":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:44834:146":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"5:1439:3330":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:11388:7265":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:44086:3768":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"4:8866:3331":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:4955:6601":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:10076:8148":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:46208:7701":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:8195:5876":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:4115:8246":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:557:8138":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:4364:6339":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:15287:5203":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:1528:6198":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:3915:5519":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:4150:9769":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:5152:6702":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:12392:2733":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:401:7923":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:42297:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:43261:7629":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:46753:7718":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:6222:6889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"4:3425:7193":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"6:4351:6330":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:8891:7227":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:9874:3535":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:40998:7582":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:10812:125":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:12197:7647":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:6017:21984":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:9069:7234":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:14145:4887":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:12659:22032":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"11:2124:5744":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:14887:5106":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:4527:5525":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:39598:3316":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:46107:7697":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:41237:7589":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:4939:1100":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:6297:226":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"4:5746:8177":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:46186:7700":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:22744:9679":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:1546:6209":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"14:0:3236":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:6268:35024":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:11476:6024":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:10962:7947":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"4:1909:704":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:31210:3509":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:43269:3630":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:4497:5524":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6818:5711":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:42769:2840":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:6117:4170":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:13285:4707":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:3460:7933":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13742:4810":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"11:364:4135":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:15184:5173":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"11:2326:8109":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:9813:22049":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"4:9274:8149":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:9842:140":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:39512:3333":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:22718:7333":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"4:12014:32691":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:48239:7763":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:5829:6706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:39967:26353":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:7692:7107":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:10083:149":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:12560:8014":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:2574:5472":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:6489:7288":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"4:11215:7257":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:7747:9842":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:5830:5570":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:44217:3762":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:6386:5638":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"11:2369:8121":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:23179:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:43862:3323":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:7826:127":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"4:12032:451":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:42103:3486":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"16:7318:5781":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"4:1873:3825":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:44040:3773":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:2428:5466":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:9872:126":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:4266:7281":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:363:8137":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:7067:5741":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:4800:6526":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:46125:7698":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:8050:5864":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4616:6477":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:5897:6750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:12663:117":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:43968:3776":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"7:0:1686":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6485:5490":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"4:8545:3329":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"11:396:4137":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:11632:4526":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:7217:9845":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:21193:26880":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"4:928:15272":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:7510:7137":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:10338:32845":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:8245:3332":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:32427:7405":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:41222:3937":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:5612:5493":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:39602:7409":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:4613:5528":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:3670:15355":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:8115:5871":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:6332:5487":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:1692:4170":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:13648:4792":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"11:1107:8113":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:1094:7925":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:21181:26880":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"4:8904:15448":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"4:8207:1929":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"6:7388:7084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:44661:7680":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:41022:7584":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:44182:3766":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:4480:6416":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:8239:5798":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:46856:7720":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:13328:3979":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"6:4628:6486":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"18:699:4353":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:5969:6784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:21870:7303":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:13633:4788":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"11:1007:5744":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:5381:8171":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"9:357:20990":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:9344:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:4535:6437":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:43508:7636":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:46023:7694":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:11755:7989":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:40726:7563":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:4434:6391":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:563:6164":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:5910:6751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:4383:8169":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"9:486:20974":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:10608:7940":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:9878:2838":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:13504:4757":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"4:504:4162":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"11:123:4133":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:4862:5535":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11497:4514":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:3581:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:2907:5486":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:22125:15068":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:6243:8048":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"18:727:4361":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:1815:1187":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"6:6658:6922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:44210:3755":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:40716:7562":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:43053:3543":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:9876:3536":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:10091:153":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"6:7371:7074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:7645:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"4:9467:135":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:16016:5406":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"18:538:4333":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"4:11234:158":{"crate_id":4,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"5:2474:7122":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:9824:2259":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:8237:15354":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:14221:4896":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:14662:4972":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:15990:5400":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:14099:4877":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:5431:8175":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"16:2380:5464":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:1913:16928":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:15980:5399":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:4428:6390":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:12572:8015":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"4:7663:1925":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:12050:1638":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"6:4870:6561":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"11:832:8116":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:6741:6973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:11469:7970":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:5117:6690":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:12366:22176":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:4182:4170":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:6901:5497":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"9:330:6071":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:6146:4208":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:10422:7937":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"4:4906:15411":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"4:3994:15361":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:11978:7994":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:15527:5282":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:10962:3773":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"11:1025:8109":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"4:12036:338":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"4:5971:4212":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:43936:3771":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:12310:4593":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:14757:5055":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:5982:6790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:6837:6998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:2810:5482":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"11:875:8107":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:12684:4436":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:2450:5467":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:40:3981":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:10796:8256":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:15329:5212":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:4417:5522":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:3594:3329":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"0:203:1904":{"crate_id":0,"path":["uuid","timestamp"],"kind":"module"},"16:2526:5470":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11226:7956":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:2644:5475":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:2209:15302":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"4:6896:4219":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:5140:6697":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:6086:6848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"4:4700:15413":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:4:1113":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"11:742:8101":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:15566:5291":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:6162:4211":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:4388:6357":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:7556:7085":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:7702:7109":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:3603:3309":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:14778:5065":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:7523:5805":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"0:390:2846":{"crate_id":0,"path":["uuid","fmt","Simple"],"kind":"struct"},"4:849:3330":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:46675:7716":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:7269:35026":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:6687:5683":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:39697:220":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:13909:4835":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:23086:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"4:12051:1639":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"5:7375:3331":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:48250:7764":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:47216:7732":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:7513:5804":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:9671:3555":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:7618:3982":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:15062:5142":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:7276:3331":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:6401:5489":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:3232:5454":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:22593:7315":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:11973:8263":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:5384:21981":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:4455:6400":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:7657:7098":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:7554:5503":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"0:560:1940":{"crate_id":0,"path":["uuid","Version","Md5"],"kind":"variant"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:23117:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:2695:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"4:7732:15260":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:39741:9748":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:6781:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:7792:21993":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:6531:5655":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:40489:7549":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:13707:4806":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:548:6156":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:6156:5620":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:4381:8248":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11065:4492":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:48230:7762":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:5435:5546":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:44665:7681":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:4549:6445":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"18:652:4325":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:4488:6418":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7128:7231":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:10689:3330":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:22203:15070":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:10293:1929":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:38933:9747":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:44653:7678":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"4:3732:8164":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:8190:7557":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:30580:3977":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:1270:5744":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:3241:8160":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:12037:1503":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:5395:8173":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:14041:4851":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:4031:4170":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"15:327:8692":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:12055:1696":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:14497:4943":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:6742:5696":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"18:590:4336":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"4:9186:32698":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:12584:8016":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"4:8226:8201":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:4050:4143":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:14921:5109":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:47966:7756":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"14:187:21064":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:6691:6945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:39780:7412":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:12091:7999":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:951:8108":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"11:2569:3321":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:40562:7555":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:3797:5516":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:13182:4691":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:2949:253":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"16:7736:5813":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:14282:4906":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:11399:7964":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:15337:5214":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:15645:5312":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"4:8828:7224":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:10944:6090":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:48270:7766":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12510:4608":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"4:3201:8158":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:3358:27122":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:15:2229":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:16049:5413":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"11:844:15272":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"4:4028:15362":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:23055:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:10657:4506":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"4:7931:7111":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:3687:4143":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:22080:15067":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:4860:6557":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:2228:7931":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:44068:3767":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"0:523:1908":{"crate_id":0,"path":["uuid","timestamp","Timestamp"],"kind":"struct"},"16:6352:5632":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"4:8213:3772":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:44513:7668":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:5995:5447":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:5885:6746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:14633:4952":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:10137:4473":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:2696:5477":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:12244:4585":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:32518:3339":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:16032:5411":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:40455:3763":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:41978:7613":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:6041:21985":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:3239:8159":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:14296:4908":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:11412:7965":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"4:1562:6022":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:42078:3329":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"17:10667:35033":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:30351:9643":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"16:8134:5874":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:3738:7111":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:5753:8180":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:40470:9793":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:1664:6295":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"4:723:150":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:5128:210":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"16:5049:5541":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:14509:4950":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:11563:4520":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12264:4590":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"4:7668:7140":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"17:15507:5277":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"4:0:1528":{"crate_id":4,"path":["std"],"kind":"module"},"4:5825:4204":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:43888:3322":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:11215:4503":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:14057:4856":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:2942:3514":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:40411:7545":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:38299:9745":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:40868:7579":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:47778:7754":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:4998:854":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:15177:5172":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:14455:4936":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:14001:4847":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:10940:8190":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:10974:4490":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"4:10538:8161":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"4:8352:7198":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:11307:7258":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:4169:9770":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:41264:7592":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:8200:7582":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:5780:8181":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:7643:15320":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"0:575:1950":{"crate_id":0,"path":["uuid","Version","Custom"],"kind":"variant"},"1:7935:175":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:7360:35025":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:7548:3310":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:5992:4178":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:3461:5513":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:42414:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:39794:7413":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"4:12035:1150":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"4:3199:8157":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:15244:5189":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:16087:5427":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:15432:5264":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:33781:9739":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:42165:232":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:32551:112":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:2954:3515":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"5:7306:4155":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:10896:4487":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:4921:5537":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"18:113:26179":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:41997:7614":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:44847:233":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"6:6868:7023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:7668:7102":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:11998:8715":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:48349:7771":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:5876:7284":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:14989:5126":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"4:12046:796":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"1:23272:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:6107:6860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:13407:4728":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:4462:5523":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:1387:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"11:2231:6024":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:12356:4599":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:7338:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"11:710:8100":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"11:2562:6029":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:7492:5801":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:7568:5504":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:46085:7696":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:2154:7113":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:7333:9831":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"18:707:3751":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:9678:22035":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:2586:4198":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:9790:22048":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:6721:21988":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:22257:15071":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:11269:4490":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:21992:15320":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:46980:7728":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"11:2423:3331":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:11604:4523":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"4:8146:7189":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"17:15589:5304":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:7015:5734":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"4:2622:8155":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:7474:8083":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:12054:848":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"16:3032:5509":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:14878:5102":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:13787:4820":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"4:12045:795":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"4:7580:4222":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:44140:3770":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:8281:5883":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:7651:7097":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:212:4142":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:40675:7557":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:15855:4677":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"4:10986:7225":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:5033:6649":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:4569:15404":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:3655:4375":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:5017:5540":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:2618:5474":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:786:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:44637:7674":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"4:11476:8164":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:6543:15442":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"4:867:6018":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:507:6127":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:23303:186":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:2093:3865":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:4167:15383":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:8169:15319":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"17:11041:4506":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:1734:6324":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:43044:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:5763:7282":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:14194:4894":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:4998:6632":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:6169:6878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:15013:5131":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:5760:21983":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"11:800:3309":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"11:1887:3331":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:6934:7059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:30812:26563":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"13:0:3230":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:6792:5710":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:45977:7692":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:1718:6319":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:3049:21124":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:1703:6312":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:10881:22063":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"11:1160:8115":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:7843:8191":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:12053:1637":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"1:40639:8271":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"18:574:4325":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:10095:8223":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:42988:7619":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:7563:4205":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:41231:7588":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:42375:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:6804:6982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:3443:8163":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:11987:2707":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:495:6122":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:42611:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11141:7955":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:533:6147":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:10762:7244":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:40819:7575":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"4:4964:3478":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"17:9860:22050":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:7391:21991":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:4401:6367":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:44192:3758":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:574:6169":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:31182:202":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:1906:3862":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:5661:5552":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:10302:4255":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:2881:5485":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:22711:7330":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:46055:7695":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:7788:162":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:14385:4928":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:40758:7569":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"11:2140:8109":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:4703:15386":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:11779:4532":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:11701:7981":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:10102:4472":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"4:11197:3089":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:15535:5283":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:32402:8267":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:42336:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:7559:3311":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"18:636:4348":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:1315:8115":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:26181:272":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"4:4042:15364":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:10869:3771":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:10471:35037":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"4:9196:7238":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:44928:7687":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:15480:5265":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:4915:15412":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:5866:5577":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"18:80:26177":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:44298:9932":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:7782:5815":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"15:306:21077":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:14934:5114":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:42572:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:637:8139":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:4698:6491":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:2704:141":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"17:15384:5227":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:3491:31913":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:10511:15320":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11800:4534":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:43761:7638":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:10907:8258":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:22645:26545":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:6467:5646":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:2911:4201":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:38244:9744":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"18:624:35041":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:44669:7255":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:22666:26555":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:43308:7634":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"4:10953:8176":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:7544:5806":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:5961:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:2321:5455":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:7281:26255":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:7679:7103":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"4:8403:7208":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:12972:4643":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:7054:5738":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:44503:7664":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:5388:3753":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:5446:1536":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"16:4641:5529":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:3753:8126":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:1743:658":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:9164:8219":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:16146:5438":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:48259:7765":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:1477:6018":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"19:0:1130":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:3328:260":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:15374:5222":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:33311:9736":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:2487:207":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:15294:5204":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:11395:7963":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:8802:205":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:40844:4346":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:10831:32705":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:4235:8247":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:3160:33372":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:3065:4370":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:3764:5515":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:10334:4260":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:5727:5557":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:44478:7663":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:939:8105":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:6644:239":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:15101:5153":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12930:22056":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:4151:15381":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:21383:14985":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"4:5987:226":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:10990:8260":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:2352:3834":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"4:12030:401":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"5:1789:3982":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:11321:4506":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:12335:4596":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:6944:35022":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:9971:7609":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:12486:4607":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:14235:4899":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:22553:7307":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:2202:8153":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:10172:4474":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:10925:22064":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"4:8281:7196":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:7622:7090":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:2031:7927":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:39675:221":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:4798:4202":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:48426:7774":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:13584:4764":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"4:859:3331":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:2368:15309":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"17:13162:4681":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:903:3329":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:10780:7250":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:14251:4901":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:1486:6019":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:9147:3944":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"4:11313:8236":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:9526:29504":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"4:4821:15371":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:12220:4578":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:47888:7755":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:40619:8270":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"16:7006:8061":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:4773:7935":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:6425:5642":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:5650:3987":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:10578:3939":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:46532:7711":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:41835:7605":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:22217:3843":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:48296:7768":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:44335:7657":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:2406:5465":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:13516:4760":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:6898:7040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:1576:6228":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:15612:5305":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12180:8006":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:3123:3336":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:7694:5505":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:2944:232":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"1:10948:3774":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:12213:7648":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:3600:5514":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:12380:4601":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"4:2205:3851":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:14904:5108":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"18:660:7916":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:3830:5517":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:40767:7570":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:12459:4490":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:2703:7125":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:281:3320":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:40796:7573":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:40666:8272":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:12872:4635":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:3966:15358":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:10665:3329":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:6879:5715":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:11426:7966":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:13922:4837":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:12548:8013":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"6:6228:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:1537:6203":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:3002:3945":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:46600:7714":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:1203:7926":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:43730:8278":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:3230:34571":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:1682:6302":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:9823:232":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"16:2744:5479":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:483:6116":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:2048:7111":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"0:413:2185":{"crate_id":0,"path":["uuid","fmt","Urn"],"kind":"struct"},"17:16180:4713":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"4:9021:8216":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:44366:7660":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"4:922:8102":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:4377:227":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"4:9094:183":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:40482:7548":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"4:12052:1640":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:1054:8109":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:14156:4889":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:836:3329":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"0:572:1948":{"crate_id":0,"path":["uuid","Version","SortRand"],"kind":"variant"},"1:33125:5754":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"5:3217:6022":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:42094:3331":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:44235:3764":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:5322:5544":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:48387:7773":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:43721:7295":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:46263:7704":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:3333:143":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:5344:4143":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:6686:4143":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:9882:212":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:46934:7727":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5130:6696":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"4:3735:8165":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:7660:5811":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:6889:7037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:13055:29145":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:48212:7761":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:11155:4496":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:5877:3309":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:12202:22175":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:6819:6987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:44320:7651":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:32406:5798":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"17:14843:5101":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"12:0:3235":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:15301:5205":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"4:5632:4212":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:9886:3538":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:6351:15451":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:44953:7688":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:4686:6490":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11243:7959":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"4:8274:7195":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"4:1406:152":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"11:687:3330":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:16123:5433":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"4:11382:7264":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:4411:4170":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:7598:7086":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:7003:4189":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:6346:8059":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:4830:6541":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:12701:4626":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:10792:7144":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:1778:634":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:41806:9850":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:5921:6759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:40735:7565":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:44940:6032":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"4:11453:4234":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:14969:5118":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:2359:5463":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"4:3930:15357":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"4:1550:6020":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:3099:123":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12029:4570":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"14:221:5963":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:4610:6475":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:15710:5330":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:14021:4850":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"4:12047:797":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:6483:7289":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:7597:35023":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:33722:9737":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:7797:3338":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"4:1758:8146":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:48090:7758":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:10738:8231":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:3373:9755":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"0:540:1906":{"crate_id":0,"path":["uuid","timestamp","context","NoContext"],"kind":"struct"},"18:614:35040":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:11307:7962":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:40776:7571":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:42748:3536":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:2518:8154":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"11:2352:8111":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:13347:4715":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"4:7136:33378":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"4:8984:8211":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:12746:4628":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:8562:7220":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:4666:6488":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:11045:4230":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:47010:7729":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"4:11158:7224":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:11932:7991":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:10355:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:11485:7975":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:7751:9841":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:15133:5160":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:11459:7969":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"11:1066:21053":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:7616:7089":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:12437:3318":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:10569:35034":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:3988:15360":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:13478:4752":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:5052:6657":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"11:2498:21049":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"6:4584:6464":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:9730:22046":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:14822:5096":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:39719:222":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:11991:4568":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:22:731":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:13309:4711":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:501:6124":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"4:10473:4227":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:13869:4830":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:16004:5404":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:12718:22054":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:13856:4827":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:7923:8194":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:14950:5117":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:13832:4826":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:11034:4229":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:2986:3517":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:44122:3769":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:42146:3490":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"14:31:8096":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:7342:35027":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:7026:4220":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:588:6177":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:2418:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:44492:9933":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:3315:5512":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:43300:7633":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:5859:6731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4947:6596":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:886:4151":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:3345:9752":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:11816:4238":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:44441:7662":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11817:22151":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"11:1051:8111":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4847:6552":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:13754:4812":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:10785:35035":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:45955:7691":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:261:7922":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:12452:3750":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:5955:6783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:15235:5186":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:12009:4506":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:7884:21994":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:43876:3761":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:46408:7708":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:40435:7547":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:4375:6347":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:6013:15497":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"0:607:2008":{"crate_id":0,"path":["uuid","Uuid"],"kind":"struct"},"1:3127:137":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:44649:7677":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:14439:4934":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12140:8003":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:15725:5331":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"4:5308:126":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:22993:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"4:8535:7216":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"5:2183:7115":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:6943:7062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13436:4737":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:15367:5220":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"4:7915:8193":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:3980:15359":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"11:2536:6025":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"4:3482:2259":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:14698:5003":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"9:507:6093":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"7:31:20961":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:6357:182":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:21171:3509":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:12042:691":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"16:5905:5580":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:40828:7576":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:6261:8056":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:5240:209":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:40463:3762":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:13724:4809":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12432:8010":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:44349:7659":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:10051:4470":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:4585:5527":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:9918:22051":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:13948:4840":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:3251:7932":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:5121:5543":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:5939:5586":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:4595:6468":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:5743:5559":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"11:2443:3309":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"18:671:7920":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:9531:8717":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:8292:8204":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:6204:8029":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:8181:5508":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:10035:4469":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:15049:5136":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:6764:6974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:43071:134":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"5:4865:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:41772:7596":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:43028:5842":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:6415:5641":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:909:8116":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"14:40:4678":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:11657:4530":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"5:2236:34907":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:7330:3331":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:46456:7709":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:6376:21986":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:4932:6590":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:6600:21987":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:7582:5807":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:1674:6301":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"4:2426:3173":{"crate_id":4,"path":["std","io"],"kind":"module"},"17:12921:4596":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:12758:4629":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:4719:5530":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4755:6503":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:1604:6247":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:4893:6569":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:8001:8195":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:11507:1932":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:2969:21123":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:12137:7643":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:6361:5633":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"4:4491:15387":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:43842:8282":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:43904:1929":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:1024:4143":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:11593:7268":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:45931:7690":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:7481:26577":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:15212:5181":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:12474:4506":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:6718:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:8167:8095":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"18:521:26190":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:10915:7944":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"0:254:1929":{"crate_id":0,"path":["uuid","Bytes"],"kind":"type_alias"},"1:39655:218":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:21434:15320":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:21553:15320":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"4:914:8100":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:1496:6185":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:14426:4933":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:6248:6904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:1545:3982":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:4543:6442":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"4:10968:32416":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:40425:7546":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"4:1040:5744":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:48174:7760":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:5075:6665":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"18:719:4358":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:8205:21995":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:42216:3330":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:15200:5175":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11168:22081":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:22682:26527":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:3162:3317":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:6960:8060":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:16134:5435":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"7:78:20968":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:5446:111":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:47430:7735":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:15253:5190":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:40688:7270":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:119:15577":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"4:7689:3939":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"16:6545:5657":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"4:2354:15305":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:2062:8126":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:7380:32404":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"4:6610:4217":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:1639:6276":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:23334:7338":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"14:7:8096":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"0:226:1907":{"crate_id":0,"path":["uuid","timestamp","ClockSequence"],"kind":"trait"},"4:10535:8159":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:21225:26888":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:4523:6432":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:4835:5534":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:2766:5480":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:5392:3754":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:42208:3329":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:5974:6785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"4:533:4194":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:10834:8257":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"4:12048:793":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"4:4129:33381":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:4742:15374":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:4561:3548":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:5082:8170":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:46502:7710":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:14208:4895":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:14413:4932":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:15557:5289":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:7462:5800":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:9891:22031":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:41008:7583":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"0:550:1932":{"crate_id":0,"path":["uuid","Version"],"kind":"enum"},"5:4366:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:2339:5457":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:5051:8170":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:0:3239":{"crate_id":17,"path":["object"],"kind":"module"},"1:30620:7340":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:6114:6861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:33545:3303":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:3163:32322":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:7436:5594":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:15671:5321":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:2284:21095":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:40374:7541":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:15321:5211":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:15192:5174":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:5574:5488":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:15680:5325":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:1556:6021":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:43986:3775":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:4968:6611":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:10803:7943":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:12166:8005":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:6012:6813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:3191:6021":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:6430:8183":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:2472:5468":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:16109:5429":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:40697:7559":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"11:1883:3329":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:12077:7995":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"4:8385:3482":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:39631:216":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:2336:3844":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:6682:6939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:42086:3330":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:2997:3302":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:13395:4727":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:8220:3765":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:23024:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:36313:5764":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:640:8141":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"0:590:1958":{"crate_id":0,"path":["uuid","Variant","NCS"],"kind":"variant"},"4:10757:7242":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:10236:4253":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:15903:5385":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:12255:4589":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:1863:1902":{"crate_id":4,"path":["std","error"],"kind":"module"},"4:8858:8208":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"0:593:1960":{"crate_id":0,"path":["uuid","Variant","RFC4122"],"kind":"variant"},"5:2973:34986":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13676:4799":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:1596:6242":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:9651:22045":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:15267:5197":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:14312:4912":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:6136:6869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:4737:9787":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:12290:4591":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:7604:7087":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:1821:8150":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:6299:7285":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:13273:4704":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:1538:3331":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:8137:4363":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"17:15224:5182":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:12953:4640":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:5111:6687":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:39773:8269":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:32366:3300":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:11088:4494":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:46386:7707":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"4:8991:32428":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:5928:6763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"0:557:1938":{"crate_id":0,"path":["uuid","Version","Dce"],"kind":"variant"},"16:4986:5539":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"11:1603:8118":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:43787:7298":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"4:2600:4197":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"18:481:4323":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:44022:3774":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:7722:5496":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:15842:4663":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:4989:6626":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:6929:5719":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:569:6167":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:4922:6584":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"4:11537:8166":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:15747:5337":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"11:811:3982":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:9884:3537":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:2972:3305":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:10520:35030":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:14170:4891":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:42148:9859":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:10802:136":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:22346:15064":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"4:7754:8190":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:40787:7572":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:2421:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:4777:717":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:13082:211":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:7111:3575":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:1455:3331":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:4473:6412":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"9:426:20977":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:15356:5219":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:588:15254":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:41246:4251":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:6226:8044":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:44713:3949":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"4:3394:4170":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:1897:7277":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:6666:6927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:6913:7047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:10242:4476":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:6711:6951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:6279:5627":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"4:4637:6968":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:6915:5498":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"11:1891:3309":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:2788:5481":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:4461:6403":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:44725:9939":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:44201:3756":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:2778:122":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"5:1115:34987":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"11:837:8102":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:5023:6643":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:12784:4630":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:5891:6749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"4:9034:7231":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:21564:7302":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:7284:3486":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:21840:15320":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:43918:3772":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"17:14346:4925":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:2658:15320":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"4:893:3309":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:4745:6496":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"18:609:7915":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:1785:7276":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:11290:4232":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"5:1151:34988":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:5419:4470":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:6696:5684":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:1969:203":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"4:3278:8161":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:42069:170":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:7855:7144":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"1:40744:7566":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:12850:4578":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:40383:7542":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:2830:3830":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"5:692:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:511:7924":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"4:11340:7261":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:7365:7072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"4:7878:136":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:44890:8283":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"11:102:6011":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:5004:4170":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:11958:4565":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:46776:7719":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:7621:21992":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"11:2383:3329":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:22620:7317":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"4:5415:8174":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:4789:6519":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:4505:4243":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:22317:15063":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"4:2662:8156":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:5963:8022":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:596:6181":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"11:700:3331":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:7090:5743":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:10559:7939":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:13989:4846":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:6189:5625":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:2648:1924":{"crate_id":1,"path":["core","convert"],"kind":"module"},"17:12387:22177":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"4:11619:7269":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:6318:5630":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:2529:208":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12324:4594":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"4:11605:32434":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:10126:3628":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:44172:3765":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:9759:22047":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:2304:5744":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:40546:26577":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:2979:34405":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:13961:4842":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:22271:3843":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:475:2693":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"11:1917:6022":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:2144:4162":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:48136:7759":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:12600:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:580:6172":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:15037:5133":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:1697:6311":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"4:6540:8184":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:40515:7553":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:30636:3543":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"0:436:2851":{"crate_id":0,"path":["uuid","fmt","Braced"],"kind":"struct"},"4:3510:15338":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:8157:7190":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:3130:138":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:12044:798":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"6:6961:7065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"0:595:1962":{"crate_id":0,"path":["uuid","Variant","Microsoft"],"kind":"variant"},"1:12174:7646":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:4639:6970":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:2722:5478":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:43822:8281":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"18:644:4325":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:5009:6637":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:44837:225":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:5500:8176":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:46310:7705":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:21227:26893":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:44855:213":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:21208:26877":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:13107:8265":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:8959:7230":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:21994:14983":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:6159:6875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:6604:3331":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:4159:15382":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"4:1063:8111":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:12999:4644":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:6128:6866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:4092:3330":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:149:4130":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:43800:8280":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11449:4414":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:12057:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:3318:9749":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"4:8011:2596":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:12596:8017":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"9:393:20976":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:12115:8001":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4710:6492":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:7296:3309":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:10207:4475":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:43253:3631":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:11178:7255":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:11001:7950":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:48334:7770":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:21442:14984":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"11:1676:4139":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:46554:7712":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:42147:3489":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:3410:9756":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:42492:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:42168:199":{"crate_id":1,"path":["core","result","Result","Ok"],"kind":"foreign_type"},"6:4440:6393":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11027:4459":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:11617:4524":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"4:11144:7223":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:4381:4172":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7862:5827":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:2440:110":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"6:5044:6655":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:4344:5521":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:11690:7980":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:15733:5334":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:2200:135":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"18:515:4328":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:15493:5271":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:1966:204":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"4:9048:32414":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"11:1142:8114":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"4:8978:113":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:1301:8109":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:11743:7988":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:4740:15372":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:6842:3987":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:15961:4691":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"4:7644:7139":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12418:8008":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:15519:5279":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"11:434:35004":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"4:12056:1246":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"16:2864:5484":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:21436:14981":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:15125:5158":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:4514:3547":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:15868:5355":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"6:6120:6864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"4:11370:8186":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:13254:4703":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:7634:3983":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:11945:7992":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:3818:3982":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:40395:26528":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:5068:6662":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13419:4729":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"18:690:4352":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:5403:4469":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:4957:8252":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:2933:21122":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:7041:5735":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:8251:9840":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:13809:4821":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:12038:1536":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"4:8551:7219":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:40368:3763":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"4:11170:32703":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:12503:9926":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:6569:5495":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:9624:22028":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:3888:5518":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:10521:245":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"11:1087:35012":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:15160:5164":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"0:589:1956":{"crate_id":0,"path":["uuid","Variant"],"kind":"enum"},"1:34264:9742":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:12301:4592":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:3255:217":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:42233:202":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:13491:4756":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:4902:6575":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:44645:7676":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:4914:6579":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"0:554:1936":{"crate_id":0,"path":["uuid","Version","Mac"],"kind":"variant"},"1:9880:2840":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:41749:167":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:11536:4518":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:41256:7590":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:3584:7934":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:1505:8100":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:7768:5494":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:4103:8245":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:43740:7297":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:12614:22053":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:11475:8261":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"4:6466:4216":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:42762:2838":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"4:3280:8162":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:10726:35036":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"0:367:2843":{"crate_id":0,"path":["uuid","fmt","Hyphenated"],"kind":"struct"},"11:328:6015":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:46624:7715":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"9:52:8695":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"18:96:26178":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:32438:251":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:7708:5506":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:10941:7945":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11576:4521":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11256:7960":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:5798:5564":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:11767:7990":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11645:4527":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:21845:14987":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:5992:6797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:2542:6026":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11523:4516":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:46245:7703":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:4557:5526":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:32437:3100":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:15345:5215":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:1131:34925":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:3225:6020":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:4724:6493":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:5807:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:2701:159":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:1501:6187":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12191:4573":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:12345:4598":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:47092:7730":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:4898:419":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"4:3366:7589":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"17:15311:5208":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:5625:226":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:8242:3312":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:2711:263":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:0:533":{"crate_id":1,"path":["core"],"kind":"module"},"1:2492:131":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:42224:3331":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"4:10840:32701":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:2698:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:11369:4513":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:2944:115":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"5:7523:4179":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:32519:3521":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"4:1567:6023":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:9014:8215":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:4449:6398":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:2334:3843":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"4:4635:6966":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:46156:7699":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:44641:7675":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:13202:4692":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"13:226:6010":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:9099:240":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:3251:6023":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:10097:8222":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"6:654:15936":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:7633:7094":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"4:4231:8167":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:15079:5147":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:14359:4926":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"18:531:4330":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"13:110:35013":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"0:0:2260":{"crate_id":0,"path":["uuid"],"kind":"module"},"16:5363:5545":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"4:1534:3329":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:14266:4905":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:43493:7635":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"4:9128:3089":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"5:3343:3982":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:1691:6308":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:32549:3520":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:42650:8255":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"4:11051:4231":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:4020:3309":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:6753:5697":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:634:8122":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:7346:7131":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:41208:7586":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:790:4146":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:40858:7578":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:8308:7197":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:15087:5150":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:3196:34570":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:4603:6473":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4529:6434":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"4:8936:15449":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:6083:21094":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:3012:5758":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:4738:6494":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:1650:6284":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:1514:6193":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:1558:6218":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:44688:128":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:46226:7702":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:43512:7637":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:11345:4511":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:7434:15271":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:435:4422":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:30648:26562":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:11727:7986":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:7467:7132":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"15:0:3237":{"crate_id":15,"path":["addr2line"],"kind":"module"},"11:2151:8111":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:11126:7954":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:11052:7941":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:10067:4471":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:4814:6532":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:16160:5439":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:21239:26890":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:7102:21990":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:12248:3757":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:7367:3331":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"0:578:1952":{"crate_id":0,"path":["uuid","Version","Max"],"kind":"variant"},"6:4783:6516":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"4:5639:7138":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:48311:7769":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:527:6144":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:6484:3309":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:4386:8249":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:22215:26742":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:8072:5865":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:7613:8090":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:13273:148":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:3022:5759":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:621:3827":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:5712:5554":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"4:8453:7630":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"4:1796:8148":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"4:7529:4466":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:43750:8279":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:13765:4813":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:1507:6190":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:11590:4522":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"4:7717:15259":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:11194:22082":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:4506:6426":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:5592:4170":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:4556:6448":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:7865:7145":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:11113:7953":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:43712:7294":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:3184:3329":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:14122:4886":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:918:8101":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:1424:3329":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:13448:4740":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:903:3982":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:21882:26885":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"4:8300:8201":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:4808:6530":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:9559:22030":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:7267:3980":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:10337:4479":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"4:645:15256":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:3500:15318":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:2523:201":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"11:2469:3982":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:23779:242":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"9:0:3232":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:40496:9794":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"4:10430:8206":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:2370:15310":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"17:10950:7946":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:7784:142":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:415:181":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:5088:5542":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:10016:22029":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:5154:4178":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:2975:7118":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:4908:6576":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"14:202:3308":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12052:4571":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:13235:4208":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"2:234:232":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:14896:5107":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:44911:177":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:10319:4197":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:6494:4250":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"18:507:4325":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:30614:3859":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:13684:4801":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:2789:134":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:9968:22052":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:13033:161":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:44226:3763":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:4311:8168":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:15689:5327":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:5004:6635":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:5588:5491":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:21455:7302":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:7450:3935":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:6959:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:5867:6733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:7639:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:14324:4914":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"14:160:8096":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:39615:219":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:3133:139":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:40576:9804":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:9943:22034":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:13097:4663":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:12396:4602":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:7503:4363":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:536:5444":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"4:4180:15384":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:10131:3629":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:14181:4892":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"4:12043:693":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"4:1072:8115":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:4949:5538":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"4:8842:7225":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"6:6047:6834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:2707:264":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:42755:3535":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:23241:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"11:1582:8117":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:6100:6859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:15631:5310":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:16062:5419":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:2305:21121":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"14:165:21059":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:43894:3760":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:12457:3749":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:41919:26544":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:13365:4723":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:482:4193":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"18:0:3240":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:14399:4929":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:1760:8147":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:43278:153":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13383:4724":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:2659:3301":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"4:8920:15447":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:10988:7949":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"4:8326:8205":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:40609:4244":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:4450:4242":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:9026:8217":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:42531:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:8289:29539":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:46356:7706":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:43093:3544":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:41789:7598":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:13695:4804":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:10714:3772":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:11714:7984":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:4774:5532":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:15117:5156":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:32420:3546":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:42136:3487":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:13463:4746":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:5941:6772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:3837:8166":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:40809:7574":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"11:351:35009":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:6499:5507":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"4:8232:8203":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:40529:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:6583:5659":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:15546:5288":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:42157:3833":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"11:1923:6023":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:256:7921":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:33604:3946":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:14786:5066":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:2324:635":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:40646:7298":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:12446:3751":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:3323:15346":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:10716:7941":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:7284:7130":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:4764:6508":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:45911:7689":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:12033:1657":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"17:595:4466":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:11294:7961":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"11:1903:6020":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:8796:8206":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"5:6861:3988":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:4928:7936":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:2504:5469":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:10757:3757":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:7895:125":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"11:2403:3330":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:22628:7318":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:10767:7143":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"0:205:3026":{"crate_id":0,"path":["uuid","timestamp","UUID_TICKS_BETWEEN_EPOCHS"],"kind":"constant"},"17:12410:4605":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"4:7599:4224":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"4:357:8136":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:46001:7693":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:39551:9754":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:13896:4834":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:1541:3309":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:22164:15069":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:13145:4678":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:8476:7211":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:14087:4875":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:6079:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:9030:3318":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:14485:4596":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:15108:5155":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:43016:26559":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:1521:6195":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:266:4143":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:7879:3337":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:4776:6515":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:4625:15361":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:7422:3321":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:4050:15366":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"4:11516:8165":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:7316:34576":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:7497:7135":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:46578:7713":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"0:108:717":{"crate_id":0,"path":["uuid","fmt"],"kind":"module"},"9:177:8706":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:3936:15356":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:32436:243":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:44414:7661":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:15659:5319":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:6811:15450":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:12445:8011":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:13218:4696":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:6071:6846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:41215:7587":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:4496:6420":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"4:8330:6955":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:1570:6226":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:5673:5492":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:10510:7938":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:7651:8091":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:16170:4708":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:6513:5647":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:22188:15320":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:3339:9750":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"18:599:35038":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:44526:3777":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"4:6596:15444":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:4309:3545":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:5015:6638":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:7534:5502":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:14373:4927":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"0:597:146":{"crate_id":0,"path":["uuid","Variant","Future"],"kind":"variant"},"16:2832:5483":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"0:566:1944":{"crate_id":0,"path":["uuid","Version","Sha1"],"kind":"variant"},"5:1516:8101":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:4534:3523":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:1495:8116":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:9109:158":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"0:563:1942":{"crate_id":0,"path":["uuid","Version","Random"],"kind":"variant"},"4:880:6019":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:12031:1033":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"17:12127:8002":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:11957:9889":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:2548:5471":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"0:549:2260":{"crate_id":0,"path":["uuid","uuid"],"kind":"macro"},"4:1819:8149":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"5:1286:8111":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:489:6119":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:12797:4632":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:48285:7767":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:13083:4662":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"4:9104:241":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"10:44:6034":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"18:755:4367":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:1632:6272":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:5571:15429":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:1973:185":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"11:1896:3982":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:6927:7056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:123:15578":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:10976:8259":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:7343:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:43661:8277":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:8154:8092":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}